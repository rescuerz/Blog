{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Rescuerz's Blog","text":"<p>\u8fd9\u91cc\u662frescuerz\u7684\u4e2a\u4eba\u535a\u5ba2 \ud83d\udc4b</p> <p>\u6b22\u8fce\u5b66\u4e60\u4ea4\u6d41 \ud83d\udca1</p>"},{"location":"#about","title":"About","text":"<p> My GitHub</p> <p> My ZJU Email</p>"},{"location":"course/","title":"\u8bfe\u7a0b\u7b14\u8bb0","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u90e8\u5206\u8bfe\u7a0b\u7684\u8bfe\u5802\u7b14\u8bb0, \u5927\u591a\u590d\u5236PPT\u4e14\u4e0d\u5168, \u5c3d\u8bf7\u53c2\u8003\u5176\u4ed6\u540c\u5b66\u7684\u4f18\u79c0\u7b14\u8bb0</p> <p>\u8bfe\u7a0b\u603b\u89c8: </p> <ul> <li>\u6570\u5b66\u5206\u6790 \u7532 (H) @\u9648\u9526\u8f89</li> <li>\u4eba\u5de5\u667a\u80fd\u5f15\u8bba @\u5434\u98de</li> <li>\u56fe\u50cf\u4fe1\u606f\u5904\u7406 @\u5b8b\u660e\u9ece</li> <li>\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 @\u8463\u4e9a\u6ce2</li> <li>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u57fa\u7840 @\u4f55\u94a6\u94ed</li> </ul>"},{"location":"course/ICS/Assembly%20Language/","title":"Chapter 7 | Assembly Language","text":"<ul> <li> <p>Assembly language is a low-lever language\u6c47\u7f16\u8bed\u8a00\u662f\u4f4e\u7ea7\u8bed\u8a00</p> </li> <li> <p>Each assembly language instruction usually specifies a single instruction in the ISA. \u6bcf\u4e00\u79cd\u6c47\u7f16\u8bed\u8a00\u6307\u4ee4\uff0c\u901a\u5e38\u6307\u5b9aISA\u7684\u4e00\u6761\u6307\u4ee4</p> </li> <li> <p>Unlike high-level languages, which are usually ISA independent, low-level languages are very much ISA dependent. In fact, it is usually the case that each ISA has only one assembly language.</p> </li> </ul> <p>\u9ad8\u7ea7\u8bed\u8a00\u4e0d\u4f9d\u8d56\u4e8eISA\uff0c\u4f4e\u7ea7\u8bed\u8a00\u975e\u5e38\u4f9d\u8d56\u4e8eISA\uff0c\u901a\u5e38\u6bcf\u4e00\u4e2aISA\u53ea\u6709\u4e00\u79cd\u6c47\u7f16\u8bed\u8a00</p>"},{"location":"course/ICS/Assembly%20Language/#72-instructions","title":"7.2 Instructions","text":"<p>Instead of an instruction being 16 0s and 1s, as is the case in the LC-3 ISA, <code>an instruction in assembly language consists of four parts, as follows:</code> Two of the parts (Label and Comment) are optional. </p>"},{"location":"course/ICS/Assembly%20Language/#721-opcodes-and-operands","title":"7.2.1 Opcodes and Operands","text":"<ul> <li>Opcode(the thing the instruction is to do) and Operands\uff08the thing it is supposed to do\uff09 are mandatory.</li> </ul> <p>\u64cd\u4f5c\u7801\uff08\u6307\u4ee4\u8981\u505a\u7684\u4e8b\u60c5\uff09\u548c\u64cd\u4f5c\u6570\uff08\u5b83\u5e94\u8be5\u505a\u7684\u4e8b\u60c5\uff09\u662f\u5f3a\u5236\u6027\u8981\u6c42\u5177\u5907\u7684</p> <ol> <li> <p>\u5bf9\u4e8eADD\uff0crequire three operands\uff08Two sources to obtain the number to be added\uff0cand one destination to designate where the result is to be stored\uff09    $$    ADD     DR,SR1,SR2    $$</p> </li> <li> <p>\u5bf9\u4e8eLD\uff0crequire two operands\uff08the memory location from which the value is to be read and the destination register that is to contain the value after the instruction finishes execution\u8981\u4ece\u4e2d\u8bfb\u53d6\u503c\u7684\u5185\u5b58\u4f4d\u7f6e\u4ee5\u53ca\u6307\u4ee4\u5b8c\u6210\u6267\u884c\u540e\u8981\u5305\u542b\u8be5\u503c\u7684\u76ee\u6807\u5bc4\u5b58\u5668)</p> </li> </ol> <p>\u5728LC-3\u7684\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u7528Label \u4ee3\u66ff\u5185\u5b58\u4f4d\u7f6e\uff0c\u65e0\u9700\u8bb0\u4f4f16\u4f4d\u5730\u5740    $$    LD     DR ,Label    $$</p> <ol> <li>\u5bf9\u4e8eAND\uff0c\u5982\u679cAND\u4e00\u4e2aimmediate\u7acb\u5373\u6570    $$    AND     DR,SR,\u4e95\u53f7  number\\    AND     R3,R3,\u4e95\u53f7  0 ;clear R3.    $$</li> </ol> <p>We use # for decimal, x for hexadecimal, and b for binary</p>"},{"location":"course/ICS/Assembly%20Language/#722-labels","title":"7.2.2 Labels","text":"<p>Labels are symbolic names that are used to identify memory locations that are referred to explicitly in the program</p> <p>\u6807\u7b7e\u662f\u7b26\u53f7\u540d\u79f0\uff0c\u7528\u4e8e\u6807\u8bc6\u7a0b\u5e8f\u4e2d\u663e\u5f0f\u5f15\u7528\u7684\u5185\u5b58\u4f4d\u7f6e</p> <p>There are two reasons for explicitly referring to a memory location.\u663e\u5f0f\u5f15\u7528\u5185\u5b58\u4f4d\u7f6e\u6709\u4e24\u4e2a\u539f\u56e0</p> <ol> <li>The location is the target of a branch instruction (e.g., AGAIN in line 0C). That is, the label AGAIN identifies the location of the instruction that will be executed next if the branch is taken.</li> </ol> <p>\u8be5\u4f4d\u7f6e\u662f\u5206\u652f\u6307\u4ee4\u7684\u76ee\u6807\uff08\u4f8b\u5982\uff0c0C \u884c\u4e2d\u7684 AGAIN\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6807\u7b7e AGAIN \u6807\u8bc6\u4e86\u5982\u679c\u53d1\u751f\u5206\u652f\u5219\u63a5\u4e0b\u6765\u5c06\u6267\u884c\u7684\u6307\u4ee4\u7684\u4f4d\u7f6e\u3002</p> <ol> <li>The location contains a value that is loaded or stored (e.g., NUMBER in line 12, and SIX in line 13).</li> </ol> <p>\u8be5\u4f4d\u7f6e\u5305\u542b\u5df2\u52a0\u8f7d\u6216\u5b58\u50a8\u7684\u503c</p> <p>Label \u6807\u7b7e\u662f\u7528\u6765\u6807\u8bc6\u5185\u5b58\u5730\u5740\u7684\uff0c\u76f8\u5f53\u4e8e\u5730\u5740\u7684\u4e00\u4e2a\u522b\u540d</p>"},{"location":"course/ICS/Assembly%20Language/#723-comments","title":"7.2.3 Comments","text":"<p><code>;</code>\u5206\u53f7\u8868\u793a\u8be5\u884c\u7684\u5176\u4f59\u90e8\u5206\u662f\u6ce8\u91ca\uff0c\u5c06\u88ab\u6c47\u7f16\u5668\u5ffd\u7565\u3002</p>"},{"location":"course/ICS/Assembly%20Language/#73-pseudo-opsassembler-directives","title":"7.3 Pseudo-Ops(Assembler Directives)\u4f2a\u64cd\u4f5c\uff08\u6c47\u7f16\u6307\u4ee4\uff09","text":"<p>The LC-3 assembly language contains five pseudo-ops that we will find useful in our assembly language programming: .ORIG, .FILL, .BLKW, .STRINGZ, and .END. All are easily recognizable by the dot as their first character.</p> <p>LC-3 \u6c47\u7f16\u8bed\u8a00\u5305\u542b\u4e94\u4e2a\u4f2a\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u4eec\u5728\u6c47\u7f16\u8bed\u8a00\u7f16\u7a0b\u4e2d\u975e\u5e38\u6709\u7528\uff1a.ORIG\u3001.FILL\u3001.BLKW\u3001.STRINGZ \u548c .END\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u901a\u8fc7\u70b9\u4f5c\u4e3a\u5176\u7b2c\u4e00\u4e2a\u5b57\u7b26\u8f7b\u677e\u8bc6\u522b\u3002</p> <ol> <li>.ORIG</li> </ol> <p><code>.ORIG tells the assembler where in memory to place the LC-3 program.</code></p> <p>.ORIG \u544a\u8bc9\u6c47\u7f16\u5668\u5728\u5185\u5b58\u4e2d\u653e\u7f6e LC-3 \u7a0b\u5e8f\u7684\u4f4d\u7f6e\u3002</p> <ol> <li>,FILL</li> </ol> <p><code>.FILL tells the assembler to set aside **the next location** in the program and **initialize it with the value of the operand**.</code>The value can be either a number or a label.</p> <p>.FILL \u544a\u8bc9\u6c47\u7f16\u5668\u9884\u7559\u7a0b\u5e8f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u5e76\u4f7f\u7528\u64cd\u4f5c\u6570\u7684\u503c\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u6570\u5b57\u6216\u6807\u7b7e\u3002</p> <p>.FILL \u4f1a\u628a operand \u7684\u503c\u586b\u5145\u5230\u5f53\u524d\u5730\u5740\uff08.FILL \u7684\u5730\u5740\uff09</p> <ol> <li>,BLKW</li> </ol> <p><code>.BLKW tells the assembler to set aside some number of sequential memory locations (i.e., a BLocK of Words) in the program.</code></p> <p>.BLKW \u544a\u8bc9\u6c47\u7f16\u5668\u5728\u7a0b\u5e8f\u4e2d\u9884\u7559\u4e00\u5b9a\u6570\u91cf\u7684\u8fde\u7eed\u5185\u5b58\u4f4d\u7f6e\uff08\u5373\u5b57\u5757\uff09\u3002</p> <p>\u5047\u8bbe\u5f53\u524d\u5730\u5740\u4e3a x3000 \u90a3\u4e48 .BLKW 10 \u5c31\u4f1a\u5c06\u4ece x3000 \u5f00\u59cb\u7684\u662f\u4e2a\u5730\u5740\u5168\u90e8\u7559\u51fa\u6765\uff08\u4ece x3000\u5230 x3009\uff09\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u4e3a x300A\u3002</p> <ol> <li>STRINGZ</li> </ol> <p><code>.STRINGZ tells the assembler to initialize a sequence of n +1 memory locations.</code>The argument is a sequence of n characters inside double quotation marks. The first n words of memory are initialized with the zero-extended ASCII codes of the corresponding characters in the string. The final word of memory is initialized to \\0. The last word, containing x0000, provides a convenient sentinel for processing the string of ASCII codes.</p> <p>.STRINGZ \u544a\u8bc9\u6c47\u7f16\u5668\u521d\u59cb\u5316 n+1 \u4e2a\u5185\u5b58\u4f4d\u7f6e\u7684\u5e8f\u5217\u3002\u53c2\u6570\u662f\u53cc\u5f15\u53f7\u5185\u7684 n \u4e2a\u5b57\u7b26\u7684\u5e8f\u5217\u3002\u5185\u5b58\u7684\u524d n \u4e2a\u5b57\u7528\u5b57\u7b26\u4e32\u4e2d\u76f8\u5e94\u5b57\u7b26\u7684\u96f6\u6269\u5c55 ASCII \u4ee3\u7801\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5b58\u50a8\u5668\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u88ab\u521d\u59cb\u5316\u4e3a0\u3002\u6700\u540e\u4e00\u4e2a\u5b57\u5305\u542bx0000\uff0c\u4e3a\u5904\u7406ASCII \u4ee3\u7801\u4e32\u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u6807\u8bb0\u3002</p> <p></p> <p>n\u4e2a\u5b57\u7b26zero-extending ASCII\uff0c\u6700\u540e\u5b57\u7b26\u75280\u7ed3\u5c3ex0000</p> <ol> <li>.END</li> </ol> <p><code>.END tells the assembler it has reached the end of the program</code>and need not even look at anything after it.. That is, any characters that come after .END will not be processed by the assembler.</p> <p>.END \u544a\u8bc9\u6c47\u7f16\u5668\u5b83\u5df2\u7ecf\u5230\u8fbe\u7a0b\u5e8f\u7684\u672b\u5c3e\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u67e5\u770b\u540e\u9762\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c.END \u4e4b\u540e\u7684\u4efb\u4f55\u5b57\u7b26\u90fd\u4e0d\u4f1a\u88ab\u6c47\u7f16\u5668\u5904\u7406\u3002</p> <ol> <li>.END\u5e76\u4e0d\u4f1a\u7ed3\u675f\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u53ea\u662f\u4e00\u4e2a\u5206\u9694\u7b26</li> <li>\u5b9e\u9645\u4e0a\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u6709\u591a\u4e2a.END\u3002\u6bcf\u4e00\u7ec4.ORIG\u548c.END\u8868\u793a\u7a0b\u5e8f\u7684\u67d0\u4e00\u6bb5</li> </ol> <p>example: Count Character</p> <p></p> <p>The ASCII codes for the decimal digits 0 to 9 (0000 to 1001) are x30 to x39. The conversion from binary to ASCII is done simply by adding x30 to the binary value of the decimal digit</p> <p>\u5341\u8fdb\u5236\u6570\u5b57 0 \u5230 9\uff080000 \u5230 1001\uff09\u7684 ASCII \u4ee3\u7801\u4e3a x30 \u5230 x39\u3002\u4ece\u4e8c\u8fdb\u5236\u5230 ASCII \u7684\u8f6c\u6362\u53ea\u9700\u5c06\u5341\u8fdb\u5236\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u503c\u52a0\u4e0a x30 \u5373\u53ef\u5b8c\u6210</p> <p>Line 2D shows the label ASCII used to identify the memory location containing x0030. </p>"},{"location":"course/ICS/Assembly%20Language/#74-the-assembly-process","title":"7.4 The Assembly Process","text":"<p>\u5728\u6267\u884c LC-3 \u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u9996\u5148\u5c06\u5176\u7ffb\u8bd1\u4e3a\u673a\u5668\u8bed\u8a00\u7a0b\u5e8f\uff0c\u5373\u5176\u4e2d\u6bcf\u6761\u6307\u4ee4\u90fd\u4f4d\u4e8e LC-3 ISA \u4e2d\u7684\u7a0b\u5e8f\u3002 LC-3 \u6c47\u7f16\u5668\u7684\u5de5\u4f5c\u5c31\u662f\u6267\u884c\u8be5\u8f6c\u6362\u3002</p> <p>\u547d\u4ee4\u662f assemble\uff0c\u5e76\u4e14\u5b83\u9700\u8981\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>assemble solution1.asm outfile produce the file outfile</p> <p>There is in general a <code>one-to-one correspondence between instructions in an assembly language program and instructions in the final machine language program</code>. </p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u7684\u6307\u4ee4\u4e0e\u6700\u7ec8\u673a\u5668\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u7684\u6307\u4ee4\u4e4b\u95f4\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002</p> <p>The assembly process is done in two complete passes,\u6574\u4e2a\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684\u6c47\u7f16\u8fc7\u7a0b\u5206\u4e24\u904d\u5b8c\u6210</p> <p>The objective of the first pass is to <code>identify the actual binary addresses corresponding to the symbolic names (or labels).</code> This set of correspondences is known as the symbol table. </p> <p>\u7b2c\u4e00\u904d\u7684\u76ee\u6807\u662f\u8bc6\u522b\u4e0e\u7b26\u53f7\u540d\u79f0\uff08\u6216\u6807\u7b7e\uff09\u76f8\u5bf9\u5e94\u7684\u5b9e\u9645\u4e8c\u8fdb\u5236\u5730\u5740\u3002\u8fd9\u7ec4\u5bf9\u5e94\u5173\u7cfb\u79f0\u4e3a\u7b26\u53f7\u8868\u3002</p> <p>In pass 1, we construct the symbol table. </p> <p>\u5728\u7b2c 1 \u904d\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u7b26\u53f7\u8868\u3002</p> <p>In pass 2, we <code>translate the individual assembly language instructions into their corresponding machine language instructions</code>.</p> <p>\u5728\u7b2c 2 \u904d\u4e2d\uff0c\u6211\u4eec\u5c06\u5404\u4e2a\u6c47\u7f16\u8bed\u8a00\u6307\u4ee4\u7ffb\u8bd1\u4e3a\u5176\u76f8\u5e94\u7684\u673a\u5668\u8bed\u8a00\u6307\u4ee4\u3002</p>"},{"location":"course/ICS/Assembly%20Language/#741-the-first-passcreating-the-symbol-table","title":"7.4.1 The First Pass:Creating the Symbol Table","text":"<p>the symbol table is simply a correspondence of <code>symbolic names with their 16-bit memory addresses</code></p> <p>\u7b26\u53f7\u8868\u53ea\u662f\u7b26\u53f7\u540d\u79f0\u4e0e\u5176 16 \u4f4d\u5185\u5b58\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb</p> <p>The assembler examines each instruction in sequence and increments the LC once for each assembly language instruction. If the instruction examined contains a label, a symbol table entry is made for that label, specifying the current contents of LC as its address. The first pass terminates when the .END pseudo-op is reached.</p> <p>\u6c47\u7f16\u5668\u6309\u987a\u5e8f\u68c0\u67e5\u6bcf\u6761\u6307\u4ee4\uff0c\u5e76\u5bf9\u6bcf\u6761\u6c47\u7f16\u8bed\u8a00\u6307\u4ee4\u5c06 LC \u9012\u589e\u4e00\u6b21\u3002\u5982\u679c\u68c0\u67e5\u7684\u6307\u4ee4\u5305\u542b\u6807\u7b7e\uff0c\u5219\u4f1a\u4e3a\u8be5\u6807\u7b7e\u521b\u5efa\u4e00\u4e2a\u7b26\u53f7\u8868\u6761\u76ee\uff0c\u5e76\u5c06 LC \u7684\u5f53\u524d\u5185\u5bb9\u6307\u5b9a\u4e3a\u5176\u5730\u5740\u3002\u5f53\u5230\u8fbe .END \u4f2a\u64cd\u4f5c\u65f6\uff0c\u7b2c\u4e00\u904d\u7ec8\u6b62\u3002</p> <p></p> <p>\u5730\u5740\u8868\u793a Label \u6240\u5728PC\u7684\u5730\u5740</p>"},{"location":"course/ICS/Assembly%20Language/#734-the-second-passgenerating-the-machine-language-program","title":"7.3.4 The Second Pass:Generating the Machine Language Program","text":"<p>\u5728\u6bcf\u4e00\u884c\uff0c\u6c47\u7f16\u8bed\u8a00\u6307\u4ee4\u90fd\u88ab\u7ffb\u8bd1\u6210 LC-3 \u673a\u5668\u8bed\u8a00\u6307\u4ee4\uff0801\u4ee3\u7801\uff09</p> <p>\u5f53\u6c47\u7f16\u5668\u5230\u8fbe\u7b2c 0C \u884c\u65f6\uff0c\u5b83\u53ef\u4ee5\u5b8c\u6574\u5730\u6c47\u7f16\u8be5\u6307\u4ee4\uff0c\u56e0\u4e3a\u5b83\u77e5\u9053 PTR \u5bf9\u5e94\u4e8e x3013\u3002\u8be5\u6307\u4ee4\u4e3aLD\uff0c\u64cd\u4f5c\u7801\u7f16\u7801\u4e3a0010\u3002\u76ee\u7684\u5bc4\u5b58\u5668\uff08DR\uff09\u4e3aR3\uff0c\u5373011\u3002LD \u6307\u4ee4\u4e2d\u552f\u4e00\u5269\u4e0b\u8981\u505a\u7684\u90e8\u5206\u662f PCoffset\u3002</p> <p>\u4e3a\u4e86\u4f7f\u7528 LD \u6307\u4ee4\uff0c\u52a0\u8f7d\u6e90\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u6807\u7b7e\u4e3a PTR \u7684\u5730\u5740\uff09\u5fc5\u987b\u8ddd LD \u6307\u4ee4\u672c\u8eab\u4e0d\u8d85\u8fc7 +256 \u6216 \u2212255 \u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002\u5982\u679c PTR \u7684\u5730\u5740\u5927\u4e8e LC+1+255 \u6216\u5c0f\u4e8e LC+1\u2212256\uff0c\u5219\u504f\u79fb\u91cf\u5c06\u65e0\u6cd5\u5bb9\u7eb3\u5728\u6307\u4ee4\u7684\u4f4d [8:0] \u4e2d\u3002</p> <p>\u5982\u679c\u8d85\u51fa\u4e86\u8303\u56f4\u5e94\u8be5\u600e\u4e48\u529e\uff0c\u4f7f\u7528Label\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5730\u5740</p>"},{"location":"course/ICS/Assembly%20Language/#75-beyond-the-assembly-of-a-single-assembly-language-program","title":"7.5 Beyond the Assembly of a Single Assembly Language Program\u8d85\u8d8a\u5355\u4e00\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684\u6c47\u7f16","text":"<ol> <li><code>The Executable Image\u53ef\u6267\u884c\u6620\u50cf</code></li> <li><code>More than one Object File\u591a\u4e2a\u76ee\u6807\u6587\u4ef6</code></li> </ol> <p>\u4e00\u4e2a\u6070\u5f53\u7684\u4f8b\u5b50\u662f\u6211\u4eec\u7684\u793a\u4f8b\u5b57\u7b26\u8ba1\u6570\u7a0b\u5e8f\u3002\u8be5\u7a0b\u5e8f\u8ba1\u7b97\u6587\u4ef6\u4e2d\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5178\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u7a0b\u5e8f\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u5757\uff0c\u5c06\u8f93\u5165\u6570\u636e\u6587\u4ef6\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u6a21\u5757\u3002</p>"},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/","title":"Chapter2 | Bits and Data Types and Operations","text":""},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#21-bits-and-data-types","title":"2.1 Bits and Data Types","text":"<p><code>The bit as the unit of information</code></p> <ul> <li>0 \u6216 1</li> <li>The bit is the unit of information. With one wire, one can differentiate only two things.</li> </ul> <p><code>Data Type</code></p> <ul> <li>unsigned integer</li> <li>signed integer</li> <li>logical variable</li> <li>float</li> <li>ASCII</li> </ul>"},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#211-unsigned-integer-and-signed-integer","title":"2.1.1 unsigned integer and signed integer\uff08\u539f\u7801\uff09","text":"<p>\u5bf9\u4e8eunsigned integer</p> <ul> <li>k bits,\u53d6\u503c\u8303\u56f4\\([0,2^{k}-1]\\)</li> </ul> <p>\u5bf9\u4e8esigned integer</p> <ul> <li>\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d\uff0c1  \u8868\u793a \u8d1f\u6570\uff0c0 \u8868\u793a \u6b63\u6570</li> <li>k bits \uff0c</li> <li>\u6700\u5927\u6570\\(01111\\cdots1 = 2^{k-1}-1\\)</li> <li>\u6700\u5c0f\u6570\\(1111\\cdots1=-2^{k-1}+1\\)</li> <li>\u6240\u4ee5\u53d6\u503c\u8303\u56f4\\([-2^{k-1}+1,2^{k-1}-1]\\),\u5b58\u5728\u76f8\u540c\u7684\u6570\\(100\\cdots0,000\\cdots0\\)</li> </ul> <p></p>"},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#212-1s-complement","title":"2.1.2 \u4e00\u7684\u8865\u78011\u2019s Complement\uff08\u53cd\u7801\uff09","text":"<ul> <li> <p>\u5bf9\u4e8e\u4e00\u4e2a\u975e\u8d1f\u6570\uff0c\u5b83\u7684\u53cd\u7801\u662f\u672c\u8eab</p> </li> <li> <p>\u5bf9\u4e8e\u4e00\u4e2a\u8d1f\u6570\uff0c\u5b83\u7684\u53cd\u7801\u662f\uff0c\u5b83\u7684\u76f8\u53cd\u6570\u7684\u4e8c\u8fdb\u5236\u4e32\u6309\u4f4d\u53d6\u53cd\uff0c\u6216\u8005signed\u4f4d\u4e0d\u52a8\uff0c\u5176\u4ed6\u4f4d\u6309\u4f4d\u53d6\u53cd   $$   eg:\\   5 = 0101,5\u7684\u8865\u7801\\   -5 = 1010,-5\u7684\u8865\u7801   $$</p> </li> </ul>"},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#213-2s-complement","title":"2.1.3 \u4e8c\u7684\u8865\u7801 2\u2018s Complement","text":"\\[ n\u4f4d\uff0ca_{n-1}\u5bf9\u5e94\u7684\u7684\u6743\u91cd\u662f-2^{n-1},\u5176\u4f59a_{n-2},a_{n-3},\\cdots,a_0,\u5bf9\u5e94\u7684\u6743\u91cd\u5206\u522b\u4e3a\u6b63\u6570\\\\ \\] <ul> <li>\u56e0\u6b64\uff0cn\u4f4d\u8865\u7801\u8868\u793a\u7684\u8303\u56f4\u662f\\([-2^{n-1},2^{n-1}-1]\\)</li> </ul> \\[ 5 = 0101 \\\\ -5 = 1011 \\] <ul> <li>\u4e00\u4e2a\u6570\u76f8\u53cd\u6570\u7684\u8865\u7801\u662f\u6309\u4f4d\u53d6\u53cd\u518d\u52a01</li> <li>\u4f1a\u53d1\u73b0\u4e24\u4e2a\u76f8\u53cd\u6570\u76f8\u52a0\u4f1a\u5f97\u523010000\uff0c\u5373\u4f1a\u591a\u4e00\u4f4d\uff0c\u5176\u4f59\u5168\u662f0\uff0c\u5f97\u5230\u7684\u8fdb\u4f4d\u53ef\u4ee5\u5ffd\u7565</li> </ul> \\[ 0 = 00000\\\\ 1 = 00001\\\\ -1 = (11110)_2+1 = 11111\\\\ -1 + 1 = 11111 + 00001 = 100000 \\] <p>\u5047\u8bben = 4,-8\u7684\u8865\u7801\u662f1000\uff0c8\u7684\u8865\u7801\u4e0d\u5b58\u5728</p>"},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#214-floating-point-numbers","title":"2.1.4 FLoating Point Numbers","text":"<p>\u6d6e\u70b9\u6570\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210</p> sign exponent fraction float 1 8 23 double 1 13 52 <p>\u8fd9\u6837\u7684\u4f4d\u7801\u5f97\u5230\u7684\u6570\u662f\\(N = (-1)^S \\times M \\times 2^E\\)</p> <p>\\(N = (\u22121)^S \u00d7 1.fraction \u00d7 2^{exponent\u2212127}, 1 \u2264exponent \u2264254\\)</p> <p>\u53d6\u503c\u8303\u56f4\u662f\\([-32768=-2^{15},32767 = 2^{15}-1]\\)</p> <ul> <li>S : sign bit.0 \u8868\u793a\u6b63\u6570\uff0c1\u8868\u793a\u8d1f\u6570</li> <li>E \uff1a\u9636\u7801\u3002\\(E = exp - Bias\\) , exp \u5c31\u662fexponent\u90e8\u5206\u8868\u793a\u7684\u65e0\u7b26\u53f7\u6570\uff0cBias \u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\uff0c\u5bf9\u4e8efloat\u800c\u8a00\u662f127\uff0c\u5bf9\u4e8edouble\u800c\u8a00\u662f1023</li> <li>M\uff1a\u5c3e\u6570\u3002M = 1.frac\uff0cfrac\u5c31\u662ffraction\u90e8\u5206\u7684\u4e8c\u8fdb\u5236\u4e32</li> </ul> \\[ eg:\u5982\u679c\u8868\u793a\u7528\u6d6e\u70b9\u6570\u8868\u793a0.625\\\\ a. \\ 0.625\u7528\u4e8c\u8fdb\u5236\u53ef\u4ee5\u8868\u793a\u4e3a(0.101)_2\\\\ b. \\ \u786e\u5b9a\u7b26\u53f7\u4f4dsign = 0\uff0c\u4e3a\u6b63\u6570 \\\\ c. \\ \u7531\u4e8e\u5c3e\u6570\u7684\u5f62\u5f0fM=1.frac\uff0c\u6240\u4ee5\u8868\u793a\u6210\u76f8\u4f3c\u5f62\u5f0f(1.01)\\times2_{-1}\\\\ d. \\ \u7531\u6b64\u53ef\u77e5M = 1.01\uff0cE=-1\uff0c\u6240\u4ee5exp = 126,\\\\ e. \\ exp \u5bf9\u5e94\u7684\u65e0\u7b26\u53f7\u6570\u4e3a01111110\uff0c\\\\ f. \\ fraction\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4e32\u4e3a01000\\cdots00,\u5408\u8ba123\u4f4d\\\\ \u6700\u7ec8\u7ed3\u679c\u4e3a0 \\ 01111110 \\ 01000\\cdots0 \\] <pre><code> What does the floating point data type 00111101100000000000000000000000 represent?\n\n1. The leading bit is a 0. This signifies a positive number. \n2. The next eight bits(01111011) represent the unsigned number 123. If we subtract 127, we get the actual exponent \u22124. \n3. The last 23 bits are all 0. Therefore, the number being represented is+1.000000000000000000000000 \u22c52^(\u22124), which is  1/16\n</code></pre> <p></p> <p>\u7279\u6b8a\u60c5\u51b5\uff1a</p> <ol> <li>exp = 0\u65f6\uff0c\u89c4\u5b9aM = 0.frac\uff0cE = 1-bias = -126\uff0c\u5176\u4e2dfrac = 0\u65f6\uff0c\u8868\u793a\u7684\u6570\u5b57\u662f0.0</li> </ol> <p>N = \uff08-1\uff09^S * 0.frac * 2^(-126)</p> <ol> <li>exp = 11111111\u65f6\uff0c</li> </ol> <p>\u82e5frac = 0\uff0c\u5219\u8fd9\u4e2a\u6570\u8868\u793a \u6b63\u65e0\u7a77 +inf\u6216\u8005\u8d1f\u65e0\u7a77 -inf</p> <p>\u82e5frac \u4e0d\u7b49\u4e8e0\uff0c\u5219\u8fd9\u4e2a\u6570\u8868\u793aNaN\uff08Not a Number\uff09</p> <p>e.g. 1 11111111 0000000000000000001</p> <p>\u200b       0 00000000 1100000000000000000</p> <p>\u7b2c\u4e00\u4e2a\u6570\u9636\u7801exp\u5168\u4e3a1\uff0c\u5c3e\u6570frac\u4e0d\u4e3a0\uff0c\u56e0\u6b64\u4e3aNaN\uff0cnot a number</p> <p>\u7b2c\u4e8c\u4e2a\u6570\u9636\u7801exp\u5168\u4e3a0\uff0cM=0.frac =\uff080.11\uff09_2\uff0c\u7b54\u6848\u4e3a0.75*2^(-126)</p>"},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#215-ascii","title":"2.1.5 ASCII\u7801","text":""},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#22-arithmetic","title":"2.2 Arithmetic","text":"<ul> <li> <p>\u5bf9\u4e8e\u52a0\u51cf\u6cd5</p> </li> <li> <p>\u9022\u4e8c\u8fdb\u4e00</p> </li> <li> <p>\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u4f4d\u6570\u4e0d\u540c\u7684\u65f6\u5019\u9700\u8981\u5148\u5c06\u4f4d\u6570\u5c11\u7684\u90a3\u4e2a\u6570\u7b26\u53f7\u4f4d\u8fdb\u884c\u6269\u5c55\u6210\u76f8\u540c\u7684\u4f4d\u6570</p> </li> <li> <p>signed-extending\u7b26\u53f7\u6269\u5c55\uff0c\u5bf9\u4e8e\u6b63\u6570\u800c\u8a00\uff0c\u5728\u9ad8\u4f4d\u4e0d\u65ad\u586b\u51450\u76f4\u81f3\u4f4d\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e\u8d1f\u6570\u800c\u8a00\uff0c\u5728\u9ad8\u4f4d\u4e0d\u65ad\u586b\u51451</p> <ul> <li> <p>\u5bf9\u4e8e\u6b63\u6570\u800c\u8a00\uff0c\u524d\u9762\u6dfb\u52a0\u65e0\u7a77\u591a\u4e2a0\uff0c\u90fd\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u8865\u7801\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u6570\u7684\u76f8\u53cd\u6570\u8868\u793a\u65b9\u6cd5\u4e3a\u6309\u4f4d\u53d6\u53cd\u518d\u52a01.\u6240\u4ee5\u524d\u9762\u6dfb\u52a0\u76840\u5168\u90e8\u8f6c\u5316\u4e3a1</p> </li> <li> <p>\u518d\u6765\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8d1f\u6570\u524d\u9762\u6dfb\u52a01\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u3002eg\uff1a-5 = 1111011\u6216\u80051011\uff08-8+2+1\uff09\uff0c\u5728\u524d\u9762\u6dfb\u52a01\u4e4b\u540e\uff0c\u7b2c\u4e00\u4f4d\u4e3a\u8d1f\u6570\uff0c\u6b64\u5904\u4e3a-64\uff0c\u7b2c\u4e8c\u4f4d\u4e3a32\uff0c\u4e24\u8005\u76f8\u52a0\u5f97\u5230-32\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u7b2c\u4e00\u4f4d\u76841\u4e0d\u5b58\u5728\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u52301\u4e4b\u540e\u51fa\u73b00\uff0c\u4fbf\u53ef\u5f97\u5230\u76f8\u53cd\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a</p> </li> <li> <p></p> </li> </ul> </li> <li> <p>\u8ba1\u7b97\\(A-B\\)\uff0c\u76f8\u5f53\u4e8e\u8ba1\u7b97\\(A+(-B)\\),\u5373\u5148\u8ba1\u7b97B\u7684\u76f8\u53cd\u6570\uff0c\uff08\u5728\u8865\u7801\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u6309\u4f4d\u53d6\u53cd\u518d\u52a01\uff09\uff0c\u518d\u5c06B\u7684\u76f8\u53cd\u6570\u548cA\u76f8\u52a0</p> </li> </ul> <p>$$   \\begin{aligned}   &amp; 11\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a01011\\   &amp; 3 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a00011\\   &amp; 11+3=14\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a01110\\   &amp;\u5bf9\u4e8e\u51cf\u6cd5\\   &amp; 11-3 = 11+(-3)\\   &amp; -3\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\u6309\u4f4d\u53d6\u53cd\u52a0\u4e00\uff0c\u537311101\\   &amp; 11-3 = 8\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a\\   &amp;   01011\\   &amp;   11101\\   &amp;101000\\    &amp;\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5373\u53ef\u5f97\u5230\u6700\u7ec8\u7ed3\u679c\u4e3a01000   \\end{aligned}   $$</p> <p></p> <ul> <li> <p><code>overflow</code>\u6ea2\u51fa\uff1a\u5f53\u4e24\u4e2a\u6b63\u6570\u76f8\u52a0\u5f97\u5230\u7684\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u6216\u8005\u4e24\u4e2a\u8d1f\u6570\u76f8\u52a0\u7684\u7ed3\u679c\u662f\u6b63\u6570</p> <ul> <li>eg\uff1a\u5047\u8bben=4\uff0c\u8ba1\u7b97\\(0111(7)+0010(2) = 1001(-7),\u8865\u7801\u60c5\u51b5\\)</li> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cn\u4f4dbits\uff0c\u8865\u7801\u7684\u53d6\u503c\u8303\u56f4\u662f\\([-2^{n-1},2^{n-1}-1]\\),\u6ea2\u51fa\u5373\u8d85\u8fc7\u4e86\u8303\u56f4</li> </ul> </li> <li> <p>\u5341\u8fdb\u5236\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316</p> </li> <li> <p>\u6ce8\u610f\u4e00\u4e0b\uff0c\u5c0f\u6570\u5982\u679c\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u5373\u53ef</p> </li> <li> <p>eg: \\((0.101)_2 = 0.625\\)</p> <p>\u5c0f\u6570\u7684\u7b2c\u4e00\u4f4d\u662f0.5\uff08\\(2^{-1}\\)\uff09,\u540e\u7eed\u4f9d\u6b21\u4e3a0.25\uff08\\(2^{-2}\\)\uff09\uff0c0.125(\\(2^{-3}\\))</p> </li> </ul> <p></p> <ul> <li> <p>\u5341\u516d\u8fdb\u5236\u5230\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316</p> </li> <li></li> </ul>"},{"location":"course/ICS/Bits%20and%20Data%20Types%20and%20Operations/#23-logical-operations","title":"2.3 Logical Operations","text":"<ol> <li>The AND function</li> </ol> A B AND 0 0 0 0 1 0 1 0 0 1 1 1 <p><code>If c is the AND of a and b ,where a=0011101001101001 and b=0101100100100001,what is c?</code></p> <p>individually anding each pair of bits \\(a_i\\) and \\(b_i\\) to form \\(c_i\\), $$ a : 0011101001101001\\ b : 0101100100100001\\ c : 0001100000100001 $$</p> <ol> <li>The OR function</li> </ol> A B OR 0 0 0 0 1 1 1 0 1 1 1 1 <p><code>If c is the OR of a and b ,where a=0011101001101001 and b=0101100100100001,what is c?</code></p> <p>individually oring each pair of bits \\(a_i\\) and \\(b_i\\) to form \\(c_i\\), $$ a : 0011101001101001\\ b : 0101100100100001\\ c : 0111101101101001 $$</p> <ol> <li>The NOT function</li> <li>The Exclusive-OR function(\u5f02\u6216)</li> </ol> A B XOR 0 0 0 0 1 1 1 0 1 1 1 0 <ol> <li>DeMorgan\u2019s Laws</li> </ol>"},{"location":"course/ICS/Calculator/","title":"Chapter 10 | Calculator","text":""},{"location":"course/ICS/Calculator/#101-data-type-conversion","title":"10.1 Data Type Conversion","text":"<p>\u5df2\u77e5\u7684\u6570\u636e\u7c7b\u578b\uff1a</p> <ol> <li>unsigned integers for address arithmetic\uff08\u7528\u4e8e\u5730\u5740\u8fd0\u7b97\u7684\u65e0\u7b26\u53f7\u6574\u6570\uff09</li> <li>2\u2018s complement integers for integer arithmetic\uff08\u7528\u4e8e\u6574\u6570\u8fd0\u7b97\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u6574\u6570\uff09</li> <li>16-bit binary strings for logical operations\uff08\u7528\u4e8e\u903b\u8f91\u8fd0\u7b97\u768416\u4f4d\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff09</li> <li>floating point numbers for scientific computation\uff08\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684\u6d6e\u70b9\u6570\uff09</li> <li>ASCII codes for interaction with output and input\uff08\u7528\u4e8e\u8f93\u5165\u4e0e\u8f93\u51fa\u8bbe\u5907\u4ea4\u4e92\u7684ASCII\u4ee3\u7801\uff09</li> </ol>"},{"location":"course/ICS/Calculator/#1011-example-a-bogus-program23e","title":"10.1.1 Example: A Bogus Program:2+3=e\uff08\u865a\u5047\u7a0b\u5e8f\uff09","text":"<p>what will happen\uff1f</p> <p>\u5047\u8bbe\u901a\u8fc7\u952e\u76d8\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u662f 2\uff0c\u901a\u8fc7\u952e\u76d8\u8f93\u5165\u7684\u7b2c\u4e8c\u4e2a\u6570\u5b57\u662f 3\u3002\u5728\u7a0b\u5e8f\u7ec8\u6b62\u4e4b\u524d\uff0c\u663e\u793a\u5668\u4e0a\u4f1a\u663e\u793a\u4ec0\u4e48\uff1f\u8f93\u5165 2 \u540e\u52a0\u8f7d\u5230 R0 \u4e2d\u7684\u503c\u662f 2 \u7684 ASCII \u4ee3\u7801\uff0c\u5373 x0032\u3002\u5f53\u8f93\u5165 3 \u65f6\uff0c3 \u7684 ASCII \u4ee3\u7801\uff08\u5373 x0033\uff09\u88ab\u52a0\u8f7d\u5230 R0 \u4e2d\uff08\u5f53\u7136\uff0c\u5728 2 \u7684 ASCII \u4ee3\u7801\u79fb\u81f3 R1 \u4e4b\u540e\uff09\u3002\u56e0\u6b64\uff0cADD \u6307\u4ee4\u5c06\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 x0032 \u548c x0033 \u76f8\u52a0\uff0c\u751f\u6210 x0065\u3002\u5f53\u8be5\u503c\u663e\u793a\u5728\u76d1\u89c6\u5668\u4e0a\u65f6\uff0c\u5b83\u88ab\u89c6\u4e3a ASCII \u4ee3\u7801\u3002\u7531\u4e8e x0065 \u662f\u5c0f\u5199 e \u7684 ASCII \u4ee3\u7801\uff0c\u56e0\u6b64\u663e\u793a\u5668\u4e0a\u4f1a\u663e\u793a\u5c0f\u5199 e\u3002</p>"},{"location":"course/ICS/Calculator/#1012-input-dataascii-to-binary","title":"10.1.2 Input Data\uff08ASCII to Binary\uff09","text":"<p>\u56fe 10.2 \u663e\u793a\u4e86\u4e09\u4f4d\u5341\u8fdb\u5236\u6574\u6570 295 \u7684 ASCII \u8868\u793a\u5f62\u5f0f\uff0c\u5b83\u4f5c\u4e3a ASCII \u5b57\u7b26\u4e32\u5b58\u50a8\u5728\u4e09\u4e2a\u8fde\u7eed\u7684 LC-3 \u5185\u5b58\u4f4d\u7f6e\u4e2d\uff0c\u4ece ASCIIBUFF \u5f00\u59cb\u3002 R1 \u5305\u542b\u6b63\u6574\u6570\u7684\u4f4d\u6570\u3002\u6211\u4eec\u7684 ASCII \u5230\u4e8c\u8fdb\u5236\u5b50\u4f8b\u7a0b\u5c06\u6574\u6570\u9650\u5236\u5728 0 \u5230 999 \u7684\u8303\u56f4\u5185\u3002</p> <p>ASCIIBUFF is the address of the <code>first memory location</code> of a sequence of four memory locations that we have allocated (a) to store the ASCII codes of decimal digits entered from the keyboard, and (b) to store the ASCII codes corresponding to the result of arithmetic operations in preparation for writing it (the result) to the monitor.</p> <p>ASCIIBUFF \u662f\u6211\u4eec\u5206\u914d\u7684\u56db\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740\uff0c\uff08a\uff09\u7528\u4e8e\u5b58\u50a8\u4ece\u952e\u76d8\u8f93\u5165\u7684\u5341\u8fdb\u5236\u6570\u5b57\u7684 ASCII \u4ee3\u7801\uff0c\uff08b\uff09<code>\u5b58\u50a8\u4e0e\u7b97\u672f\u8fd0\u7b97\u7ed3\u679c\u76f8\u5bf9\u5e94\u7684 ASCII \u4ee3\u7801</code>\uff0c\u4ee5\u51c6\u5907\u5c06\u5176\uff08\u7ed3\u679c\uff09\u5199\u5165\u76d1\u89c6\u5668\u3002</p> <p></p> <p>\u5982\u4f55\u5c06\u5341\u8fdb\u5236\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff1f</p> <p>\u9996\u5148\u83b7\u53d6\u6bcf\u4e00\u4f4d\u6570\u5b57\uff080-9\uff0c\u53ea\u9700\u56db\u4e2abit\u4fbf\u53ef\u4ee5\u8868\u793a\uff09\uff0c\u53bb\u6389\u6700\u540e\u56db\u4f4d\u4ee5\u5916\u7684\u6240\u6709\u4f4d\uff0c\u5c06ASCII\u7801\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u57280 - 9\u7684\u4e8c\u8fdb\u5236\u8868\u4e2d\u8fdb\u884c\u68c0\u7d22\u3002\u7531\u4e8e\u6211\u4eec\u8f6c\u5316\u7684\u6574\u6570\u6700\u591a\u53ea\u6709\u4e09\u4f4d\uff0c\u6240\u4ee5\u6709\u4e09\u5f20\u8868\uff0c\u4e00\u5f20\u662f\u767e\u4f4d\u6570\u5b57\uff0c\u4e00\u5f20\u662f\u5341\u4f4d\u6570\u5b57\uff0c\u4e00\u5f20\u662f\u4e2a\u4f4d\u6570\u5b57\u3002</p> <p>e.g.\u767e\u4f4d\u8868\u4e2d\u7d22\u5f156 \u7684\u6761\u76ee\u503c\u662f#600\uff0c\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u662f0000001001011000.</p>"},{"location":"course/ICS/Calculator/#1013-display-resultbinary-to-ascii","title":"10.1.3 Display Result\uff08Binary to ASCII\uff09","text":""},{"location":"course/ICS/Calculator/#102-arithmetic-using-a-stack","title":"10.2 Arithmetic Using a Stack","text":""},{"location":"course/ICS/Calculator/#1021-the-stack-as-temporary-storage","title":"10.2.1 The stack as Temporary Storage","text":"<ol> <li> <p>LC-3\u662fthree-address machines\uff08\u4e09\u5730\u5740\u673a\uff09\u5728LC-3\u4e2d\uff0cADD\u6307\u4ee4\u9700\u8981\u4e09\u4e2a\u5bc4\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0cDR\u76ee\u6807\u5bc4\u5b58\u5668\uff0c\u548cSR1\uff0cSR2\u4e24\u4e2a\u6e90\u5bc4\u5b58\u5668</p> </li> <li> <p><code>\u540c\u65f6\u4e5f\u5b58\u5728\u7740\u53cc\u5730\u5740\u673a\uff0c``x86\u7684ISA\u4e2dADD\u6307\u4ee4\u662f</code>    - <code>ADD   EAX\uff0cEBX</code>    \u5176\u4e2dEAX\u548cEBX\u662fx86ISA\u4e2d\u516b\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u4e2d\u7684\u4e24\u4e2a\u3002EAX\u65e2\u5145\u5f53\u6e90\u64cd\u4f5c\u6570\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5145\u5f53\u76ee\u6807\u64cd\u4f5c\u6570\u7684\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u53cc\u5730\u5740\u673a\u5668\uff0c\u6e90\u5bc4\u5b58\u5668\u7684\u7ed3\u679c\u4e3a\u88ab\u8986\u76d6</p> </li> <li> <p>\u8fd8\u6709\u4e00\u4e9b ISA \u6839\u672c\u4e0d\u4f7f\u7528\u901a\u7528\u5bc4\u5b58\u5668\u6765\u5b58\u50a8\u6e90\u64cd\u4f5c\u6570\u6216\u64cd\u4f5c\u6307\u4ee4\u7684\u7ed3\u679c\u3002\u5176\u4e2d\u6700\u5e38\u89c1\u7684\u79f0\u4e3a\u5806\u6808\u673a\uff0c\u56e0\u4e3a\u5806\u6808\u7528\u4e8e\u4e34\u65f6\u5b58\u50a8\u3002    - \u6e90\u64cd\u4f5c\u6570\u662f\u901a\u8fc7\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u9876\u90e8\u4e24\u4e2a\u5143\u7d20\u6765\u83b7\u5f97\u7684\u3002\u7ed3\u679c\uff08\u5373\u76ee\u6807\u64cd\u4f5c\u6570\uff09\u968f\u540e\u88ab\u63a8\u5165\u5806\u6808\u3002    - \u7531\u4e8e\u8ba1\u7b97\u673a\u603b\u662f\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u548c\u538b\u5165\u64cd\u4f5c\u6570\uff0c\u56e0\u6b64\u65e0\u9700\u663e\u5f0f\u6307\u5b9a\u5730\u5740.\u4e14\u5806\u6808\u673a\u4e5f\u53ea\u6709ADD\u6307\u4ee4</p> </li> </ol>"},{"location":"course/ICS/Calculator/#1022-an-example","title":"10.2.2 An Example","text":"<p>Suppose we want to evaluate (A + B) \u22c5(C + D), where A contains 25, B contains 17, C contains 3, and D contains 2, and store the result in E.</p> <pre><code>LD      R0,A\nLD      R1,B\nADD     R0,R0,R1\nLC      R2,C\nLD      R3,D\nADD     R2,R2,R3\nMUL     R0,R0,R2\nST      R0,E\n;\u5bf9\u4e8e\u4e00\u4e2acalculator\uff0c\u6211\u4eec\u6267\u884c\u4ee5\u4e0b\u516b\u4e2a\u64cd\u4f5c\npush    25\npush    17\nADD\npush    3\npush    2\nADD\nmultiply\npop     E\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"course/ICS/Calculator/#1023-opaddopmultopneg","title":"10.2.3 OpADD\uff0cOpMult\uff0cOpNeg","text":"<ol> <li>OpAdd, which will pop two values from the stack, add them, and push the result onto the stack.</li> </ol> <p>OpAdd\uff0c\u5c06\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u4e24\u4e2a\u503c\uff0c\u5c06\u5b83\u4eec\u76f8\u52a0\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u538b\u5165\u5806\u6808\u3002</p> <ol> <li>OpMult, which will pop two values from the stack, multiply them, and push the result onto the stack.</li> </ol> <p>OpMult\uff0c\u5c06\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u4e24\u4e2a\u503c\uff0c\u5c06\u5b83\u4eec\u76f8\u4e58\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u63a8\u5165\uff08push\uff09\u5806\u6808\u3002</p> <ol> <li>OpNeg, which will pop the top value, form its 2\u2019s complement negative value, and push the result onto the stack. This will allow us to subtract two numbers A minus B by first forming \u2212B and then adding the result to A</li> </ol> <p>OpNeg\uff0c\u5b83\u5c06\u5f39\u51fa\u9876\u90e8\u503c\uff0c\u5f62\u6210\u5176 2 \u7684\u8865\u8d1f\u503c\uff0c\u5e76\u5c06\u7ed3\u679c\u538b\u5165\u5806\u6808\u3002\u8fd9\u5c06\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u9996\u5148\u5f62\u6210 \u2212B \u7136\u540e\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230 A \u6765\u51cf\u53bb\u4e24\u4e2a\u6570\u5b57 A \u51cf\u53bb B</p>"},{"location":"course/ICS/Calculator/#10231-the-opadd-subroutine","title":"10.2.3.1 The OpAdd Subroutine","text":"<p>\u524d\u63d0\u6761\u4ef6\uff1aIf the result is within the range of acceptable values (i.e., an integer between \u2212999 and +999), then the result is pushed onto the stack.</p> <p>\u8ba1\u7b97\u65e0\u6cd5\u6210\u529f\u60c5\u51b5\uff1a</p> <ul> <li>Fewer than two values are available on the stack for source operands.\u5806\u6808\u4e0a\u53ef\u7528\u4e8e\u6e90\u64cd\u4f5c\u6570\u7684\u503c\u5c11\u4e8e\u4e24\u4e2a</li> <li>the result is out of range.\u7ed3\u679c\u8d85\u51fa\u8303\u56f4</li> </ul> <p>\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u5806\u6808\u90fd\u4f1a\u6062\u590d\u5230 OpAdd \u5b50\u4f8b\u7a0b\u5f00\u59cb\u65f6\u7684\u72b6\u6001\u3002\u5982\u679c\u7b2c\u4e00\u6b21\u5f39\u51fa\u4e0d\u6210\u529f\uff0c\u5219\u5806\u6808\u4e0d\u4f1a\u66f4\u6539\uff0c\u56e0\u4e3a POP \u4f8b\u7a0b\u4f7f\u5806\u6808\u4fdd\u6301\u539f\u6837\u3002\u5982\u679c\u4e24\u6b21\u5f39\u51fa\u4e2d\u7684\u7b2c\u4e8c\u6b21\u62a5\u544a\u5931\u8d25\uff0c\u5219\u5806\u6808\u6307\u9488\u9012\u51cf\uff0c\u8fd9\u5b9e\u9645\u4e0a\u8fd4\u56de\u5f39\u51fa\u5230\u5806\u6808\u9876\u90e8\u7684\u7b2c\u4e00\u4e2a\u503c\u3002\u5982\u679c\u7ed3\u679c\u8d85\u51fa\u53ef\u63a5\u53d7\u503c\u7684\u8303\u56f4\uff0c\u5219\u5806\u6808\u6307\u9488\u9012\u51cf\u4e24\u6b21\uff0c\u5c06\u4e24\u4e2a\u503c\u8fd4\u56de\u5230\u5806\u6808\u9876\u90e8\u3002</p> <p></p> <pre><code>;Subroutine to pop the top two elements from the stack,add them and push the sum onto the stack.\n;R6 is the stack pointer\n\nOpAdd       ST      R0,SavedR0\n            ST      R1,SavedR1\n            ST      R5,SavedR5\n            ST      R7,SavedR7\n            JSR     POP             ;\u8df3\u8f6c\u5230POP\uff0c\u83b7\u5f97\u7b2c\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570\n            ADD     R5,R5,#0        ;Tset POP\u662f\u5426\u6210\u529f\n            BRp     OpAdd_Exit      ;\u5982\u679cpop\u5931\u8d25\uff0c\u5c31\u8df3\u8f6c\u5230\u8be5\u5206\u652f\n            ADD     R1,R0,#0        ;\u4e3a\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u63d0\u4f9b\u7a7a\u95f4\n            JSR     POP             ;\u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\n            ADD     R5,R5,#0        ;TEST\n            BRp     OpAdd_Restore1  ;\u4e0d\u6210\u529f\uff0c\u6062\u590d\u7b2c\u4e00\u4e2a\u6570\n            ADD     R0,R0,R1        ;ADD\u76f8\u52a0\u64cd\u4f5c\n            JSR     RangeCheck      ;\u68c0\u67e5result\u7684size\uff0c\u662f\u5426\u8d8a\u754c\n            ADD     R5,R5,#0        ;\u90fd\u4ee5R5\u7684\u503c\u4f5c\u4e3a\u68c0\u6d4b\u7684\u6307\u6807\n            BRp     OpAdd_Restore2  ;out of range \uff0c\u6062\u590d\n            JSR     PUSH            ;PUSH the sum on the stack\n            BRnzp   OpAdd_Exit      ;\u65e0\u6761\u4ef6\u8df3\u8f6c\u7ed3\u675f\nOpAdd_Restore2\n            ADD     R6,R6,#-1\nOpAdd_Restore1\n            ADD     R6,R6,#-1       ;\u6307\u9488\u56de\u9000\nOpAdd_Exit  \n            LD      R0,SavedR0\n            LD      R1,SavedR1\n            LD      R5,SavedR5\n            LD      R7,SavedR7\nSavedR1     .BLKW   #1\nSavedR0     .BLKW   #1\nSavedR5     .BLKW   #1\nSavedR7     .BLKW   #1\n\n;\u53d1\u73b0\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd8\u7f3a\u5c11POP\uff0cPUSH\u548cRangeCheck\n</code></pre> <p></p> <pre><code>;Subroutine to check that a value is between -999 and +999\nRangeCheck\n        LD      R5,NEG999\n        ADD     R5,R0,R5        ;R0 contains the result\n        BRp     BADRANGE\n        LD      R5,POS999\n        ADD     R5,R0,R5\n        BRn     BADRANGE\n        AND     R5,R5,#0        ;\u8868\u793aresult\u5728\u8303\u56f4\u5185\uff0csuccess\nBADRANGE    \n        ST      R0,RangeCheck_Save0\n        LEA     R0,RangeError\n        Trap    x22\n        AND     R5,R5,#0\n        ADD     R5,R5,#1\n        LD      R0,RangeCheck_Save0\n        RET\nNEG999          .FILL   #-999\nPOS999          .FILL   #999\nRangeCheck_Save0    .BLKW   #1\nRangeError      .STRINGZ    \"Error:Number\"\n</code></pre>"},{"location":"course/ICS/Calculator/#10232-the-opmult-subrountine","title":"10.2.3.2 The OpMult Subrountine","text":"<p>\u7531\u4e8eLC-3\u6ca1\u6709multiplication\uff0c\u6240\u4ee5\u4e58\u6cd5\u662f\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u7684\u52a0\u6cd5\u5b9e\u73b0\u7684\u3002</p> <p>\u5982\u679c\u4e24\u6b21\u5f39\u51fa\u4e2d\u7684\u7b2c\u4e8c\u6b21\u62a5\u544a\u5931\u8d25\uff0c\u5219\u5806\u6808\u6307\u9488\u9012\u51cf\uff0c\u8fd9\u5b9e\u9645\u4e0a\u8fd4\u56de\u5f39\u51fa\u5230\u5806\u6808\u9876\u90e8\u7684\u7b2c\u4e00\u4e2a\u503c\u3002\u5982\u679c\u7ed3\u679c\u8d85\u51fa\u53ef\u63a5\u53d7\u503c\u7684\u8303\u56f4\uff08\u5982\u4e4b\u524d\u4e00\u6837\uff0cR5 \u4e2d\u5c06\u7528 1 \u8868\u793a\uff09\uff0c\u5219\u5806\u6808\u6307\u9488\u9012\u51cf\u4e24\u6b21\uff0c\u5c06\u4e24\u4e2a\u503c\u8fd4\u56de\u5230\u5806\u6808\u9876\u90e8\u3002</p> <pre><code>;Two values are popped from the stack,multiplied,and if their product is within the acceptable range,the result is pushed onto the stack.\n;R6 is the stack pointer\n\nOpMult\n        ST      R0,SavedR0\n        ST      R1,SavedR1\n        ST      R2,SavedR2\n        ST      R3,SavedR3\n        ST      R5,SavedR5\n        ST      R7,SavedR7\n        AND     R3,R3,#0        ;R3 holds sign of multiplier R3\u4fdd\u5b58\u4e58\u6570\u7684\u7b26\u53f7\n        JSR     POP             ;R0,\u5f97\u5230\u7b2c\u4e00\u4e2a\u4e58\u6570\n        ADD     R5,R5,#0\n        BRp     OPMULT_EXIT     ;\u5982\u679cpop\u5931\u8d25\uff0c\u5c31\u7ed3\u675f\u7a0b\u5e8f\n        ADD     R1,R0,#0        ;make room for next POP.\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u6570\u4e5f\u662f\u4fdd\u5b58\u5728R0\uff0c\u4f1a\u8986\u76d6\u7b2c\u4e00\u4e2a\u6570\u3002R1\u4fdd\u5b58\u7b2c\u4e00\u4e2a\u4e58\u6570\u7684\u503c\n        JSR     POP             ;\u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\n        ADD     R5,R5,#0\n        BRp     OPMULT_RESTORE1     ;\u5982\u679cpop\u5931\u8d25\uff0c\u5c31\u7ed3\u675f\u7a0b\u5e8f\n        ADD     R2,R0,#0        ;\u79fb\u52a8\u4e58\u6570\uff0c\u5224\u65ad\u6b63\u8d1f\u53f7\u3002R2\u4fdd\u5b58\u7b2c\u4e8c\u4e2a\u4e58\u6570\u7684\u503c\n        BRzp    POSMULTIPLIER   ;\u6b63\u6570\n        ADD     R3,R3,#1        ;\u5efa\u7acb\u4e00\u4e2aflag\uff0c\u5047\u8bbe\u662f\u8d1f\u6570\n        NOT     R2,R2           ;\u5982\u679cR2\u662f\u8d1f\u6570\uff0c\u5373\u67d0\u4e00\u4e2a\u4e58\u6570\u662f\u8d1f\u6570\uff0c\u5219\u4ee4R3 = 1\uff0c\u540e\u7eed\u5bf9\u4e58\u6570\u53d6\u53cd\u64cd\u4f5c\n        ADD     R2,R2,#1        ;R2 = -multiplier\u3002\u8865\u7801\u5f62\u5f0f\uff0c\u5f97\u5230\u76f8\u53cd\u6570\uff0c\u9010\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00\nPOSMULTPIER\n        AND     R0,R0,#0        ;\u5982\u679c\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u505a\u53d6\u76f8\u53cd\u6570\u64cd\u4f5c\n        ADD     R2,R2,#0        ;R1\u4fdd\u5b58\u7b2c\u4e00\u4e2a\u4e58\u6570\uff0cR2\u4fdd\u5b58\u7b2c\u4e8c\u4e2a\u4e58\u6570\uff0c\u4e14\u76ee\u524d\u662f\u6b63\u6570\n        BRz     PUSHMULT        ;\u5982\u679c\u7b2c\u4e8c\u4e2a\u4e58\u6570\u662f0\uff0c\u5219\u76f4\u63a5\u8f93\u51fa0\nMULTLOOP    \n        ADD     R0,R0,R1        ;R0\u521d\u59cb\u72b6\u6001\u662f0\uff0c\u4fdd\u5b58\u548c\u8f93\u51fa\u7ed3\u679c\u7528\n        ADD     R2,R2,#-1       ;\n        BRp     MULTLOOP\n        ADD     R3,R3,#0\n        BRz     PUSHMULT        ;\u5982\u679cR3 = 1\uff0c\u8bf4\u660e\u539f\u672c\u662f\u8d1f\u6570\uff0c\u9700\u8981\u8fdb\u884c\u53d6\u76f8\u53cd\u64cd\u4f5c\u3002\u5982\u679cR3 = 0\uff0c\u5219\u8bf4\u660e\u7b2c\u4e8c\u4e2a\u4e58\u6570\u672c\u8eab\u5c31\u662f\u6b63\u6570\n        NOT     R0,R0\n        ADD     R0,R0,#1\nPUSHMULT\n        JSR     PUSH            ;\u8f93\u51fa\u7ed3\u679c\u7528\n        BRnzp   OPMULT_EXIT\nOPMULT_RESTORE1\n        ADD     R6,R6,#-1\n        ADD     R6,R6,#-1\nOPMULT_EXIT \n        LD      R0,SavedR0\n        ......\n        RET\nSavedR0 .BLKW   #1\n......\n</code></pre>"},{"location":"course/ICS/Calculator/#10233-the-opneg-subroutine","title":"10.2.3.3 The OpNeg Subroutine","text":"<p>\u8981\u4e0e\u5806\u6808\u9876\u90e8\u7684\u4e24\u4e2a\u5143\u7d20\u6267\u884c\u51cf\u6cd5\uff0c\u6211\u4eec\u9996\u5148<code>\u5c06\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u66ff\u6362\u4e3a\u5176\u8d1f\u6570\uff0c\u7136\u540e\u4f7f\u7528 OpADD</code>\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6808\u9876\u5305\u542bA\uff0c\u800c\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5305\u542bB\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5148\u5bf9\u6808\u9876\u53d6\u53cd\uff0c\u7136\u540e\u6267\u884cOpAdd\uff0c\u5c06B\u2212A\u538b\u5165\u6808\u3002</p> <pre><code>;Subroutine to pop the top of the stack,form its negative.\n;push the result onto the stack\nOPNEG\n        ST      R0,SavedR0\n        ST      R5,SavedR5\n        ST      R7,SavedR7\n        JSR     POP\n        ADD     R5,R5,#0\n        BRp     OPNEG_EXIT\n        NOT     R0,R0\n        ADD     R0,R0,#1\n        JSR     PUSH\nOPNEG_EXIT\n        LD      R0,SavedR0\n        LD      R5,SavedR5\n        LD      R7,SavedR7\n        RET\nSaveR0  .BLKW   #1\n......\n</code></pre>"},{"location":"course/ICS/Calculator/#103-the-calculator","title":"10.3 The Calculator","text":"<p>\u6211\u4eec\u5c06\u4f7f\u7528\u952e\u76d8\u544a\u8bc9\u8ba1\u7b97\u5668\u8981\u505a\u4ec0\u4e48\u3002\u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u6700\u591a\u4e09\u4f4d\u5c0f\u6570\u7684\u6b63\u6574\u6570\u3001<code>\u7b97\u672f\u8fd0\u7b97\u7b26 +\uff08\u7528\u4e8e ADD\uff09\u3001*\uff08\u7528\u4e8e MUL\uff09\u548c \u2212\uff08\u7528\u4e8e\u8d1f\u6570\uff09</code>\uff0c\u4ee5\u53ca\u4e09\u4e2a\u9644\u52a0\u547d\u4ee4 <code>D\uff08\u5728\u76d1\u89c6\u5668\u4e0a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c\uff09\u3001C\uff08\u5220\u9664\u6240\u6709\u8f93\u5165\u7684\u503c\uff09\u548c X\uff08\u5173\u95ed\u8ba1\u7b97\u5668\uff09</code>\u3002</p> <ul> <li>X Exit the simulation.</li> <li>D Display the value at the top of the stack.</li> <li> <p>C Clear all values from the stack.</p> </li> <li> <p>+Pop the top two elements A,B off the stack and push A+B.</p> </li> <li> <p>**  Pop the top two elements A,B off the stack and push A* * B.</p> </li> <li>\u2212 Pop the top element A off the stack and push \u201cminus\u201d A</li> <li>Enter \u6216 LF \u5c06\u952e\u76d8\u4e0a\u952e\u5165\u7684\u503c\u63a8\u5165\u5806\u6808\u9876\u90e8\u3002\u5982\u679c\u7528\u6237\u60f3\u8981\u8f93\u5165\u6570\u5b57\uff0c\u5219\u8f93\u5165\u6570\u5b57\uff08\u6700\u591a\u4e09\u4f4d\u5c0f\u6570\uff09\uff0c\u7136\u540e\u6309  \u6216 &lt;\u6362\u884c (LF)&gt;\u3002 <p>eg: (51 - 49) * (172 + 205) - (17 * 2)</p> <p>5,1,LF,4,9,LF,\u2212,+,1,7,2,LF,2,0,5,LF,+, * ,1,7,LF,2,LF,*,\u2212,+,D.</p> <p>\u8ba1\u7b97\u5668\u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a\u6211\u4eec\u4f7f\u7528\u952e\u76d8\u8f93\u5165\u547d\u4ee4\u548c\u5c0f\u6570\u503c\u3002\u6211\u4eec\u4f7f\u7528\u76d1\u89c6\u5668\u6765\u663e\u793a\u7ed3\u679c\u3002\u6211\u4eec\u4f7f\u7528\u5806\u6808\u6765\u4fdd\u5b58\u7528\u4e8e\u6267\u884c\u7b97\u672f\u8fd0\u7b97\u7684\u6e90\u64cd\u4f5c\u6570\u4ee5\u53ca\u8fd9\u4e9b\u7b97\u672f\u8fd0\u7b97\u7684\u7ed3\u679c\uff0c\u5982\u7b2c 10.2 \u8282\u4e2d\u6240\u8ff0\u3002\u8f93\u5165\u548c\u663e\u793a\u7684\u503c\u4ec5\u9650\u4e8e\u4e09\u4f4d\u5c0f\u6570\uff0c\u5373\u4ec5\u9650 -999 \u548c +999\uff08\u542b\uff09\u4e4b\u95f4\u7684\u503c</p> <p></p>"},{"location":"course/ICS/Data%20Structures/","title":"Chapter 8 | Data Structures \u6570\u636e\u7ed3\u6784","text":"<p>In this chapter, we will study three abstract data types: <code>stacks, queues, and character strings(\u6808\uff0c\u961f\u5217\uff0c\u5b57\u7b26\u4e32)</code></p>"},{"location":"course/ICS/Data%20Structures/#81-subroutines","title":"8.1 Subroutines\u51fd\u6570","text":"<p>For all of these reasons, it is good to have a way to use program fragments efficiently. Such program fragments are called <code>subroutines,</code> or alternatively, <code>procedures</code>, or in C terminology, <code>functions.</code></p> <p>\u51fa\u4e8e\u6240\u6709\u8fd9\u4e9b\u539f\u56e0\uff0c\u6700\u597d\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u6709\u6548\u5730\u4f7f\u7528\u7a0b\u5e8f\u7247\u6bb5\u3002\u6b64\u7c7b\u7a0b\u5e8f\u7247\u6bb5\u79f0\u4e3a\u5b50\u4f8b\u7a0b\uff0c\u6216\u8005\u79f0\u4e3a\u8fc7\u7a0b\uff0c\u6216\u7528 C \u672f\u8bed\u79f0\u4e3a\u51fd\u6570\u3002</p>"},{"location":"course/ICS/Data%20Structures/#811-the-callreturn-mechanism","title":"8.1.1 The Call/Return Mechanism \u8c03\u7528/\u8fd4\u56de\u673a\u5236","text":"<p>With subroutine\uff0cprogrammer has to provide the code A only once. \u5bf9\u4e8e\u76f8\u540c\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u53ea\u9700\u63d0\u4f9b\u4e00\u6b21\uff0c\u5176\u4ed6\u7684\u5c31\u53ea\u8981call/return</p> <p>The programmer uses the call/return mechanism to direct the computer each time via the call instruction to the code A, and after the computer has executed the code A, to the return instruction to the proper next instruction to be executed in the program.</p> <p>\u7a0b\u5e8f\u5458\u4f7f\u7528\u8c03\u7528/\u8fd4\u56de\u673a\u5236\uff0c\u6bcf\u6b21\u901a\u8fc7\u8c03\u7528\u6307\u4ee4\u5c06\u8ba1\u7b97\u673a\u5f15\u5bfc\u5230\u4ee3\u7801A\uff0c\u5e76\u5728\u8ba1\u7b97\u673a\u6267\u884c\u5b8c\u4ee3\u7801A\u540e\uff0c\u5c06\u8fd4\u56de\u6307\u4ee4\u5f15\u5bfc\u5230\u7a0b\u5e8f\u4e2d\u6b63\u786e\u7684\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u6307\u4ee4\u3002</p> <ul> <li>The program that contains the call as the caller</li> <li>The subroutine that contains the return as the callee</li> </ul> <p><code>The call/return mechanism consists of two instructions.</code></p> <p>\u8c03\u7528/\u8fd4\u56de\u673a\u5236\u7531\u4e24\u6761\u6307\u4ee4\u7ec4\u6210</p> <ol> <li> <p>The first instruction <code>JSR(R)</code> is in the caller program and<code>does two things</code>:</p> </li> <li> <p>It loads the PC with the starting address of the subroutine </p> <p>\u5c06\u51fd\u6570\u7684\u8d77\u59cb\u5730\u5740\u52a0\u8f7d\u5230 PC \u4e2d</p> </li> <li> <p>and it loads R7 with the address immediately after the address of the JSR(R) instruction.\uff08\u5c06\u7d27\u968f JSR(R) \u6307\u4ee4\u5730\u5740\u4e4b\u540e\u7684\u5730\u5740\u52a0\u8f7d\u5230 R7 \u4e2d\uff09 </p> </li> <li> <p><code>The address immediately after the address of the JSR(R) instruction is the address to come back to after executing the subroutine</code></p> <p><code>\u7d27\u63a5\u5728 JSR(R) \u6307\u4ee4\u5730\u5740\u4e4b\u540e\u7684\u5730\u5740\u662f\u6267\u884c\u5b50\u7a0b\u5e8f\u540e\u8981\u8fd4\u56de\u7684\u5730\u5740\u3002</code>. We call the address we come back to the return linkage\uff08\u8fd4\u56de\u94fe\u63a5\uff09. </p> </li> <li> <p>The second instruction <code>JMP`` R7</code> is the last instruction in the subroutine (i.e., in the callee program). It loads the PC with the contents of R7, <code>the address just after the address of the JSR instruction</code>, completing the round trip flow of control from the caller to the callee and back.</p> </li> <li> <p>R7\u4e2d\u5b58\u653e\u7740\u7684\u662fJSR\u6307\u4ee4\u5730\u5740\u540e\u7684\u5730\u5740</p> </li> <li>\u5b9e\u73b0\u5728\u51fd\u6570\u6267\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u6309\u7167\u987a\u5e8f\u8df3\u8f6c\u5230\u4e0b\u4e00\u6761\u6307\u4ee4\uff08\u5b89\u6392\uff09</li> </ol> <p>JSR A \u8df3\u8f6c\u5230\u5b50\u7a0b\u5e8f\u7684\u5f00\u59cb</p> <p>\u7ed3\u675f\u5b50\u7a0b\u5e8f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528RET\u6216\u8005JMP R7\u8fd4\u56de\u539f\u6765\u8981\u6267\u884c\u7684\u6307\u4ee4\uff0cRET\u6307\u4ee4\u5b8c\u5168\u7b49\u4ef7\u4e8eJMP R7 </p>"},{"location":"course/ICS/Data%20Structures/#812-jsrrthe-instruction-that-calls-the-subroutine","title":"8.1.2 JSR\uff08R\uff09\u2014\u2014The Instruction That Calls the Subroutine","text":"<p>\u5173\u4e8e\u8df3\u8f6c\u6307\u4ee4JAR\uff08R\uff09\uff0c<code>\u6839\u636e\u5bfb\u5740\u7684\u65b9\u5f0fPC-relative \u548c Base Register addressing\uff0c\u5206\u4e3aJSR\u548cJSRR</code>\uff0c\u7528\u4e8e\u8df3\u8f6c\u5230\u51fd\u6570</p> <p>JSR(R)\u7684\u529f\u80fd\uff1a</p> <ol> <li>\u8ba1\u7b97\u5b50\u7a0b\u5e8f\u51fd\u6570\u7684\u8d77\u59cb\u5730\u5740\uff0c\u5e76\u52a0\u8f7d\u5230PC\u4e2d</li> <li>\u5c06\u8fd4\u56de\u5730\u5740\u4fdd\u5b58\u5728R7\u4e2d\uff0c\u8fd4\u56de\u5730\u5740\u662fJSR\uff08R\uff09\u540e\u9762\u7684\u6307\u4ee4\u7684\u5730\u5740</li> </ol> <p></p> <ul> <li>Bits[15:12] \u8868\u793a<code>opcode 0100</code></li> <li>Bit[11] \u8868\u793a\u5bfb\u5740\u65b9\u5f0f\uff0c1\u8868\u793a\u5bfb\u5740\u65b9\u5f0fPC-relative\uff0co\u8868\u793a\u5bfb\u5740\u65b9\u5f0f\u4e3aBase Register addressing</li> </ul> <p>JSR</p> <p>The JSR instruction computes the target address of the subroutine by signextending the 11-bit offset (bits [10:0]) of the instruction to 16 bits and adding that to the incremented PC.</p> <p>JSR \u6307\u4ee4\u901a\u8fc7\u5c06\u6307\u4ee4\u7684 11 \u4f4d\u504f\u79fb\u91cf\uff08\u4f4d [10:0]\uff09\u7b26\u53f7\u6269\u5c55\u4e3a 16 \u4f4d\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u9012\u589e\u7684 PC \u6765\u8ba1\u7b97\u5b50\u4f8b\u7a0b\u7684\u76ee\u6807\u5730\u5740\u3002</p> <p></p> <p>eg</p> <p>JSR\u7684\u5730\u5740\u662fx4200\uff0cPC + offset = x4201 + xFC04 = x3E05</p> <p>\u8fd4\u56dex4201\u5730\u5740\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668R7\u4e2d</p> <p>JSRR</p> <p></p> <p>\u5df2\u77e5JSRR\u6307\u4ee4\u7684\u5730\u5740\u662fx420A\uff0cR5\u662f\u57fa\u5740\u5bc4\u5b58\u5668\uff0ccontains x3002</p> <p>PC will be loaded with x3002 + x0000 = x3002</p> <p>\u8fd4\u56dex420B\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668R7\u4e2d</p>"},{"location":"course/ICS/Data%20Structures/#813-saving-and-restoring-registers","title":"8.1.3 Saving and Restoring Registers\u4fdd\u5b58\u548c\u6062\u590d\u5bc4\u5b58\u5668","text":"<p>Every time an instruction loads a value into a register\uff0cthe value that was previously in that register is lost</p> <p>\u5f53\u6307\u4ee4\u5c06\u503cvalue\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u65f6\uff0c\u5bc4\u5b58\u5668\u539f\u5148\u4fdd\u5b58\u7684\u503c\u5c31\u4f1a\u6d88\u5931</p> <p></p> <p>\u7531\u4e8e\u5b50\u7a0b\u5e8f\u901a\u8fc7\u6267\u884c\u7b2c 05\u300106 \u548c 0A \u884c\u4e2d\u7684\u6307\u4ee4\u7834\u574f\u4e86 R1\u3001R2 \u548c R3 \u4e2d\u7684\u503c\uff0c\u56e0\u6b64\u5f53 CALLER \u5728\u5b50\u7a0b\u5e8f\u7b2c 20 \u884c\u7684 JMP R7 \u6307\u4ee4\u4e4b\u540e\u6062\u590d\u6267\u884c\u65f6\uff0c\u8fd9\u4e9b\u503c\u5c06\u4e22\u5931\u7ed9 CALLER\u3002</p> <p>\u4e3a\u4e86\u963b\u6b62\u6267\u884c\u51fd\u6570\u540eR1\uff0cR2\uff0cR3\u7684\u503c\u53d1\u751f\u6539\u53d8</p> <p>\u5728\u521d\u59cb\u5316\u9636\u6bb5\uff0c\u5c06R1\u7684\u503c\u5199\u5165\u5185\u5b58SaveR1\u4e2d\u2026\u2026\uff0c\u5b50\u4f8b\u7a0b\u4e2d\u7684\u4e09\u4e2a\u4f4d\u7f6e\uff08\u7b2c 22\u300123 \u548c 24 \u884c\uff09\u5df2\u9884\u7559\u7528\u4e8e\u4fdd\u5b58\u8fd9\u4e9b\u5bc4\u5b58\u5668\u503c\u3002</p> <p>\u540e\u7eed\u57281D\uff0c1E\uff0c1F\u884c\uff0c\u53c8\u5c06\u5b58\u50a8\u5728SaveR1\uff0cSaveR2\u2026\u2026\u7684\u503c\u91cd\u65b0lD\u8fdb\u5165\u5bc4\u5b58\u5668\u4e2d</p> <p>\u5728\u5b50\u4f8b\u7a0b\u4f7f\u7528 R1\u3001R2 \u548c R3 \u4f9b\u81ea\u5df1\u4f7f\u7528\u4e4b\u524d\uff0c\u5b50\u4f8b\u7a0b\u4f1a\u4fdd\u5b58\u8c03\u7528\u7a0b\u5e8f\u653e\u5165\u5176\u4e2d\u7684\u503c\u3002\u5e76\u4e14\uff0c\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8fd9\u4e9b\u503c\u88ab\u653e\u56de\uff08\u5373\u6062\u590d\uff09\u8c03\u7528\u7a0b\u5e8f\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002</p> <ol> <li>We call this technique<code>callee save</code>because the subroutine (i.e., the callee) saves and restores the registers</li> </ol> <p>\u6b64\u6280\u672f\u4e3acallee save\u88ab\u8c03\u7528\u8005\u4fdd\u5b58\uff0c\u56e0\u4e3a\u88ab\u8c03\u7528\u8005\uff08\u51fd\u6570\uff09\u4fdd\u5b58\u548c\u6062\u590d\u5bc4\u5b58\u5668</p> <p>\u5728\u51fd\u6570\uff08\u88ab\u8c03\u7528\u7a0b\u5e8f\uff0ccalled program\uff09\u4e2d\u8fdb\u884c\u4fdd\u5b58\u548c\u6062\u590d</p> <ol> <li><code>caller save</code>because the calling program saves and restores the register vallue</li> </ol> <p>\u8c03\u7528\u8005\u4fdd\u5b58\uff0c\u56e0\u4e3a\u8c03\u7528\u7a0b\u5e8f\u4fdd\u5b58\u5e76\u6062\u590d\u5bc4\u5b58\u5668\u503c</p> <p>\u7531\u4e8e JMP START \u5728 R7 \u4e2d\u52a0\u8f7d\u8fd4\u56de\u94fe\u63a5\uff0c\u56e0\u6b64 JMP START \u6307\u4ee4\u7684\u6267\u884c\u4f1a\u7834\u574f R7 \u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8c03\u7528\u7a0b\u5e8f\u5728 START \u5904\u8c03\u7528\u5b50\u4f8b\u7a0b\u4e4b\u524d\u5df2\u5728 R7 \u4e2d\u5b58\u50a8\u4e86\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u5728==\u4ece\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u9700\u8981\u8be5\u503c==\uff0c\u5219\u8c03\u7528\u7a0b\u5e8f\u5fc5\u987b\u4fdd\u5b58\u5e76\u6062\u590d R7\u3002</p> <p>\u5728\u51fd\u6570\u5916\uff08\u8c03\u7528\u7a0b\u5e8f\uff0ccalling program\uff09\uff0cJSR\u53d1\u751f\u4e4b\u524d\uff0c\u4fdd\u5b58\uff0c\u53d1\u751f\u4e4b\u540e\uff0c\u6062\u590d</p> <p>\u5982\u679c\u9700\u8981\u4fdd\u5b58\u5bc4\u5b58\u5668\u4e2d\u7684\u539f\u5148\u503c\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5148\u5c06\u5bc4\u5b58\u5668\u4e2d\u7684\u503cST\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u518d\u5c06\u5176LD\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\u6062\u590d\u5b83</p> <p></p>"},{"location":"course/ICS/Data%20Structures/#814-library-routines","title":"8.1.4 Library Routines\uff08\u5e93\u4f8b\u7a0b\uff0c\u6216\u8005\u51fd\u6570\u5e93\uff09","text":"<p>If the library routine starts at address SQRT, and the argument is provided in R0 to the library routine, and the result is obtained in R0 from the library routine</p> <p>\u5e93\u4f8b\u7a0b\u4ece\u5730\u5740 SQRT \u5f00\u59cb\uff0c\u5e76\u4e14\u53c2\u6570\u901a\u8fc7 R0 \u4e2d\u63d0\u4f9b\u7ed9\u5e93\u4f8b\u7a0b\uff0c\u5e76\u4e14\u7ed3\u679c\u4ece\u5e93\u4f8b\u7a0b\u8fd4\u56de R0 \u4e2d\u83b7\u5f97</p> <p>The pseudo-op .EXTERNAL. We already saw in Section 7.4.2 that this pseudo-op tells the assembler that the label (SQRT), which is needed to assemble the .FILL pseudo-op in line 19, will be supplied by some other program fragment (i.e., module) and will be combined with this program</p> <p>\u4f2a\u64cd\u4f5c\uff0c.EXTERNAL \u8fd9\u4e2a\u4f2a\u64cd\u4f5c\u544a\u8bc9\u6c47\u7f16\u5668\uff0c\u548c\u5176\u4ed6\u7a0b\u5e8f\u7247\u6bb5program fragment\u5408\u5e76\u5728\u4e00\u8d77\u8ba1\u7b97</p> <p></p> <p>The executable image is produced at link time.</p> <p>\u53ef\u6267\u884c\u6620\u50cf\u662f\u5728\u94fe\u63a5\u65f6\u751f\u6210\u7684\u3002\u5728\u94fe\u63a5\u65f6\u7ec4\u5408\u591a\u4e2a\u6a21\u5757\u4ee5\u751f\u6210\u53ef\u6267\u884c\u6620\u50cf</p> <p></p>"},{"location":"course/ICS/Data%20Structures/#82-stack","title":"8.2 Stack","text":"<p>the defining notion of a stack is that the <code>last thing you stored</code> in the stack is <code>the first thing you remove from it.</code></p> <p>\u5728\u5806\u6808\u4e2d\u5b58\u50a8\u7684\u6700\u540e\u4e00\u4e2a\u5185\u5bb9\u662f\u60a8\u4ece\u5806\u6808\u4e2d\u5220\u9664\u7684\u7b2c\u4e00\u4e2a\u5185\u5bb9</p> <p><code>Last in,First out,LIFO</code></p> <p></p> <p>In Figure 8.8a, the stack is initially shown as empty. Access is always via the first element, which is labeled TOP. </p> <p>If the value 18 is <code>pushed</code>onto the stack, we have Figure 8.8b. </p> <p>If the three values 31, 5, and 12 are pushed (in that order), the result is as shown in Figure 8.8c. </p> <p>Finally, if two values are <code>popped</code> from the stack, we have Figure 8.8d. </p> <p>A distinguishing feature of the stack of Figure 8.8 is that, like the quarters in the coin holder, a<code>s each value is added or removed, all the other values already on the stack move.</code></p>"},{"location":"course/ICS/Data%20Structures/#821-implementation-in-memory","title":"8.2.1 Implementation in memory","text":"<p>\u5982\u56fe\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u5806\u6808\u5b9e\u73b0</p> <p>This stack consists of <code>a sequence of memory locations</code>along with a mechanism\uff08\u673a\u5236\uff09, called the <code>stack pointer(\u5806\u6808\u6307\u9488)</code>, which keeps track of the top of the stack. We use==R6 to contain the address of the top of the stack. That is, in the LC-3, ==R6 is the stack pointer.</p> <p>\u8be5\u5806\u6808\u7531\u4e00\u7cfb\u5217\u5185\u5b58\u4f4d\u7f6e\u4ee5\u53ca\u79f0\u4e3a\u5806\u6808\u6307\u9488\u7684\u673a\u5236\u7ec4\u6210\uff0c\u8be5\u673a\u5236\u8ddf\u8e2a\u5806\u6808\u7684\u9876\u90e8\u3002\u6211\u4eec\u4f7f\u7528 R6 \u6765\u5305\u542b\u6808\u9876\u7684\u5730\u5740\u3002\u5373\u5728LC-3\u4e2d\uff0cR6\u662f\u5806\u6808\u6307\u9488</p> <p>\u5728\u4e0a\u56fe\u4e2d\uff0cx3FFB\uff0cx3FFC\uff0cx3FFD\uff0cx3FFE\uff0cx3FFF\uff0c\u662f\u4e94\u4e2a\u63d0\u4f9b\u7ed9\u5806\u6808\u7684\u5185\u5b58\u3002</p> <p>The actual locations comprising the stack at any single instant of time are the consecutive locations from x3FFF to the location specified in R6, that is, the top of the stack.</p> <p>\u5728\u4efb\u4f55\u5355\u4e2a\u65f6\u523b\u7ec4\u6210\u5806\u6808\u7684\u5b9e\u9645\u4f4d\u7f6e\u662f\u4ece x3FFF \u5230 R6 \u4e2d\u6307\u5b9a\u7684\u4f4d\u7f6e\uff08\u5373\u5806\u6808\u9876\u90e8\uff09\u7684\u8fde\u7eed\u4f4d\u7f6e\u3002</p> <ol> <li>\u5728Figure 8.9\uff08a\uff09\uff0cSince there are no values on the stack,the stack pointer contains the address x4000</li> </ol> <p>\u7531\u4e8e\u5806\u6808\u4e0a\u6ca1\u6709\u503c\uff0c\u56e0\u6b64\u5806\u6808\u6307\u9488\u5305\u542b\u5730\u5740 x4000</p> <ol> <li>\u5728Figure8.9\uff08b\uff09\uff0cthe stack push the value 18\uff0cthe stack pointer contains the address x3FFF\uff0cwhich is the new top of the stack</li> </ol> <p>\u5728\u5806\u6808pushvalue18\u540e\uff0c\u5806\u6808\u6307\u9488\u4f4d\u4e8ex3FFF\uff0c\u6210\u4e3a\u5806\u6808\u7684top</p> <p>\u610f\u5473\u7740\uff0cpush\u6216\u8005pop\uff0c\u4f1a\u5bfc\u81f4\u5806\u6808\u6307\u9488\u7684\u4f4d\u7f6e\u7684\u53d8\u5316</p> <ol> <li>\u5728Figure8.9\uff08c\uff09\uff0cthe stack push the value 31\uff0c5\uff0c12\uff0cin this order\u3002</li> </ol> <p>Note that the values inserted into the stack are stored in memory locations having decreasing addresses. We say the stack grows toward zero</p> <p>\u63d2\u5165\u5806\u6808\u7684\u503c\u5b58\u50a8\u5728\u5730\u5740\u9012\u51cf\u7684\u5185\u5b58\u4f4d\u7f6e\u4e2d\u3002\u6211\u4eec\u8bf4\u5806\u6808\u5411\u96f6\u589e\u957f</p> <ol> <li>\u5728Figure8.9\uff08d\uff09\uff0cshows the stack after popping the top of two elements off the stack</li> </ol> <p>those two elements (the values 5 and 12) that were popped are still present in memory locations x3FFD and x3FFC.</p> <p>\u88ab\u5f39\u51fa\u7684\u8fd9\u4e24\u4e2a\u5143\u7d20\uff08\u503c 5 \u548c 12\uff09\u4ecd\u7136\u5b58\u5728\u4e8e\u5185\u5b58\u4f4d\u7f6e x3FFD \u548c x3FFC \u4e2d\u3002\u5df2\u7ecf\u5b58\u50a8\u5728\u5806\u6808\u4e0a\u7684\u6570\u636e\u4e0d\u4f1a\u7269\u7406\u79fb\u52a8</p> <p>\u540e\u7eed\u4ecb\u7ecd\u4e24\u79cd\u5806\u6808\u64cd\u4f5cpush \u548c pop</p>"},{"location":"course/ICS/Data%20Structures/#8211-push","title":"8.2.1.1 push","text":"<p>\u5728Figure 8.9\uff08a\uff09\uff0c\u521d\u59cb\u72b6\u6001\uff0c\u5806\u6808\u4e3a\u7a7a\uff0c\u6307\u9488\u4f4d\u4e8ex4000\u3002\u540e\u7eed\u5c0618push\u8fdb\u5165\u5806\u6808\uff0c\u5806\u6808\u6307\u9488R6\u9012\u51cf\uff0c\u6b64\u65f6R6\u4fdd\u5b58\u7684\u5730\u5740\u662fx3FFF\uff0c\u5bf9\u5e94\u7684\u662f\u8981<code>\u5b58\u50a8\u538b\u5165\u5806\u6808\u7684\u503c\u7684\u4f4d\u7f6e</code>\u3002</p> <p>The actual push is done by first loading 18 into R0, and then executing STR R0,R6,#0. This <code>stores the contents of R0 into memory location x3FFF.</code></p> <p>\u5b58\u50a8\u7684\u8fc7\u7a0b\u662f\uff0c\u5148\u5c0618\u4fdd\u5b58\u5230R0\uff0c\u518d\u6267\u884cSTR  R0\uff0cR6\uff0c#0\uff0c\u5c06R0\u7684\u5185\u5bb918\u5199\u5165R6\u4fdd\u5b58\u7684\u5730\u5740x3FFF\u4e2d\u3002</p> <p><code>to push a value onto the stack, we first load that value into R0. Then we decrement R6, which contained the previous top of the stack. Then we execute STR R0,R6,#0, which stores the contents of R0 into the memory location whose  address is in R6.</code></p>"},{"location":"course/ICS/Data%20Structures/#8212-pop","title":"8.2.1.2 pop","text":"<p>\u5f39\u51fa\u5806\u6808\u9876\u90e8\u5305\u542b\u7684\u503c\u5e76\u5c06\u5176\u52a0\u8f7d\u5230 R0 \u4e2d\u3002\u5806\u6808\u6307\u9488\uff08R6\uff09\u9012\u589e\uff0c\u8868\u793a\u5806\u6808\u9876\u90e8\u7684\u65e7\u503c\u5df2\u88ab\u5f39\u51fa\uff0c\u4e0d\u518d\u5728\u5806\u6808\u4e0a\uff0c\u5e76\u4e14\u5806\u6808\u9876\u90e8\u6709\u4e00\u4e2a\u65b0\u503c\u3002</p>"},{"location":"course/ICS/Data%20Structures/#8213-underflow","title":"8.2.1.3 Underflow\u4e0b\u6ea2","text":"<p>\u5806\u6808\u4e0a\u53ea\u5269\u4e0b\u4e24\u4e2a\u503c\uff0c\u4f46\u662f\u5c1d\u8bd5\u4ece\u5806\u6808\u4e2d\u5f39\u51fapop\u4e09\u4e2a\u503c</p> <p>we can test for underflow by <code>comparing the stack pointer with x4000</code>, which would be the contents of R6 if there were nothing left on the stack to pop</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5806\u6808\u6307\u9488\u4e0e x4000 \u8fdb\u884c\u6bd4\u8f83\u6765\u6d4b\u8bd5\u4e0b\u6ea2\uff0c\u5982\u679c\u5806\u6808\u4e0a\u6ca1\u6709\u5269\u4f59\u5185\u5bb9\u53ef\u4ee5\u5f39\u51fa\uff0c\u8fd9\u5c06\u662f R6 \u7684\u5185\u5bb9</p> <p></p> <p>\u5982\u679cpop\u4e0d\u6210\u529f\uff0c\u5e0c\u671bpop routine return to the calling program with the underflow information containd in a register\u8ba9 POP \u4f8b\u7a0b\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f\u5e76\u5728\u5bc4\u5b58\u5668\u4e2d\u5305\u542b\u4e0b\u6ea2\u4fe1\u606f</p> <ol> <li>Upon return from the POP routine, the calling program would <code>examine R5 to determine whether the POP completed successfully</code>(R5 = 0), or not (R5 = 1).</li> </ol> <p>\u5982\u679cR5 = 0\uff0c\u8bf4\u660epop\u6210\u529f\uff0c\u5982\u679cR5 = 1\uff0c\u8bf4\u660epop\u5931\u8d25</p> <ol> <li>\u5982\u679cpop\u6210\u529f\u4e0e\u5426\u53cd\u6620\u5728R5\u8eab\u4e0a\uff0c\u6240\u4ee5R5\u539f\u5148\u7684\u503c\u4f1a\u4e22\u5931\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u9700\u8981R5\u539f\u5148\u7684\u503c\uff0c\u5c31\u9700\u8981\u5b9e\u73b0\u8fdb\u884c\u4fdd\u5b58\uff0c\u770b\u4e4b\u524d\u76848.13 Saving and Restoring Register</li> </ol> <p></p> <ul> <li>AND R5\u521d\u59cb\u5316\u4e3a0</li> <li>LD    R1\u5b58\u50a8\u5730\u5740<code>xC000,\u7531x4000\u6309\u4f4d\u53d6\u53cd\u518d\u52a01\u5f97\u5230</code></li> <li>ADD R2 = R6 + R1,\u6b64\u5904\u662f<code>\u4e3a\u4e86\u5224\u65adR6\uff0c\u5806\u6808\u6307\u9488\u662f\u5426\u5728x4000</code></li> <li>BR    \u82e5R2 = 0\uff0c\u8bf4\u660e\u5806\u6808\u6307\u9488\u5728x4000\u5904\uff0c\u6b64\u65f6\u5806\u6808\u4e3a\u7a7a\uff0c\u8df3\u8f6c\u5230Failure\uff0cR5 = R5 + 1 = 1\u8868\u793apop\u5931\u8d25\uff0creturn</li> <li>\u5982\u679c R2 \u4e0d\u4e3a0\uff0c\u5219pop\u6210\u529f\uff0c\u5806\u6808\u6307\u9488R6 \u52a01</li> </ul>"},{"location":"course/ICS/Data%20Structures/#8124-overflow","title":"8.1.2.4 overflow","text":"<ul> <li>We augment the PUSH routine with instructions to store 0 (success) or 1 (failure) in R5, depending on whether or not the push completed successfully. </li> </ul> <p>\u7528\u6307\u4ee4\u6269\u5145push \u4f8b\u7a0broutine\uff0c\u5728R5\u4e2d\u5b58\u50a80\uff0c\u8868\u793apush\u6210\u529f\uff0c\u5728R5\u4e2d\u5b58\u50a81\uff0c\u8868\u793apush\u5931\u8d25</p> <ul> <li>Upon return from the PUSH routine, the <code>calling progra</code>m would <code>examine R5 to determine whether the PUSH completed successfully (R5 = 0) or not (R5 = 1).</code></li> </ul> <p>\u4ecepush\u4f8b\u7a0b\u8fd4\u56de\u540e\uff0c\u8c03\u7528\u7a0b\u5e8f\u5c06\u68c0\u67e5R5\u6765\u786e\u5b9apush\u662f\u5426\u6210\u529f\u5b8c\u6210</p> <p></p> <p>\u8981\u770bpush\u662f\u5426\u6210\u529f\u662f==\u770btop\u662f\u5426\u548cx3FFB\uff08\u6700\u4e0a\u65b9\uff0c\u6700\u5c0f\u7684\u5730\u5740\uff09\u76f8\u7b49==</p> <ul> <li>AND R5\u521d\u59cb\u5316</li> <li>\u5728R1\u4e2d\u5b58\u5165  MAX\uff0c\u5373x3005\uff0c\u4e3ax3FFB\u7684\u76f8\u53cd\u6570</li> <li>ADD R2 = R6 + R1</li> <li>BR \u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679cR2 = 0\uff0c\u5219\u8bf4\u660e\u6b64\u65f6top\u5806\u6808\u6307\u9488\u6070\u597d\u4f4d\u4e8ex3FFB\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884cpush\u64cd\u4f5c\uff0c\u8df3\u8f6c\u5230Failure\uff0c\u5bf9\u5bc4\u5b58\u5668R5+1\uff0c\u8868\u793apush\u5931\u8d25</li> <li>ADD  \u5982\u679cR2\u4e0d\u7b49\u4e8e0\uff0cpush\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u5219\u5806\u6808\u6307\u9488-1\uff0c\u4e0a\u79fb\u4e00\u4f4d</li> <li>STR  R0\u50a8\u85cf\u7740push\u8fdb\u5165\u7684\u6570\uff0c\u901a\u8fc7STR\u64cd\u4f5c\uff0c\u5c06R0\u4e2d\u4fdd\u5b58\u7684\u6570\uff0c\u5199\u5165\u5806\u6808\u6307\u9488\u6240\u5728\u7684\u5185\u5b58</li> <li>\u6700\u540eRET return</li> </ul>"},{"location":"course/ICS/Data%20Structures/#822-the-complete-picture","title":"8.2.2 The Complete Picture","text":"<ul> <li>If we wish to push a value onto the stack, we simply <code>load that value into R0 and execute JSR PUSH</code>. </li> </ul> <p>\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5c06\u4e00\u4e2a\u503c\u538b\u5165\u5806\u6808\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u8be5\u503c\u52a0\u8f7d\u5230 R0 \u4e2d\u5e76\u6267\u884c JSR PUSH \u5373\u53ef\u3002</p> <ul> <li>To <code>pop a value from the stack into R0</code>, we simply <code>execute JSR POP.</code></li> </ul> <p>\u8981\u5c06\u4e00\u4e2a\u503c\u4ece\u5806\u6808\u5f39\u51fa\u5230 R0 \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u6267\u884c JSR POP \u5373\u53ef</p> <ul> <li>If we wish to change the location or <code>the size of the stack</code>, we adjust<code>BASE and MAX</code> accordingly.</li> </ul> <p>\u5982\u679c\u6211\u4eec\u5e0c\u671b\u66f4\u6539\u5806\u6808\u7684\u4f4d\u7f6e\u6216\u5927\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u76f8\u5e94\u5730\u8c03\u6574 BASE \u548c MAX\u3002</p> <p>\u7531\u4e8epush\u548cpop\u51fd\u6570\uff08subroutines\uff09\u4f1a\u4f7f\u7528R1\u548cR2\uff0c\u5373\u6539\u53d8R1\u548cR2\u7684\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u4f7f\u7528R1\u548cR2\u4e4b\u524d\u4fdd\u5b58\u5b83\u4eec\uff0c\u5728\u8fd4\u56de\u8c03\u7528\u7a0b\u5e8f\uff08calling program\uff09\u4e4b\u524d\u6062\u590d\u5b83\u4eec</p> <p>PUSH \u548c POP \u4f8b\u7a0b\u4e5f\u5199\u5165 R5\u3002\u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u6307\u51fa\u7684\uff0c\u8c03\u7528\u7a0b\u5e8f\u77e5\u9053\u5b50\u4f8b\u7a0b\u5c06\u5728 R5 \u4e2d\u62a5\u544a\u6210\u529f\u6216\u5931\u8d25\uff0c\u56e0\u6b64\u5982\u679c\u9700\u8981\u5b58\u50a8\u5728 R5 \u4e2d\u7684\u503c\uff0c\u5219\u8c03\u7528\u7a0b\u5e8f\u7684\u5de5\u4f5c\u662f\u5728\u6267\u884c JSR \u6307\u4ee4\u4e4b\u524d\u4fdd\u5b58 R5\u4e4b\u540e\u3002\u6b63\u5982\u7b2c 8.1.3 \u8282\u4e2d\u6240\u8ba8\u8bba\u7684\uff0c\u8fd9\u662f\u8c03\u7528\u8005\u4fdd\u5b58\u7684\u793a\u4f8b\u3002</p> <pre><code>;Subroutines for carrying out the PUSH and POP functions\n;program works with a stack consisting of memory locations x3FFF through x3FFB.\n;R6 is the stack pointer.\nPOP     AND R5,R5,#0      ;\u521d\u59cb\u5316R5\uff0c\u8868\u793a\u6210\u529f\n        ST  R1,Save1\n        ST  R2,Save2      ;\u4e8b\u5148\u4fdd\u5b58R1\uff0cR2\u7684value\u5230\u6307\u5b9a\u5730\u5740\n        LD  R1,EMPTY      ;EMPTY contains x4000\u7684\u76f8\u53cd\u6570\n        ADD R2,R6,R1      ;\u5806\u6808\u6307\u9488\u548cx4000\u8fdb\u884c\u6bd4\u8f83\uff0c\u4fdd\u5b58\u5728R2\u4e2d\n        BRz fail_exit     ;Branch if stack is empty\n        LD  R0,R6,#0      ;\u5c06R6\u5730\u5740\u4fdd\u5b58\u7684\u6570\u4fdd\u5b58\u5728R0\u4e2d\n        ADD R6.R6,#1      ;\u5806\u6808\u6307\u9488+1\n        BRnzp success_exit\nPUSH    AND R5,R5,#0      ;\u521d\u59cb\u5316R5\uff0c\u8868\u793a\u6210\u529f\n        ST  R1,Save1\n        ST  R2,Save2      ;\u4e8b\u5148\u4fdd\u5b58R1\uff0cR2\u7684value\u5230\u6307\u5b9a\u5730\u5740\n        LD  R1,FULL       ;FUll contains x3FFB\u7684\u76f8\u53cd\u6570\n        ADD R2,R6,R1      ;\u5806\u6808\u6307\u9488\u548cx3FFB\u8fdb\u884c\u6bd4\u8f83\uff0c\u4fdd\u5b58\u5728R2\u4e2d\n        BRz fail_exit     ;Branch if stack is full\n        ADD R6,R6,#-1\n        STR R0,R6,#0\nsuccess_exit\n        LD  R2,Save2\n        LD  R1,Save1   ;\u6062\u590dR1\uff0cR2\u7684\u539f\u5148\u503c\n        RET\nfail_exit\n        LD R2,Save2 ; Restore original\n        LD R1,Save1 ; register values\n        ADD R5,R5,#1 ; R5 &lt;-- failure\n        RET\nEMPTY   .FILL xC000\nFULL    .FILL xC005\nSave1   .FILL x0000\nSave2   .FILL x0001\n</code></pre>"},{"location":"course/ICS/Data%20Structures/#83-recursiona-powerful-technique-when-used-appropriately","title":"8.3 Recursion\uff0ca powerful Technique When used Appropriately\uff08\u9012\u5f52\uff09","text":""},{"location":"course/ICS/Data%20Structures/#831-factorial","title":"8.3.1 Factorial","text":"<pre><code>FACT    ST      R1,Save1        ;\u4fdd\u5b58\u548c\u6062\u590d\u5bc4\u5b58\u5668R1\n        ADD     R1,R0,#-1       ;R1 = R0 - 1,\u5bf9\u5e94n-1\n        BRz     DONE            ;\u5982\u679cR0 = n = 1\uff0c\u5219\u7ed3\u675f\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f1\n        ADD     R1,R0,#0        ;\u4ee4R1 = n\uff0c\u4fbf\u4e8e\u8ba1\u7b97\u5b8c\uff08n-1\uff09!\u540e\uff0c\u5c06R1\u548cR0\u76f8\u4e58\u5f97\u5230\u6700\u7ec8\u7ed3\u679cn!\n        ADD     R0,R1,#-1       ;\u4ee4R0 = n-1\uff0c\u8fdb\u5165\u540e\u7eed\u7684FACT\u8fd0\u7b97\uff0c\u5f97\u5230(n-1)!\nB       JSR     FACT\n        MUL     R0,R0,R1        ;\u76f8\u4e58\nDONE    LD      R1,Save1\n        RET\nSave1   .BLKW\n</code></pre> <ul> <li> <p>\u7531\u4e8eLC-3\uff0c\u6ca1\u6709MUL\u6307\u4ee4\uff08\u76f8\u4e58\uff09\uff0c\u6240\u4ee5\u9700\u8981\u53e6\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u8c03\u7528</p> </li> <li> <p>\u6b64\u5904\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u56fe 8.13 \u663e\u793a\u4e86\u6211\u4eec\u5e0c\u671b\u7684\u6307\u4ee4\u6267\u884c\u6d41\u7a0b\u3002\u4e3b\u7a0b\u5e8f\u4f7f\u7528\u5730\u5740 A \u5904\u7684 JSR \u6307\u4ee4\u8c03\u7528\u5b50\u4f8b\u7a0b\u3002\u8fd9\u5c06\u5bfc\u81f4\u6267\u884c\u6807\u8bb0\u4e3a #1 \u7684\u4ee3\u7801\u3002\u5728\u5730\u5740 B \u5904\uff0c\u5b50\u4f8b\u7a0b FACT \u4f7f\u7528\u6307\u4ee4 JSR FACT \u8c03\u7528\u81ea\u8eab\u3002\u8fd9\u4f1a\u5bfc\u81f4\u6267\u884c\u6807\u8bb0\u4e3a #2 \u7684\u4ee3\u7801\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6ce8\u610f\uff0c\u5f53\u4e3b\u7a0b\u5e8f\u6267\u884c JSR FACT \u6307\u4ee4\u65f6\uff0c\u8fd4\u56de\u94fe\u63a5 A+1 \u4fdd\u5b58\u5728 R7 \u4e2d\u3002\u5728\u6807\u8bb0\u4e3a #1 \u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u5730\u5740 B (JSR FACT) \u5904\u7684\u6307\u4ee4\u5c06\u5176\u8fd4\u56de\u94fe\u63a5 B+1 \u5b58\u50a8\u5728 R7 \u4e2d\uff0c\u4ece\u800c\u7834\u574f\u4e86 A+1\uff0c\u56e0\u6b64\u65e0\u6cd5\u8fd4\u56de\u4e3b\u7a0b\u5e8f\u3002</p> </li> <li>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6267\u884c\u5730\u5740 B \u5904\u7684 JSR FACT \u4e4b\u524d\u5c06\u5730\u5740 A+1 \u538b\u5165\u5806\u6808\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u968f\u540e\u8fd4\u56de\u5230\u5730\u5740 B+1 \u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f39\u51fa\u5806\u6808\u5e76\u5c06\u5730\u5740 A+1 \u52a0\u8f7d\u5230 R7 \u4e2d\uff0c\u7136\u540e\u518d\u6267\u884c\u6307\u4ee4 RET \u8fd4\u56de\u4e3b\u7a0b\u5e8f\u3002</li> </ul> <p></p> <ul> <li>\u95ee\u9898\u52a0\u4e00\uff1a\u5728#1\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u6307\u4ee4ADD   R1\uff0cR0\uff0c#0\u5c06\u503cn\u52a0\u8f7d\u5230R1\u4e2d\uff0c\u800c\u5728#2\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u6307\u4ee4ADD   R1\uff0cR0\uff0c#0\u5c06\u503cn-1\u52a0\u8f7d\u5230R1\u4e2d\u3002\u4f1a\u5bfc\u81f4\u6307\u4ee4\u56de\u6d41\u65f6\uff0cn\u88ab\u8986\u76d6</li> <li>\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u6808\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u662f\u5728\u5c06 n-1 \u52a0\u8f7d\u5230 R0 \u4e4b\u524d\u5c06\u503c n \u79fb\u81f3 R1\uff0c\u800c\u662f\u5c06 n \u538b\u5165\u5806\u6808\uff0c\u7136\u540e\u5728\u4f7f\u7528 (n-1) \u4ece\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u5728\u9700\u8981\u65f6\u5c06\u5176\u5f39\u51fa\u5728 R0 \u4e2d\u3002</li> <li>\u95ee\u9898\u52a0\u4e8c\uff1a\u5728\u5b50\u4f8b\u7a0b\u4e2d\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\u5c06R1\u4fdd\u5b58\u5728Save1\u4e2d\uff0c\u800cRET\u4e4b\u524d\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u65f6\u5c06\u5176\u6062\u590d\u6210R1.\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u5728\u8c03\u7528\u5b50\u4f8b\u7a0b\u524d\u540eR1\u7684\u503c\u4e0d\u53d8\u3002\u4f46\u662f\uff0c\u6b64\u5904\u7531\u4e8e\u5b50\u4f8b\u7a0b\u65f6\u9012\u5f52\u7684\uff0c\u6240\u4ee5\u5f53\u5730\u5740B\u5904\u7684JSR\u6307\u4ee4\u91cd\u65b0\u8c03\u7528\u5b50\u4f8b\u7a0b\u65f6\uff0cR1\u5b58\u50a8\u7740ADD R1\uff0cR0\uff0c#0\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u540e\u7eedFACT\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5c31\u662f\u4fdd\u5b58\uff0c\u8986\u76d6\u7b2c\u4e00\u6b21FACT\u4fdd\u5b58\u5728Save1\u7684\u503c</li> <li>\u53ef\u4ee5\u7528\u6808\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u53ea\u9700\u5c06 ST R1,Save1 \u66ff\u6362\u4e3a\u63a8\u9001\uff0c\u5c06 LD R1,Save1 \u66ff\u6362\u4e3a\u5f39\u51fa\u3002</li> </ul>"},{"location":"course/ICS/Data%20Structures/#832-the-mazea-good-example","title":"8.3.2 The Maze\uff0ca Good Example","text":"<p>\u907f\u514d\u4f7f\u7528\u9012\u5f52\u6765\u8ba1\u7b97\u9636\u4e58\u6216\u6590\u6ce2\u90a3\u5951\u7684\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u8fed\u4ee3\u7b97\u6cd5\u8db3\u591f\u7b80\u5355\uff0c\u6613\u4e8e\u7406\u89e3\uff0c\u800c\u4e0d\u4f1a\u5e26\u6765\u53ef\u6015\u7684\u9012\u5f52\u6267\u884c\u65f6\u95f4\u635f\u5931\u3002\u7136\u800c\uff0c\u91cd\u8981\u7684\u662f\u8981\u6307\u51fa\uff0c\u6709\u65f6\u9012\u5f52\u7684\u8868\u73b0\u529b\u4e4b\u7f8e\u5bf9\u4e8e\u89e3\u51b3\u590d\u6742\u95ee\u9898\u5f88\u6709\u7528\u3002\u4ee5\u4e0b\u6d89\u53ca\u8ff7\u5bab\u7684\u95ee\u9898\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u8ff7\u5bab\u548c\u8ff7\u5bab\u5185\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u786e\u5b9a\u662f\u5426\u6709\u4ece\u8d77\u59cb\u4f4d\u7f6e\u79bb\u5f00\u8ff7\u5bab\u7684\u51fa\u8def\u3002</p> <p>\u8ff7\u5bab\u7684\u6bcf\u4e00\u5355\u5143\u90fd\u53ef\u4ee5\u901a\u8fc7\u662f\u5426\u6709\u901a\u5f80\u4e1c\u897f\u5357\u5317\u7684\u95e8\uff0c\u4ee5\u53ca\u662f\u5426\u6709\u4ece\u5355\u5143\u5230\u5916\u754c\u7684\u95e8\u6765\u8868\u5f81\u3002\u6bcf\u4e00\u5355\u5143\u90fd\u53ef\u4ee5\u7528\u4e00\u4e2a\u5185\u5b58\u5b57\u8868\u793a</p> <ul> <li>Bit[4]=1 if there is a door to the outside world; Bit[4]=0 if no door.</li> </ul> <p><code>bit[4]\u8868\u793a\u662f\u5426\u6709\u4ece\u5355\u5143\u901a\u5f80\u5916\u754c\u7684\u95e8\uff0c\u6709\u5219\u4e3a1</code></p> <ul> <li>Bit[3]=1 if there is a door to the cell to the north; Bit[3]=0 if no door.</li> </ul> <p><code>bit[3]\u8868\u793a\u5355\u5143\u662f\u5426\u6709\u5317\u95e8</code></p> <ul> <li>Bit[2]=1 if there is a door to the cell to the east; Bit[2]=0 if no door.</li> </ul> <p><code>\u4e1c\u95e8</code></p> <ul> <li>Bit[1]=1 if there is a door to the cell to the south; Bit[1]=0 if no door.</li> </ul> <p><code>\u5357\u95e8</code></p> <ul> <li>Bit[0]=1 if there is a door to the cell to the west; Bit[0]=0 if no door</li> </ul> <p><code>\u897f\u95e8</code></p> <p>The words are stored in what we call row major order.</p> <p>That is \uff0crow1 is stored\uff0cthen row2 is stored\uff0c\u2026\u2026</p> <p></p> <p></p>"},{"location":"course/ICS/Data%20Structures/#a-recursive-subroutine-to-exit-the-maze","title":"A recursive Subroutine to Exit the Maze","text":"<p>\u5982\u679c\u6211\u4eec\u80fd\u9000\u51fa\u8ff7\u5bab\uff0c\u6211\u4eec\u5c06\u4ece\u5b50\u7a0b\u5e8f\u4e2d\u8fd4\u56de\uff0cR1=1\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u6211\u4eec\u5c06\u8fd4\u56de R1=0</p> <p>\u8be5\u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a</p> <ol> <li>\u5728\u6bcf\u4e2a\u5355\u5143\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u8be2\u95ee\u8be5\u5355\u5143\u662f\u5426\u6709\u901a\u5f80\u5916\u754c\u7684\u51fa\u53e3\u3002\u5982\u679c\u662f\uff0c\u6211\u4eec\u8fd4\u56de\u503c1\u5e76\u8fd4\u56de\u3002</li> <li>\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u4f1a\u8be2\u95ee\u662f\u5426\u5e94\u8be5\u5c1d\u8bd5\u5317\u8fb9\u3001\u4e1c\u8fb9\u3001\u5357\u8fb9\u6216\u897f\u8fb9\u7684\u7262\u623f\u3002\u4e3a\u4e86\u5728\u4efb\u4f55\u65b9\u5411\u4e0a\u5c1d\u8bd5\u7262\u623f\uff0c\u663e\u7136\u5728\u8be5\u65b9\u5411\u4e0a\u5fc5\u987b\u6709\u4e00\u6247\u901a\u5f80\u7262\u623f\u7684\u95e8\u3002</li> <li>\u6b64\u5916\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u6211\u4eec\u4e0d\u4f1a\u9677\u5165\u65e0\u9650\u5faa\u73af\uff0c\u4f8b\u5982\uff0c\u6709\u4e00\u4e9b\u95e8\u5141\u8bb8\u6211\u4eec\u5411\u5317\u79fb\u52a8\u4e00\u4e2a\u5355\u5143\u683c\uff0c\u7136\u540e\u4ece\u90a3\u91cc\u5411\u4e1c\u79fb\u52a8\u4e00\u4e2a\u5355\u5143\u683c\uff0c\u4ece\u90a3\u91cc\u5411\u5357\u79fb\u52a8\u4e00\u4e2a\u5355\u5143\u683c\uff0c\u7136\u540e\u4ece\u90a3\u91cc\u5411\u897f\u79fb\u52a8\u4e00\u4e2a\u5355\u5143\u683c\uff0c\u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u5f00\u59cb\u7684\u5730\u65b9\u3002\u4e3a\u4e86\u9632\u6b62\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec<code>\u5728\u8bbf\u95ee\u7684\u6bcf\u4e2a\u5355\u5143\u683c\u4e2d\u653e\u7f6e\u4e86\u4e00\u4e2a\u201c\u9762\u5305\u5c51\uff08breadcrumb\uff09\u201d</code>\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u8bbf\u95ee\u8fc7\u8be5\u5355\u5143\u683c\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u8f6c\u5230\u8be5\u5355\u5143\u683c\u5e76\u4f7f\u7528 JSR FIND EXIT\u3002</li> </ol> <p>a. From our cell, we ask if we can exit. If yes, we are done. We exit with R1=1.</p> <p>b. If not, we put a breadcrumb in our cell. Our breadcrumb is bit [15] of the word corresponding to our current cell. We set it to 1</p> <p>c. We ask two questions: Is there a door to the north, and have we never visited the cell to the north before? If the answer to both is yes, we set the address to the cell to the north, and JSR FIND EXIT.<code>We set the address to the cell to the north by simply subtracting 6 from the address of the current cell. Why 6? Because the cells are stored in row major order, and the number of columns in the maze is 6</code></p> <p>d. If the answer to either question is no, or if going north resulted in failure, we ask: Is there a door to the east, and have we never visited that cell before? If the answer to both is yes, we set the address to the address of the cell to the east (by adding 1 to the address) and JSR FIND EXIT.</p> <p>e. If going east does not get us out, we repeat the question for south, and if that does not work, then for west.</p> <p>f. If we end up with no door to the west to a cell we have not visited, or if there is a door and we haven\u2019t visited, but it results in failure, we are done. We cannot exit the maze from our starting position. We set R1=0 and return.</p> <pre><code>;Recursive subroutine that determines if there is a path from current cell to the outside world\n;input:R0,current cell address\n;output:R1,YES(1),NO(0)\n\n            .ORIG   x4000\nFIND_EXIT   ;save modified regsters into the stack\u4fdd\u5b58\u4fee\u6539\u540e\u7684\u5bc4\u5b58\u5668\u81f3\u6808\u4e2d\n            ADD     R6,R6,#-1\n            STR     R2,R6,#0        ;R6\u662f\u6808\u7684\u6307\u9488\uff0cR2\u4fdd\u5b58\u8c03\u7528\u8005\u7684\u5355\u5143\u683c\u4fe1\u606f(\u5730\u5740\u5bf9\u5e94\u7684\u6570\u636e)\n            ADD     R6,R6,#-1\n            STR     R3,R6,#0        ;R3,holds the cell address of the caller\uff08\u5730\u5740\uff09\n            ADD     R6,R6,#-1\n            STR     R7,R6,#0        ;R7 holds the PC of the caller\n            ;Move cell address to R3,since we need to use R0 as the input to recursive subroutine calls\n            ADD     R3,R0,#0        ;R0\u662f\u9012\u5f52\u5b50\u4f8b\u7a0b\u8c03\u7528\u7684\u8f93\u5165\n            ;if the exit is in this cell.return YES\n            LDR     R2,R0,#0        ;\u53d6\u51faR0\uff0c\u5bf9\u5e94\u7684\u5730\u5740\u7684\u6570\u636e\n            LD      R7,EXIT_MASK    ;0000 0000 0001 0000\n            AND     R7,R2,R7        ;AND \u4e4b\u540e\u53ea\u4fdd\u7559bit[4],\u5982\u679cbit[4]=1,\u5219\u8bf4\u660e\u5355\u5143\u4e0e\u5916\u754c\u8fde\u901a\uff0c\u8f93\u51faYES\n            BRnp    DONE_YES\n            ;put breadcrumb in the current cell\n            LD      R7,BREAKCRUMB   ;x8000 1000 0000 0000 0000\n            ADD     R,R2,R7     ;\u9996\u4f4d\u662f1\uff0c\u8868\u793a\u5df2\u7ecf\u88ab\u68c0\u67e5\u8fc7\n            STR     R2,R0,#0        ;\u5c06\u65b0\u7684\u5355\u5143\u683c\u4fe1\u606f\u4fdd\u5b58\u5230\u8f93\u51fa\u5730\u5740\u7684\u5185\u5b58\u4e2d\n\n            ;check the north cell for a path to exit\nCHECK_NORTH \n            LD      R7,NORTH_MASK   ;x0008 0000 0000 0000 1000\n            AND     R7,R2,R7\n            BRz     CHECK_EAST      ;R7 = 0,\u8868\u793a\u6ca1\u6709\u5317\u95e8\uff0c\u540e\u7eed\u68c0\u67e5\u4e1c\u95e8\n            LDR     R7,R3,#-6       ;R7\u30103\u3011 = 1,\u8868\u793a\u6709\u5317\u95e8\uff0c\u5219\u901a\u8fc7\u5730\u5740\u51cf6\uff0c\u5c06\u65b0\u5730\u5740\u7684\u6570\u636e\u52a0\u8f7d\u5230R7\uff0c\u8868\u793a\u5f80\u5317\u8d70\u4e00\u683c\n            BRn     CHECK_EAST      ;\u5982\u679c\u6709\u4e00\u4e2abreadcrumb in the north cell\uff0c\u68c0\u67e5\u4e1c\u95e8\u3002\u5df2\u7ecf\u68c0\u67e5\u8fc7\u6ca1\u6709\u4e0e\u5916\u754c\u8fde\u901a\uff0c\n            ADD     R0,R3,#-6\n            JSR     FIND_EXIT       ;\u9012\u5f52\u68c0\u67e5\u5317\u8fb9\u7684cell\n            ADD     R1,R1,#0        ;R1\u662f\u7528\u4e8e\u8f93\u51fa\u6700\u7ec8\u7684\u7ed3\u679c\uff0c1\u8868\u793a\u80fd\u591f\u79bb\u5f00\u8ff7\u5bab\n            BRp     DONE_YES;\n\nCHECK_EAST  LD      R7,EAST_MASK        \n            AND     R7,R2,R7        ;x0004 0000 0000 0000 0100\n            BRz     CHECK_SOUTH     ;\u5982\u679c\u6ca1\u6709\u4e1c\u95e8\u5c31\u68c0\u67e5\u5357\u95e8\n            LDR     R7,R3,#1        ;\u5982\u679c\u6709\u4e1c\u95e8\uff0c\u5730\u5740\u52a01\uff0c\u56e0\u4e3a\u4e1c\u8fb9\u7684\u683c\u5b50\u5728\u53f3\u8fb9\n            BRn     CHECK_SOUTH     ;\u5982\u679c\u6709breadcrumb\uff0c\u5219\u68c0\u67e5\u5357\u95e8\uff0c\n            ADD     R0,R3,#1\n            JSR     FIND_EXIT       ;R0\u662f\u4f5c\u4e3a\u9012\u5f52\u7684\u8f93\u5165\u503c\uff0c\u9012\u5f52\u68c0\u67e5\u4e1c\u8fb9\u7684\u683c\u5b50\n            ADD     R1,R1,#0\n            BRp     DONE_YES        ;FIND_EXIT\u4e4b\u540e\u4f1a\u5bf9R0\u505a\u51fa\u6539\u53d8\uff0c1\u8868\u793a\u6210\u529f\u79bb\u5f00\u8ff7\u5bab\n\nCHECK_SOUTH LD      R7,SOUTH_MASK       \n            AND     R7,R2,R7        ;x0004 0000 0000 0000 0010\n            BRz     CHECK_WEST      ;\u5982\u679c\u6ca1\u6709\u5357\u95e8\u5c31\u68c0\u67e5\u5357\u95e8\n            LDR     R7,R3,#6        ;\u5982\u679c\u6709\u5357\u95e8\uff0c\u5219\u5230\u5357\u8fb9\u7684\u683c\u5b50\u53bb\uff0c\u5730\u5740\u52a06\n            BRn     CHECK_WEST      ;\u5982\u679c\u6709breadcrumb\uff0c\u5219\u68c0\u67e5\u5357\u95e8\uff0c\n            ADD     R0,R3,#6\n            JSR     FIND_EXIT       ;R0\u662f\u4f5c\u4e3a\u9012\u5f52\u7684\u8f93\u5165\u503c\uff0c\u9012\u5f52\u68c0\u67e5\u5357\u8fb9\u7684\u683c\u5b50\n            ADD     R1,R1,#0\n            BRp     DONE_YES        ;FIND_EXIT\u4e4b\u540e\u4f1a\u5bf9R0\u505a\u51fa\u6539\u53d8\uff0c1\u8868\u793a\u6210\u529f\u79bb\u5f00\u8ff7\u5bab\n\nCHECK_WEST  LD      R7,WEST_MASK        \n            AND     R7,R2,R7        ;x0004 0000 0000 0000 0100\n            BRz     DONE_NO         ;\u6ca1\u6709\u897f\u95e8\uff0c\u8bf4\u660e\u4ee5\u4e0a\u4e1c\u897f\u5357\u5317\u95e8\u90fd\u6ca1\u6709\uff0c\u5c01\u95ed\u683c\u5b50\uff0c\u51fa\u4e0d\u53bb\n            LDR     R7,R3,#-1       ;\u6709\u897f\u95e8\uff0c\u5730\u5740-1\uff0c\u5230\u897f\u8fb9\u7684\u683c\u5b50\n            BRn     DONE_NO         ;\u5982\u679c\u6709breadcrumb\uff0c\u5219\u5df2\u7ecf\u68c0\u67e5\u8fc7\uff0c\u6ca1\u6709\u4e0e\u5916\u754c\u8fde\u901a\n            ADD     R0,R3,#-1\n            JSR     FIND_EXIT       ;R0\u662f\u4f5c\u4e3a\u9012\u5f52\u7684\u8f93\u5165\u503c\uff0c\u9012\u5f52\u68c0\u67e5\u897f\u8fb9\u7684\u683c\u5b50\n            ADD     R1,R1,#0\n            BRp     DONE_YES        ;FIND_EXIT\u4e4b\u540e\u4f1a\u5bf9R0\u505a\u51fa\u6539\u53d8\uff0c1\u8868\u793a\u6210\u529f\u79bb\u5f00\u8ff7\u5bab\n\nDONE_NO     AND     R1,R1,#0\n            BR      RESTORE\nDONE_YES    AND     R1,R1,#0\n            ADD     R1,R1,#1\nRESTORE     ADD     R0,R3,#0        ;restore R0 from R3\n            ;restore the rest of the modified registers from the stack\n            LDR     R7,R6,#0\n            ADD     R6,R6,#1\n            LDR     R3,R6,#0\n            ADD     R6,R6,#1\n            LDR     R2,R6,#0\n            ADD     R6,R6,#1\n            RET\nBREADCRUMB  .FILL   x8000           ;1000 0000 0000 0000\nEXIT_MASK   .FILL   x0010           ;0000 0000 0001 0000\nNORTH_MASK  .FILL   x0008           ;0000 0000 0000 1000\nEAST_MASK   .FILL   x0004           ;0000 0000 0000 0100\nSOUTH_MASK  .FILL   x0002           ;0000 0000 0000 0010\nWEST_MASK   .FILL   x0001           ;0000 0000 0000 0001\n            .END\n</code></pre>"},{"location":"course/ICS/Data%20Structures/#84-the-queue","title":"8.4 The Queue \u961f\u5217","text":"<p><code>FIFO stands for \u201cFirst in First out.\u201d</code></p> <p>In the context of the data structure, this means we need to keep track of <code>two ends</code>of the storage structure: <code>a FRONT pointer for servicing (i.e., removing elements from the front of the queue)</code>and <code>a REAR pointer for entering (i.e., inserting into the rear of the queue).</code></p> <p>\u5728\u6570\u636e\u7ed3\u6784\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u8ddf\u8e2a\u5b58\u50a8\u7ed3\u6784\u7684\u4e24\u7aef\uff1a\u7528\u4e8e\u670d\u52a1\u7684 FRONT \u6307\u9488\uff08\u5373\uff0c\u4ece\u961f\u5217\u524d\u9762\u5220\u9664\u5143\u7d20\uff09\u548c\u7528\u4e8e\u8f93\u5165\u7684 REAR \u6307\u9488\uff08\u5373\uff0c\u63d2\u5165\u6392\u5728\u961f\u5217\u7684\u6700\u540e\uff09</p> <p></p> <p></p> <p>Figure 8.25 shows a block of six sequential memory locations that have been allocated for storing elements in the queue. The queue grows from x8000 to x8005. </p> <p>\u56fe 8.25 \u663e\u793a\u4e86\u4e00\u4e2a\u7531\u516d\u4e2a\u8fde\u7eed\u5185\u5b58\u4f4d\u7f6e\u7ec4\u6210\u7684\u5757\uff0c\u8fd9\u4e9b\u5185\u5b58\u4f4d\u7f6e\u5df2\u5206\u914d\u7528\u4e8e\u5b58\u50a8\u961f\u5217\u4e2d\u7684\u5143\u7d20\u3002\u961f\u5217\u4ece x8000 \u589e\u957f\u5230 x8005\u3002</p> <p>We arbitrarily assign the FRONT pointer to the location just before the first element of the queue. \u6211\u4eec\u4efb\u610f\u5730\u5c06 <code>FRONT \u6307\u9488</code>\u5206\u914d\u5230\u961f\u5217<code>\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e\u3002</code></p> <p>We assign the REAR pointer to the location containing the most recent element that was added to the queue. \u6211\u4eec\u5c06 <code>REAR \u6307\u9488</code>\u5206\u914d\u7ed9\u5305\u542b\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684<code>\u6700\u65b0\u5143\u7d20\u7684\u4f4d\u7f6e\u3002</code></p> <p>Let\u2019s use <code>R3 as our FRONT pointer</code>and <code>R4 as our REAR pointer.</code>\u8ba9\u6211\u4eec\u4f7f\u7528 R3 \u4f5c\u4e3a FRONT \u6307\u9488\uff0cR4 \u4f5c\u4e3a REAR \u6307\u9488\u3002</p> <p>Figure 8.25a shows a queue in which five values were entered into the queue. Since FRONT = x8001, <code>the values 45 in memory location x8000 and 17 in x8001 must have been removed</code>, and the front element of the queue is 23, the value contained in x8002.</p> <p>Front \u6307\u9488\u5728\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5b58\u50a8\u5728Front\u6307\u9488\u6240\u5728\u5730\u5740\u4ee5\u53ca\u66f4\u5c0f\u7684\u5730\u5740\u7684\u503c\uff0c\u90fd\u5fc5\u987b\u88ab\u5220\u9664</p> <p>\u8bf7\u6ce8\u610f\uff0c\u503c 45 \u548c 17 \u4ecd\u7136\u5305\u542b\u5728\u5185\u5b58\u4f4d\u7f6e x8000 \u548c x8001 \u4e2d\uff0c\u5373\u4f7f\u5b83\u4eec\u5df2\u88ab\u5220\u9664\u3002\u5b58\u50a8\u5728\u5b58\u50a8\u4f4d\u7f6e\u4e2d\u7684\u5185\u5bb9\u4e0d\u4f1a\u88ab\u5220\u9664\u3002\u5185\u5b58\u4f4d\u7f6e\u7684\u5185\u5bb9\u88ab\u7b80\u5355\u5730\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d</p>"},{"location":"course/ICS/Data%20Structures/#841-the-basic-operationsremove-from-front-insert-at-rear","title":"8.4.1 The Basic Operations\uff1aremove from front ,insert at rear","text":"<ul> <li>\u8981\u7b26\u5408\u5148\u8fdb\u5148\u51fa\uff0c\u4ece\u5c3e\u5df4\u8fdb\uff0c\u4ece\u5934\u51fa</li> </ul> <p>Since FRONT points to the location just in front of the first element in the queue, we <code>remove</code> a value by <code>first incrementing FRONT</code> and then loading the value stored at that incremented address. \u7531\u4e8eFront\u6307\u9488\u6240\u5728\u4f4d\u7f6e\u7684value\u5df2\u7ecf\u88abremove\uff0c\u6240\u4ee5\u9700\u8981\u5148\u8fdb\u884cFront\u6307\u9488\u52a0\u4e00</p> <p>\u5047\u8bbe\u8981remove 23</p> <pre><code>ADD R3,R3,#1          ;R3\u8868\u793a\u662fFront\u6307\u9488\nLDR R0,R3,#0          ;\u5c06Front\u6307\u9488\u5bf9\u5e94\u7684value\u52a0\u8f7d\u5230R0\n</code></pre> <p>Since REAR = x8004, the last value to enter the queue is 74. The values in the queue in Figure 8.25b are 2 and 74. To insert another element (e.g., 10) at the back of the queue, the following code is executed:</p> <p>\u7531\u4e8eRear\u6307\u9488\u6240\u5728\u4f4d\u7f6e\u7684value\u5df2\u7ecfinsert\uff0c\u6240\u4ee5\u9700\u8981\u5148\u5c06Rear\u6307\u9488+1\uff0c\u518d\u5199\u5165\u5bf9\u5e94\u7684\u5185\u5b58</p> <p>\u5047\u8bbe\u8981\u63d2\u516510</p> <pre><code>ADD R4,R4,#1        ;R4\u8868\u793aRear\u6307\u9488\nSTR R0,R4,#0        ;\u5c06R0\u7684\u503c\u5199\u5230R4\uff08Rear\u6307\u9488\uff09\u5bf9\u5e94\u7684\u5185\u5b58\n</code></pre>"},{"location":"course/ICS/Data%20Structures/#842-wrap-around","title":"8.4.2 Wrap-Around","text":"<p>\u5f53\u6211\u4eec\u4ece\u961f\u5217\u4e2d\u5220\u9664\u4e00\u4e2a\u503c\u65f6\uff0c\u8be5\u4f4d\u7f6e\u53ef\u7528\u4e8e\u5b58\u50a8\u53e6\u4e00\u4e2a\u5143\u7d20\u3002\u6211\u4eec\u901a\u8fc7<code>\u5141\u8bb8\u53ef\u7528\u7684\u5b58\u50a8\u4f4d\u7f6e\u73af\u7ed5</code>\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u5411\u961f\u5217\u6dfb\u52a0 20 \u3002\u7531\u4e8e x8000 \u4e2d\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9\uff08\u4e4b\u524d\u5df2\u5220\u9664\u4e86 45\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728 x8000 \u4e2d\u5b58\u50a8 20\u3002</p> <ul> <li> <p>\u201cWrap-around\u201d works by having our removal and insertion algorithms test the contents of FRONT and REAR for the value x8005.</p> </li> <li> <p>If we wish to<code>insert</code>, and <code>REAR contains x8005, we know we have reached the end of our available storage</code> and we must see if x8000 is available.</p> </li> </ul> <p>REAR \u5305\u542b x8005\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5df2\u7ecf\u5230\u8fbe\u53ef\u7528\u5b58\u50a8\u7a7a\u95f4\u7684\u672b\u5c3e\uff0c\u5e76\u4e14\u6211\u4eec\u5fc5\u987b\u67e5\u770b x8000 \u662f\u5426\u53ef\u7528\u3002(\u8fd4\u56de\u5934\u90e8front\u68c0\u67e5\u662f\u5426\u6709\u4f4d\u7f6e)</p> <ul> <li>If we wish to <code>remove</code>, we must first see if FRONT contains the address x8005. </li> </ul> <p>\u5982\u679c\u6211\u4eec\u60f3\u5220\u9664\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u67e5\u770bFRONT\u662f\u5426\u5305\u542b\u5730\u5740x8005</p> <pre><code>;remove\nLD   R2,LAST\nADD  R2,R3,R2          ;\u8ba1\u7b97R3-x8005,\nBRnp SKIP_1            ;\u53ea\u8981R2\u4e0d\u4e3a0\uff0c\u5373Front\u6307\u9488\u4e0d\u5728x8005\uff0c\u5373\u6b64\u65f6\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u8df3\u8f6c\u5230SKIP_1,\u5148\u6267\u884cFront\u6307\u9488\u52a01\uff0c\u5728Front\u6307\u9488\u6240\u5728\u5730\u5740\u7684\u6570\u636e\u52a0\u8f7d\u5230R0\nLD   R3,FIRST          ;\u5f53\u53d1\u73b0Front\u6307\u9488\u5df2\u7ecf\u4f4d\u4e8ex8005\u65f6\uff0c\u5229\u7528\u73af\u7ed5wrap-around\u7684\u6027\u8d28\uff0c\u5c06Front\u6307\u9488\u79fb\u56de\u5230x8000\uff0c\u540e\u7eed\u662f\u5c06\u5f53\u524d\u4f4d\u7f6e\u7684\u6570\u636e\u53d6\u51fa\uff0c\u4e0d\u8fdb\u884cFront\u6307\u9488\u52a01\u64cd\u4f5c\nBR   SKIP_2\nSKIP_1 ADD R3,R3,#1\nSKIP_2 LDR R0,R3,#0\nRET\nLAST    .FILL x7FFB   ;LAST contains the negative of 8005,\u53ea\u8981\u7528\u4e8e\u770b\u5934\u6307\u9488\u662f\u5426\u5728x8005\nFIRST   .FILL x8000   ;\n</code></pre> <pre><code>;insert\nLD   R2,LAST\nADD  R2,R4,R2            ;\u8ba1\u7b97R4-x8005\uff0c\u5224\u65adR4\u662f\u5426\u5df2\u7ecf\u5230\u672b\u5c3e\nBRnp SKIP_1              ;\u53ea\u8981R2\u4e0d\u4e3a0\uff0c\u5373\u6b64\u65f6Rear\u6307\u9488\u4e0d\u5728x8005\uff0c\u961f\u5217\u8fd8\u5b58\u5728\u7a7a\u95f4\uff0c\u5c31\u8df3\u8f6c\u5230SKIP_1,\u5148\u8fdb\u884cRear\u6307\u9488+1\uff0c\u518d\u5c06R0\u7684\u6570\u636e\u5199\u5165\u5230Rear\u6307\u9488\u5bf9\u5e94\u7684\u5185\u5b58\u4e2d\nLD   R4,FIRST            ;\u5f53R2\u4e3a0\u65f6\uff0c\u6b64\u65f6Rear\u6307\u9488\u5728\u6700\u540e\uff0c\u5c31\u8df3\u8f6c\u5230\u5f00\u5934x8005\nBR   SKIP_2              ;\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230SKIP_2,\u53ea\u8fdb\u884c\u6570\u636e\u7684\u5199\u5165\u64cd\u4f5c\nSKIP_1  ADD R4,R4,#1\nSKIP_2  STR R0,R4,#0\nRET\nLAST    .FILL x7FFB     ;LAST contains the negative of 8005\nFIRST   .FILL x8000\n</code></pre>"},{"location":"course/ICS/Data%20Structures/#843-how-many-element-can-we-store-in-a-queue","title":"8.4.3 How Many Element Can We Store in a Queue?","text":"<p>\u5728\u56fe\uff08d\uff09 There are four values in the queue: 2, 74, 10, and 20.\u8fd9\u662f\u56e0\u4e3a\uff0cRear\u6307\u9488\u5df2\u7ecf\u5230\u8fbe\u8fc7x8005\uff0c\u540e\u7eed\u56de\u5230\u4e86x8000\uff0c\u5e76\u4e14\u8f93\u5165\u4fdd\u5b58\u4e8620</p> <ul> <li>Suppose we insert 30 and 40 at the rear of the queue, producing Figure 8.25e.   Both R3 and R4 contain the same address (x8002), and the <code>queue is full</code>. </li> <li>Now suppose we start removing elements from the front of the queue. If we remove   2, which is at the front of the queue, R3 will contain the address x8003. If we   remove the remaining five elements in the queue, we will have what is shown in   Figure 8.25f. Note that the FRONT and REAR pointers for e and f are identi- cal, </li> <li><code>Figure 8.25e describes a full queue and Figure 8.25f describes an empty queue!</code></li> </ul> <p>\u6b64\u65f6\uff0c\u5f53Front\u6307\u9488\u548cRear\u6307\u9488\u6240\u5728\u5730\u5740\u76f8\u540c\u65f6\uff0c\u961f\u5217\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u65e2\u53ef\u80fd\u662f\u6ee1\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u7a7a\u7684\u3002\u4e3a\u4e86\u9632\u6b62\u8be5\u4e0d\u786e\u5b9a\u6027\u7684\u53d1\u751f\uff0c\u5bf9\u4e8e\u5206\u914d\u4e86n\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4\uff0c\u5f53\u961f\u5217\u4e2d\u6709n - 1\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u4fbf\u58f0\u660e\u961f\u5217\u5df2\u6ee1</p> <p></p> <p>\u5047\u8bbe\u6211\u4eec\u63d2\u516530\uff0c\u5c31\u4f1a\u5f97\u52308.26\u7684\uff08a\uff09\uff0c\u6b64\u65f6\u961f\u5217\u4e2d\u5df2\u7ecf\u6709\u4e94\u4e2a\u5143\u7d20\uff0c\u8bf4\u660e\u6b64\u65f6\u961f\u5217\u5df2\u7ecf\u6ee1\u4e86</p> <p>\u63a5\u7740\u5f00\u59cbremove\u5143\u7d20\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff0c\u5982\u56fe8.26\uff08b\uff09\u6240\u793a\uff0c\u6b64\u65f6Front = Rear</p> <p><code>\u5f53\u961f\u5217full\u65f6\uff0cFront = Rear + 1\uff1b\u5f53\u961f\u5217\u4e3aempty\u65f6\uff0cFront = Rear</code></p>"},{"location":"course/ICS/Data%20Structures/#844-teat-for-underflowoverflow","title":"8.4.4 Teat for Underflow\uff0cOverflow","text":"<ul> <li>If the queue is empty and we try to remove an element, we have an underflow condition. </li> <li>If the queue is full and we try to insert an element, we have an overflow condition.</li> </ul> <p>\u5982\u679c\u961f\u5217\u4e3a\u7a7a\u5e76\u4e14\u6211\u4eec\u5c1d\u8bd5\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u4f1a\u51fa\u73b0\u4e0b\u6ea2\u60c5\u51b5\u3002\u5982\u679c\u961f\u5217\u5df2\u6ee1\u5e76\u4e14\u6211\u4eec\u5c1d\u8bd5\u63d2\u5165\u5143\u7d20\uff0c\u5219\u4f1a\u51fa\u73b0\u6ea2\u51fa\u60c5\u51b5\u3002</p> <p>\u6211\u4eec\u9996\u5148\u68c0\u67e5\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u5373 R3 = R4 \u662f\u5426\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u5206\u652f\u5230 UNDERFLOW\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c06 R5 \u8bbe\u7f6e\u4e3a\u6545\u969c\uff0c\u6062\u590d R1\uff0c\u7136\u540e\u8fd4\u56de\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219\u6267\u884c\u4ee3\u7801\u4ee5\u5220\u9664\u961f\u5217\u7684\u524d\u9762\u3002\u6ea2\u51fa\u6d4b\u8bd5\u7c7b\u4f3c\u3002\u8981\u5c06\u5143\u7d20\u63d2\u5165\u961f\u5217\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u9996\u5148\u9012\u589e REAR \u6307\u9488\u3002\u5982\u679c\u8fd9\u5bfc\u81f4 FRONT = REAR\uff0c\u5219\u961f\u5217\u5df2\u5305\u542b n-1 \u4e2a\u5143\u7d20\uff0c\u8fd9\u610f\u5473\u7740\u961f\u5217\u5df2\u6ee1\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u63d2\u5165\u66f4\u591a\u5143\u7d20\u3002\u6211\u4eec\u9012\u51cf REAR \u6307\u9488\uff0c\u5c06 R5 \u8bbe\u7f6e\u4e3a 1\uff0c\u7136\u540e\u8fd4\u56de\u3002</p> <p>R5 = 0 \u8868\u793a\u6210\u529f\uff0cR5 = 1 \u8868\u793a\u5931\u8d25</p> <p>\u5173\u4e8e\u63d2\u5165\uff0c\u6211\u4eec\u9996\u5148\u5fc5\u987b\u786e\u4fdd\u961f\u5217\u672a\u6ee1\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9012\u589e REAR \u6307\u9488 (R4)\uff0c\u7136\u540e\u6d4b\u8bd5 REAR=FRONT\u3002<code>\u5982\u679c REAR \u6307\u9488\u6700\u521d\u662f x8005\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u5176\u8bbe\u7f6e\u4e3a x8000 \u6765\u589e\u52a0 REAR\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u73af\u7ed5\u3002</code>\u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u6211\u4eec\u9700\u8981\u5c06 REAR \u8bbe\u7f6e\u56de\u5176\u539f\u59cb\u503c\uff0c\u7136\u540e\u8fd4\u56de\uff0c\u62a5\u544a\u5931\u8d25\uff08R5 = 1\uff09\u3002\u5982\u679c\u961f\u5217\u672a\u6ee1\uff0c\u6211\u4eec\u5c06\u5e0c\u671b\u63d2\u5165\u7684\u9879\u76ee\uff08\u4f4d\u4e8e R0 \u4e2d\uff09\u5b58\u50a8\u5728 REAR \u4e2d\uff0c\u7136\u540e\u8fd4\u56de\uff0c\u62a5\u544a\u6210\u529f (R5 = 0)\u3002</p> <p>\u5173\u4e8e\u5220\u9664\uff0c\u6211\u4eec\u9996\u5148\u901a\u8fc7\u6d4b\u8bd5\u662f\u5426 REAR=FRONT \u6765\u786e\u4fdd\u961f\u5217\u4e0d\u4e3a\u7a7a(\u65e0\u9700\u6307\u9488\u52a01\u64cd\u4f5c)\u3002\u5982\u679c REAR=FRONT\uff0c\u5219\u961f\u5217\u4e3a\u7a7a\uff0c\u56e0\u6b64\u6211\u4eec\u8fd4\u56de\u5e76\u62a5\u544a\u5931\u8d25\u3002\u5982\u679c REAR \u4e0e FRONT \u4e0d\u540c\uff0c\u5219\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u524d\u9762\u7684\u5143\u7d20\u3002\u4e3a\u6b64\uff0c<code>\u6211\u4eec\u9996\u5148\u6d4b\u8bd5 FRONT=x8005 \u662f\u5426\u3002\u5982\u679c\u662f\uff0c\u6211\u4eec\u8bbe\u7f6e FRONT=x8000\u3002\u5982\u679c\u4e0d\u662f\uff0c\u6211\u4eec\u589e\u52a0 FRONT\u3002</code>\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u4f1a\u5c06\u8be5\u5185\u5b58\u4f4d\u7f6e\u4e2d\u7684\u503c\u52a0\u8f7d\u5230 R0 \u4e2d\uff0c\u7136\u540e\u8fd4\u56de\uff0c\u62a5\u544a\u6210\u529f\u3002</p> <pre><code>;Input:R0 for item to be inserted.R3 is Front,R4 is Rear\n;Output:R0 for item to be removed\nINSERT  ST      R1,SaveR1   ;\u64cd\u4f5c\u4e4b\u524d\u4e8b\u5148\u8fdb\u884c\u4fdd\u5b58\n        AND     R5,R5,#0    ;R5\u7684\u521d\u59cb\u5316\n        LD      R1,NEG_LAST ;R1\u4fdd\u5b58-x8005\uff0c\u76ee\u7684\u662f\u68c0\u67e5Rear\u6307\u9488\u662f\u5426\u4f4d\u4e8ex8005\n        ADD     R1,R1,R4    ;\n        BRnp    SKIP1       ;\u8df3\u8fc7wrap around\n        LD      R4,FIRST    ;\u8fd4\u56de\u8d77\u70b9x8000\n        BR      SKIP2       ;\u4e0d\u9700\u8981\u8fdb\u884cRear\u6307\u9488+1\nSKIP1   ADD     R4,R4,#1    ;Rear\u6307\u9488+1\nSKIP2   NOT     R1,R4\n        ADD     R1,R1,#1    ;R1\u6b64\u65f6\u8868\u793a-Rear\n        ADD     R1,R1,R3    ;R1 = Front - Rear,\u5728Rear\u6307\u9488+1\u4e4b\u540e\uff0c\u5224\u65adRear\u548cFront\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u5219\u961f\u5217\u5df2\u6ee1\n        BRz     FULL        ;\u82e5\u961f\u5217\u5df2\u6ee1\uff0c\u5219Rear\u6307\u9488\u56de\u9000\uff0c\u5206Rear\u6307\u9488\u662f\u5426\u5728x8000\u8fdb\u884c\u8003\u8651\n        STR     R0,R4,#0    ;\u4e0d\u76f8\u7b49\u60c5\u51b5\uff0c\u5728Rear\u6307\u9488\u5bf9\u5e94\u7684\u5185\u5b58\u5199\u5165R0\n        BR      DONE        ;\u8df3\u8f6c\u5230\u7ed3\u675f\nFULL    LD      R1,NEG_FIRST;R1 = -x8000,\u5224\u65adR4\u662f\u5426\u5728x8000\u4f4d\u7f6e\n        ADD     R1,R1,R4    ;R1 = Rear - x8000\n        BRnp    SKIP3       ;\u5982\u679c\u4e0d\u5728\uff0c\u5c31\u8fdb\u884c\u7b80\u5355\u7684\u56de\u9000\u64cd\u4f5c\uff0c\u5e76\u4e14\u5728R5\u4e2d\u5199\u51651\uff0c\u8868\u793a\u5931\u8d25\n        LD      R4,LAST     ;\u5982\u679cRear\u6307\u9488\u5728x8000\uff0c\u8bf4\u660e\u539f\u5148Rear\u6307\u9488\u5728x8005\uff0c\u9000\u56de\u539f\u6837\n        BR      SKIP4\nSKIP3   ADD     R4,R4,#-1\nSKIP4   ADD     R5,R5,#1\n        BR      DONE\nREMOVE  ST      R1,SaveR1   ;\u64cd\u4f5c\u4e4b\u524d\uff0c\u4e8b\u5148\u4fdd\u5b58R1,\u5728\u7ed3\u675f\u65f6\uff0c\u6062\u590d\n        AND     R5,R5,#0\n        NOT     R1,R4\n        ADD     R1,R4,#1    ;\u5f97\u5230R1 = -Rear\n        ADD     R1,R1,R3    ;R1 = Front - Rear\uff0c\u7528\u4e8e\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\n        BRz     EMPTY       ;\u82e5Front = Rear\uff0c\u5219\u8bf4\u660e\uff0c\u961f\u5217\u4e3a\u7a7a\uff0c\u8df3\u8f6c\u5230EMPTY\u64cd\u4f5c\n        LD      R1,NEG_LAST ;\u7528\u4e8e\u5224\u65adFront\u6307\u9488\u662f\u5426\u4e3ax8005\n        ADD     R1,R1,R3    ;R1 = Front - x8005\n        BRnp    SKIP5       ;\u82e5Front\u6307\u9488\u4e0d\u5728x8005\uff0c\u53ea\u9700Front\u6307\u9488\u52a0\u4e00\uff0c\u518d\u628a\u5f53\u524dFront\u6307\u9488\u6240\u5728\u5730\u5740\u7684\u6570\u636e\u52a0\u8f7d\u5230R0\n        LD      R3,FIRST    ;\u82e5FROnt\u6307\u9488\u5728x8005\uff0c\u9996\u5148\u5f97\u4f7fFront\u6307\u9488\u4f4d\u4e8ex8000\uff0c\u518d\u628ax8000\u7684\u6570\u636e\u52a0\u8f7d\u5230R0\n        BR      SKIP6\nSKIP5   ADD     R3,R3,#1    ;Front\u6307\u9488+1\nSKIP6   LDR     R0,R3,#0    ;\u8bfb\u6570\u636e\n        BR      DONE\nEMPTY   ADD     R5,R5,#-1   ;\u7531\u4e8e\u6ca1\u6709\u5b9e\u73b0Front\u6307\u9488\u52a01\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ea\u8981\u4f7fR5=1\u5c31\u53ef\u4ee5\u8868\u793aremove\u5931\u8d25\nDONE    LD      R1\uff0cSaveR1  ;\u6062\u590dR1\u5bc4\u5b58\u5668\n        RET                 ;\u8fd4\u56de\u79bb\u5f00\u5b50\u4f8b\u7a0b\nFIRST   .FILL   x8000\nNEG_FIRST.FILL  x8000\nLAST    .FILL   x8005\nNEG_LAST.FILL   x7FFB\nSaveR1  .BLKW   1\n</code></pre>"},{"location":"course/ICS/Digital%20Logic%20Structure/","title":"Chapter3 | DIgital Logic Structure","text":""},{"location":"course/ICS/Digital%20Logic%20Structure/#31-the-transistor","title":"3.1 The Transistor","text":"<ul> <li>Most computers today or rather most microprocessors (which form the core of the computer) are constructed out of MOS transistors. MOS stands for metal-oxide semiconductor.</li> </ul> <p>\u5f53\u4eca\u5927\u591a\u6570\u8ba1\u7b97\u673a\uff0c\u6216\u8005\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u5927\u591a\u6570\u5fae\u5904\u7406\u5668\uff08\u6784\u6210\u8ba1\u7b97\u673a\u7684\u6838\u5fc3\uff09\u90fd\u662f\u7531 MOS \u6676\u4f53\u7ba1\u6784\u6210\u7684\u3002 MOS \u4ee3\u8868\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53\u3002</p> <ul> <li> <p>there are two types of MOS transistors: P-type   and N-type. </p> </li> <li> <p>we could use an N-type or a P-type MOS transistor   to make or break the closed circuit\u3002</p> </li> </ul> <p>**\u53ef\u4ee5\u4f7f\u7528P\u578b\u6216N\u578bMOS\u6676\u4f53\u7ba1\u6765\u63a5\u901a\u6216\u65ad\u5f00\u95ed\u5408\u7535\u8def **</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#311-n-type-transistor","title":"3.1.1 N-type transistor","text":"<p>\uff08a\uff09itself             \uff08b\uff09in a circuit</p> <ul> <li> <p>The transistor has three terminals\u3002They are called <code>the gate(\u6805\u6781)\uff0cthe source\uff08\u6e90\u6781\uff09 \uff0cand the drain\uff08\u6f0f\u6781\uff09</code></p> </li> <li> <p>if the gate of the N-type transistor is supplied with 1.2 volts, the connection from source to drain acts like a piece of wire. </p> </li> <li>\u6b64\u65f6we have a <code>short circuit</code> between the source and drain</li> <li>if the gate of N-type transistor is supplied with 0 volts , the connection between the source and drain is <code>broken</code>.</li> <li> <p>\u6b64\u65f6we have an <code>open circuit</code> between the source and drain.</p> </li> <li> <p>in graph(b),</p> </li> <li>Figure 3.2 shows the N-type transistor in a circuit with a battery and a bulb. When the gate is supplied with 1.2 volts, the transistor acts like a piece of wire, completing the circuit and causing the bulb to glow. When the gate is supplied with 0 volts, the transistor acts like an open circuit, breaking the circuit, and causing the bulb to not glow.</li> </ul> <p>\u5f53\u95e8\u88ab\u63d0\u4f9b1.2V\u7535\u538b\u65f6\uff0c\u7535\u8def\u63a5\u901a\uff0cshort circuit , \u706f\u6ce1\u53d1\u5149</p> <p>\u5f53\u95e8\u88ab\u63d0\u4f9b0 V\u7535\u538b\u65f6\uff0c\u7535\u8def\u65ad\u5f00\uff0copen circuit\uff0c\u706f\u6ce1\u4e0d\u53d1\u5149</p> <p>\u9ad8\u7535\u538b\u63a5\u901a\uff0c\u4f4e\u7535\u538b\u65ad\u5f00</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#312-p-type-transistor","title":"3.1.2 P-type transistor","text":"<ul> <li> <p><code>\u6548\u679c\u4e0eN-type transistor \u76f8\u53cd\uff0c\u6240\u4ee5\u591a\u4e86\u4e00\u4e2a\u7a7a\u5fc3\u5706\u70b9</code></p> </li> <li> <p>When the gate is supplied with 0 volts, the P-type transistor acts (more or less) like a piece of wire, closing the circuit. When the gate is supplied with 1.2 volts,   the P-type transistor acts like an open circuit\u3002</p> </li> </ul> <p>\u5f53\u95e8\u88ab\u63d0\u4f9b0 V\u7535\u538b\u65f6\uff0c\u6676\u4f53\u7ba1\u63a5\u901a\uff0c\u7535\u8def\u63a5\u901a\uff0c\u706f\u6ce1\u53d1\u5149</p> <p>\u5f53\u95e8\u88ab\u63d0\u4f9b1.2V\u7535\u538b\u65f6\uff0c\u6676\u4f53\u7ba1\u65ad\u5f00\uff0c\u7535\u8def\u65ad\u5f00\uff0c\u706f\u6ce1\u4e0d\u53d1\u5149</p> <p>\u4f4e\u7535\u538b\u63a5\u901a\uff0c\u9ad8\u7535\u538b\u65ad\u5f00</p> <p>\u5f53\u7535\u8def\u540c\u65f6\u5177\u6709P-type\u548cN-type transistor \u65f6\uff0c\u6211\u4eec\u5c06\u8be5\u7535\u8def\u6210\u4e3aCMOS\uff0ccomplementary metal-oxide semiconductor</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#32-logic-gates","title":"3.2 Logic Gates","text":""},{"location":"course/ICS/Digital%20Logic%20Structure/#321-the-not-gateinverter","title":"3.2.1 The NOT Gate\uff08inverter\uff09\u975e\u95e8","text":"<ul> <li>It is constructed from two MOS transistors, one P-type and one N-type. </li> </ul> <p><code>\u7531\u4e00\u4e2aP-type\u548c\u4e00\u4e2aN-type transistor\u6784\u6210</code></p> <p></p> <ul> <li> <p>figure (a) is the schematic representation of that circuit(\u7535\u8def\u7684\u793a\u610f\u56fe)</p> </li> <li> <p>if the input is supplied with 0 volts. Note that the P-type transistor acts like a short circuit and the N-type transistor acts like an open circuit. The output is, therefore, connected to 1.2 volts</p> </li> </ul> <p>\u5f53\u8f93\u5165\u7535\u538b\u4e3a 0 V\u65f6\uff0cP-type transistor \u63a5\u901a\uff0cN-type transistor \u65ad\u5f00\uff0c\u8f93\u51fa\u7535\u538b\u4e3a1.2V</p> <ul> <li>if the input is supplied with 1.2 volts, the P-type transistor acts like an open circuit, but the N-type transistor acts like a short circuit. The output in this case is connected to ground (i.e.,0 volts\uff09</li> </ul> <p>\u5f53\u8f93\u5165\u7535\u538b\u4e3a1.2V\u65f6\uff0cN-type transistor \u63a5\u901a\uff0c\u5bfc\u81f4\u63a5\u5730\uff0c\u8f93\u51fa\u7535\u538b\u4e3a0V</p> <ul> <li>\u5c06 0 Volts \u6362\u6210 symbol 0 \uff0c\u5c061.2 Volts \u6362\u6210 symbol 1\uff0c\u4fbf\u53ef\u4ee5\u5f97\u5230figure\uff08d\uff09</li> </ul> <p>\u6676\u4f53\u7ba1\u4e0d\u80fd\u5012\u7740\u4f7f\u7528\uff0c\uff08\u5373Drain\u548cSource\u7684\u4f4d\u7f6e\u4e0d\u80fd\u53d8\uff0c\u5bf9\u4e8eN-type transistor\uff0c\u4ece\u4e0b\u5f80\u4e0a\u6d41\uff0c\u5bf9\u4e8eP-type transistor transistor\uff0c\u4ece\u4e0a\u5f80\u4e0b\u6d41\uff09\u3002</p> <p>\u4e00\u822c\u5728\u4e0a\u65b9\u7684\u6676\u4f53\u7ba1\u662fP-type transistor\uff0c\u5728\u4e0b\u65b9\u7684\u6676\u4f53\u7ba1\u662fN-type transistor</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#322-or-and-nor-gates","title":"3.2.2 OR and NOR Gates","text":"<ol> <li>NOR Gate \u6216\u975e\u95e8</li> </ol> <ul> <li> <p><code>The NOT Gate  contains two P-type and two N-type transistors.</code></p> </li> <li> <p>if A is supplied with 0 volts and B is supplied with 1.2 volts. In this case, the lower of the two P-type transistors produces an open circuit, and the output C is disconnected from the 1.2-volt power supply. However, the leftmost N-type transistor acts like a piece of wire, connecting the output C to 0 volts.</p> </li> </ul> <p>\u5f53A\u8f93\u51650V\u7535\u538b\uff0cB\u8f93\u51651.2V\u7535\u538b\uff0c\u4e0b\u65b9\u7684P-type transistor \u65ad\u5f00\uff0c\u5de6\u4fa7\u7684N-type transistor \u8fde\u901a\uff0c\u53f3\u4fa7\u7684N-type transistor \u65ad\u5f00\uff0c\u7531\u4e8e\u5de6\u4fa7N \u6676\u4f53\u7ba1\u63a5\u5730\uff0c\u6240\u4ee5\u8f93\u51fa\u7535\u538b\u4e3a0V</p> <ul> <li>Note that if both A and B are supplied with 0 volts, the two P-type transistors conduct, and the output C is connected to 1.2 volts. Note further that there is no ambiguity here, since both N-type transistors act as open circuits, and so C is disconnected from ground.</li> </ul> <p>\u5982\u679cA\uff0cB\u8f93\u5165\u7684\u7535\u538b\u90fd\u662f0V\uff0c\u90a3\u4e48\u4e24\u4e2aP-type transistor\u90fd\u63a5\u901a\uff0cN-type transistor \u90fd\u4e0d\u63a5\u901a\uff0c\u5373\u4e0d\u63a5\u5730\u3002\u6240\u4ee5\u8f93\u51fa\u7535\u538b\u662f1.2V</p> <ul> <li>If either A or B is supplied with 1.2 volts, the corresponding P-type transistor results in an open circuit. That is sufficient to break the connection from C to the 1.2-volt source. However, 1.2 volts supplied to the gate of one of the N-type transistors is sufficient to cause that transistor to conduct, resulting in C being connected to ground (i.e., 0 volts).</li> </ul> <p>\u5982\u679cA\uff0cB\u8f93\u5165\u7684\u7535\u538b\u90fd\u662f1.2V\uff0cP-type transistor \u90fd\u4e0d\u63a5\u901a\uff0cN-type transistor \u90fd\u63a5\u901a\uff0c\u5bfc\u81f4C\u63a5\u5730\uff0c\u8f93\u51fa\u7535\u538b\u4e3a0V</p> A B C 0 0 1 0 1 0 1 0 0 1 1 0 <p>\u89c2\u5bdf\u56fe\u8868\uff0c\u4f1a\u53d1\u73b0\u53ea\u8981\u67091.2V\u7684\u5b58\u5728\uff0c\u5c31\u4f1a\u5bfc\u81f4C\u8f93\u51fa\u7aef\u7684\u7535\u538b\u4e3a0</p> <p><code>\u539f\u56e0\u5728\u4e8e\uff0c\u53ea\u8981\u67091.2V\u7684\u8f93\u5165\u7535\u538b\u5b58\u5728\uff0cN-type transistor\u5c31\u4f1a\u8fde\u901a\uff0c\u7ee7\u800c\u5bfc\u81f4C\u63a5\u5730\uff0c\u8f93\u51fa\u7535\u538b\u4e3a0V</code></p> <ol> <li>OR Gate \u975e\u95e8</li> </ol> <p></p> <ul> <li><code>\u6216\u95e8OR\u662f\u5728\u6216\u975e\u95e8NOR\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u4e00\u4e2a\u975e\u95e8\u5f97\u5230\uff0c\u5728\u539f\u5148C\u4f5c\u4e3aNOR\u95e8\u7684\u8f93\u51fa\u7aef\u57fa\u7840\u4e0a\uff0c\u5c06C\u4f5c\u4e3a\u975e\u95e8\u7684\u8f93\u5165\u7aef\uff0cD\u4f5c\u4e3a\u975e\u95e8\u7684\u8f93\u51fa\u7aef\u5f97\u5230\u6700\u7ec8\u7ed3\u679c</code></li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#323-and-and-nand-gate","title":"3.2.3 AND and NAND Gate","text":"<ul> <li>\u4e0b\u65b9\u7684\u4e24\u4e2a\u5747\u4e3aN-type transistor\uff0c\u4e0a\u65b9\u5de6\u53f3\u4e24\u4e2a\u6676\u4f53\u7ba1\u5747\u4e3aP-typetransistor</li> <li>\u5f53A\uff0cB\u8f93\u5165\u7535\u538b\u5747\u4e3a1.2V\u65f6\uff0c\u4e0b\u65b9\u4e24\u4e2a\u6676\u4f53\u7ba1\u90fd\u8fde\u901a\uff0c\u5bfc\u81f4C\u63a5\u5730\uff0c\u6700\u7ec8C\u7684\u8f93\u51fa\u7535\u538b\u4e3a0V\uff0c\u540e\u7eed\u5728NOT gate\u975e\u95e8\u7684\u4f5c\u7528\u4e0b\uff0cD\u7684\u8f93\u51fa\u7535\u538b\u4e3a1.2V</li> <li>\u540e\u7eed\uff0c\u53ea\u8981A\uff0cB\u4e2d\u6709\u4e00\u4e2a\u8f93\u5165\u7535\u538b\u4e3a0V\uff0c\u4e0a\u65b9\u7684\u4e24\u4e2aP-type transistor\u81f3\u5c11\u6709\u4e00\u4e2a\u4f1a\u63a5\u901a\uff0c\u53c8\u56e0\u4e3a\u8fd9\u662f\u5e76\u8054\u7535\u8def\uff0c\u6240\u4ee5C\u5904\u7684\u8f93\u51fa\u7535\u538b\u59cb\u7ec8\u4e3a1.2V\uff0c\u5728Not gate \u975e\u95e8\u7684\u4f5c\u7528\u4e0b\uff0cD\u5904\u7684\u8f93\u51fa\u7535\u538b\u53d8\u4e3a0V</li> </ul> <p><code>\u60ca\u5929\u53d1\u73b0\uff1a\u63a5\u5730\u90fd\u662fN-type transistor</code></p> <p></p> <p>\u53ef\u4ee5\u7528\u4ee5\u4e0a\u7b26\u53f7\u8868\u793a\u903b\u8f91\u95e8</p> <p>\u5bf9\u4e8e\u7a7a\u5fc3\u5706\u5708\u8868\u793a\u53d6\u53cd\uff0c<code>\u4e5f\u53ef\u4ee5\u5728\u903b\u8f91\u95e8\u8f93\u5165\u7aef\u53e3\u52a0\u4e0a\u7a7a\u5fc3\u5706\u5708\u8868\u793a\u5bf9\u8f93\u5165\u505a\u53d6\u53cd\u64cd\u4f5c</code></p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#324-gates-with-more-than-two-inputs","title":"3.2.4 Gates with more than two inputs","text":"<p>n-input AND gate</p> <ul> <li>An n-input AND gate has an output value of 1 only if ALL n input variables have values of 1.</li> <li>If any of the n inputs has a value of 0, the output of the n-input AND gate is 0.</li> <li><code>\u5168\u4e3a1\uff0c\u901a\u8fc7AND gate \u624d\u80fd\u5f97\u52301</code>.</li> </ul> <p>n-input OR gate</p> <ul> <li> <p>An n-input OR gate has an output value of 1 if ANY of the n input variables has a value of 1. </p> </li> <li> <p>an n-input OR gate has an output value of 0 only if ALL n   input variables have values of 0.</p> </li> <li><code>\u5168\u4e3a0\uff0c\u901a\u8fc7OR gate \u624d\u80fd\u5f97\u52300</code></li> </ul> <p></p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#33-combinational-logic-circuit","title":"3.3 Combinational Logic circuit(\u7ec4\u5408\u903b\u8f91\u7535\u8def)","text":""},{"location":"course/ICS/Digital%20Logic%20Structure/#331-decoder","title":"3.3.1 decoder\uff08\u8bd1\u7801\u5668\uff09","text":"<ul> <li>A decoder has the property that exactly one of its outputs is 1 and all the rest are 0s</li> </ul> <p><code>\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u7ed3\u679c\u662f1\uff0c\u5176\u4f59\u5747\u4e3a0\uff0c\u5229\u7528\u7684\u662fAND\u95e8\u7684\u6027\u8d28\uff0c\u5f53\u4e14\u4ec5\u5f53\u8f93\u5165\u6570\u5168\u90e8\u90fd\u662f1\u65f6\uff0c\u8f93\u51fa\u7ed3\u679c\u624d\u4e3a1</code></p> <ul> <li> <p>Decodes have n inputs and \\(2^n\\)outputs.\u5f53\u8f93\u5165\u7684\u6570\u6709n\u4e2a\u65f6\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u6709\\(2^n\\)\u4e2a\uff0c\u6839\u636e\u6392\u5217\u7ec4\u5408\uff0c\u6bcf\u4e2a\u8f93\u5165\u7684\u6570\u90fd\u6709\u4e24\u79cd\u53ef\u80fd</p> </li> <li> <p>The decoder is useful in determining how to interpret a bit pattern.</p> </li> <li> <p>\u5b9e\u9645\u4e0a\u5c31\u662f\u679a\u4e3e\u6240\u6709\u8f93\u5165\u7684\u7ec4\u5408\u60c5\u51b5\u3002</p> </li> <li> <ul> <li></li> </ul> </li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#332-muxmultiplexer","title":"3.3.2 Mux(multiplexer)\uff08\u591a\u8def\u9009\u62e9\u5668\uff09","text":"<p>The function of a mux is to select one of the inputs (A or B) and connect it to the output. The select signal (S in Figure 3.12) determines which input is connected to the output.</p> <p>\u591a\u8def\u590d\u7528\u5668\u7684\u529f\u80fd\u662f\u9009\u62e9\u8f93\u5165\u4e4b\u4e00\uff08A \u6216 B\uff09\u5e76\u5c06\u5176\u8fde\u63a5\u5230\u8f93\u51fa\u3002\u9009\u62e9\u4fe1\u53f7\uff08\u56fe 3.12 \u4e2d\u7684 S\uff09\u51b3\u5b9a\u54ea\u4e2a\u8f93\u5165\u8fde\u63a5\u5230\u8f93\u51fa\uff0c\u5373\u54ea\u4e2a\u8f93\u5165\u51b3\u5b9a\u8f93\u51fa</p> <p>\u5982\u56fe3.12 \uff08b\uff09\u6240\u793a\uff0c\u5047\u8bbe\u8f93\u5165\u7684S=0\uff0cS\u548cB\u901a\u8fc7AND gate \u5f97\u5230output\u4e00\u5b9a\u662f0\u3002\u800c\u5de6\u4fa7\u7684\u8f93\u51fa\u7ed3\u679coutput\u548cA\u7684input value\u76f8\u540c\uff08\u539f\u56e0\u5728\u4e8e\uff0c\u7a7a\u5fc3\u5706\u5708\u8868\u793a\u53d6\u53cd\uff0c\u5bf9S\u53d6\u53cd\uff0c\u8f93\u5165\u7684\u6570\u662f1\uff09\u3002A\u548c0\u901a\u8fc7OR gate\uff0c\u53d6\u51b3\u4e8eA\u7684\u503c\uff0c\u5f53A value\u662f1\uff0c\u90a3\u4e48C\u5904\u7684output = 1\uff0c\u5f53A value= 0\uff0c\u90a3\u4e48C\u5904\u7684output = 0.\u56e0\u6b64C\u5904\u7684\u8f93\u51fa\u7ed3\u679c\u548cA\u7684\u503c\u76f8\u540c\u3002</p> <p>\u5047\u8bbe\u8f93\u5165\u7684S\u662f1\uff0c\u82e5B\u5904\u7684input = 1\uff0c\u5219B\u548cS\u7ecf\u8fc7AND gate \u4f5c\u7528\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f1\uff0c\u518d\u7ecf\u8fc7\u6700\u540e\u7684OR gate\uff0cC\u5904\u7684output\u4e00\u5b9a\u4e3a1\uff0c\u548cB\u7684\u8f93\u5165\u503c\u76f8\u540c\u3002\u82e5B\u7684input = 0\uff0cB\u548cS\u7ecf\u8fc7AND gate\u5f97\u5230\u7ed3\u679c\u4e3a0\uff0cA\u548c\u53cdS\uff080\uff09\u7ecf\u8fc7AND gate \u5f97\u5230\u7ed3\u679c\u80af\u5b9a\u4e3a0\uff0c\u6240\u4ee5\u6700\u7ec80\u548c0 \u7ecf\u8fc7OR gate \u5f97\u5230\u7ed3\u679c\u4e3a0\uff0c\u548cB\u7684\u8f93\u5165\u503c\u76f8\u540c</p> <p><code>\u603b\u4e4b\uff0cC\u5904\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u7ecf\u8fc7S\u7684\u4f5c\u7528\uff0c\u8981\u4e48\u53d6\u51b3\u4e8eA\u7684input\uff0c\u8981\u4e48\u53d6\u51b3\u4e8eB\u7684input\uff0c</code></p> <p></p> <p>\u5bf9\u4e8e\u4e0a\u65b9\u7684figure 3.13\uff08a\uff09</p> <ul> <li>S[1:0] = 00, output\u53d6\u51b3\u4e8eA\uff0c\u56e0\u4e3a\u5176\u4f59\u5206\u652f\u7ecf\u8fc7AND gate \u540e\uff0c\u5168\u90e8\u53d8\u4e3a0</li> <li>S[1:0] = 01, output\u53d6\u51b3\u4e8eB</li> <li>\u4ee5\u6b64\u7c7b\u63a8 </li> </ul> <p><code>In general, a mux consists of 2^n inputs and n select lines.</code></p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#333-a-one-bit-adder","title":"3.3.3 A one-bit adder\uff08\u52a0\u6cd5\u5668\uff09","text":"<ul> <li> <p>\\(A_i,B_i\\)\u5206\u522b\u8868\u793a\u52a0\u6570\uff0c\\(C_i\\)\u8868\u793a\u524d\u4e00\u6b21\u8ba1\u7b97\u7684\u8fdb\u4f4d\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\\(S_i\u603b\u4f4d\u548c,C_{i+1}\u8fdb\u4f4d\\),</p> </li> <li> <p>if only one of the three bits equals 1,wo get a sum of 1,and no carry</p> </li> <li>if two of the three bits equals 1\uff0cwe get a sum of 0, and a carry of 1</li> <li>if all three bits equals 1,we get a sum of 1,and a carry of 1</li> </ul> <p></p> <p>\u89e3\u91ca\u4e00\u4e0b\uff0cadder\u52a0\u6cd5\u5668\u662f\u5bf9decoder\u548cMux\u7684\u5e94\u7528\u3002</p> <ul> <li>\u9996\u5148\uff0cDecoder\u7684\u4f5c\u7528\u662f\uff1a\uff08\u5f97\u5230\u8f93\u5165\u7ec4\u5408\uff09\u8f93\u5165\u7684\u662f\\(A_i,B_i,C_i\\),\u5bf9\u5e94\u7684\u6392\u5217\u7ec4\u5408\u67098\u79cd\uff0c\u5bf9\u5e948\u4e2aAND gates\u3002</li> <li>Mux\u4f5c\u7528\u662f\u5c06OR gate \u4e0e AND gate \u8fdb\u884c\u8fde\u63a5\uff0c\u4f5c\u7528\u7ed3\u679c\u53d6\u51b3\u4e8e\\(A_i,B_i,C_i\\),\u6b64\u5904\u5254\u9664\u4e86\u65e0\u5173\u7d27\u8981\u7684\u7535\u7ebf\uff0c\u4ec5\u5c06\u53ef\u80fd\u4ea7\u751f1\u7ed3\u679c\u7684\u7535\u7ebf\u4e0eOR gate \u8fdb\u884c\u8fde\u63a5</li> <li>eg\uff1a\u5bf9\u4e8e\u4ece\u4e0a\u5f80\u4e0b\u6570\u7b2c\u4e8c\u4e2aAND gate\uff0c\u8f93\u5165\u7684\u5206\u522b\u4e3a001\uff0c\u663e\u7136\u6ca1\u6709\u8fdb\u4f4dCarry\uff08\\(C_{i+1}\\)),\u4f46\u662f\u6709sum = 1\uff0c\u6240\u4ee5\u8fde\u63a5\u5230\\(S_i\\)\u5bf9\u5e94\u7684OR gate</li> </ul> <p></p> <p>If we wish to implement a logic circuit that adds two 16-bit numbers, we can do so with a circuit of 16 one-bit adders.</p> <ul> <li> <p>the rightmost circuit depends on only <code>two inputs($A_0,B_0$)</code>,it has been referred to as a half adder.</p> </li> <li> <p>the other circuits depends on <code>all three inputs($A_j,B_j,C_j$)</code>,they are refered to as a full adders</p> </li> <li> <p>half adder and full adder\u533a\u522b\u5728\u4e8ecarry\u4f4d\u662f\u5426\u786e\u5b9a</p> </li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#334-the-programmable-logic-arraypla","title":"3.3.4 The programmable logic array\uff08PLA\uff09\u53ef\u7f16\u7a0b\u903b\u8f91\u9635\u5217","text":"<p>It consists of an array of AND gates (called an AND array) followed by an array of OR gates (called an OR array). The number of AND gates corresponds to the number of input combinations (rows) in the truth table. \uff08AND\u95e8\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u8f93\u5165\u7ec4\u5408\u7684\u6570\u91cf\uff09</p> <ul> <li>For n-input logic functions\uff0cwo need a PLA with \\(2^n\\) n-input AND gates.</li> </ul> <p><code>\u56e0\u4e3a\uff0cn\u4e2a\u8f93\u5165\u6570\uff0c\u67092^n\u4e2a\u7ec4\u5408\u7ed3\u679c\uff0c\u9700\u89812^n\u4e2aAND gates</code></p> <ul> <li> <p>In Figure 3.17, we have 2^3 three-input AND gates, corresponding to three logical input variable</p> </li> <li> <p>The number of OR gates corresponds to the number of   logic functions we wish to implement, that is, the number of output columns in the truth table</p> </li> </ul> <p>\u6216\u95e8\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u6211\u4eec\u5e0c\u671b\u5b9e\u73b0\u5f97\u5230\u7684\u91cf\u7684\u6570\u91cf\uff0c\u5373\u771f\u503c\u8868\u4e2d\u8f93\u51fa\u5217\u7684\u6570\u91cf</p> <ul> <li>in figure 3.15\uff0cwo need sum and carry.So there are two OR gates.</li> </ul> <p>\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9 decoder \u7684\u7528\u6cd5\u7684\u4e00\u4e2a\u62bd\u8c61\uff0c\u5f62\u5f0f\u4e0a\u548c 1 \u4f4d\u52a0\u6cd5\u5668\u662f\u4e00\u81f4\u7684\uff0c\u53ea\u4e0d\u8fc7\u4f60\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6bcf\u4e00\u79cd\u679a\u4e3e\u60c5\u51b5\u5982\u4f55\u5f71\u54cd\u8f93\u51fa\u6765\u5b9e\u73b0\u201c\u7f16\u7a0b\u201d\u3002</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#335-logical-completeness","title":"3.3.5 Logical Completeness","text":"<p><code>We  say that the set of gates {AND, OR, NOT}is logically complete because we can build a circuit to carry out the specification of any truth table we wish without using any other kind of gate.</code></p> <ul> <li> <p>\u6211\u4eec\u8bf4\u95e8\u96c6\u5408{AND\u3001OR\u3001NOT}\u5728==\u903b\u8f91\u4e0a\u662f\u5b8c\u6574==\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u7535\u8def\u6765\u6267\u884c\u6211\u4eec\u5e0c\u671b\u7684\u4efb\u4f55\u771f\u503c\u8868\u7684\u89c4\u8303\uff0c\u800c\u65e0\u9700\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u7684\u95e8\u3002</p> </li> <li> <p>NAND \u4e5f\u662f\u903b\u8f91\u5b8c\u6574\u7684\uff0c\u5c1d\u8bd5\u7528NAND \u8868\u793aAND OR NOT</p> </li> </ul> <p>\u200b   NOT A = A NAND A</p> <p>\u200b   A AND B = NOT\uff08A NAND B\uff09 = (A NAND B) NAND (A NAND B)</p> <p>\u200b   A OR B = NOT(\uff08NOT A) AND (NOT B\uff09) </p> <ul> <li>NOR  \u95e8\u4e5f\u662f\u903b\u8f91\u5b8c\u6574\u7684</li> </ul> <p>NOT A = A NOR A</p> <p>A OR B = NOT\uff08A NOR B\uff09</p> <p>A AND B = NOT\uff08\uff08NOT A\uff09OR (NOT B)\uff09</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#34-basic-storage-element","title":"3.4 Basic Storage Element","text":""},{"location":"course/ICS/Digital%20Logic%20Structure/#341-the-r-s-latch","title":"3.4.1 The R-S Latch","text":"<ul> <li> <p><code>It can store one bit of information, a 0 or a 1</code></p> </li> <li> <p>R-S\u9501\u5b58\u5668\uff0c\u6709\u4e24\u4e2a2-\u8f93\u5165NAND\u95e8\uff08\u4e0e\u975e\u95e8\uff09\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u6bcf\u4e00\u4e2a\u7684\u8f93\u51fa\u7ed3\u679c\u90fd\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u7684\u8f93\u5165\u3002</p> </li> <li> <p>setting the latch to store a 1 was referred to as setting the latch,and setting the latch to store a 0 was referred to as resetting the latch.</p> </li> <li> <ul> <li> <ul> <li> <ul> <li>R : Resetting : setting the latch to store a <code>0</code>;</li> </ul> </li> </ul> </li> <li>S : Setting: setting the latch to store a <code>1</code>;</li> </ul> </li> </ul> <ol> <li><code>The quiescent state(\u9759\u6b62\u72b6\u6001)</code></li> </ol> <ul> <li> <p>We describe the quiescent (or quiet) state of a latch as the state when the latch is storing a value, either 0 or 1, and nothing is trying to change that value.</p> </li> <li> <p><code>This is the case when inputs S and R both have the logic value 1.</code>The letter a designates the value that is currently stored in the latch, which we also refer to as the output of the latch.</p> </li> </ul> <p>\u5b57\u6bcda\u8868\u793a\u5f53\u524d\u5b58\u50a8\u5728\u9501\u5b58\u5668\u4e2d\u7684\u503c\uff0c\u6211\u4eec\u4e5f\u5c06\u5176\u79f0\u4e3a\u9501\u5b58\u5668\u7684\u8f93\u51fa\u3002</p> <ul> <li> <p>\u60c5\u51b5\u4e00\uff1a\u5047\u8bbea =1\uff0c\u90a3\u4e48A=1\uff0c\u53c8\u7531\u4e8e\u662fquiescent state\u9759\u6b62\u72b6\u6001\uff0c\u4ece\u800cS\u548cR\u7684\u8f93\u5165\u503c\u90fd\u662f1\u3002\u5f53A\u548cR\u4e00\u8d77\u901a\u8fc7NAND\u95e8\u65f6\uff0c\u5f97\u5230b=0\uff0c\u90a3\u4e48B=0.\u5f53B\u548cS\u4e00\u8d77\u901a\u8fc7NAND\u95e8\u65f6\uff0c\u5f97\u5230a=1\u3002<code>\u53ea\u8981\u8f93\u5165S\u548cR\u4fdd\u6301\u4e3a1\uff0c\u7535\u8def\u7684\u72b6\u6001\u5c31\u4e0d\u4f1a\u6539\u53d8\u3002\u5373R-S\u9501\u5b58\u5668\u4f1a\u7ee7\u7eed\u5b58\u50a8\u503c1\uff08\u8f93\u51faa\u7684\u503c\uff09</code></p> </li> <li> <p>\u60c5\u51b5\u4e8c\uff1a\u5047\u8bbea=0\uff0c\u90a3\u4e48A=0\u3002A\u548cR\u4e00\u8d77\u7ecf\u8fc7NAND\u95e8\uff0c\u5f97\u5230b=B=1.\u90a3\u4e48\u5f53B\u548cS\u4e00\u8d77\u901a\u8fc7NAND\u95e8\u65f6\uff0c\u5f97\u5230a =0</p> </li> </ul> <ol> <li><code>setting the latch to a 1 or a 0</code></li> </ol> <ul> <li>In order for the R-S latch to work properly, both S and R must never be allowed to be set to 0 at the same time.</li> </ul> <p>\u8981\u4f7fR-S\u9501\u5b58\u5668\u6b63\u5e38\u5de5\u4f5c\uff0c\u9700\u8981\u4f7fR\u548cS\u4e0d\u540c\u65f6\u4e3a0\uff0c\u4f46\u662f\u53ef\u4ee5\u6682\u65f6\u6027\u5730\u4f7fR\u4e3a0\uff0cS\u4e3a1\uff0c\u6216\u8005\u76f8\u53cd</p> <ul> <li>If we set S to 0 for a very brief period of time, this causes a to equal 1, which in turn causes A to equal 1. Since R is also 1, the output at b must be 0. This causes B to be 0, which in turn makes a equal to 1.</li> </ul> <p>\u4f7fS\u6682\u65f6\u6027\u5730\u53d8\u62100\uff0c\u90a3\u4e48a=A=1,A\u548cR\u7ecf\u8fc7NAND\u95e8\u4f5c\u7528\uff0c\u5f97\u5230b=B=0\uff0c\u518d\u6b21\u8fd4\u56de\u5f97\u5230a=1.</p> <p><code>\u5f53S\u6062\u590d\u53d8\u62101\u65f6\uff0c\u7531\u4e8eB\u6b64\u65f6\u4e3a0\uff0cS\u548cB\u7ecf\u8fc7NAND\u95e8\u4f5c\u7528\uff0c\u5f97\u5230a\u4ecd\u7136\u4e3a1</code></p> <ul> <li>clear the latch:set the latch to 0</li> </ul> <p>by setting R to 0 for a very short period of time</p> <p>\u4f7fR\u77ed\u6682\u6027\u5730\u53d8\u62100\uff0c\u5f97\u5230b=B=1\uff0cS\u548cB\u7ecf\u8fc7NAND\u95e8\uff0c\u5f97\u5230a=A=0\uff0cA\u548cR\u4e24\u4e2a0\u7ecf\u8fc7NAND \u95e8\u4f5c\u7528\u5f97\u5230b=1</p> <ul> <li> <p>\u5982\u679c\u5141\u8bb8S\u548cR\u540c\u65f6\u8bbe\u7f6e\u4e3a0\uff0c\u5219\u8f93\u51faa\u548cb\u90fd\u5c06\u662f1\uff0c\u5e76\u4e14\u9501\u5b58\u5668\u7684\u6700\u7ec8\u72b6\u6001\u5c06\u53d6\u51b3\u4e8e\u7ec4\u6210\u6676\u4f53\u7ba1\u7684\u7535\u7279\u6027\u95e8\u800c\u4e0d\u662f\u6b63\u5728\u6267\u884c\u7684\u903b\u8f91\u3002</p> </li> <li> <p></p> </li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#342-the-gated-d-latch","title":"3.4.2 The Gated D Latch","text":"<ul> <li> <p>\u5728R-S latch\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u4e24\u4e2aNAND gates</p> </li> <li> <p>When WE is not asserted (i.e., when WE equals 0), the outputs S and R are both equal to 1. Since S and R are inputs to the R-S latch, if they are kept at 1, the value stored in the latch remains unchanged.</p> </li> </ul> <p>\u5f53WE\u662f0\u65f6\uff0cS\u548cR\u90fd\u662f\u8f93\u5165\u503c\u90fd\u662f1\uff0c\u5f97\u5230\u60c5\u5f62\u548cR-S Latch\u4e00\u6837\uff0c\u4fdd\u5b58\u7684value\u4e0d\u53d8</p> <ul> <li>When WE is momentarily set to 1, exactly one of the outputs S or R is set to 0, depending on the value of D. </li> </ul> <p>\u5f53WE\u7684\u503c\uff0c\u77ed\u6682\u5730\u53d8\u62101\uff0cR\uff0cS\u5176\u4e2d\u4e00\u4e2a\u53d8\u62100\uff0c\u6b64\u65f6RS\u7684\u503c\u53d6\u51b3\u4e8eD</p> <ul> <li> <p>\u5982\u679cD=1\uff0cS\u53d8\u62100.R=1\uff0c\u5bf9\u4e8eR-S latch\uff0c\u4fdd\u5b581</p> </li> <li> <p>\u5982\u679cD=0\uff0c\u5bf9\u4e8e\u4e0b\u9762\u7684NAND\u95e8\uff0cinput\u503c\u90fd\u662f1\uff0c\u5f97\u5230R =0\uff0c\u5bf9\u4e8eR-S latch\uff0c\u4fdd\u5b580</p> </li> <li> <p><code>the R-S latch is set to 1 or 0 according to whether D is 1 or 0</code></p> </li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#35-the-concept-of-memory","title":"3.5 The Concept of Memory","text":"<p><code>Memory is made up of a (usually large) number of locations, each uniquely identifiable and each having the ability to store a value.</code></p> <p>We refer to the unique identifier associated with each memory location as its <code>address</code>. We refer to the number of bits of information stored in each location as its <code>addressability</code>.</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#351-address-space","title":"3.5.1 address space\u5730\u5740\u7a7a\u95f4","text":"<p><code>\u5185\u5b58\u4e2d\u4e0d\u540c\u5730\u5740\u7684\u4e2a\u6570</code></p> <p>We refer to the total number of uniquely identifiable locations as the memory\u2019s <code>address space</code></p> <p>With n bits of address, we can uniquely identify \\(2^n\\) locations.</p> <p>\u5373\u5730\u5740\u7a7a\u95f4\u4e3a\\(2^n\\)</p> <ul> <li>kilo represent \\(2^{10}\\)(1000)</li> <li>mega represent \\(2^{20}\\) (one million)</li> <li>giga represent \\(2^{30}\\)(one billion)</li> </ul> <p>We say the address space is \\(2^{31}\\), which is exactly 2,147,483,648 locations,</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#352-addressability","title":"3.5.2 addressability\u5bfb\u5740\u80fd\u529b","text":"<p><code>The number of bits stored in each memory location is the memory\u2019s addressability</code></p> <p>\u5927\u591a\u6570\u5b58\u50a8\u5668\u90fd\u662f\u5b57\u8282\u5bfb\u5740\u7684\u3002</p> <p>If the memory is byte-addressable,then each ASCII character occupies one location in memory.</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#353-a-22-by-3-bit-memory","title":"3.5.3 A \\(2^2 - by - 3-\\)Bit Memory","text":"<p>Figure 3.20 illustrates a memory of size \\(2^2\\) by 3 bits. That is, the memory has an address space of four locations and an addressability of three bits.</p> <ul> <li> <p>A memory of size 2^2 requires two bits to specify the address. We describe the two-bit address as A[1:0].</p> </li> <li> <p>A memory of addressability three stores three bits of information in each memory location.We describe the three bits of data as D[2:0].</p> </li> <li>\u5730\u5740\u662fA[1:0],\u5730\u5740\u7a7a\u95f4\u662f\\(2^2= 4\\)</li> <li>\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6709\u4e09\u4e2a\u5b58\u50a8\u5355\u5143\uff0c\u5373\u53ef\u4ee5\u5b58\u50a83bits\u7684\u6570\u636e\uff0c\u56e0\u6b64\u5bfb\u5740\u80fd\u529b\u4e3a3bits</li> <li>WE= 1\u65f6\uff0c\u5c06D[2:0]\u5199\u5165\u5185\u5b58\uff08\u4e09\u4e2a\u6bd4\u7279\u540c\u65f6\u5199\uff09\uff1bWE=0\u65f6\uff0c\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fa\u6570\u636e\u5230D[2:0]</li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#36-sequential-logic-circuit","title":"3.6 Sequential Logic Circuit","text":"<ul> <li> <p>we discuss digital logic structures that can both <code>process information (i.e., make decisions) and store information</code>.\u65e2\u53ef\u4ee5\u5904\u7406\u4fe1\u606f\uff08\u5373\u505a\u51fa\u51b3\u7b56\uff09\u53c8\u53ef\u4ee5\u5b58\u50a8\u4fe1\u606f\u7684\u6570\u5b57\u903b\u8f91\u7ed3\u6784\u3002</p> </li> <li> <p>That is, these structures base their decisions not only on the input values now present, but also (and this is very important) on what has happened before. \u8fd9\u4e9b\u7ed3\u6784\u7684\u51b3\u7b56\u4e0d\u4ec5\u57fa\u4e8e\u73b0\u5728\u5b58\u5728\u7684\u8f93\u5165\u503c\uff0c\u800c\u4e14\u8fd8\u57fa\u4e8e\uff08\u8fd9\u975e\u5e38\u91cd\u8981\uff09\u4e4b\u524d\u53d1\u751f\u7684\u4e8b\u60c5\u3002These structures are usually called <code>sequential logic circuits(\u65f6\u5e8f\u903b\u8f91\u7535\u8def)</code>.  </p> </li> <li>they contain storage elements that allow them to keep track of prior history information. Figure 3.22 shows a block diagram of a sequential logic circuit. Note the storage elements. Note also that the output can be dependent on both the inputs now and the values stored in the storage elements. The values stored in the storage elements reflect the history of what has happened before.\u5b58\u50a8\u5728\u5b58\u50a8\u5143\u4ef6\u4e2d\u7684\u503c\u53cd\u6620\u4e86\u4e4b\u524d\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u5386\u53f2\u3002</li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#361-a-simple-example-the-combination-lock","title":"3.6.1 A simple Example: The Combination Lock","text":"<p>Because the lock stores the previous rotations and makes its decision (open or don\u2019t open) on the basis of the the history of the past operations, that is, on the correct sequence being performed.</p> <p></p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#362-the-concept-of-state","title":"3.6.2 The Concept of State","text":"<p>The state of a system is a snapshot of all the relevant elements of the system at the moment the snapshot is taken.</p> <p>\u7cfb\u7edf\u7684\u72b6\u6001\u662f\u62cd\u6444\u5feb\u7167\u65f6\u7cfb\u7edf\u6240\u6709\u76f8\u5173\u5143\u7d20\u7684\u5feb\u7167</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#363-the-finite-state-machine-and-its-state-diagram","title":"3.6.3 The finite state machine and its state diagram \u6709\u9650\u72b6\u6001\u673a\u548c\u72b6\u6001\u56fe","text":"<p>A finite state machine consists of five elements:</p> <ol> <li>a finite number of states</li> <li>a finite number of external inputs</li> <li>a finite number of external outputs</li> <li>an explicit specification of all state transitions</li> <li> <p>an explicit specification of what determines each external    output value</p> </li> <li> <p>The combination lock</p> </li> </ol> <p>A. The lock is not open, and NO relevant operations have been performed. B. The lock is not open, but the user has just completed the R13 operation. C. The lock is not open, but the user has just completed R13, followed by L22. D. The lock is open, since the user has just completed R13, followed by L22, followed by R3.</p> <ul> <li> <p>The external input\u5916\u90e8\u7684\u8f93\u5165\u503c\u662fR13\uff0cL22\uff0cR3\uff0cand R-other-than-13\uff0c\u2026\u2026</p> </li> <li> <p>The external output\u5916\u90e8\u7684\u8f93\u51fa\u503c\u662f\u9501\u5f00\u4e86\u6216\u8005\u6ca1\u5f00</p> </li> <li> <p>\u7bad\u5934\u7684\u65b9\u5411\u8868\u660e\u7cfb\u7edf\u7684\u72b6\u6001\u662f\u4ece\u54ea\u4e2a\u72b6\u6001\uff08current state\uff09\u5230\u54ea\u4e2a\u72b6\u6001\uff08next state\uff09</p> </li> <li> <p>In short, the next state is determined by the combination   of the current state and the current external input.</p> </li> </ul> <p>\u4e0b\u4e00\u72b6\u6001\uff0c\u65e2\u8981\u8003\u8651\u5f53\u524d\u6240\u5904\u7684\u72b6\u6001\uff0c\u4e5f\u8981\u8003\u8651\u5916\u90e8\u7684\u8f93\u5165\u503c</p> <ol> <li>Very old soft drink machine</li> </ol> <p></p> <p>A. at least 15 cents has been inserted</p> <p>B. 10 cents has been inserted</p> <p>C. 5 cents has been inserted</p> <ol> <li>a basketball game</li> </ol> <p>\u6839\u636e\u8bb0\u5206\u724c\u663e\u793a\u72b6\u6001</p> <ol> <li>a Tic-Tac-Toe Machine</li> </ol> <p>\u4e95\u5b57\u68cb\uff0c\u72b6\u6001\u8fc7\u4e8e\u591a</p> <p>output \u6709\u4e09\u79cd\uff1a\uff08a\uff09game still in progress \uff08b\uff09person wins \uff08c\uff09 computer wins</p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#364-the-synchronous-finite-state-machine","title":"3.6.4 The Synchronous Finite State Machine\u540c\u6b65\u6709\u9650\u72b6\u6001\u673a","text":"<ul> <li>A synchronous finite state machine transitions from its current state to its next state after an identical fixed interval of time.</li> <li>\u540c\u6b65\u6709\u9650\u72b6\u6001\u673a\u5728\u76f8\u540c\u7684\u56fa\u5b9a\u65f6\u95f4\u95f4\u9694\u540e\u4ece\u5f53\u524d\u72b6\u6001\u8f6c\u6362\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001</li> </ul>"},{"location":"course/ICS/Digital%20Logic%20Structure/#365-clock","title":"3.6.5 clock","text":"<ul> <li> <p>In digital logic terms, the clock is a signal whose value alternates between 0 and 1</p> </li> <li> <p>Each of the repeated sequence of identical intervals is referred to as a clock cycle. A clock cycle starts when the clock signal transitions from 0 to 1 and ends the next time the clock signal transitions from 0 to 1.</p> </li> </ul> <p>\u6bcf\u4e2a\u76f8\u540c\u95f4\u9694\u7684\u91cd\u590d\u5e8f\u5217\u79f0\u4e3a\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u3002\u5f53\u65f6\u949f\u4fe1\u53f7\u4ece 0 \u8f6c\u53d8\u4e3a 1 \u65f6\uff0c\u65f6\u949f\u5468\u671f\u5f00\u59cb\uff0c\u5e76\u5728\u4e0b\u4e00\u6b21\u65f6\u949f\u4fe1\u53f7\u4ece 0 \u8f6c\u53d8\u4e3a 1 \u65f6\u7ed3\u675f\u3002</p> <p></p>"},{"location":"course/ICS/Digital%20Logic%20Structure/#366-example-a-danger-sign","title":"3.6.6 Example: a danger sign","text":"<p>During one unit of time, all lights will be off.</p> <p>In the next unit of time, lights 1 and 2 will be on. </p> <p>The next unit of time, lights 1, 2, 3, and 4 will be on. </p> <p>Then all five lights will be on. Then the sequence repeats</p> <p></p> <p></p> <ul> <li>\u9996\u5148\u6709\u4e24\u4e2a\u5916\u90e8\u7684\u8f93\u5165\uff0cclock\u548cswitch\u3002switch\u5f00\u5173\u51b3\u5b9a\u6709\u9650\u72b6\u6001\u673a\u662f\u5426\u5728\u56db\u4e2a\u72b6\u6001\u4e4b\u95f4\u8f6c\u6362\u3002clock\u65f6\u949f\u901a\u8fc7\u63a7\u5236\u5b58\u50a8\u5143\u4ef6\u7684\u72b6\u6001\u6765\u63a7\u5236\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u5316</li> <li>\u5176\u6b21\uff0c\u6709\u4e24\u4e2a\u5b58\u50a8\u5143\u4ef6\uff0cstorage element1\u548cstorage element2.\u7531\u4e8e\u5177\u6709\u56db\u79cd\u72b6\u6001\uff0c\u8bf4\u660e\u6bcf\u4e00\u4e2a\u5b58\u50a8\u5143\u4ef6\u5b58\u50a81bit\u7684\u4fe1\u606f\u3002\u90a3\u4e48\u5bf9\u5e94\u7684\u56db\u4e2a\u72b6\u6001\u4e3a\uff1aA(0,0),B(01),C(10),D(11).Storage element2\u5b58\u50a8\u7b2c\u4e00\u4f4d\uff08\u9ad8\u4f4dhigh\uff09\u6bd4\u7279\uff0cstorage element 1 \u5b58\u50a8\u7b2c\u4e8c\u4f4d\uff08\u4f4e\u4f4d\uff09\u6bd4\u7279\u3002</li> <li>combination logic circuit 1 \u8868\u660e\u706f\u7684\u5f00\u5173\u7531\u5b58\u50a8\u5143\u4ef6storage element1\uff0c2\u63a7\u5236\u3002\u5373\u7531\u6709\u9650\u72b6\u6001\u673a\u7684\u72b6\u6001\u63a7\u5236</li> <li>\u7ec4\u5408\u903b\u8f91\u7535\u8defcombination logic circuit2 \u8868\u660e\u4ece\u5f53\u524d\u72b6\u6001\u5230\u4e0b\u4e00\u72b6\u6001\u7684\u8f6c\u53d8\u53d6\u51b3\u4e8e\u4e24\u4e2a\u5b58\u50a8\u5143\u4ef6\u548c\u5f00\u5173\u3002\u5f00\u5173\u65ad\u5f00\uff0c\u663e\u7136\u4e0d\u5b58\u50a8\uff1f\u5f00\u5173\u8fde\u63a5\uff0c\u7ec4\u5408\u903b\u8f91\u7535\u8def2\u7684\u8f93\u51fa\u53d6\u51b3\u4e8e\u4e24\u4e2a\u5b58\u50a8\u5143\u4ef6\u7684\u72b6\u6001</li> </ul> <p></p> <ul> <li>light 5 \u7531AND gate V \u51b3\u5b9a\uff0c\u5f53\u4e14\u4ec5\u5f53\u72b6\u6001\u4e3a11\u65f6\uff0c\u4e24\u4e2a\u5b58\u50a8\u5143\u4ef6\u7684\u4fe1\u606f\u901a\u8fc7\u4e0e\u95e8\u540e\uff0c\u5f97\u5230\u7ed3\u679c\u4e3a1\uff0c\u4f7f\u5f97\u5168\u90e8\u706f\u4eae</li> <li>lights 3\uff0c4 \u7531OR gate X\u51b3\u5b9a\uff0c\u8981\u4e48\u72b6\u600111\uff0c\u8981\u4e48\u72b6\u600110\uff0c\u72b6\u600110\uff0c\u5bf9\u5e94\u7684\u662f\uff0c\u5b58\u50a8\u5143\u4ef62\u5b58\u50a8\u7684\u4fe1\u606f\u662f1\uff0c\u5b58\u50a8\u5143\u4ef61\u5b58\u50a8\u7684\u4fe1\u606f\u662f0\uff0c\u901a\u8fc7AND \u95e8\u540e\u5f97\u5230\u7ed3\u679c\u4e3a1</li> <li>\u800cLight 1\uff0c2\u7531OR gate W \u51b3\u5b9a\uff0c\u901a\u5165\u7684\u6709\u4e09\u6761\u7ebf\uff0c\u5206\u522b\u5bf9\u5e94\u88c5\u586b01\uff0c10\uff0c11</li> </ul> <p>\u5982\u679c\u5b58\u50a8\u5143\u4ef6\u662f\u95e8\u63a7 D \u9501\u5b58\u5668\uff08gated D latch\uff09\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u5982\u679c\u4e24\u4e2a\u5b58\u50a8\u5143\u4ef6\u662f\u95e8\u63a7D\u9501\u5b58\u5668\uff0c\u5219\u5f53\u5199\u4f7f\u80fd\u4fe1\u53f7\uff08write enable signal\uff09\uff08\u65f6\u949f\uff09\u4e3a1\u65f6\uff0c\u6216\u95e8Y\u548cZ\u7684\u8f93\u51fa\u5c06\u7acb\u5373\u6539\u53d8\u5b58\u50a8\u5728\u4e24\u4e2a\u95e8\u63a7D\u9501\u5b58\u5668\u4e2d\u7684\u4f4d\u3002\u8fd9\u5c06\u4e3a\u4e09\u4e2a\u4e0e\u95e8\u4ea7\u751f\u65b0\u7684\u8f93\u5165\u503c\uff0c\u7ecf\u8fc7\u4e0e\u95e8\u4f5c\u7528\u540e\u7684\u8f93\u51fa\u503c\uff0c\u88ab\u8f93\u5165\u5230\u6216\u95e8Y\u548cZ\uff0c\u4ea7\u751f\u5c06\u5e94\u7528\u4e8e\u95e8\u63a7\u9501\u5b58\u5668\u7684\u8f93\u5165\u7684\u65b0\u8f93\u51fa\uff0c\u8fd9\u63a5\u4e0b\u6765\u4f1a\u6539\u53d8\u5b58\u50a8\u5728\u95e8\u63a7\u9501\u5b58\u5668\u4e2d\u7684\u4f4d\uff0c\u63a5\u7740\uff0c\u8fd9\u610f\u5473\u7740\u4e09\u4e2a\u4e0e\u95e8\u7684\u65b0\u8f93\u5165\u4ee5\u53ca\u6216\u95e8 Y \u548c Z \u7684\u65b0\u8f93\u51fa\u3002\u8fd9\u79cd\u60c5\u51b5\u4f1a\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u53d1\u751f\uff0c\u53ea\u8981\u95e8\u63a7 D \u9501\u5b58\u5668\u7684\u5199\u4f7f\u80fd\u4fe1\u53f7\u4e0d\u65ad\u5730\u6539\u53d8\u5b58\u50a8\u5728\u4e24\u4e2a\u5b58\u50a8\u5143\u4ef6\u4e2d\u7684\u4f4d\u3002\u88ab\u65ad\u8a00\u3002\u7ed3\u679c\uff1a\u6211\u4eec\u4e0d\u77e5\u9053\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u6709\u9650\u72b6\u6001\u673a\u7684\u72b6\u6001\u662f\u4ec0\u4e48\u3002\u800c\u4e14\uff0c\u5373\u4f7f\u5728\u5f53\u524d\u65f6\u949f\u5468\u671f\uff0c\u5b58\u50a8\u5143\u4ef6\u7684\u72b6\u6001\u4e5f\u4f1a\u53d8\u5316\u5f97\u5982\u6b64\u4e4b\u5feb\uff0c\u4ee5\u81f3\u4e8e\u4e94\u4e2a\u706f\u7684\u884c\u4e3a\u4f1a\u4e0d\u7a33\u5b9a\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u201c\u6216\u201d\u95e8 Y \u548c Z \u7684\u8f93\u51fa\u5728\u5f53\u524d\u65f6\u949f\u5468\u671f\u7ed3\u675f\u65f6\u8f6c\u6362\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u5e76\u5141\u8bb8\u5f53\u524d\u72b6\u6001\u5728\u6b64\u4e4b\u524d\u4fdd\u6301\u4e0d\u53d8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u5b58\u50a8\u5143\u4ef6\u7684\u8f93\u5165\u5728\u5f53\u524d\u65f6\u949f\u5468\u671f\u7ed3\u675f\u4e4b\u524d\u751f\u6548\u3002\u7531\u4e8e\u5982\u679cWE signal\u88ab\u7f6e\u4f4d\uff0c\u95e8\u63a7 D \u9501\u5b58\u5668\u7684\u8f93\u51fa\u4f1a\u7acb\u5373\u54cd\u5e94\u5176\u8f93\u5165\u800c\u53d8\u5316\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u6210\u4e3a\u6211\u4eec\u7684\u540c\u6b65\u6709\u9650\u72b6\u6001\u673a\u7684\u5b58\u50a8\u5143\u4ef6\u3002\u6211\u4eec\u9700\u8981\u7684\u5b58\u50a8\u5143\u4ef6\u5141\u8bb8\u6211\u4eec\u5728\u6574\u4e2a\u5f53\u524d\u65f6\u949f\u5468\u671f\u8bfb\u53d6\u5f53\u524d\u72b6\u6001\uff0c\u5e76\u4e14\u76f4\u5230\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5f00\u59cb\u624d\u5c06\u4e0b\u4e00\u4e2a\u72b6\u6001\u503c\u5199\u5165\u5b58\u50a8\u5143\u4ef6</p> <p>The Flip-Flop\uff08\u89e6\u53d1\u5668\uff09 to the rescue</p> <p><code>\u6211\u4eec\u9700\u8981\u7684\u5b58\u50a8\u5143\u4ef6\u5141\u8bb8\u6211\u4eec\u5728\u6574\u4e2a\u5f53\u524d\u65f6\u949f\u5468\u671f\u8bfb\u53d6\u5f53\u524d\u72b6\u6001\uff0c\u5e76\u4e14\u76f4\u5230\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5f00\u59cb\u624d\u5c06\u4e0b\u4e00\u4e2a\u72b6\u6001\u503c\u5199\u5165\u5b58\u50a8\u5143\u4ef6</code></p> <p></p> <p></p> <p>master/slave fiip-flop \u4e3b/\u4ece\u89e6\u53d1\u5668</p> <p>Note that the write enable signal of the master is 1 when the clock is 0, and the write enable signal of the slave is 1 when the clock is 1.</p> <p>\u5728\u6bcf\u4e00\u65f6\u949f\u5468\u671f\u5f00\u59cb\u65f6\uff0cthe clock signal is 1.\u5b58\u50a8\u5143\u4ef6\u7684\u8f93\u51fa\u662f\u4e24\u4e2a\u4ece\u9501\u5b58\u5668\u7684\u8f93\u51fa\u3002\u8fd9\u4e9b\u8f93\u51fa\uff08time 1\uff09\u88ab\u8f93\u5165\u5230AND\u95e8\uff0c\u5bfc\u81f4OR\u95e8Y\u548cZ\u4ea7\u751f\u5b58\u50a8\u5143\u4ef6\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u503c\uff08time 2\uff09\u3002\u65f6\u5e8f\u56fe\u663e\u793a\u4e86\uff0c\u7ec4\u5408\u903b\u8f91\u7535\u8def\u7684\u4f20\u64ad\u5ef6\u8fdf\uff08prop delay\uff09\uff0c\u5c3d\u7ba1\u5176\u7ed3\u679c\u5728\u534a\u5468\u671fA\u7684\u67d0\u4e2a\u65f6\u95f4\u4ea7\u751f\u4e0b\u4e00\u4e2a\u72b6\u6001\u503c\uff0c\u7531\u4e8e\u4e3b\u9501\u5b58\u5668\uff08master latch\uff09\u7684write enable signal\u662f0\uff0c\u56e0\u6b64\u4e0b\u4e00\u4e2a\u72b6\u6001\u4e0d\u80fd\u5199\u5165\u4e3b\u9501\u5b58\u5668\u3002</p> <p>\u5728\u534a\u5468\u671fB\u5f00\u59cb\uff08time 3\uff09\u540e\uff0cthe clock signal is 0\uff0c\u8fd9\u610f\u5473\u7740master latch \u7684write enable signal \u662f1\uff0c\u5373\u4e3b\u9501\u5b58\u5668\u80fd\u591f\u5199\u5165\u3002\u7136\u800c\u5728\u534a\u5468\u671fB\uff0c\u4ece\u9501\u5b58\u5668\u7684write enable signal \u662f 0\uff0c\u6240\u4ee5\u4ece\u9501\u5b58\u5668\u4e0d\u80fd\u5199\u5165\u73b0\u5728\u5728\u4e3b\u9501\u5b58\u5668\u7684\u65b0\u4fe1\u606f\u3002</p> <p>\u5728\u65f6\u949f\u5468\u671fn+1\u5f00\u59cb\u540e\uff0cthe clock signal is 1\uff0c\u6b64\u65f6\u4ece\u9501\u5b58\u5668\uff08slave latch \uff09\u7684\u5199\u4f7f\u80fd\u4fe1\u53f7\u662f1\uff0c\u56e0\u6b64\u4ece\u9501\u5b58\u5668\u80fd\u591f\u5b58\u50a8\u7ec4\u5408\u903b\u8f91\u5728\u65f6\u949f\u5468\u671fn\u671f\u95f4\u521b\u5efa\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u503c\u3002\u8fd9\u6210\u4e3a\u65f6\u949f\u5468\u671fn+1\u7684\u5f53\u524d\u72b6\u6001\u3002\u53c8\u7531\u4e8e\u4e3b\u9501\u5b58\u5668\u7684\u5199\u4f7f\u80fd\u4fe1\u53f7\u662f0\uff0c\u6240\u4ee5\u4e3b\u9501\u5b58\u5668\u7684\u72b6\u6001\u4e0d\u53d8\u3002</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u4ece\u9501\u5b58\u5668\u7684\u8f93\u51fa\u5305\u542b\u65f6\u949f\u5468\u671f\u6301\u7eed\u65f6\u95f4\u5185\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001\uff0c\u5e76\u4ea7\u751f\u7ec4\u5408\u903b\u8f91\u7535\u8def\u4e2d\u516d\u4e2a\u4e0e\u95e8\u7684\u8f93\u5165\u3002\u5b83\u4eec\u7684\u72b6\u6001\u5728\u65f6\u949f\u5468\u671f\u5f00\u59cb\u65f6\u901a\u8fc7\u5b58\u50a8\u7ec4\u5408\u903b\u8f91\u5728\u524d\u4e00\u4e2a\u5468\u671f\u671f\u95f4\u521b\u5efa\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u4fe1\u606f\u800c\u6539\u53d8\uff0c\u4f46\u5728\u65f6\u949f\u5468\u671f\u671f\u95f4\u4e0d\u4f1a\u518d\u6b21\u6539\u53d8\u3002\u5b83\u4eec\u5728\u65f6\u949f\u5468\u671f\u5185\u4e0d\u518d\u6539\u53d8\u7684\u539f\u56e0\u5982\u4e0b\uff1a\u5728\u534a\u5468\u671fA\u671f\u95f4\uff0c\u4e3b\u9501\u5b58\u5668\u4e0d\u80fd\u6539\u53d8\uff0c\u56e0\u6b64\u4ece\u9501\u5b58\u5668\u7ee7\u7eed\u67e5\u770b\u65b0\u65f6\u949f\u5468\u671f\u7684\u5f53\u524d\u72b6\u6001\u7684\u72b6\u6001\u4fe1\u606f\u3002\u5728\u534a\u5468\u671f B \u671f\u95f4\uff0c\u4ece\u9501\u5b58\u5668\u4e0d\u80fd\u6539\u53d8\uff0c\u56e0\u4e3a\u65f6\u949f\u4fe1\u53f7\u4e3a 0</p> <p>\u5728\u534a\u5468\u671fB\u671f\u95f4\uff0c\u4e3b\u9501\u5b58\u5668\u53ef\u4ee5\u5b58\u50a8\u7ec4\u5408\u903b\u8f91\u4ea7\u751f\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u4fe1\u606f\uff0c\u4f46\u5b83\u4eec\u4e0d\u80fd\u5c06\u5176\u5199\u5165\u4ece\u9501\u5b58\u5668\uff0c\u76f4\u5230\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5f00\u59cb\uff0c\u6b64\u65f6\u5b83\u6210\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u72b6\u6001\u4fe1\u606f\u3002\u65f6\u949f\u5468\u671f</p>"},{"location":"course/ICS/IO/","title":"Chapter 9 | I/O","text":""},{"location":"course/ICS/IO/#91-privilegepriorityand-the-memory-address-space","title":"9.1 Privilege,Priority,and the Memory Address Space","text":"<ul> <li>privilege \u7279\u6743</li> <li>priority   \u4f18\u5148\u7ea7</li> </ul>"},{"location":"course/ICS/IO/#911-privilege-and-priority","title":"9.1.1 Privilege and Priority","text":"<ol> <li>privilege</li> </ol> <p>Privilege is all about the right to do something, such as execute a particular instruction or access a particular memory location. Not all computer programs have the right to execute all instructions.</p> <p>\u7279\u6743\u5c31\u662f\u505a\u67d0\u4e8b\u7684\u6743\u5229\uff0c\u4f8b\u5982\u6267\u884c\u7279\u5b9a\u6307\u4ee4\u6216\u8bbf\u95ee\u7279\u5b9a\u5185\u5b58\u4f4d\u7f6e\u3002\u5e76\u975e\u6240\u6709\u8ba1\u7b97\u673a\u7a0b\u5e8f\u90fd\u6709\u6743\u6267\u884c\u6240\u6709\u6307\u4ee4\u3002</p> <ol> <li>Priority \u4f18\u5148\u7ea7</li> </ol> <p>Priority is all about the urgency of a program to execute. Every program is assigned a priority, specifying its urgency as compared to all other programs. This allows programs of greater urgency to interrupt programs of lesser urgency.</p> <p>\u4f18\u5148\u7ea7\u662f\u6307\u6267\u884c\u7a0b\u5e8f\u7684\u7d27\u6025\u7a0b\u5ea6\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u6307\u5b9a\u5176\u4e0e\u6240\u6709\u5176\u4ed6\u7a0b\u5e8f\u76f8\u6bd4\u7684\u7d27\u8feb\u6027\u3002\u8fd9\u5141\u8bb8\u8f83\u7d27\u6025\u7684\u7a0b\u5e8f\u4e2d\u65ad\u8f83\u4e0d\u7d27\u6025\u7684\u7a0b\u5e8f\u3002</p> <p>\u4f8b\u5982\uff0c\u7531\u968f\u673a\u7528\u6237\u7f16\u5199\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u88ab\u5206\u914d\u4f18\u5148\u7ea7 0\u3002\u952e\u76d8\u53ef\u80fd\u4f1a\u88ab\u5206\u914d\u4f18\u5148\u7ea7 4\uff0c\u800c\u8ba1\u7b97\u673a\u63d2\u5165\u7535\u6e90\uff08\u5982\u5899\u58c1\u63d2\u5ea7\uff09\u7684\u4e8b\u5b9e\u53ef\u80fd\u4f1a\u88ab\u5206\u914d\u4f18\u5148\u7ea7 6\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u6709\u4eba\u5750\u5728\u952e\u76d8\u524d\u60f3\u8981\u6267\u884c\u5bfc\u81f4\u6570\u636e\u8f93\u5165\u8ba1\u7b97\u673a\u7684\u7a0b\u5e8f\uff0c\u5219\u968f\u673a\u7528\u6237\u7a0b\u5e8f\u5c06\u88ab\u4e2d\u65ad\u3002\u5982\u679c\u6709\u4eba\u5c06\u7535\u6e90\u7ebf\u4ece\u5899\u58c1\u63d2\u5ea7\u4e2d\u62d4\u51fa\uff0c\u8be5\u7a0b\u5e8f\u5c31\u4f1a\u88ab\u4e2d\u65ad\uff0c\u4ece\u800c\u5bfc\u81f4\u8ba1\u7b97\u673a\u5f88\u5feb\u5931\u53bb\u80fd\u6e90\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u8ba1\u7b97\u673a\u6267\u884c\u4e00\u4e9b\u4e13\u95e8\u4e3a\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u800c\u63d0\u4f9b\u7684\u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u3002</p> <ol> <li>Two Orthogonal Notions</li> </ol> <p>We said privilege and priority are two orthogonal notions, meaning they have nothing to do with each other.\u6211\u4eec\u8bf4\u8fc7\u7279\u6743\u548c\u4f18\u5148\u7ea7\u662f\u4e24\u4e2a\u6b63\u4ea4\u7684\u6982\u5ff5\uff0c\u610f\u5473\u7740\u5b83\u4eec\u5f7c\u6b64\u65e0\u5173</p> <p>\u6709\u7279\u6743privilege\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u6709\u4f18\u5148\u7ea7priority</p> <p>\u6709\u4f18\u5148\u7ea7priority\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u6709\u7279\u6743privilege</p> <ol> <li>The Processor Status Register\uff08PSR\uff09</li> </ol> <p>Each program executing on the computer has associated with it two very important registers. </p> <ul> <li> <p>The Program Counter (PC) you are very familiar with. </p> </li> <li> <p>The other register, the Processor Status Register (PSR), is shown in Figure 9.1. It contains the privilege and priority assigned to that program.</p> </li> </ul> <p>\u5904\u7406\u5668\u72b6\u6001\u5bc4\u5b58\u5668\uff0c\u5b83\u5305\u542b\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u7279\u6743\u548c\u4f18\u5148\u7ea7</p> <p></p> <ul> <li>Bit [15] specifies the privilege, where PSR[15]=0 means supervisor privilege, and PSR[15]=1 means unprivileged. </li> </ul> <p>\u4f4d[15]\u6307\u5b9a\u6743\u9650\uff0c\u5176\u4e2d<code>PSR[15]=0\u8868\u793a\u7ba1\u7406\u5458\u6743\u9650</code>\uff0c<code>PSR[15]=1\u8868\u793a\u65e0\u6743\u9650\u3002</code></p> <ul> <li>Bits [10:8] specify the <code>priority level (PL)</code> of the program. The highest priority level is 7 (PL7), the lowest is PL0.</li> </ul> <p>\u4f4d[10:8]\u6307\u5b9a\u7a0b\u5e8f\u7684\u4f18\u5148\u7ea7(PL)\u3002\u4f18\u5148\u7ea7\u6700\u9ad8\u4e3aPL7\uff0c\u6700\u4f4e\u4e3aPL0</p>"},{"location":"course/ICS/IO/#912-organization-of-memory","title":"9.1.2 Organization of Memory","text":"<ol> <li>Locations x0000 to x2FFF are privileged memory locations. They contain the various data structures and code of the operating system. They <code>require supervisor privilege to access</code>. They are referred to as <code>system space</code>.</li> </ol> <p>x0000\u5230x2FFF\uff0c\u662f\u7279\u6743\u7a7a\u95f4\uff0c\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u8bbf\u95ee\uff0c\u88ab\u79f0\u4e3asystem space\u7cfb\u7edf\u7a7a\u95f4</p> <ol> <li>Locations x3000 to xFDFF are unprivileged memory locations. <code>Supervisor privilege is not required to access these memory locations</code>. All user programs and data use this region of memory. The region is often referred to as user space</li> </ol> <p>x3000\u5230xFDFF\u662f\u975e\u7279\u6743\u7a7a\u95f4\uff0c\u79f0\u4e4b\u4e3auser space\u7528\u6237\u7a7a\u95f4</p> <ol> <li>Addresses xFE00 to xFFFF do <code>not correspond to memory</code>locations at all.</li> </ol> <p>(\u5730\u5740 xFE00 \u5230 xFFFF \u6839\u672c\u4e0d\u5bf9\u5e94\u4e8e\u5185\u5b58\u4f4d\u7f6e) </p> <p><code>That is, the last address of a memory location is xFDFF</code>.</p> <pre><code>Addresses xFE00 to xFFFF are used to **identify registers that take part in input and output functions and some special registers associated with the processor**.( \u5730\u5740xFE00\u5230xFFFF\u7528\u4e8e\u6807\u8bc6\u53c2\u4e0e\u8f93\u5165\u548c\u8f93\u51fa\u529f\u80fd\u7684\u5bc4\u5b58\u5668\u4ee5\u53ca\u4e0e\u5904\u7406\u5668\u76f8\u5173\u7684\u4e00\u4e9b\u7279\u6b8a\u5bc4\u5b58\u5668\u3002)\n</code></pre> <p>For example, <code>the PSR is assigned address xFFFC</code>, and the processor\u2019s Master Control Register (MCR) is assigned address xFFFE.  The set of addresses from xFE00 to xFFFF is usually referred to as the I/O page since most of the addresses are used for identifying registers that take part in input or output functions. <code>Access to those registers requires supervisor privilege</code></p> <p>\u4f8b\u5982\uff0cPSR\uff08processor status register\uff09 \u88ab\u5206\u914d\u5730\u5740 xFFFC\uff0c\u5904\u7406\u5668\u7684\u4e3b\u63a7\u5236\u5bc4\u5b58\u5668 (MCR\uff0cmaster control register) \u88ab\u5206\u914d\u5730\u5740 xFFFE\u4ece xFE00 \u5230 xFFFF \u7684\u5730\u5740\u96c6\u901a\u5e38\u79f0\u4e3a I/O \u9875\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u5730\u5740\u7528\u4e8e\u6807\u8bc6\u53c2\u4e0e\u8f93\u5165\u6216\u8f93\u51fa\u529f\u80fd\u7684\u5bc4\u5b58\u5668\u3002\u8bbf\u95ee\u8fd9\u4e9b\u5bc4\u5b58\u5668\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650</p> <ol> <li>two stacks</li> </ol> <ul> <li> <p>supervisor stack</p> <p>supervisor stack is <code>controlled by operating system</code> and <code>requires supervisor privilege</code> to access.</p> </li> <li> <p>user stack</p> <p>The user stack is <code>controlled by the user program</code> and does<code>not require privilege</code> to access.</p> </li> </ul> <ol> <li>two stack pointers</li> </ol> <ul> <li>Supervisor Stack Pointer\uff08SSP\uff09</li> <li>User Stack Pointer\uff08USP\uff09</li> </ul> <p>\u53ea\u6709\u4e00\u4e2a\u6808\u80fd\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\uff0c\u5177\u4f53\u54ea\u4e2a\u6808\u53d6\u51b3\u4e8e\u6211\u4eec\u5f53\u524d\u6240\u5904\u7684\u6a21\u5f0f\u3002\u5982\u679c\u662fSupervisor\u6a21\u5f0f\uff0c\u5c31\u4f7f\u7528supervisor stack\u7cfb\u7edf\u6808\uff0c\u5982\u679c\u662fuser\u6a21\u5f0f\u5c31\u4f7f\u7528\u7528\u6237\u6808user stack</p> <p>\u6211\u4eec\u4e00\u822c\u7528R6\u8868\u793a\u5f53\u524d\u6d3b\u8dc3\u7684\u6808\u7684\u6808\u9876\u6307\u9488\u3002\u540c\u65f6\u6211\u4eec\u6709\u4e24\u4e2a\u5bc4\u5b58\u5668Save_SSP \u548cSave_USP\u6765\u4fdd\u5b58\u5f53\u524d\u4e0d\u6d3b\u8dc3\u7684\u6808\u7684\u6307\u9488\u3002</p> <p>e.g. \u5982\u679c\u5f53\u524d\u5904\u4e8eUser\u6a21\u5f0f\uff0c\u90a3\u4e48R6\u76f8\u5f53\u4e8eUSP\uff0cSSP\u7684\u503c\u88ab\u4fdd\u5b58\u5728Save_SSP\u4e2d\u3002\u5f53\u6211\u4eec\u4eceUser\u2014\u2013&gt;Supervisor\u65f6\uff0c\u6211\u4eec\u628aR6\u5373USP\u5b58\u5230Save_USP\u4e2d\uff0c\u5e76\u628aSave_SSP\u7684\u503c\u52a0\u8f7d\u5230R6\uff0c\u5b8c\u6210\u6808\u6307\u9488\u7684\u5207\u6362</p>"},{"location":"course/ICS/IO/#92-input-output","title":"9.2 Input / Output","text":""},{"location":"course/ICS/IO/#921-some-basic-characteristics-of-io-io-io","title":"9.2.1 Some Basic Characteristics of I/O\u5185\u5b58\u6620\u5c04 I/O \u4e0e\u7279\u6b8a I/O \u6307\u4ee4","text":"<ol> <li>memory-mapped I/O vs special I/O instructions</li> </ol> <p><code>ISA\u662f\u5426\u9700\u8981\u7279\u6b8a\u7684I/O\u6307\u4ee4\uff1f</code></p> <ul> <li>the I/O device registers are mapped to a set of addresses   that are allocated to I/O device registers rather than to memory locations. Hence the name memory-mapped I/O</li> </ul> <p>I/O \u8bbe\u5907\u5bc4\u5b58\u5668\u6620\u5c04\u5230\u4e00\u7ec4\u5206\u914d\u7ed9 I/O \u8bbe\u5907\u5bc4\u5b58\u5668\u800c\u4e0d\u662f\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740\u3002\u56e0\u6b64\u540d\u79f0\u4e3a\u5185\u5b58\u6620\u5c04 I/O</p> <p>LC-3 uses memory-mapped I/O.</p> <p>LC-3 \u4f7f\u7528\u5185\u5b58\u6620\u5c04 I/O\uff0c\u5730\u5740 x0000 \u5230 xFDFF \u6307\u7684\u662f\u5b9e\u9645\u7684\u5185\u5b58\u4f4d\u7f6e\u3002\u5730\u5740 xFE00 \u81f3 xFFFF \u4fdd\u7559\u7528\u4e8e\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u5bc4\u5b58\u5668</p> <ol> <li>Asynchronous vs. Synchronous \u5f02\u6b65\u4e0e\u540c\u6b65</li> </ol> <p><code>I/O\u8bbe\u5907\u662f\u5426\u4e0e\u8ba1\u7b97\u673a\u4ee5\u76f8\u540c\u901f\u5ea6\u7684\u5f53\u65f6\u8fdb\u884c\u6267\u884c</code></p> <p>Most I/O is carried out at speeds very much slower than the speed of the processor. A typist, typing on a keyboard, <code>loads an input device register with one ASCII code every time he/she types a character(\u5411\u8f93\u5165\u8bbe\u5907\u5bc4\u5b58\u5668\u52a0\u8f7d\u4e00\u4e2a ASCII \u4ee3\u7801\u3002)</code>. A computer can read the contents of that device register every time it executes a load instruction, where <code>the operand address is the memory-mapped address of that input device register.</code></p> <p>\u8ba1\u7b97\u673a\u6bcf\u6b21\u6267\u884c\u52a0\u8f7d\u6307\u4ee4\u65f6\u90fd\u53ef\u4ee5\u8bfb\u53d6\u8be5\u8bbe\u5907\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u64cd\u4f5c\u6570\u5730\u5740\u662f\u8be5\u8f93\u5165\u8bbe\u5907\u5bc4\u5b58\u5668\u7684\u5185\u5b58\u6620\u5c04\u5730\u5740</p> <p>\u5c31\u6bd4\u5982\u8bf4\uff0c\u4f60\u8981\u8bfb\u53d6KBDR\u7684\u6570\u636e\uff0cLD\u6307\u4ee4\u7528\u7684\u662fKBDR\u5bc4\u5b58\u5668\u7684\u5185\u5b58\u6620\u5c04\u5730\u5740</p> <p>\u5904\u7406\u5668\u548c I/O \u4e4b\u95f4\u7684\u5927\u591a\u6570\u4ea4\u4e92\u90fd\u662f\u5f02\u6b65\u7684\u3002</p> <p>\u4e3a\u4e86\u5f02\u6b65\u60c5\u51b5\u4e0b\u901a\u4fe1\uff0c\u6211\u4eec\u5e38\u7528\u4e00\u4e2a<code>ready bit</code> \u6765\u540c\u6b65\u8bbe\u5907\u548c\u8ba1\u7b97\u673a\u3002\u5f53ready bit \u4e3a1\u65f6\uff0c\u8868\u793a\u8bbe\u5907\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff0c\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u7684\u4f20\u8f93\u3002\u5f53ready bit\u4e3a0\u65f6\uff0c\u8868\u793a\u8bbe\u5907\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\uff0c\u6b64\u65f6\u8ba1\u7b97\u673a\u9700\u8981\u7b49\u5f85</p> <ol> <li>Interrupt-Driven vs Polling \u4e2d\u65ad\u9a71\u52a8\u548c\u8f6e\u8be2</li> </ol> <p>The issue of interrupt-driven vs. polling is the issue of who controls the interaction.\u4e2d\u65ad\u9a71\u52a8\u4e0e\u8f6e\u8be2\u7684\u95ee\u9898\u5728\u4e8e\u8c01\u63a7\u5236\u4ea4\u4e92\u7684\u95ee\u9898\u3002</p> <ul> <li>\u4e2d\u65ad\u9a71\u52a8 I/O.\u7531I/O\u8bbe\u5907\u63a7\u5236\u53d1\u8d77\u4e2d\u65ad\uff0c\u968f\u540e\u8fdb\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f</li> <li>\u5904\u7406\u5668\u8d1f\u8d23\u65f6\u7684\u7b2c\u4e8c\u79cd\u7c7b\u578b\u7684\u4ea4\u4e92\u79f0\u4e3a\u8f6e\u8be2\uff0c\u56e0\u4e3a\u5904\u7406\u5668\u4f1a\u8f6e\u8be2\u5c31\u7eea\u4f4d\uff0c\u8be2\u95ee\u662f\u5426ready bit \u4e3a1\u3002</li> </ul>"},{"location":"course/ICS/IO/#922-input-from-the-keyboard","title":"9.2.2 Input from the Keyboard","text":""},{"location":"course/ICS/IO/#9221-basic-input-register","title":"9.2.2.1 Basic input register","text":"<p>in order to handle character input from the keyboard, we need two things: </p> <ul> <li><code>the keyboard data register (KBDR)</code></li> </ul> <p>address xFE02 is assigned to the KBDR</p> <p>a data register that <code>contains the character to be input</code></p> <ul> <li><code>the keyboard status register (KBSR)</code></li> </ul> <p>address xFE00 is assigned to the KBSR.</p> <p>a synchronization mechanism to <code>let the processor know that input has occurred.</code></p> <p></p> <p>Even though a character needs only 8 bits and the synchronization mechanism needs only 1 bit, it is easier to assign 16 bits (like all memory addresses in the LC-3) to each.</p> <p>In the case of KBDR(keyboard data register), bits [7:0] are used for the data, and bits [15:8] contain x00. </p> <p>\u5728KBDR\u4e2d\uff0c\u524d\u516b\u4f4d\u5168\u662f0\uff0c\u540e\u516b\u4f4d\u8868\u793a\u6570\u636e</p> <p>In the case of KBSR(keyboard status register), bit [15] contains the synchronization mechanism, that is, the ready bit.</p> <p>\u5f53KBSR[15]\u4e3a1\u65f6\uff0c\u8bf4\u660e\u6b64\u65f6\u53ef\u4ee5\u4ece\u952e\u76d8\u8bfb\u53d6\u6570\u636e\u3002\u5f53KBSR[15]\u4e3a0\u65f6\uff0c\u8bf4\u660e\u6b64\u65f6\u4e0d\u53ef\u4ee5\u4ece\u952e\u76d8\u8bfb\u53d6\u6570\u636e</p>"},{"location":"course/ICS/IO/#9222-the-basic-input-service-routine","title":"9.2.2.2 The basic input service Routine","text":"<p>**</p> <pre><code>;iput routine loads R0 with ASCII code ,and then move on to the NEXT_TASK in the program\nSTART   LDI     R1,A          ;R1\u52a0\u8f7dKBSR\uff0c\u4e3b\u8981\u770b\u7b2c\u4e00\u4f4d\uff0c\u7b2c\u4e00\u4f4d\u5982\u679c\u4e3a1\uff0c\u5219\u4e3a\u8d1f\u6570\uff0c\u5982\u679c\u4e3a0\uff0c\u5219\u8981\u4e48\u6b63\u6570\u8981\u4e48\u4e3a0\n        BRzp    START         ;\u5982\u679c\u7b2c\u4e00\u4f4d\u4e3a0\uff0c\u5219\u91cd\u65b0\u8fd4\u56de\uff0c\u73b0\u5728\u6ca1\u6709\u8f93\u5165\n        LDI     R0,B          ;\u5982\u679c\u7b2c\u4e00\u4f4d\u4e3a1\uff0c\u5219\u6709\u8f93\u5165\uff0c\u9700\u8981\u5c06\u8f93\u5165\u7684\u5185\u5bb9\u52a0\u8f7d\u5230R0\n        BRnzp   NEXT_TASK     ;\u540e\u7eed\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u4efb\u52a1\nA       .FILL   xFE00         ;address of KBSR\nB       .FILL   xFE02         ;address of KBDR\n</code></pre> <ul> <li>KBSR[15] controls the synchronization of the slow keyboard and the fast processor.</li> </ul> <p>KBSR\u63a7\u5236\u6162\u901f\u952e\u76d8\u548c\u5feb\u901f\u5904\u7406\u5668</p> <ul> <li>When a key on the keyboard is struck, the ASCII code for that key is loaded into KBDR[7:0], and the electronic circuits associated with the keyboard automatically <code>set KBSR[15] to 1.</code></li> </ul> <p>\u5f53\u952e\u76d8\u7684\u67d0\u4e00\u4e2a\u952e\u88ab\u6572\u51fb\uff0c\u5219\u8be5\u952e\u7684ASCII\u4f1a\u88ab\u52a0\u8f7d\u5230KBDR\u7684bits[7:0],\u8868\u793a\u6570\u636e\uff0c\u540c\u65f6\u4e0e\u952e\u76d8\u76f8\u5173\u7684\u7535\u5b50\u7535\u8def\u4f1a\u5c06KBSR\u7684bit[15]\u8bbe\u7f6e\u4e3a1</p> <ul> <li>If KBSR[15] =1, the ASCII code corresponding to the last key struck has not yet been read, and so the keyboard is disabled; that is, no key can be struck until the last key is read.</li> </ul> <p>\u5982\u679c KBSR[15] =1\uff0c\u5219\u8868\u793a\u6700\u540e\u6572\u51fb\u7684\u6309\u952e\u5bf9\u5e94\u7684 ASCII \u7801\u5c1a\u672a\u8bfb\u53d6\uff0c\u56e0\u6b64\u952e\u76d8\u88ab\u7981\u7528\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8bfb\u53d6\u6700\u540e\u4e00\u4e2a\u952e\u4e4b\u524d\uff0c\u4e0d\u80fd\u6572\u51fb\u4efb\u4f55\u952e\u3002</p> <ul> <li>When the LC-3 reads KBDR, the electronic circuits associated with the keyboard automatically clear KBSR[15], allowing another key to be struck. </li> </ul> <p>\u5f53LC-3\u8bfb\u53d6KBDR\u540e\uff0c\u5373\u8bfb\u53d6\u5b8c\u6570\u636e\u4e4b\u540e\uff0cKBSR[15]\u4f1a\u88ab\u81ea\u52a8\u6e05\u9664\uff0c\u7ee7\u800c\u5141\u8bb8\u6572\u51fb\u4e0b\u4e00\u4e2a\u952e</p> <p>\u5982\u679c\u8f93\u5165/\u8f93\u51fa<code>\u7531\u5904\u7406\u5668\u63a7\u5236\uff08\u5373\u901a\u8fc7\u8f6e\u8be2\uff09</code>\uff0c\u5219\u7a0b\u5e8f\u53ef\u4ee5\u91cd\u590d\u6d4b\u8bd5 KBSR[15]\uff0c\u76f4\u5230\u6ce8\u610f\u5230\u8be5\u4f4d\u5df2\u8bbe\u7f6e\u3002\u6b64\u65f6\uff0c\u5904\u7406\u5668\u53ef\u4ee5\u5c06 KBDR \u4e2d\u5305\u542b\u7684 ASCII \u4ee3\u7801\u52a0\u8f7d\u5230 LC-3 \u5bc4\u5b58\u5668\u4e4b\u4e00\u4e2d\u3002\u7531\u4e8e\u5904\u7406\u5668\u4ec5\u5728 KBSR[15] \u4e3a 1 \u65f6\u52a0\u8f7d ASCII \u4ee3\u7801\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728\u591a\u6b21\u8bfb\u53d6\u5355\u4e2a\u952e\u5165\u5b57\u7b26\u7684\u5371\u9669\u3002<code>\uff08\u4e00\u65e6\u52a0\u8f7d\u5b8c\u6bd5\uff0c\u7535\u8def\u5c31\u4f1a\u628aready bit \u8bbe\u4e3a0\uff09</code>\u6b64\u5916\uff0c\u7531\u4e8e\u5728\u8bfb\u53d6\u524d\u4e00\u4e2a\u4ee3\u7801\u4e4b\u524d\u952e\u76d8\u5904\u4e8e\u7981\u7528\u72b6\u6001\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728\u5904\u7406\u5668\u4e22\u5931\u6240\u952e\u5165\u5b57\u7b26\u7684\u5371\u9669\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0cKBSR[15]\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u952e\u5165\u7684\u952e\u5c06\u88ab\u52a0\u8f7d\u4e00\u6b21\u3002</p>"},{"location":"course/ICS/IO/#9223-implementation-of-memory-mapped-input","title":"9.2.2.3 Implementation of memory-mapped input \u5185\u5b58\u6620\u5c04\u8f93\u5165\u7684\u5b9e\u73b0","text":"<p>\u4e00\u822c\u7684LD instruction\uff1a</p> <ol> <li>The MAR is loaded with the address of the memory location to be read.</li> <li>Memory is read, resulting in MDR being loaded with the contents at the    specified memory location.</li> <li>The destination register (DR) is loaded with the contents of MDR.</li> </ol> <p>\u5728\u5185\u5b58\u6620\u5c04\u8f93\u5165\u4e2d\uff0cMAR \u4e0d\u518d\u52a0\u8f7d\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740\uff0c\u800c\u662f\u52a0\u8f7d\u5bc4\u5b58\u5668\u7684\u5730\u5740\uff08data\u88ab\u5199\u5165\u5bc4\u5b58\u5668\u4e2d\uff09\u3002address control logic selects the corresponding device register to provide input to the MDR\uff0c\u5730\u5740\u63a7\u5236\u903b\u8f91\u9009\u62e9\u76f8\u5e94\u7684\u8bbe\u5907\u5bc4\u5b58\u5668\u6765\u5411 MDR \u63d0\u4f9b\u8f93\u5165\u3002</p>"},{"location":"course/ICS/IO/#923-output-to-the-monitor","title":"9.2.3 Output to the Monitor","text":""},{"location":"course/ICS/IO/#9231-basic-output-registersddrdsr","title":"9.2.3.1 Basic Output Registers\uff08DDR\uff0cDSR\uff09","text":"<p>DDR stands for Display Data Register, which drives the monitor display. DSR stands for Display Status Register. In the LC-3, DDR is assigned address xFE06. DSR is assigned address xFE04.</p> <p>DDR \u4ee3\u8868\u663e\u793a\u6570\u636e\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u9a71\u52a8\u663e\u793a\u5668\u663e\u793a\u3002 DSR \u4ee3\u8868\u663e\u793a\u72b6\u6001\u5bc4\u5b58\u5668\u3002\u5728 LC-3 \u4e2d\uff0c<code>DDR \u88ab\u5206\u914d\u5730\u5740 xFE06\u3002 DSR \u88ab\u5206\u914d\u5730\u5740 xFE04\u3002</code></p> <p></p> <p>\u5bf9\u4e8eDDR\uff0c\u4f4d[7:0]\u7528\u4e8e\u6570\u636e\uff0c\u4f4d[15:8]\u5305\u542bx00\u3002\u5bf9\u4e8eDSR\uff0c\u4f4d[15]\u5305\u542b\u540c\u6b65\u673a\u5236\uff0c\u5373\u5c31\u7eea\u4f4d\u3002</p>"},{"location":"course/ICS/IO/#9232-the-basic-output-service-routine","title":"9.2.3.2 The Basic  Output Service Routine","text":"<p>DSR[15] controls the synchronization of the fast processor and the slow monitor display. </p> <p>DSR[15] \u63a7\u5236\u5feb\u901f\u5904\u7406\u5668\u548c\u6162\u901f\u76d1\u89c6\u5668\u663e\u793a\u7684\u540c\u6b65\u3002</p> <p>When the LC-3 transfers an ASCII code to DDR[7:0] for outputting, the electronics of the monitor automatically clear DSR[15] as the processing of the contents of DDR[7:0] begins. </p> <p>(\u521d\u59cbDSR[15] = 1)\u5f53 LC-3 \u5c06 ASCII \u4ee3\u7801\u4f20\u8f93\u5230 DDR[7:0] \u8fdb\u884c\u8f93\u51fa\u65f6\uff0c\u663e\u793a\u5668\u7684\u7535\u5b50\u5668\u4ef6\u4f1a\u5728\u5f00\u59cb\u5904\u7406 DDR[7:0] \u5185\u5bb9\u65f6\u81ea\u52a8\u6e05\u9664 DSR[15]\u3002</p> <p>As long as DSR[15] is clear, the monitor is still processing the previous character, so the monitor is disabled as far as additional output from the processor is concerned.</p> <p>\u53ea\u8981 DSR[15] \u6e05\u96f6\uff0c\u76d1\u89c6\u5668\u4ecd\u5728\u5904\u7406\u524d\u4e00\u4e2a\u5b57\u7b26\uff0c\u56e0\u6b64\u5c31\u5904\u7406\u5668\u7684\u9644\u52a0\u8f93\u51fa\u800c\u8a00\uff0c\u663e\u793a\u5668\u88ab\u7981\u7528\u3002</p> <p>When the monitor finishes processing the character on the screen, it (the monitor) automatically sets DSR[15]. This is a signal to the processor that it (the processor) can transfer another ASCII code to DDR for outputting. </p> <p>\u5f53\u663e\u793a\u5668\u5904\u7406\u5b8c\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u65f6\uff0c\u5b83\uff08\u663e\u793a\u5668\uff09\u4f1a\u81ea\u52a8\u8bbe\u7f6e DSR[15]\u3002\u8fd9\u662f\u5411\u5904\u7406\u5668\u53d1\u51fa\u7684\u4fe1\u53f7\uff0c\u8868\u660e\u5b83\uff08\u5904\u7406\u5668\uff09\u53ef\u4ee5\u5c06\u53e6\u4e00\u4e2a ASCII \u4ee3\u7801\u4f20\u8f93\u5230 DDR \u4e2d\u8f93\u51fa\u3002</p> <p>\u5982\u679c\u8f93\u5165/\u8f93\u51fa\u7531<code>\u5904\u7406\u5668(processor)\u63a7\u5236\uff08\u5373\u901a\u8fc7\u8f6e\u8be2\uff09</code>\uff0c\u5219\u7a0b\u5e8f\u53ef\u4ee5\u91cd\u590d\u6d4b\u8bd5 DSR[15]\uff0c\u76f4\u5230\u6ce8\u610f\u5230\u8be5\u4f4d\u5df2\u8bbe\u7f6e\uff0c\u8868\u660e\u53ef\u4ee5\u5c06\u5b57\u7b26\u5199\u5165\u5c4f\u5e55\u3002\u6b64\u65f6\uff0c\u5904\u7406\u5668\u53ef\u4ee5\u5c06\u5176\u5e0c\u671b\u5199\u5165 DDR[7:0] \u7684\u5b57\u7b26\u7684 ASCII \u4ee3\u7801\u5b58\u50a8\u8d77\u6765\uff0c\u4ece\u800c\u8bbe\u7f6e\u5c06\u8be5\u5b57\u7b26\u4f20\u8f93\u5230\u663e\u793a\u5668\u7684\u663e\u793a</p> <pre><code>;cause the ASCII code contained in R0 to be displayed on the monitor\nSTART   LDI     R1,A        ;\u5c06DSR\u7684\u5185\u5bb9\u52a0\u8f7d\u5230R1\uff0c\u5224\u65adR1\u7684\u6b63\u8d1f\u3002\u6ce8\u610f\u4e00\u4e0b\u6b64\u5904\u7684LDI\uff0cA\u8868\u793a\u5730\u5740\uff0c\u5b58\u653e\u7684\u5185\u5bb9\u65f6xFE06\uff0c\u6211\u4eec\u9700\u8981\u5c06xFE06\u5b58\u653e\u7684\u5185\u5bb9DDR\u52a0\u8f7d\u5230R1\u4e2d\n        BRzp    START       ;\u5982\u679cR1\u4e3a0\u6216\u6b63\u6570\uff0c\u5373\u7b2c\u4e00\u4f4d\u4e3a0\uff0c\u5219\u8bf4\u660e\u663e\u793a\u5668\u88ab\u7981\u7528\uff0c\u65e0\u6cd5\u8f93\u51fa\n        STI     R0,B        ;\u7b2c\u4e00\u4f4d\u4e3a1\u60c5\u51b5\uff0c\u5c06\u4fdd\u5b58\u5728R0\u7684\u5185\u5bb9\u5199\u5165\u5230DDR\n        BRnzp   NEXT_TASK   ;\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u4efb\u52a1\nA       .FILL   xFE04       ;address of DSR\nB       .FILL   xFE06       ;address of DDR\n</code></pre> <p>\u7b2c 01 \u884c\u548c\u7b2c 02 \u884c\u91cd\u590d\u8f6e\u8be2 DSR[15]\uff0c\u4ee5\u67e5\u770b\u76d1\u89c6\u5668\u7535\u5b50\u8bbe\u5907\u662f\u5426\u5b8c\u6210\u4e86\u5904\u7406\u5668\u4f20\u9001\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002\u53ea\u8981 DSR[15] \u6e05\u96f6\uff0c\u76d1\u89c6\u5668\u7535\u5b50\u8bbe\u5907\u4ecd\u5728\u5904\u7406\u8be5\u5b57\u7b26\uff0c\u5e76\u4e14 BRzp \u5206\u652f\u5230 START \u4ee5\u8fdb\u884c\u5faa\u73af\u7684\u53e6\u4e00\u6b21\u8fed\u4ee3\u3002</p> <p>\u5f53\u76d1\u89c6\u5668\u7535\u5b50\u8bbe\u5907\u5b8c\u6210\u5904\u7406\u5668\u4f20\u9001\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5c06 DSR[15] \u8bbe\u7f6e\u4e3a 1\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5206\u652f\u5931\u8d25\u5e76\u6267\u884c\u7b2c 03 \u884c\u7684\u6307\u4ee4\u3002\u8bf7\u6ce8\u610f STI \u6307\u4ee4\u7684\u4f7f\u7528\uff0c\u5b83\u5c06 R0 \u5b58\u50a8\u5230 xFE06\uff08DDR \u7684\u5185\u5b58\u6620\u5c04\u5730\u5740\uff09\u4e2d\u3002\u5bf9 DDR \u7684\u5199\u5165\u4e5f\u4f1a\u6e05\u9664 DSR[15]\uff0c\u6682\u65f6\u7981\u7528 DDR \u7684\u8fdb\u4e00\u6b65\u8f93\u51fa\u3002\u76d1\u89c6\u5668\u7535\u5b50\u8bbe\u5907\u63a5\u7ba1\u5e76\u5c06\u5b57\u7b26\u5199\u5165\u5c4f\u5e55\u3002\u7531\u4e8e\u8f93\u51fa\u4f8b\u7a0b\u73b0\u5df2\u5b8c\u6210\uff0c\u7a0b\u5e8f\u65e0\u6761\u4ef6\u5206\u652f\uff08\u7b2c 04 \u884c\uff09\u5230\u5176\u4e0b\u4e00\u4e2a\u4efb\u52a1</p>"},{"location":"course/ICS/IO/#9233-implementation-of-memory-mapped-output","title":"9.2.3.3 Implementation of Memory-Mapped Output","text":"<p>\u4e00\u822c\u7684ST\u64cd\u4f5c\uff1a</p> <ol> <li> <p>The MAR is loaded with the address of the memory location to be written.</p> </li> <li> <p>The MDR is loaded with the data to be written to memory.</p> </li> <li> <p>Memory is written, resulting in the contents of MDR being stored in the specified memory location.</p> </li> </ol> <p>\u5728\u5185\u5b58\u6620\u5c04\u8f93\u51fa\u60c5\u51b5\u4e2d\uff0cMAR\u4e0d\u518d\u52a0\u8f7d\u5185\u5b58\u5730\u5740\u7684\u4f4d\u7f6e\uff0c\u800c\u662f\u52a0\u8f7d\u5bc4\u5b58\u5668\u7684\u5730\u5740\uff08STI  R0\uff0cB  B\u8868\u793a\u7684\u662f\u5bc4\u5b58\u5668DDR\u7684\u5730\u5740\uff09\uff0cThe address control logic asserts the load enable signal of DDR.\u5730\u5740\u63a7\u5236\u903b\u8f91\u65ad\u8a00 DDR \u7684\u52a0\u8f7d\u4f7f\u80fd\u4fe1\u53f7</p>"},{"location":"course/ICS/IO/#9234-keyboard-echo","title":"9.2.3.4 Keyboard Echo","text":"<p>\u5f53\u6211\u4eec\u5728\u952e\u76d8\u6253\u5b57\u65f6\uff0c\u4e00\u8fb9\u6253\u5b57\uff0c\u4e00\u8fb9\u8f93\u51fa\uff0c\u5c06input\u548coutput\u7ed3\u5408</p> <pre><code>START   LDI     R1,KESR     ;\u7528\u4e8e\u5224\u65ad\u6b64\u65f6\u80fd\u5426\u8f93\u5165\n        BRzp    START       ;\u5982\u679c\u4ee50\u5f00\u5934\uff0c\u5219\u65e0\u6cd5\u8f93\u5165\uff0c\u4e0d\u65ad\u8be2\u95eeKBSR\n        LDI     R0,KBDR     ;\u5982\u679c\u7b2c\u4e00\u4f4d\u662f1\uff0cKEDR\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u91c7\u7528\u95f4\u63a5\u5bfb\u5740\uff0c\u5148\u627e\u5230KEDR\u7684\u5730\u5740\uff0c\u8bfb\u53d6\u5176\u4e2d\u7684\u5185\u5bb9\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u5728\u8bfb\u53d6\u8be5\u5730\u5740\uff08\u771f\u6b63keyboard data register\uff09\u7684\u5185\u5bb9\nECHO    LDI     R1,DSR      ;\u7528\u4e8e\u5224\u65ad\u80fd\u5426\u8f93\u51fa\n        BRzp    ECHO        ;\u5982\u679c\u7b2c\u4e00\u4f4d\u4e3a0\uff0c\u5219\u65e0\u6cd5\u8f93\u51fa\n        STI     R0,DDR      ;\u95f4\u63a5\u5bfb\u5740\uff0c\u8bfb\u5165\u5230R0\n        BRnzp   NEXT_TASK\nKBSR    .FILL   xFE00\nKBDR    .FILL   xFE02\nDSR     .FILL   xFE04\nDDR     .FILL   xFE06       ;address of DDR\n</code></pre>"},{"location":"course/ICS/IO/#924-a-more-sophisticated-input-routine","title":"9.2.4 A More Sophisticated Input Routine \u66f4\u52a0\u590d\u6742\u7684\u8f93\u5165\u4f8b\u7a0b","text":"<p>\u5728\u524d\u9762\u63d0\u5230\u7684\u8f93\u5165\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u4e00\u4e2a\u4e00\u4e2a\u63d0\u793a\uff0c\u8ba9\u5750\u5728\u952e\u76d8\u524d\u7684\u4eba\u77e5\u9053\u4f55\u65f6\u9700\u8981\u952e\u5165\u6309\u952e\u3002</p> <p>\u7b2c 05 \u884c\u5230\u7b2c 08 \u884c\u5c06 ASCII \u4ee3\u7801 x0A \u5199\u5165\u76d1\u89c6\u5668\u3002\u8fd9\u662f\u65b0\u884c\u7684 ASCII \u4ee3\u7801\u3002\u5927\u591a\u6570 ASCII \u4ee3\u7801\u5bf9\u5e94\u4e8e\u5c4f\u5e55\u4e0a\u53ef\u89c1\u7684\u5b57\u7b26\u3002\u6709\u4e00\u4e9b\u5b57\u7b26\uff08\u5982 x0A\uff09\u662f\u63a7\u5236\u5b57\u7b26\u3002\u5b83\u4eec\u5bfc\u81f4\u52a8\u4f5c\u53d1\u751f\u3002\u5177\u4f53\u6765\u8bf4\uff0cASCII \u4ee3\u7801 x0A \u4f7f\u5149\u6807\u79fb\u52a8\u5230\u5c4f\u5e55\u4e0a\u4e0b\u4e00\u884c\u7684\u6700\u5de6\u4fa7\u3002\u56e0\u6b64\uff0c\u540d\u79f0\u4e3a Newline\u3002\u7136\u800c\uff0c\u5728\u5c1d\u8bd5\u5199\u5165 x0A \u4e4b\u524d\uff0c\u4e00\u5982\u65e2\u5f80\uff0c\u6d4b\u8bd5 DSR[15]\uff08\u7b2c 6 \u884c\uff09\u4ee5\u67e5\u770b DDR \u662f\u5426\u53ef\u4ee5\u63a5\u53d7\u5b57\u7b26\u3002\u5982\u679c DSR[15] \u6e05\u96f6\uff0c\u5219\u76d1\u89c6\u5668\u6b63\u5fd9\uff0c\u5e76\u4e14\u91cd\u590d\u5faa\u73af\uff08\u7b2c 06 \u884c\u548c\u7b2c 07 \u884c\uff09\u3002\u5f53DSR[15]\u4e3a1\u65f6\uff0c\u4e0d\u6267\u884c\u6761\u4ef6\u5206\u652f\uff08\u7b2c7\u884c\uff09\uff0c\u5e76\u5c06\uff08\u7b2c8\u884c\uff09x0A\u5199\u5165DDR\u8f93\u51fa</p> <pre><code>START   ST      R1,SaveR1\n        ST      R2,SaveR2\n        ST      R3,SaveR3       ;\u9884\u5148\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c\n        LD      R2,Newline\nL1      LDI     R3,DSR          ;R3\u4fdd\u5b58DSR\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\n        BRzp    L1              ;Loop until monitor is ready.\u73b0\u5728\u662foutput\u7684\u8fc7\u7a0b\uff0c\u5f53R3\u7b2c\u4e00\u4f4d\u4e3a0\u65f6\uff0c\u8bf4\u660e\u65e0\u6cd5\u8fdb\u884c\u8f93\u51fa\uff0c\u9700\u8981\u4e0d\u65ad\u8be2\u95ee\uff0c\u76f4\u5230\u7b2c\u4e00\u4f4d\u53d8\u4e3a1\n        STI     R2,DDR          ;\u5c06R2\u7684\u5185\u5bb9\u5199\u5230DDR\u5bc4\u5b58\u5668\u4e2d\n        LEA     R1,Prompt       ;\u5c06Prompt\u7684\u5934\u5730\u5740\u5199\u5165R1\nLoop    LDR     R0,R1,#0        ;R0\u52a0\u8f7dPrompt\u7684\u5934\u5730\u5740\uff0c\u6ce8\u610f\u4e00\u4e0b\uff0c\u5173\u4e8eoutput\uff0c\u8f93\u51fa\u7684\u65f6R0\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6240\u4ee5\u9700\u8981\u5148\u4fdd\u5b58\u5230R0\u4e2d\n        BRz     Input           ;End of prompt string,\u5b57\u7b26\u4e32\u4ee5x0000\u7ed3\u5c3e\nL2      LDI     R3\uff0cDSR\n        BRzp    L2\n        STI     R0,DDR          ;write next prompt character\n        ADD     R1,R1,#1        ;Prompt \u6307\u9488\u7684\u5730\u5740\u52a0\u4e00\uff0c\u7528\u4e8e\u8f93\u51fa\u4e0b\u4e00\u4e2a\u5b57\u7b26\n        BRnzp   Loop            ;\u8fd4\u56deLoop,\u7528\u4e8e\u8f93\u51fa\u4e0b\u4e00\u4e2a\u5b57\u7b26\nInput   LDI     R3,KBSR\n        BRzp    Input\n        LDI     R0,KEDR         ;Load input character into R0\nL3      LDI     R3,DSR          ;\u8f93\u51fa\u9636\u6bb5\n        BRzp    L3\n        STI     R0,DDR          ;ECHO input character\nL4      LDI     R3,DSR\n        BRzp    L4\n        STI     R2,DDR          ;Move cursor to new clean line\u5c06\u5149\u6807\u79fb\u81f3\u65b0\u7684\u5e72\u51c0\u884c\n        LD      R1,SaveR1\n        LD      R2,SaveR2\n        LD      R3,SaveR3\n        BRnzp   NEXT_TASK\nSaveR1  .BLKW   1\nSaveR2  .BLKW   1\nSaveR3  .BLKW   1\nKBSR    .FILL   xFE00\nKBDR    .FILL   xFE02\nDSR     .FILL   xFE04\nDDR     .FILL   xFE06\nNewline .FILL   x000A           ;ASCII code for Newline\nPrompt  .STRINGZ    \"Input a character&gt;\"\n</code></pre>"},{"location":"course/ICS/IO/#925-implementation-of-memory-mapped-iorevisited","title":"9.2.5 Implementation of Memory-Mapped I/O,Revisited","text":"<p><code>The Address Control Logic Block(\u5730\u5740\u63a7\u5236\u903b\u8f91\u5757)</code> controls the input or output operation. Note that there are three inputs to this block.</p> <ul> <li>MIO.EN indicates whether a data movement from/to memory or I/O is to take place this clock cycle. </li> </ul> <p>MIO.EN\u8868\u793a\u6b64\u65f6\u949f\u5468\u671f\u662f\u5426\u53d1\u751f\u4ece/\u5230\u5b58\u50a8\u5668\u6216I/O\u7684\u6570\u636e\u79fb\u52a8</p> <ul> <li>MAR contains the address of the memory location or the memory-mapped address of an I/O device register. </li> </ul> <p>MAR \u5305\u542b\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740\u6216 I/O \u8bbe\u5907\u5bc4\u5b58\u5668\u7684\u5185\u5b58\u6620\u5c04\u5730\u5740\u3002</p> <ul> <li>R.W indicates<code>whether a load or a store</code>is to take place.</li> </ul> <p>R.W\u6307\u793a\u662f\u5426\u8981\u8fdb\u884c load \u6216\u8005 strore </p> <ul> <li>\u5982\u679cR.W\u8868\u793a load \uff0c\u5219\u4f20\u8f93\u662f\u4ece\u5185\u5b58\u6216I/O\u8bbe\u5907\u5230MDR\u3002The Address Control Logic Block\uff08\u5730\u5740\u903b\u8f91\u63a7\u5236\u5757\uff09\u5411INMUX\u63d0\u4f9b\u9009\u62e9\u7ebf\uff0c\u4ee5\u83b7\u53d6\u9002\u5408\u7684I/O\u8bbe\u5907\u5bc4\u5b58\u5668\u6216\u8005memory\uff08\u53d6\u51b3\u4e8eMAR\uff09\u3002</li> <li>\u5982\u679cR.W\u8868\u793a store \uff0c\u5219MDR\u7684\u5185\u5bb9\u8981\u5199\u5165\u5185\u5b58\u6216\u8005\u8bbe\u5907\u5bc4\u5b58\u5668\u3002\u5730\u5740\u903b\u8f91\u63a7\u5236\u5757\u8981\u4e48enable a write to memory \u8981\u4e48\u65ad\u8a00\u7531 MAR \u7684\u5185\u5bb9\u6307\u5b9a\u7684\u8bbe\u5907\u5bc4\u5b58\u5668\u7684\u52a0\u8f7d\u542f\u7528\u7ebf\u3002</li> </ul> <p></p>"},{"location":"course/ICS/IO/#93-operating-system-service-routineslc-3-trap-routines","title":"9.3 Operating System Service Routines\uff08LC-3 Trap Routines\uff09","text":"<p>Figure 9.9 shows a user program that, upon reaching location x4000, needs an I/O task performed. \u9700\u8981\u6267\u884cIO\u4efb\u52a1</p> <p><code>The user program uses the TRAP instruction to request the operating system to perform the task on behalf of the user program. The operating system takes control of the computer, handles the request specified by the TRAP instruction, and then returns control back to the user program at location x4001.</code>\u7528\u6237\u7a0b\u5e8f\u4f7f\u7528TRAP\u6307\u4ee4\u8bf7\u6c42\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u8868\u7528\u6237\u7a0b\u5e8f\u5b8c\u6210\u4efb\u52a1\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u8ba1\u7b97\u673a\uff0c\u5904\u7406 TRAP \u6307\u4ee4\u6307\u5b9a\u7684\u8bf7\u6c42\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u4f4d\u4e8e x4001 \u5904\u7684\u7528\u6237\u7a0b\u5e8f\u3002</p> <p>As we said at the start of this chapter, we usually refer to the request made by the user program as a system call or a service call.\uff08\u7cfb\u7edf\u8c03\u7528\u6216\u8005\u670d\u52a1\u8c03\u7528\uff09</p>"},{"location":"course/ICS/IO/#931-the-trap-mechanism","title":"9.3.1 The Trap Mechanism\uff08\u673a\u5236\uff09","text":"<p>involve several element</p> <ol> <li>A set of service routines executed on behalf of user programs by the operating system. These are part of the operating system and start at arbitrary addresses in system space.  The LC-3 was designed so that up to256 service routines can be specified</li> </ol> <p>\u7531\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u8868\u7528\u6237\u7a0b\u5e8f\u6267\u884c\u7684\u4e00\u7ec4\u670d\u52a1\u4f8b\u7a0b\u3002\u5b83\u4eec\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4ece\u7cfb\u7edf\u7a7a\u95f4\u4e2d\u7684\u4efb\u610f\u5730\u5740\u5f00\u59cb\u3002</p> <ol> <li>A table of the starting addresses of these 256 service routines. This table is stored in memory locations x0000 to x00FF. \u8fd9 256 \u4e2a\u670d\u52a1\u4f8b\u7a0b\u7684\u8d77\u59cb\u5730\u5740\u8868\u3002\u8be5\u8868\u5b58\u50a8\u5728\u5185\u5b58\u4f4d\u7f6e x0000 \u5230 x00FF \u4e2d\u3002</li> </ol> <ul> <li>the one for the <code>character output</code>service routine (memory location x0420), which is stored in <code>memory location x0021</code>, </li> <li>the one for the <code>keyboard input</code>service routine (location x04A0), stored in <code>location x0023</code></li> <li>the one for the machine<code>halt</code>service routine (location x0520), stored in location <code>x0025.</code></li> </ul> <p></p> <ol> <li>The TRAP instruction.When a user program wishes to have the operating system execute a specific service routine on behalf of the user program, and then <code>return control to the user program</code>, the user program uses the TRAP instruction\u3002</li> </ol> <p>\u5f53\u7528\u6237\u7a0b\u5e8f\u5e0c\u671b\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u8868\u7528\u6237\u7a0b\u5e8f\u6267\u884c\u7279\u5b9a\u7684\u670d\u52a1\u4f8b\u7a0b\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u65f6\uff0c\u7528\u6237\u7a0b\u5e8f\u4f7f\u7528TRAP\u6307\u4ee4</p> <ol> <li>A linkage back to the user program.The service routine must have a mechanism for <code>returning control to the user program</code></li> </ol> <p>\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f\u7684\u94fe\u63a5\u3002\u670d\u52a1\u4f8b\u7a0b\u5fc5\u987b\u5177\u6709\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u7684\u673a\u5236</p>"},{"location":"course/ICS/IO/#932-the-trap-instruction","title":"9.3.2 The TRAP Instruction","text":"<p>The TRAP instruction causes the service routine to execute by </p> <ul> <li>(1) changing the PC to the starting address of the relevant service routine on the basis of its trap vector</li> </ul> <p>\u6839\u636e\u5176\u9677\u9631\u5411\u91cf\u5c06 PC \u66f4\u6539\u4e3a\u76f8\u5173\u670d\u52a1\u4f8b\u7a0b\u7684\u8d77\u59cb\u5730\u5740</p> <ul> <li>(2) providing a way to get back to the program that executed the TRAP instruction. The \u201cway back\u201d is referred to as a linkage</li> </ul> <p>\u63d0\u4f9b\u8fd4\u56de\u5230\u6267\u884c TRAP \u6307\u4ee4\u7684\u7a0b\u5e8f\u7684\u65b9\u6cd5</p> <p></p> <ol> <li>opcode = 1111</li> <li>bits[11:8] must be zero </li> <li>bits[7:0]\u8868\u793atrap vector\uff0c\u5b83\u6807\u8bc6\u7528\u6237\u7a0b\u5e8f\u5e0c\u671b\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u8868\u5176\u6267\u884c\u7684\u670d\u52a1\u4f8b\u7a0b</li> <li>\u4e0a\u56fe\u6240\u793a\u7684\u662fx23\uff0c\u6307\u4ee4</li> </ol> <p>TRAP \u6307\u4ee4\u7684\u6307\u4ee4\u5468\u671f\u7684 EXECUTE \u9636\u6bb5\u6267\u884c\u4e09\u4ef6\u4e8b\uff1a</p> <ol> <li> <p>The <code>PSR\uff08processor status register\uff09</code> and PC are both pushed onto the <code>system stack</code>(\u56e0\u4e3aTRAP\u7684\u8d77\u59cb\u5730\u5740\u5728x0000\u5230x00FF\u4e4b\u95f4). </p> </li> <li> <p>PSR[15] is set to 0, since the service routine is going to require supervisor privilege to execute. PSR[10:8] are left unchanged since<code>the priority of the TRAP routine is the same as the priority of the program that requested it.</code></p> </li> </ol> <p>PSR[15] (\u8868\u660e\u662f\u5426\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650) \u8bbe\u7f6e\u4e3a 0\uff0c\u56e0\u4e3a\u670d\u52a1\u4f8b\u7a0b\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u624d\u80fd\u6267\u884c\u3002 PSR[10:8] \uff08\u6807\u8bc6\u4f18\u5148\u7ea7\u7684\u7b49\u7ea7\uff09\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u4e3a<code>TRAP \u4f8b\u7a0b\u7684\u4f18\u5148\u7ea7\u4e0e\u8bf7\u6c42\u5b83\u7684\u7a0b\u5e8f\u7684\u4f18\u5148\u7ea7\u76f8\u540c</code></p> <ol> <li>The 8-bit trap vector is zero-extended to 16 bits to form an address that corresponds to a location in the Trap Vector Table. For the trap vector x23, that address is x0023. Memory location x0023 contains x04A0, the starting address of the TRAP x23 service routine. The PC is loaded with x04A0, completing the instruction cycle.</li> </ol> <p>8 \u4f4d trap \u5411\u91cf\u88ab\u96f6\u6269\u5c55\u4e3a 16 \u4f4d\uff0c\u4ee5\u5f62\u6210\u4e0e trap \u5411\u91cf\u8868\u4e2d\u7684\u4f4d\u7f6e\u76f8\u5bf9\u5e94\u7684\u5730\u5740\u3002\u5bf9\u4e8etrap \u5411\u91cf x23\uff0c\u8be5\u5730\u5740\u662f x0023\u3002\u5185\u5b58\u4f4d\u7f6e x0023 \u5305\u542b x04A0\uff0c<code>\u5373 TRAP x23 \u670d\u52a1\u4f8b\u7a0b\u7684\u8d77\u59cb\u5730\u5740(x04A0)\u3002</code> PC \u52a0\u8f7d x04A0\uff0c\u5b8c\u6210\u6307\u4ee4\u5468\u671f</p> <p>\u6ce8\u610f\u70b9\uff1a</p> <ol> <li>Since the <code>PC was incremented</code> during the FETCH phase of the TRAP instruction\u2019s instruction cycle, <code>the return linkage is automatically saved in the PC</code>. When control returns to the user program, the PC will automatically be pointing to the instruction following the TRAP instruction</li> </ol> <p>\u7531\u4e8e PC \u5728 TRAP \u6307\u4ee4\u7684\u6307\u4ee4\u5468\u671f\u7684 FETCH \u9636\u6bb5\u9012\u589e\uff0c\u56e0\u6b64\u8fd4\u56de\u94fe\u63a5\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5728 PC \u4e2d\u3002\u5f53\u63a7\u5236\u6743\u8fd4\u56de\u5230\u7528\u6237\u7a0b\u5e8f\u65f6\uff0c<code>PC\u5c06\u81ea\u52a8\u6307\u5411TRAP\u6307\u4ee4\u540e\u9762\u7684\u6307\u4ee4\uff08\u4ece\u800c\u6267\u884cTRAP\u540e\u9762\u7684\u6307\u4ee4\uff09</code></p> <ol> <li> <p>\u5982\u679c\u6211\u4eec\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528TRAP\u6307\u4ee4\uff0c\u9700\u8981<code>\u5b8c\u6210\u6808\u7684\u5207\u6362</code>\uff0cPSR\u301015\u3011\u8bbe\u7f6e\u4e3a0\uff0c\u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650\uff0c\uff08<code>\u5148\u4fdd\u5b58USP\uff0c\u518d\u52a0\u8f7dSSP\u5230R6</code>\uff0c\u7136\u540e\u4fdd\u5b58PSR \u548c PC\uff09</p> </li> <li> <p>trap vector\uff08x0023\uff09\u5bf9\u5e94\u7684\u5730\u5740\u7684\u5185\u5bb9\uff08x04A0\uff09\uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u670d\u52a1\u4f8b\u7a0b\u7684\u8d77\u59cb\u5730\u5740\uff0c\u7528\u4e8e\u4ece\u952e\u76d8\u8f93\u5165\u5b57\u7b26</p> </li> </ol>"},{"location":"course/ICS/IO/#933-the-rti-instructionto-return-control-to-the-calling-program","title":"9.3.3 The RTI Instruction\uff1aTo Return Control to the Calling Program","text":"<p><code>RTI\uff1areturn from trap or interrupt</code></p> <p></p> <ol> <li> <p>opcode = 1000</p> </li> <li> <p>The RTI instruction (opcode = 1000, with no operands) pops the top two values on the system stack into the PC and PSR. <code>Since the PC contains the address following the address of the TRAP instruction, control returns to the user program at the correct address.</code></p> </li> </ol> <p>\u5148\u4ecesystem stack \u91ccpop\u51faPC\u3001PSR\uff0c\u540c\u65f6\u6839\u636e\u53d6\u51fa\u7684PSR[15]\u5224\u65ad\u662f\u5426\u9700\u8981\u5207\u6362\u6808</p> <ol> <li>Finally, once the PSR has been popped off the system stack, PSR[15] must be examined to see whether the processor was running in User mode or Supervisor mode when the TRAP instruction was executed. </li> </ol> <p>\u6700\u540e\uff0c\u4e00\u65e6 PSR \u4ece\u7cfb\u7edf\u5806\u6808\u4e2d\u5f39\u51fa\uff0c\u5c31\u5fc5\u987b\u68c0\u67e5 PSR[15]\uff0c\u4ee5\u4e86\u89e3\u6267\u884c TRAP \u6307\u4ee4\u65f6\u5904\u7406\u5668\u662f\u8fd0\u884c\u5728\u7528\u6237\u6a21\u5f0f\u8fd8\u662f\u7ba1\u7406\u6a21\u5f0f\u3002</p> <ul> <li> <p>If in User mode, the stack pointers need to be adjusted to reflect that now back in User mode, the relevant stack in use is the user stack. This is done by loading the Saved_SSP with the current contents of R6, and loading R6 with the contents of Saved_USP.</p> <p>\u5982\u679c\u5904\u4e8e\u7528\u6237\u6a21\u5f0f\uff0c\u5219\u9700\u8981\u8c03\u6574\u5806\u6808\u6307\u9488\u4ee5\u53cd\u6620\u73b0\u5728\u56de\u5230\u7528\u6237\u6a21\u5f0f\u3002\u9700\u8981\u5c06\u7cfb\u7edf\u6808\u6307\u9488SSP\u5b58\u653e\u5728Saved_SSP\u4e2d\uff0c\u5e76\u53d6\u51faSaved_USP\u52a0\u8f7d\u5230R6</p> </li> <li> <p>\u5982\u679c\u662f\u5728\u7ba1\u7406\u5458\u6a21\u5f0f\u8c03\u7528TRAP\uff0c\u5219\u4e0d\u9700\u8981\u5207\u6362\u6808</p> </li> </ul>"},{"location":"course/ICS/IO/#934-a-summary-of-the-trap-service-routine-process","title":"9.3.4 A Summary of the Trap Service Routine Process","text":"<ol> <li> <p>TRAP x23\u6307\u4ee4\u7684\u6267\u884c\uff0c\u5bfc\u81f4PSR\u548c\u9012\u589e\u7684PC\u88ab\u63a8\u9001\u5230\u7cfb\u7edf\u5806\u6808\uff08system stack\uff09\uff0c\u5e76\u4e14\u5730\u5740x0023\u7684\u5185\u5bb9x04A0\u88ab\u52a0\u8f7d\u5230PC\u4e0a\u3002\u56fe9.11\u4e2d\u7684<code>\u865a\u7ebf\u663e\u793a\u4e86\u4f7f\u7528trap vector x23\u4ecetrap vector table\u4e2d\u83b7\u53d6trap service routine\u7684\u8d77\u59cb\u5730\u5740\u3002</code></p> </li> <li> <p>\u4e0b\u4e00\u6307\u4ee4\u5468\u671f\u4ecex04A0\u5185\u5bb9\u7684FETCH\u5f00\u59cb\uff0c\u8fd9\u662f\u64cd\u4f5c\u7cfb\u7edf\u670d\u52a1\u4f8b\u7a0b\uff08operating system service routine\uff09\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u3002RTI\u6307\u4ee4\u53d1\u6325\u4f5c\u7528\u540e\uff0cTRAP\u6307\u4ee4\u6b63\u5f0f\u7ed3\u675f\u3002</p> </li> <li>RTI\u6307\u4ee4\u5c06\u7cfb\u7edf\u5806\u6808\u7684\u4e24\u4e2a\u5143\u7d20\u52a0\u8f7d\u5230PSR\u548cPC\uff08\u5373\u5728 TRAP \u6307\u4ee4\u6267\u884c\u671f\u95f4\u538b\u5165\u7684 PSR \u548c\u9012\u589e\u7684 PC\u3002\uff09\u7531\u4e8ePC\u672c\u8eab\u5df2\u7ecf\u5b8c\u6210+1\uff0c\u540e\u7eed\u7528\u6237\u7a0b\u5e8f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884cTRAP\u4e4b\u540e\u7684\u6307\u4ee4\uff0c\u63a7\u5236\u6743\u56de\u5f52</li> </ol> <pre><code>;a person is sitting at a keyboard. Each time the person types a capital letter, the program outputs the lowercase version of that letter. If the person types a 7, the program terminates\n        .ORIG   x3000\n        LD      R2,TERM     ;R2,\u627f\u8f7dxFFC9\n        LD      R3,ASCII\nAGAIN   TRAP    x23         ;TRAP x23 \u8f93\u5165\uff0c\u5e76\u5c06\u8f93\u5165\u7684\u6570\u636e\u7684ASCII\u503c\u4fdd\u5b58\u5728R0\n        ADD     R1,R2,R0    ;\u5224\u65ad\u8f93\u5165\u7684\u6570\u662f\u5426\u4e3a7\n        BRz     EXIT        ;\u82e5\u4e3a7\uff0c\u7a0b\u5e8f\u7ed3\u675f\n        ADD     R0,R0,R3    ;R0 = R0 + 32\n        TRAP    x21         ;\u8f93\u51fa\n        BRnzp   AGAIN\nTERM    .FILL   xFFC9       ;7\u7684ASCII\u7801\u7684\u76f8\u53cd\u6570\nASCII   .FILL   x0020       ;32\uff0c\u7528\u4e8e\u5c06\u5c0f\u5199\u53d8\u4e3a\u5927\u5199\nEXIT    TRAP    x25\n        .END\n</code></pre>"},{"location":"course/ICS/IO/#935-trap-routines-for-handling-io","title":"9.3.5 Trap Routines for Handling I/O","text":""},{"location":"course/ICS/IO/#936-a-trap-routine-for-halting-the-computer","title":"9.3.6 A Trap Routine for Halting the Computer","text":"<p>\u4e00\u822c\u6765\u8bf4\uff0c\u65f6\u949f Clock \u4f1a\u4e00\u76f4\u5468\u671f\u6027\u53d8\u5316\uff0c\u4f7f\u5f97\u6307\u4ee4\u4e00\u76f4\u65e0\u4f11\u6b62\u5730\u6267\u884c\u4e0b\u53bb\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u90a3\u6211\u4eec\u9700\u8981\u505c\u6389\u65f6\u949f\u3002</p> <p>\u5728 LC-3 \u91cc\u9762\uff0c\u6211\u4eec\u7684\u65f6\u949f\u662f\u7531 a crystal oscillator\uff08\u6676\u4f53\u632f\u8361\u5668\uff09 \u548c a RUN latch \u7ec4\u6210\u7684\u3002\u5176\u4e2d\u6676\u4f53\u632f\u8361\u5668\u4f1a\u4ea7\u751f\u4e0b\u9762\u56fe\u7684\u7535\u538b\u4fe1\u53f7\u3002</p> <ul> <li>\u5982\u679c\u6211\u4eec\u7684RUN Latch \u503c\u4e3a 1\uff0c\u5373\u6211\u4eec\u5141\u8bb8\u7a0b\u5e8f\u8fd0\u884c\uff0c\u90a3\u4e48 Clock \u8f93\u51fa\u548c\u6676\u4f53\u632f\u8361\u5668\u76f8\u540c\uff0c\u5219 Clock \u4e5f\u5448\u73b0\u51fa\u65f6\u9ad8\u65f6\u4f4e\u7684\u5468\u671f\u3002</li> <li>\u5982\u679c RUN Latch \u503c\u4e3a0\uff0c\u6b64\u65f6\u65e0\u8bba\u5982\u4f55 Clock \u8f93\u51fa\u90fd\u4e3a 0\uff0c\u6211\u4eec\u6210\u65f6\u949f\u88ab\u505c\u6389\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4e0d\u80fd\u518d\u6267\u884c\u6307\u4ee4\u4e86\u3002</li> </ul> <p>Halt \u6307\u4ee4\uff0c\u5b9e\u8d28\u4e0a\u5c31\u662f\u5c06 RUN Latch \u8bbe\u4e3a0\uff0c\u4ece\u800c\u8fbe\u5230\u7ec8\u6b62clock\uff0c\u7ec8\u6b62\u6307\u4ee4\u7684\u6548\u679c</p> <p><code>\u800cRUN Latch \u653e\u5728MCR\uff08master control register\uff09\u7684\u7b2c15\u4f4d\uff08\u5f00\u5934\u7684\u90a3\u4f4d\uff09\uff0cMCR\u88ab\u6620\u5c04\u5230xFFFE\u3002\u53d6\u51fa MCR \u7684\u503c\uff0c\u5e76\u7528 x7FFF \u4e0e MCR \u505a AND \u64cd\u4f5c\uff08\u76f8\u5f53\u4e8e\u628a MCR \u6700\u9ad8\u4f4d\u6e05\u96f6\uff09\uff0c\u7136\u540e\u628a\u503c\u5b58\u56de\u3002\uff08\u6ce8\u610f\u8fc7\u7a0b\u4e2d\u9700\u8981\u4fdd\u62a4\u5bc4\u5b58\u5668\u672c\u6765\u7684\u503c\uff0c\u5e76\u5728 RTI \u524d\u6062\u590d\uff09</code></p> <pre><code>.ORIG           x0520               ;\nST              R0,SaveR0\nST              R1,SaveR1           ;\u5148\u4fdd\u5b58R0\u548cR1\n;print the message that machine is halting\nLD              R0,ASCIINewline     ;\u6362\u884c\nTRAP            x21                 ;\u6267\u884c\u6362\u884c\uff0c\u5173\u4e8eTRAPx21\u7684\u7528\u6cd5\uff0cR0\u5b58\u653e\u7684\u662f\u6570\u636e\u7684ASCII\u7801\uff0c\u540e\u7eed\u8f93\u51famessage\nLEA             R0,Message          ;Message \u5bf9\u5e94\u662f\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\uff0c\u5173\u4e8eTRAPx22\u7684\u7528\u6cd5\uff0c\u9700\u8981R0\u52a0\u8f7d\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\uff0c\u4e5f\u5c31\u662fMessage\nTRAP            x22                 ;\u8f93\u51fa\u5b57\u7b26\u4e32\nLD              R0,ASCIINewline     ;\u6362\u884c\nTRAP            x21 \n\n;\u5c06MCR[15]\u6e05\u96f6\nLDI             R1,MCR              ;\u5173\u4e8e\u4e3a\u4ec0\u4e48\u4f7f\u7528LDI\uff0cMCR\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u8be5\u5730\u5740\u5b58\u653e\u7684\u5185\u5bb9\u662fxFFFE\u4e5f\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u6211\u4eec\u9700\u8981\u53d6\u51faxFFFE\u7684\u6570\u636e\uff0c\u52a0\u8f7d\u5230R1\nLD              R0,MASK             ;RO = x7FFF\nAND             R0,R0,R1            ;MCR[15]\u6e05\u96f6\nSTI             R0,MCR              ;\u5c06R0\uff0c\u65b0\u7684MCR\u7684\u503c\u5199\u5165\u5230MCR\u5bc4\u5b58\u5668\n\n;\u6062\u590d\u5bc4\u5b58\u5668\u548c\u63a7\u5236\u6743\u56de\u5f52\nLD              R1,SaveR1           ;\nLD              R2,SaveR2\nRTI\n\n\nASCIINewline    .FILL   x000A       ;\u6362\u884c\nSaveR0          .BLKW   1\nSaveR1          .BLKW   1\nMessage         .STRINGZ    \"Halting the machine\"\nMCR             .FILL   xFFFE       ;Address of MCR\nMASK            .FILL   x7FFF       ;MASK to clear the top bit,\u5c06MCR\u7684\u6700\u9ad8\u4f4d\u6e05\u96f6\n.END\n</code></pre>"},{"location":"course/ICS/IO/#94-interrupts-and-interrupt-driven-io","title":"9.4 Interrupts and Interrupt-Driven I/O","text":"<p>In Section 9.2.1.3, we noted that interaction between the processor and an I/O device can be <code>controlled by the processor (i.e., polling) or it can be controlled by the I/O device (i.e., interrupt driven).</code>In Sections 9.2.2, 9.2.3, and 9.2.4, we have studied several examples of polling. In each case, the processor tested the ready bit of the status register again and again, and when the ready bit was finally 1, the processor branched to the instruction that did the input or output operation.</p> <p>Interrupt-Driven I/O</p> <ol> <li>\u6982\u5ff5\uff1a</li> </ol> <p>\u4e0e\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u53ef\u80fd\u6709\u5173\u7cfb\uff0c\u4e5f\u53ef\u80fd\u65e0\u5173\u7cfb\u7684I/O\u8bbe\u5907\u80fd\u591f\u4ee5\u4e0b\u4e09\u4e2a\u529f\u80fd</p> <ul> <li>force the running program to stop\u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f</li> <li>have the processor execute a program that carries out the needs of the I/O device\u8ba9\u5904\u7406\u5668\u6267\u884c\u6ee1\u8db3 I/O \u8bbe\u5907\u9700\u6c42\u7684\u7a0b\u5e8f</li> <li>have the stopped program resume execution as if nothing had happened.\u8ba9\u505c\u6b62\u7684\u7a0b\u5e8f\u6062\u590d\u6267\u884c\uff0c\u5c31\u50cf\u4ec0\u4e48\u4e5f\u6ca1\u53d1\u751f\u4e00\u6837</li> </ul> <p></p> <ol> <li>\u68c0\u6d4b\u5230\u4e2d\u65ad\u4fe1\u53f7</li> <li>\u7a0b\u5e8fA\u8fdb\u5165\u5047\u6b7b\u72b6\u6001</li> <li>PC\u52a0\u8f7d\u7a0b\u5e8fB\u7684\u8d77\u59cb\u5730\u5740</li> <li>\u7a0b\u5e8fB\u5f00\u59cb\u6ee1\u8db3I/O\u8bbe\u5907\u7684\u8981\u6c42</li> <li>\u7ee7\u7eed\u6ee1\u8db3</li> <li>\u5b8c\u6210\u6ee1\u8db3</li> <li>\u7a0b\u5e8fA\u590d\u6d3b\uff0c\u7ee7\u7eed\u5de5\u4f5c</li> </ol> <p>\u5c31\u7a0b\u5e8fA\u800c\u8a00\uff0c\u4e2d\u65ad\u540e\u548c\u6ca1\u6709\u4e2d\u65ad\u5f97\u5230\u7684\u7ed3\u679c\u76f8\u540c</p> <ol> <li>\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u5728Interrupt-Driven I/O </li> </ol> <p>\u56e0\u4e3a\uff0c\u8f6e\u8be2\u9700\u8981\u5904\u7406\u5668\u6d6a\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u4e00\u6b21\u53c8\u4e00\u6b21\u7684\u6267\u884cLDI\uff0c\u548cBR\u6307\u4ee4\uff0c\u76f4\u5230\u8bbe\u7f6e\u5c31\u7eea\u4f4d\u3002</p> <p>\u800c\u5bf9\u4e8e\u4e2d\u65ad\u9a71\u52a8\u7684I/O\uff0c\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u6d4b\u8bd5\u548c\u5206\u652f\uff0c\u53ef\u4ee5\u5c06\u65f6\u95f4\u82b1\u5728\u66f4\u6709\u7528\u7684\u5730\u65b9</p> <ol> <li>Interrupt-Driven I/O\u7684\u6784\u6210</li> </ol> <ul> <li>the mechanism that enables an I/O device to interrupt the processor\u4f7f I/O \u8bbe\u5907\u80fd\u591f\u4e2d\u65ad\u5904\u7406\u5668\u7684\u673a\u5236\uff0c</li> <li>the mechanism that handles the interrupt request\u5904\u7406\u4e2d\u65ad\u8bf7\u6c42\u7684\u673a\u5236</li> </ul>"},{"location":"course/ICS/IO/#941-part1causing-the-interrupt-to-occur","title":"9.4.1 Part1\uff1aCausing the Interrupt to occur(\u8bbe\u5907\u8981\u5177\u6709\u4e2d\u65ad\u7684\u80fd\u529b)","text":"<p>I/O\u8bbe\u5907\u80fd\u591f\u4e2d\u65ad\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ol> <li>The I/O device must want service\u3002 I/O \u8bbe\u5907\u5fc5\u987b\u9700\u8981\u670d\u52a1</li> <li>The device must have the right to request the service\u8bbe\u5907\u5fc5\u987b\u6709\u6743\u8bf7\u6c42\u670d\u52a1</li> <li>The device request must be more urgent than what the processor is currently doing.. \u8bbe\u5907\u8bf7\u6c42\u5fc5\u987b\u6bd4\u5904\u7406\u5668\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u64cd\u4f5c\u66f4\u7d27\u6025\u3002</li> </ol>"},{"location":"course/ICS/IO/#9411-the-interrupt-signal-from-the-device","title":"9.4.1.1 The Interrupt Signal from the Device","text":"<ol> <li><code>The Device Must Want Service</code>We have discussed that already in the study of polling. It is the ready bit of the KBSR or the DSR. That is, if the I/O device is the keyboard, it wants service if someone has typed a character. If the I/O device is the monitor, it wants service (i.e., the next character to output) if the associated electronic circuits have successfully completed the display of the last character. In both cases, <code>the I/O device wants service when the corresponding ready bit is set</code></li> </ol> <p>\u8bbe\u5907\u5fc5\u987b\u9700\u8981\u670d\u52a1 \u6211\u4eec\u5df2\u7ecf\u5728\u8f6e\u8be2\u7814\u7a76\u4e2d\u8ba8\u8bba\u8fc7\u8fd9\u4e00\u70b9\u3002\u5b83\u662f KBSR \u6216 DSR \u7684\u5c31\u7eea\u4f4d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c I/O \u8bbe\u5907\u662f\u952e\u76d8\uff0c\u5219\u5f53\u6709\u4eba\u952e\u5165\u5b57\u7b26\u65f6\u5b83\u9700\u8981\u670d\u52a1\u3002\u5982\u679c I/O \u8bbe\u5907\u662f\u76d1\u89c6\u5668\uff0c\u5982\u679c\u5173\u8054\u7684\u7535\u5b50\u7535\u8def\u5df2\u6210\u529f\u5b8c\u6210\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u663e\u793a\uff0c\u5219\u5b83\u9700\u8981\u670d\u52a1\uff08\u5373\uff0c\u8f93\u51fa\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff09\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f53\u8bbe\u7f6e\u76f8\u5e94\u7684\u5c31\u7eea\u4f4d\u65f6\uff0cI/O \u8bbe\u5907\u9700\u8981\u670d\u52a1</p> <ol> <li><code>The Device Must Have the Right to Request That Service</code> In most I/O devices, this interrupt enable (IE) bit(\u53d6\u51b3\u4e8e\u5904\u7406\u5668\u662f\u5426\u7ed9\u4e88I/O device \u6743\u5229\u53d6\u8bf7\u6c42\u670d\u52a1) is part of the device status regist\uff08\u8bbe\u5907\u72b6\u6001\u5bc4\u5b58\u5668\uff09In the KBSR and DSR shown in Figure 9.18,    the IE bit is bit [14]. The interrupt request signal from the I/O device is the logical AND of the IE bit and the ready bit, as is also shown in Figure 9.18.</li> </ol> <p></p> <ul> <li>\u5982\u679c\u4e2d\u65ad\u4f7f\u80fd\u4f4dbit[14]\u6e05\u96f6\uff0c\u5219\u4e0d\u7ba1\u5c31\u7eea\u4f4d\u662f\u4ec0\u4e48\uff0cI/O\u8bbe\u5907\u90fd\u6ca1\u6709\u8bf7\u6c42\u670d\u52a1\u7684\u6743\u5229\uff0c\u65e0\u6cd5\u4e2d\u65ad\u5904\u7406\u5668\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5fc5\u987b\u8f6e\u8be2I/O\u8bbe\u5907\u6765\u786e\u5b9a\u5b83\u662f\u5426\u51c6\u5907\u5c31\u7eea\u3002</li> <li>\u5982\u679c\u4e2d\u65ad\u4f7f\u80fd\u4f4d\uff08IE\uff09bit[14]\u8bbe\u7f6e\u4e3a1\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6709\u4eba\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u663e\u793a\u5668\u5b8c\u6210\u5b57\u7b26\u7684\u8f93\u51fa\uff0c\u5c31\u4f1a\u4f7f\u5c31\u7eea\u4f4dready bit\u4e3a1\uff0c\u8fd9\u65f6I/O\u8bbe\u5907\u5c31\u5177\u6709\u8bf7\u6c42\u670d\u52a1\u7684\u6743\u5229</li> </ul>"},{"location":"course/ICS/IO/#9412-the-urgency-of-the-request","title":"9.4.1.2 The Urgency of the Request","text":"<p><code>The device request must be more urgent than what the processor is currently doing..</code></p> <p>\u8981\u4e2d\u65ad\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u8bbe\u5907\u7684\u4f18\u5148\u7ea7\u5fc5\u987b\u9ad8\u4e8e\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002</p> <p>LC-3\u67098\u4e2a\u4f18\u5148\u7b49\u7ea7\uff0c\u4ecePL0\u5230PL7\uff0c\u6570\u5b57\u8d8a\u9ad8\uff0c\u7a0b\u5e8f\u8d8a\u7d27\u6025\u3002</p> <ul> <li>The PL of a program is usually the same as the PL (i.e., urgency) of the request to run that program. </li> </ul> <p>\u7a0b\u5e8f\u7684 PL \u901a\u5e38\u4e0e\u8fd0\u884c\u8be5\u7a0b\u5e8f\u7684\u8bf7\u6c42\u7684 PL\uff08\u5373\u7d27\u6025\u7a0b\u5ea6\uff09\u76f8\u540c\u3002</p> <ul> <li>If a program is running at one PL, and a higher-level PL request wants the computer, the lower-priority program suspends processing until the higher-PL program executes and   satisfies its more urgent reques</li> </ul> <p>\u5982\u679c\u7a0b\u5e8f\u5728\u4e00\u4e2a PL \u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u8f83\u9ad8\u7ea7\u522b\u7684 PL \u8bf7\u6c42\u9700\u8981\u8ba1\u7b97\u673a\uff0c\u5219\u8f83\u4f4e\u4f18\u5148\u7ea7\u7684\u7a0b\u5e8f\u5c06\u6682\u505c\u5904\u7406\uff0c\u76f4\u5230\u8f83\u9ad8\u7ea7\u522b\u7684 PL \u7a0b\u5e8f\u6267\u884c\u5e76\u6ee1\u8db3\u5176\u66f4\u7d27\u6025\u7684\u8bf7\u6c42\u3002</p> <p>\u4e3a\u4e86\u4f7f\u6211\u4eec\u7684 I/O \u8bbe\u5907\u6210\u529f\u505c\u6b62\u5904\u7406\u5668\u5e76\u542f\u52a8\u4e2d\u65ad\u9a71\u52a8\u7684 I/O \u8bf7\u6c42\uff0c<code>\u8bf7\u6c42\u7684\u4f18\u5148\u7ea7\u5fc5\u987b\u9ad8\u4e8e\u5b83\u5e0c\u671b\u4e2d\u65ad\u7684\u7a0b\u5e8f\u7684\u4f18\u5148\u7ea7\u3002</code></p>"},{"location":"course/ICS/IO/#9413-the-int-signal","title":"9.4.1.3 The INT Signal","text":"<p>To stop the processor from continuing execution of its currently running program and service an interrupt request, <code>the INT signal must be asserted</code>. Figure 9.19 shows what is required to assert the INT signal. Figure 9.19 shows the status registers of several devices operating at various priority levels (PL). Any device that has bits [14] and [15] both set asserts its interrupt request signal. The interrupt request signals are input to<code>a priority encoder</code>, a combinational logic structure that <code>selects the highest priority request from all those asserted</code>. If the PL of that request is higher than the PL of the currently executing program, the INT signal is asserted.</p> <p>\u8fd9\u91cc\u6709\u591a\u4e2aI/O\u8bbe\u5907\uff0c\u6bcf\u4e00\u4e2a\u8bbe\u5907\u90fd\u901a\u8fc7\u72b6\u6001\u5bc4\u5b58\u5668 bit[15] AND bit[14] \u5f97\u5230\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u8fd9\u4e2a\u8bbe\u522b\u662f\u5426\u5728\u8bf7\u6c42\u4e2d\u65ad\u3002\u6240\u6709\u7684\u4e2d\u65ad\u4fe1\u53f7\uff0c\u4f1a\u88ab\u8f93\u5165\u5230<code>Priority encoder \u4f18\u5148\u7ea7\u7f16\u7801\u5668</code>\uff0c\u4f18\u5148\u7ea7\u7f16\u7801\u5668\u4f1a\u627e\u5230\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4e2d\u65ad\u8bf7\u6c42\u3002\u6700\u540e\u5c06\u4e2d\u65ad\u8bf7\u6c42\u7684\u4f18\u5148\u7ea7\u548c\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\u7684\u4f18\u5148\u7ea7\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e2d\u65ad\u8bf7\u6c42\u7684\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u5219INT\u88ab\u8bbe\u7f6e\u4e3a1</p> <p>\u56de\u5fc6\u4e00\u4e0b\uff0c\u6307\u4ee4\u5468\u671f\u7684\u5404\u4e2a\u9636\u6bb5\uff08Fetch\uff0cDecode\uff0cevaluate address\uff0cFetch operand\uff0cexecute\uff0cstore result\uff09\uff0c\u6bcf\u4e00\u6761\u6307\u4ee4\u90fd\u80fd\u6539\u53d8\u8ba1\u7b97\u673a\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u8be5\u6539\u53d8\u662f\u5728\u6307\u4ee4\u7684\u6307\u4ee4\u5468\u671f\u7ed3\u675f\u4e4b\u540e\u5b8c\u6210\u3002<code>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8ba1\u7b97\u673a\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\u7684Fetch\u9636\u6bb5\u4e4b\u524d\u7684\u6700\u540e\u7684\u4e00\u4e2a\u65f6\u949f\u5468\u671f\uff0c\u8ba1\u7b97\u673a\u5904\u4e8e\u5f53\u524d\u6307\u4ee4\u6267\u884c\u5b8c\u6bd5\u5bfc\u81f4\u7684\u72b6\u6001</code></p> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u8ba9\u4e2d\u65ad\u53d1\u751f\u5728\u4e00\u4e2a\u6307\u4ee4\u6267\u884c\u7ed3\u675f\uff0c\u4e0b\u4e00\u4e2a\u6307\u4ee4Fetch\u4e4b\u524d\u4e2d\u65ad\u3002\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u4e2d\u65ad\u5904\u7406\u4e4b\u540e\uff0c\u539f\u6765\u7684\u7a0b\u5e8f\u80fd\u591f\u7ee7\u7eed\u8fd0\u884c\uff0c\u5373\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u4e2d\u65ad\u5904\u7406\u4e4b\u524d\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u4ed8\u51fa\u4ee3\u4ef7\u5927</p>"},{"location":"course/ICS/IO/#942-part2handling-the-interrupt-request","title":"9.4.2 Part2\uff1aHandling the Interrupt Request(\u5904\u7406\u4e2d\u65ad\u7684\u80fd\u529b)","text":"<p>\u5904\u7406\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5206\u4e3a\u4e09\u4e2a\u72b6\u6001</p> <ol> <li>initial the interrupt \u53d1\u8d77\u4e2d\u65ad\uff08number1 \u524d\u4e09\u884c\uff09</li> <li>service the interrupt \u670d\u52a1\u4e2d\u65ad \uff08number2 \u56db\u884c\uff09</li> <li>return from the interrupt \u4ece\u4e2d\u65ad\u8fd4\u56de \uff08number3 \u4e00\u884c\uff09</li> </ol>"},{"location":"course/ICS/IO/#9421-initial-the-interrupt","title":"9.4.2.1 initial the interrupt","text":"<p>Since the INT signal was asserted, the processor does not return to the first state of the FETCH phase of the next instruction cycle, but rather begins a sequence of actions to initiate the interrupt. The processor must do two things: <code>(1) save the state of the interrupted program so it can pick up where it left off after the requirements of the interrupt have been completed,</code> and<code>(2) load the state of the higher priority interrupting program so it can start satisfying its request.</code></p> <p>\u7531\u4e8e INT \u4fe1\u53f7\u88ab\u7f6e\u4f4d\uff0c\u5904\u7406\u5668\u4e0d\u4f1a\u8fd4\u56de\u5230\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5468\u671f\u7684 FETCH \u9636\u6bb5\u7684\u7b2c\u4e00\u4e2a\u72b6\u6001\uff0c\u800c\u662f\u5f00\u59cb\u4e00\u7cfb\u5217\u64cd\u4f5c\u6765\u542f\u52a8\u4e2d\u65ad\u3002\u5904\u7406\u5668\u5fc5\u987b\u505a\u4e24\u4ef6\u4e8b\uff1a\uff081\uff09\u4fdd\u5b58\u88ab\u4e2d\u65ad\u7a0b\u5e8f\u7684\u72b6\u6001\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5728\u5b8c\u6210\u4e2d\u65ad\u8981\u6c42\u540e\u4ece\u4e2d\u65ad\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c\uff1b\uff082\uff09\u52a0\u8f7d\u66f4\u9ad8\u4f18\u5148\u7ea7\u4e2d\u65ad\u7a0b\u5e8f\u7684\u72b6\u6001\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5f00\u59cb\u6ee1\u8db3\u5176\u8bf7\u6c42\u3002</p> <ol> <li>Save the state of the Interrupted program</li> </ol> <p>\u9996\u5148\uff0c\u4ec0\u4e48\u662f\u7a0b\u5e8f\u7684\u72b6\u6001\uff1f\u5305\u62ec\u5b58\u50a8\u4f4d\u7f6e\u7684\u5185\u5bb9\uff0c\u6240\u6709\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff0cPC\uff0cPSR</p> <p>PSR\u6307\u5b9a\u4e86\u7a0b\u5e8f\u7684\u7279\u6743\u7ea7\u522b\u548c\u4f18\u5148\u7ea7\uff0cPSR[15]\u8868\u660e\u7a0b\u5e8f\u662f\u5728\u7ba1\u7406\u5458\u6a21\u5f0f\u8fd8\u662f\u7528\u6237\u6a21\u5f0f\u8fd0\u884c\uff0cPSR[10:8]\u8868\u660e\u7a0b\u5e8f\u7684\u4f18\u5148\u7ea7\uff0cPSR[2:0]\u4fdd\u5b58\u7740\u6761\u4ef6\u7801\uff08condition codes NZP\uff09</p> <p>\u542f\u52a8\u4e2d\u65ad\u7684\u7b2c\u4e00\u6b65\u662f\u4fdd\u5b58\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u8db3\u591f\u72b6\u6001\uff0c\u4ee5\u4fbf\u5728\u6ee1\u8db3 I/O \u8bbe\u5907\u8bf7\u6c42\u540e\u53ef\u4ee5\u4ece\u4e2d\u65ad\u5904\u7ee7\u7eed\u6267\u884c\u3002</p> <ul> <li>PC \u5fc5\u987b\u88ab\u4fdd\u5b58\uff0c\u56e0\u4e3a\u5b83\u77e5\u9053\u5f53\u4e2d\u65ad\u7684\u7a0b\u5e8f\u6062\u590d\u6267\u884c\u65f6\u63a5\u4e0b\u6765\u5e94\u8be5\u6267\u884c\u54ea\u6761\u6307\u4ee4\uff08which instruction should be executed next\uff09\u3002</li> <li>\u5fc5\u987b\u4fdd\u5b58\u6761\u4ef6\u4ee3\u7801\uff08N\u3001Z \u548c P \u6807\u5fd7\uff09\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u6062\u590d\u6267\u884c\u540e\u540e\u7eed\u6761\u4ef6\u5206\u652f\u6307\u4ee4\uff08conditional branch instruction\uff09\u53ef\u80fd\u9700\u8981\u5b83\u4eec\u3002</li> <li>\u5fc5\u987b\u4fdd\u5b58\u88ab\u4e2d\u65ad\u7a0b\u5e8f\u7684\u4f18\u5148\u7ea7\uff08priority lever\uff09\uff0c\u56e0\u4e3a\u5b83\u6307\u5b9a\u4e86\u88ab\u4e2d\u65ad\u7a0b\u5e8f\u76f8\u5bf9\u4e8e\u6240\u6709\u5176\u4ed6\u7a0b\u5e8f\u7684\u7d27\u6025\u7a0b\u5ea6\u3002\u5f53\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u6062\u590d\u6267\u884c\u65f6\uff0c\u91cd\u8981\u7684\u662f\u8981\u77e5\u9053\u54ea\u4e9b\u4f18\u5148\u7ea7\u7a0b\u5e8f\u53ef\u4ee5\u4e2d\u65ad\u5b83\uff0c\u54ea\u4e9b\u4e0d\u80fd\u3002</li> <li>\u5fc5\u987b\u4fdd\u5b58\u7a0b\u5e8f\u7684\u7279\u6743\u7ea7\u522b\uff0c\u56e0\u4e3a\u5b83\u6307\u5b9a\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u548c\u4e0d\u80fd\u8bbf\u95ee\u54ea\u4e9b\u5904\u7406\u5668\u8d44\u6e90\u3002</li> </ul> <p>\u4ece\u4e0a\u9762\u6765\u770b\uff0c<code>\u4fdd\u5b58\u7684\u4fe1\u606f\u5c31\u662fPC\u548cPSR</code>\u3002\u81f3\u4e8e\u4fdd\u5b58\u7684\u65b9\u5f0f\u548cTRAP\u6307\u4ee4\u53d1\u6325\u4f5c\u7528\u65f6\u4fdd\u5b58PC\u3001PSR\u76f8\u540c\u3002<code>\u5982\u679c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u5f00\u59cb\u4e4b\u524d\uff0c\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u5904\u4e8e\u7528\u6237\u6a21\u5f0f\uff0c\u90a3\u4e48USP\u5e94\u5f53\u5148\u4fdd\u5b58\u5728Save_USP\u4e2d\uff0cR6\u52a0\u8f7dSave_SSP\u7684\u5185\u5bb9SSP\uff0c\u7136\u540ePC\u548cPSR\u88abpush\u8fdb\u5165supervisor stack\uff0c\u4ece\u800c\u514d\u53d7\u5f71\u54cd</code></p> <ol> <li>Load the state of the Interrupt Service Routine</li> </ol> <p>\u6839\u636e\u4e0a\u9762\u7684state\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b65\u5c31\u662f\u52a0\u8f7d interrupt service routine \u7684PC\u548cPSR\u3002 </p> <ul> <li> <p><code>Most processors use the mechanism of vectored interrupts.(\u91c7\u7528\u5411\u91cf\u4e2d\u65ad\u673a\u5236)</code> </p> </li> <li> <p>In the case of interrupts, the eight-bit vector is provided by the device that is requesting the processor be interrupted. That is, the I/O device transmits to the processor an eight-bit interrupt vector along with its interrupt request signal and its priority level.  It is designated <code>INTV.</code></p> </li> </ul> <p>\u5728\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\uff0c\u516b\u4f4d\u5411\u91cf\u7531\u8bf7\u6c42\u5904\u7406\u5668\u4e2d\u65ad\u7684\u8bbe\u5907\u63d0\u4f9b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>I/O \u8bbe\u5907\u5411\u5904\u7406\u5668\u53d1\u9001\u4e00\u4e2a\u516b\u4f4d\u4e2d\u65ad\u5411\u91cf\u53ca\u5176\u4e2d\u65ad\u8bf7\u6c42\u4fe1\u53f7\u548c\u4f18\u5148\u7ea7</code>\u3002\u5b83\u88ab\u6307\u5b9a\u4e3a<code>INTV</code></p> <ul> <li>\u5982\u679c\u53d1\u751f\u4e2d\u65ad\uff0c\u5904\u7406\u5668\u4f1a\u5c068\u4f4d\u7684\u4e2d\u65ad\u5411\u91cf\uff08INTV\uff09\u6269\u5c55\u621016\u4f4d\u5730\u5740\uff0c\u5bf9\u5e94\u4e8e\u4e2d\u65ad\u5411\u91cf\u8868\uff08interrupt vector table\uff09\u7684\u4e00\u6761\u3002\u4e2d\u65ad\u5411\u91cf\u8868\u7531\u5185\u5b58\u4f4d\u7f6ex0100\u5230x01FF\u7ec4\u6210\uff0c\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u5305\u542b\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u7684\u8d77\u59cb\u5730\u5740\u3002\u5229\u7528INTV\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5c06\u5176\u4e2d\u7684\u5185\u5bb9\uff08\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u7684\u8d77\u59cb\u5730\u5740\uff09\u52a0\u8f7d\u5230PC</li> </ul>"},{"location":"course/ICS/IO/#9422-service-the-interrupt","title":"9.4.2.2 service the interrupt","text":"<p>PC\u5305\u542b\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u7684\u8d77\u59cb\u5730\u5740\uff0c\u5c06\u4e3a\u4f1a\u88ab\u6267\u884c</p>"},{"location":"course/ICS/IO/#9423-return-from-the-interrupt","title":"9.4.2.3 return from the interrupt","text":"<p>The last instruction in every interrupt service routine is RTI, return from trap or interrupt. When the processor finally accesses the RTI instruction, all the requirements of the I/O device have been taken care of.</p> <p>\u6bcf\u4e2a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u662fRTI\uff0c\u4ecetrap\u6216interrupt\u8fd4\u56de\u3002\u5f53\u5904\u7406\u5668\u6700\u7ec8\u8bbf\u95eeRTI\u6307\u4ee4\u65f6\uff0cI/O\u8bbe\u5907\u7684\u6240\u6709\u8981\u6c42\u90fd\u5df2\u5f97\u5230\u6ee1\u8db3\u3002</p> <p>RTI</p> <ul> <li>opcode is 1000</li> <li><code>popping the PC and the PSR from the supervisor stack (where they have been resting peacefully)\uff0c\u4ecesupervisor stack\u4e2d\u5f39\u51faPC\u548cPSR</code></li> <li>\u6761\u4ef6\u4ee3\u7801\u5c06\u6062\u590d\u5230\u7a0b\u5e8f\u4e2d\u65ad\u65f6\u7684\u72b6\u6001\uff0c\u4ee5\u9632\u88ab\u4e2d\u65ad\u7a0b\u5e8f\u4e2d\u7684\u540e\u7eed BR \u6307\u4ee4\u9700\u8981\u5b83\u4eec\u3002 PSR[15]\u548cPSR[10:8]\u73b0\u5728\u53cd\u6620\u4e86\u5373\u5c06\u6062\u590d\u7684\u7a0b\u5e8f\u7684\u7279\u6743\u7ea7\u522b\u548c\u4f18\u5148\u7ea7\u3002<code>\u5982\u679c\u88ab\u4e2d\u65ad\u7a0b\u5e8f\u7684\u6743\u9650\u7ea7\u522b\u4e3a\u975e\u7279\u6743\uff0c\u5219\u5fc5\u987b\u8c03\u6574\u5806\u6808\u6307\u9488</code>\uff0c\u5373\u4fdd\u5b58Supervisor\u5806\u6808\u6307\u9488\uff0c\u5e76\u5c06\u7528\u6237\u5806\u6808\u6307\u9488\u52a0\u8f7d\u5230R6\u4e2d\u3002 PC \u6062\u590d\u5230\u5982\u679c\u7a0b\u5e8f\u6ca1\u6709\u88ab\u4e2d\u65ad\u5219\u63a5\u4e0b\u6765\u8981\u6267\u884c\u7684\u6307\u4ee4\u7684\u5730\u5740\u3002</li> </ul>"},{"location":"course/ICS/IO/#943-an-example","title":"9.4.3 an example","text":"<p>Suppose program A is executing when I/O device B, having a PL higher than that of A, requests service. During the execution of the service routine for I/O device B, a still more urgent device C requests service.</p> <p>\u5047\u8bbe\u7a0b\u5e8f A \u6b63\u5728\u6267\u884c\uff0c\u800c PL \u9ad8\u4e8e A \u7684 I/O \u8bbe\u5907 B \u8bf7\u6c42\u670d\u52a1\u3002\u5728\u6267\u884cI/O\u8bbe\u5907B\u7684\u670d\u52a1\u4f8b\u7a0b\u671f\u95f4\uff0c\u66f4\u7d27\u6025\u7684\u8bbe\u5907C\u8bf7\u6c42\u670d\u52a1</p> <p></p> <ul> <li> <p>\u7a0b\u5e8f A \u7531\u4f4d\u7f6e x3000 \u5230 x3010 \u7684\u6307\u4ee4\u7ec4\u6210\uff0c\u5f53\u8bbe\u5907 B \u53d1\u9001\u5176\u4e2d\u65ad\u8bf7\u6c42\u4fe1\u53f7\u548c\u4f34\u968f\u7684\u4e2d\u65ad\u5411\u91cf\uff088-bits interrupt vector\uff09 xF1 \u65f6\uff0c\u7a0b\u5e8f A \u6b63\u5728\u6267\u884c x3006 \u5904\u7684 ADD \u6307\u4ee4\uff0c\u5bfc\u81f4 INT \u88ab\u7f6e\u4f4d\u3002</p> </li> <li> <p>\u7a0b\u5e8fB\u7684\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u5b58\u50a8\u5728x6200\u5230x6210\u4f4d\u7f6e\uff0c\u5f53\u8bbe\u5907C\u53d1\u9001\u5176\u4e2d\u4e2d\u65ad\u8bf7\u6c42\u4fe1\u53f7\u548c\u4f34\u968f\u7684\u4e2d\u65ad\u5411\u91cfxF2\u65f6\uff0c\u7a0b\u5e8fB\u6b63\u5728\u6267\u884cx6202\u5904\u7684AND\u6307\u4ee4\uff0c\u7531\u4e8e\u8bbe\u5907C\u7684\u8bf7\u6c42\u4f18\u5148\u7ea7\u9ad8\u4e8e\u8bbe\u5907B,\u56e0\u6b64INT\u518d\u6b21\u88ab\u7f6e\u4f4d</p> </li> <li>\u8bbe\u5907C\u7684\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u5b58\u50a8\u5728x6300\u5230x6315</li> </ul> <p></p> <ol> <li> <p>\u56fe9.21\uff08a\uff09\u8868\u793a\u7a0b\u5e8fA\u5728 x3006 \u5904 fetch \u4e4b\u524d\u7684supervisor stack\u548cPC\u3002\u6b64\u65f6\u5806\u6808\u6307\u9488\u663e\u793a\u4e3aSaved_SSP\uff0c\u4e0d\u662fR6\uff0c\u56e0\u4e3a\u4e2d\u65ad\u8fd8\u6ca1\u53d1\u751f\uff0cR6\u6307\u5411\u7684\u662f\u7528\u6237\u5806\u6808\u7684\u5185\u5bb9\u3002<code>\u5728x3006\u4e2d\u6307\u4ee4\u6267\u884c\u7ed3\u675f\u65f6\u68c0\u6d4b\u5230INT\u4fe1\u53f7\uff08\u5728\u5f53\u524d\u6307\u4ee4\u7ed3\u675f\u4e4b\u540e\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4fetch\u4e4b\u524d\uff09</code></p> </li> <li> <p>\u56fe9.21\uff08b\uff09\u8868\u793a\u68c0\u6d4b\u5230INT\u4fe1\u53f7\u540e\uff0c<code>\u5148\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\u7684\u4fe1\u606f\uff08PC\u548cPSR\uff09</code>\uff0c\u5c06A\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\uff08PC+1 = x3007\uff09\u548cPSR of program A push\u8fdb\u5165supervisor stack\u3002\u5207\u6362\u6808\uff0c\u5c06 R6 \u4fdd\u5b58\u5728 Saved.UPC \u5bc4\u5b58\u5668\u4e2d\u5e76\u5c06 Saved SSP \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u52a0\u8f7d\u5230 R6 \u3002<code>\u518d\u52a0\u8f7d\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u7684\u72b6\u6001\u4fe1\u606f</code>\uff0c\u4e0e\u8bbe\u5907B\u76f8\u5173\u7684\u4e2d\u65ad\u5411\u91cf\u6269\u5145\u6210x01F1\uff0cx01F1\u7684\u5185\u5bb9x6200\u88ab\u52a0\u8f7d\u5230PC</p> </li> <li>\u56fe9.21\uff08c\uff09\u8868\u793a\u68c0\u6d4b\u5230\u7b2c\u4e8c\u4e2aINT\u4fe1\u53f7\u540e\u3002\u8bbe\u5907B\u7684\u670d\u52a1\u4f8b\u7a0b\u4e00\u76f4\u6267\u884c\uff0c\u76f4\u5230x6202\u5904\u7684\u6307\u4ee4\u6267\u884c\u7ed3\u675f\u65f6\uff0c\u68c0\u6d4b\u5230\u4f18\u5148\u66f4\u9ad8\u7684\u4e2d\u65ad\u3002<code>\u5148\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\u7684\u4fe1\u606f\uff08PC\u548cPSR\uff09</code>\uff0cB\u7684\u670d\u52a1\u4f8b\u7a0b\u7684PSR\u548c\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff08PC+1 = x6203\uff09\u88abpush\u8fdb\u5165supervisor stack\u3002\uff08\u6808\u4e0d\u5207\u6362\uff09\u3002<code>\u518d\u52a0\u8f7d\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u7684\u72b6\u6001\u4fe1\u606f</code>,\u4e0e\u8bbe\u5907 C \u76f8\u5173\u7684\u4e2d\u65ad\u5411\u91cf\u6269\u5c55\u4e3a 16 \u4f4d (x01F2)\uff0c\u5e76\u5c06 x01F2 (x6300) \u7684\u5185\u5bb9\u52a0\u8f7d\u5230 PC \u4e2d\u3002</li> <li>\u5047\u8bbe\u8bbe\u5907C\u7684\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u6267\u884c\u7ed3\u675f\u4e4b\u540e\uff0c\u5728x6315\u5904\u6267\u884cRTI\uff0csupervisor stack pop\u5f39\u51faPC\uff08x6203\uff09\u548cPSR\uff08\u7a0b\u5e8fB\u7684\uff09\uff0c\u5305\u62ecx6202\u4e2dAND\u6307\u4ee4\u4ea7\u751f\u7684Condition code\u6761\u4ef6\u7801\u3002\u56fe 9.21\uff08d\uff09 \u663e\u793a\u4e86\u6b64\u65f6\u7684\u5806\u6808\u548c PC\u3002</li> <li>\u8bbe\u5907 B \u7684\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\u5728 x6203 \u5904\u6062\u590d\u6267\u884c\u5e76\u8fd0\u884c\u81f3\u5b8c\u6210\uff0c\u4ee5 x6210 \u4e2d\u7684 RTI \u6307\u4ee4\u7ed3\u675f\u3002<code>\u7ba1\u7406\u7a0b\u5e8f\u5806\u6808\u88ab\u5f39\u51fa\u4e24\u6b21\uff0c\u5c06 PC \u6062\u590d\u5230 x3007 \u548c\u7a0b\u5e8f A \u7684 PSR\uff0c\u5305\u62ec x3006 \u4e2d ADD \u6307\u4ee4\u4ea7\u751f\u7684\u6761\u4ef6\u4ee3\u7801</code>\u3002\u6700\u540e\uff0c\u7531\u4e8e\u7a0b\u5e8fA\u5904\u4e8e\u7528\u6237\u6a21\u5f0f\uff0cR6\u7684\u5185\u5bb9\u88ab\u5b58\u50a8\u5728Saved SSP\u4e2d\uff0c\u5e76\u4e14R6\u88ab\u52a0\u8f7dSaved USP\u7684\u5185\u5bb9\u3002\u56fe 9.21\uff08e\uff09 \u663e\u793a\u4e86\u6b64\u65f6\u7684\u7ba1\u7406\u7a0b\u5e8f\u5806\u6808\u548c PC\u3002</li> <li>\u7a0b\u5e8fA\u901a\u8fc7x3007\u5904\u7684\u6307\u4ee4\u6062\u590d\u6267\u884c</li> </ol>"},{"location":"course/ICS/IO/#944-exception","title":"9.4.4 Exception\uff08\u5f02\u5e38\uff09","text":"<p>LC-3\u4e2d\u7684Exception\u5f02\u5e38\u6709\u4e09\u79cd</p> <ul> <li>Privilege Mode Exception</li> </ul> <p>\u6307\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528\u4e86RTI\u6307\u4ee4</p> <ul> <li>Illegal Opcode Exception</li> </ul> <p>\u6307\u5728\u6267\u884c\u6307\u4ee4\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u6307\u4ee4\uff08opcode = 1101\uff09</p> <ul> <li>Access Control Violation Exception</li> </ul> <p>\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\uff0c\u5c1d\u8bd5\u8bbf\u95eex3000\u4ee5\u524d\u548cxFDFF\u4e4b\u540e\u7684\u5730\u5740</p> <pre><code>        .ORIG   x3000\nlabel   .FILL   xD000       ;x1101 \n;Illegal Opcode Exception \u4f7f\u7528\u4e861101\n\n        RTI \n;Privilege Mode Exception \u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528RTI\n\n        LDI     R0,A\nA       .FILL   xFE04\n;Access Control Violation Exception \u8bbf\u95ee\u4e86xFE04\n</code></pre>"},{"location":"course/ICS/IO/#95-polling-revisitednow-that-we-know-aboat-interrupts","title":"9.5 Polling Revisited\uff0cNow that We Know Aboat Interrupts","text":""},{"location":"course/ICS/IO/#951-the-problem","title":"9.5.1 The problem","text":"<p>Polling (\u8f6e\u8be2)\uff1aWe continually test the ready bit in the relevant status register, and if it is not set, we branch back to again test the ready bit</p> <p>\u6211\u4eec\u4e0d\u65ad\u6d4b\u8bd5\u76f8\u5173\u72b6\u6001\u5bc4\u5b58\u5668\u4e2d\u7684\u5c31\u7eea\u4f4d\uff0c\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u6211\u4eec\u5206\u652f\u8fd4\u56de\u518d\u6b21\u6d4b\u8bd5\u5c31\u7eea\u4f4d</p>"},{"location":"course/ICS/Programming/","title":"Chapter 6 | Promgramming","text":""},{"location":"course/ICS/Programming/#61-problem-solving","title":"6.1 Problem solving","text":""},{"location":"course/ICS/Programming/#611-systematic-decomposition","title":"6.1.1 Systematic Decomposition \u7cfb\u7edf\u5206\u89e3","text":"<ul> <li>the larger tasks are systematically broken down into smaller ones.</li> </ul>"},{"location":"course/ICS/Programming/#612-the-three-constructssequentialconditionaliterative","title":"6.1.2 The three Constructs\uff1asequential\uff0cConditional\uff0cIterative\uff08\u987a\u5e8f\u6761\u4ef6\u8fed\u4ee3\uff09","text":"<p>![</p> <p>2](https://gitee.com/zjdxzn_0/typora-image/raw/master/img/202307171713717.png)</p> <ol> <li>The sequential construct</li> </ol> <p>\u5982\u679c\u6307\u5b9a\u7684\u4efb\u52a1\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u4e2a\u5b50\u4efb\u52a1\uff0c\u4e00\u4e2a\u63a5\u4e00\u4e2a\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u987a\u5e8f\u7ed3\u6784\uff08\u56fe 6.1b\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8ba1\u7b97\u673a\u5c06\u5b8c\u5168\u6267\u884c\u7b2c\u4e00\u4e2a\u5b50\u4efb\u52a1\uff0c\u7136\u540e\u7ee7\u7eed\u5b8c\u6574\u5730\u6267\u884c\u7b2c\u4e8c\u4e2a\u5b50\u4efb\u52a1\u2014\u2014\u5728\u5f00\u59cb\u7b2c\u4e8c\u4e2a\u5b50\u4efb\u52a1\u540e\u4e0d\u518d\u56de\u5230\u7b2c\u4e00\u4e2a\u5b50\u4efb\u52a1\u3002</p> <ol> <li>The conditional construct</li> </ol> <p>\u5982\u679c\u4efb\u52a1\u5305\u62ec\u6267\u884c\u4e24\u4e2a\u5b50\u4efb\u52a1\u4e4b\u4e00\u800c\u4e0d\u662f\u540c\u65f6\u6267\u884c\u4e24\u4e2a\u5b50\u4efb\u52a1\uff08\u5177\u4f53\u53d6\u51b3\u4e8e\u67d0\u4e9b\u6761\u4ef6\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6761\u4ef6\u6784\u9020\uff08\u56fe 6.1c\uff09\u3002\u6761\u4ef6\u6210\u7acb\uff0c\u8ba1\u7b97\u673a\u5c06\u6267\u884c\u4e00\u9879\u5b50\u4efb\u52a1\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6210\u7acb\uff0c\u8ba1\u7b97\u673a\u5c06\u6267\u884c\u4e0d\u540c\u7684\u5b50\u4efb\u52a1\u3002\u4efb\u4e00\u5b50\u4efb\u52a1\u90fd\u53ef\u80fd\u662f\u7a7a\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u53ef\u80fd\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u6b63\u786e\u7684\u5b50\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u7ee7\u7eed\u524d\u8fdb\u3002\u8be5\u7a0b\u5e8f\u6c38\u8fdc\u4e0d\u4f1a\u8fd4\u56de\u5e76\u91cd\u65b0\u6d4b\u8bd5\u6761\u4ef6\u3002</p> <ol> <li>The iterative construct</li> </ol> <p>\u5982\u679c\u4efb\u52a1\u5305\u542b\u591a\u6b21\u6267\u884c\u5b50\u4efb\u52a1\uff0c\u4f46\u524d\u63d0\u662f\u67d0\u4e9b\u6761\u4ef6\u4e3a\u771f\u3002\u5982\u679c\u6761\u4ef6\u4e3a\u771f\uff0c\u5219\u6267\u884c\u5b50\u4efb\u52a1\u3002\u5b50\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u8fd4\u56de\u5e76\u518d\u6b21\u6d4b\u8bd5\u6761\u4ef6\u3002\u53ea\u8981\u6d4b\u8bd5\u6761\u4ef6\u7684\u7ed3\u679c\u4e3a\u771f\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u7ee7\u7eed\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u6267\u884c\u76f8\u540c\u7684\u5b50\u4efb\u52a1\u3002\u7b2c\u4e00\u6b21\u6d4b\u8bd5\u4e0d\u6b63\u786e\u65f6\uff0c\u7a0b\u5e8f\u7ee7\u7eed\u524d\u8fdb</p>"},{"location":"course/ICS/Programming/#613-lc-3-control-instructions-to-implement-the-three-constructs","title":"6.1.3 LC-3 Control Instructions to Implement the Three Constructs","text":"<ol> <li>sequential construction</li> </ol> <p>Figure 6.2b illustrates the control flow of the sequential decomposition. Note that no control instructions are needed since the PC is incremented from Address    B1 to Address B1+1. The program continues to execute instructions through address D1. It does not return to the first subtask</p> <p>PC \u4f1a\u4ece\u5730\u5740B1\u9012\u589e\u5230B1+1\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u63a7\u5236\u6307\u4ee4</p> <ol> <li>conditional construction</li> </ol> <ul> <li> <p>first\uff0ca condition is generated\uff0cresulting in the setting of one of the condition codes</p> <p>\u9996\u5148\uff0c\u751f\u6210\u4e00\u4e2a\u6761\u4ef6\uff0c\u4ece\u800c\u8bbe\u7f6e\u4e00\u4e2a\u6761\u4ef6\u4ee3\u7801\u3002\u8be5\u6761\u4ef6\u7531\u5730\u5740B2\u5904\u7684\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u6d4b\u8bd5</p> </li> <li> <p>If the condition is true, the PC is set to Address C2+1, and subtask 1 is executed.</p> <p>\u6761\u4ef6\u4e3a\u771f\uff0c\u5219PC\u8bbe\u7f6e\u4e3a\u5730\u5740C2+1\uff0c\u6267\u884c\u5b50\u4efb\u52a1subtask1</p> </li> <li> <p>If the condition is false, the PC (which had been incremented during the FETCH phase      of the branch instruction) fetches the instruction at Address B2+1, and subtask      2 is executed.</p> <p>\u5982\u679c\u6761\u4ef6\u4e3a\u5047\uff0cPC\uff08\u5728\u5206\u652f\u6307\u4ee4\u7684 FETCH \u9636\u6bb5\u5df2\u9012\u589e\uff09\u5c06\u83b7\u53d6\u5730\u5740 B2+1 \u5904\u7684\u6307\u4ee4\uff0c\u5e76\u6267\u884c\u5b50\u4efb\u52a1 2\u3002</p> </li> <li> <p>Subtask 2 terminates in a branch instruction that at address C2 unconditionally branches to D2+1.</p> <p>\u5b50\u4efb\u52a12\u7ed3\u675f\u540e\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u5730\u5740D2+1</p> </li> </ul> <ol> <li>iterative construction</li> </ol> <ul> <li> <p>first a condition is generated, a condition code is set, and a conditional branch instruction is executed.</p> <p>\u9996\u5148\u751f\u6210\u6761\u4ef6\uff0c\u8bbe\u7f6e\u6761\u4ef6\u4ee3\u7801\uff0c\u7136\u540e\u6267\u884c\u6761\u4ef6\u5206\u652f\u6307\u4ee4</p> </li> <li> <p>If the condition is false, the PC is set to address D3+1.</p> <p>\u5982\u679c\u6761\u4ef6\u4e3a\u5047\uff0c\u5219\u8df3\u8f6c\u5230\u5730\u5740D3+1</p> </li> <li> <p>as long as the condition is true, the PC will be incremented to B3+1, and the subtask will be executed.</p> <p>\u53ea\u8981\u6761\u4ef6\u4e3a\u771f\uff0cPC\u5c31\u4f1a\u589e\u52a0\u5230B3+1\uff0c\u5e76\u6267\u884c\u5b50\u4efb\u52a1\u3002</p> </li> <li> <p>The subtask terminates in an unconditional branch instruction at address D3, which sets the PC to A to again generate and test the condition. </p> <p>\u65e0\u6761\u4ef6\u5206\u652f\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230A\uff0c\u518d\u6b21\u751f\u6210\u6d4b\u8bd5\u6761\u4ef6</p> </li> </ul>"},{"location":"course/ICS/Programming/#614-the-character-count-example-from-chapter-5revisited","title":"6.1.4 The Character Count Example From Chapter 5\uff0cRevisited","text":"<p><code>We wish to input a character from the keyboard, count the number of occurrences of that character in a file, and display that count on the monitor.\u201d</code></p> <p></p>"},{"location":"course/ICS/Programming/#62-debugging-operations","title":"6.2 Debugging Operations","text":""},{"location":"course/ICS/The%20LC-3/","title":"Chapter 5 | The LC-3","text":""},{"location":"course/ICS/The%20LC-3/#51-the-isaoverview","title":"5.1 The ISA\uff1aOverview","text":"<ol> <li>Organization</li> </ol> <ul> <li>address space \\(2^{16}\\)</li> <li>addressability : 16 bits</li> </ul> <ol> <li>Registers</li> </ol> <ul> <li> <p>The most common type of <code>temporary storage locations</code>, and the one used in the LC-3, is a set of registers.</p> </li> <li> <p>Each register in the set is called a <code>general purpose   register (GPR)</code>.</p> </li> <li> <p>The number of bits stored in each register is usually one word. In LC-3 means 16 bits</p> </li> </ul> <ol> <li>The instruction set</li> </ol> <ul> <li> <p>The instruction set is defined by its set of <code>opcodes, data types, and addressing modes</code>.</p> </li> <li> <p>The addressing modes determine where the operands are located. </p> <p>e.g. ADD instruction  have two addressing modes\uff1a<code>register mode and immediate mode</code></p> </li> <li> <p>The data type is the representation of the operands in 0s and 1s.</p> </li> </ul> <p></p> <ol> <li>Opcodes</li> </ol> <ul> <li>The x86 ISA has more than 200 opcodes.</li> <li>The LC-3 ISA has 15 instructions, each identified by its unique opcode</li> </ul> <ol> <li> <p>Data types</p> </li> <li> <p>Addressing modes</p> </li> </ol> <ul> <li> <p>An operand can generally be found in one of three places: in memory, in a register, or as a part of the instruction.</p> </li> <li> <p>If the operand is a part of the instruction, we refer to   it as a literal or as an immediate operand.</p> </li> <li>LC-3\u652f\u6301\u4e94\u79cdaddressing modes\uff1aimmediate\uff0cregister\uff0cPC-relative\uff0cindirect\uff0cBase+offset</li> </ul> <ol> <li>Condition Codes</li> </ol> <ul> <li> <p>The three single-bit registers are called N, Z, and P, corresponding to their meaning: negative, zero, and positive.</p> </li> <li> <p>The set of three single-bit registers are referred to as condition codes because the condition of those bits are used to change the sequence of execution of the   instructions in a computer program</p> </li> </ul> <p>\u7528\u4e8e\u66f4\u6539\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u6307\u4ee4\u7684\u6267\u884c\u987a\u5e8f</p>"},{"location":"course/ICS/The%20LC-3/#52-operate-instruction","title":"5.2 Operate Instruction","text":""},{"location":"course/ICS/The%20LC-3/#521-add-and-notarithmetic-and-logic","title":"5.2.1 ADD AND NOT\uff08arithmetic and logic\uff09","text":"<ul> <li><code>The LC-3 has three operate instructions: ADD, AND, and NOT.</code></li> </ul> <ol> <li>NOT</li> </ol> <ul> <li> <p><code>opcode = 1001</code></p> </li> <li> <p>The NOT instruction bit-wise complements a 16-bit source operand and stores the result in a destination registe</p> <p>NOT \u6307\u4ee4\u6309\u4f4d\u6c42\u8865 16 \u4f4d\u6e90\u64cd\u4f5c\u6570\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d\u3002</p> </li> <li> <p>Bits[11:9]\u8868\u793a\u76ee\u6807\u5bc4\u5b58\u5668DR\uff08destination register\uff09</p> </li> <li> <p>Bits[8:6]\u8868\u793a\u6e90\u5bc4\u5b58\u5668\uff08source register\uff09</p> </li> <li> <p>Bits[5:0]\u5168\u90e8\u90fd\u662f1</p> </li> </ul> <p>If R5 initially contains 0101000011110000, after executing the following instruction:R3 will contain 1010111100001111</p> <p>NOT is a unary operation.NOT\u662f\u4e00\u5143\u8fd0\u7b97</p> <p>ADD and AND \u90fd\u662f\u4e8c\u5143\u8fd0\u7b97\uff0c\u5b83\u4eec\u9700\u8981\u4e24\u4e2a 16 \u4f4d\u6e90\u64cd\u4f5c\u6570</p> <p>\u4f46\u662f\u4e24\u8005\u90fd\u91c7\u7528register addressing mode\uff08\u5bc4\u5b58\u5668\u5bfb\u5740\u6a21\u5f0f\uff09</p> <p></p>"},{"location":"course/ICS/The%20LC-3/#522-immediates","title":"5.2.2 Immediates","text":"<p>\u63d0\u5230\u7684\u4e24\u79cd\u5bfb\u5740\u6a21\u5f0f\uff1aregister mode \uff0c immediate addressing mode</p> <p>If bit [5] is 1, the second source operand is contained within the instruction. In that case the second source operand is obtained by sign-extending bits [4:0] to 16 bits before performing the ADD or AND.</p> <p>\u5982\u679c\u4f4d [5] \u4e3a 1\uff0c\u5219\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\u5305\u542b\u5728\u6307\u4ee4\u5185\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6267\u884c ADD \u6216 AND \u4e4b\u524d\uff0c\u901a\u8fc7\u5c06\u4f4d [4:0] \u7b26\u53f7\u6269\u5c55\u81f3 16 \u4f4d\u6765\u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\u3002</p> <p></p> <p></p> <p></p> <p></p> <ul> <li>\u76f8\u53cd\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u662f\u9010\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00</li> <li>\u7b2c\u4e00\u6b65\u6267\u884c\u9010\u4f4d\u53d6\u53cd\uff0c\u5e76\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668R1\u4e2d</li> <li>\u7b2c\u4e8c\u6b65\uff0c\u8fdb\u884c\u52a0\u4e00\u64cd\u4f5c\uff0c\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728R2</li> <li>\u7b2c\u4e09\u6b65\uff0c\u8fdb\u884cA\u52a0\uff08-B\uff09\u64cd\u4f5c\uff0cA\u5728R0\u4e2d\uff0c-B\u5728R2\u4e2d</li> </ul>"},{"location":"course/ICS/The%20LC-3/#523-the-lea-instruction","title":"5.2.3 The LEA instruction","text":"<ul> <li> <p>LEA\uff1ait simply loads a register with an address. \u5c06\u5730\u5740\u52a0\u8f7d\u8fdb\u5bc4\u5b58\u5668</p> </li> <li> <p><code>opcode = 1110</code></p> </li> <li> <p>LEA (opcode = 1110) loads the register specified by bits [11:9] of the instruction with the value formed by adding the incremented program counter to the sign-extended bits [8:0] of the instruction.</p> </li> </ul> <p>LEA\uff08\u64cd\u4f5c\u7801= 1110\uff09\u5c06\u9012\u589e\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u4e0e\u6307\u4ee4\u7684\u7b26\u53f7\u6269\u5c55\u4f4d[8:0]\u76f8\u52a0\u800c\u5f62\u6210\u7684\u503c\uff08PC + offset\uff09\u52a0\u8f7d\u5230\u6307\u4ee4\u7684\u4f4d[11:9]\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002</p> <ul> <li>\u548cLD\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cLEA\u4e0d\u8bbf\u95ee\u5185\u5b58\uff0c\u53ea\u662f\u5355\u7eaf\u5730\u5c06\u5730\u5740\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u3002\u800cLD\u9700\u8981\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u6570\u636e\u5e76\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d</li> </ul> <p></p> <p></p> <p>PC = PC + 1 = x4019,offset = -3,PC + offset = x4016</p> <p></p>"},{"location":"course/ICS/The%20LC-3/#53-data-movement-instruction","title":"5.3 Data Movement instruction","text":"<ul> <li> <p>The process of moving information from memory to a register is called a <code>load</code>,</p> </li> <li> <p>and the process of moving information from a register to memory is called a <code>store</code>.</p> </li> </ul> <p>LC-3 contains six instructions that move information\uff1aLD\uff0cLDR\uff0cLDI\uff0cST\uff0cSTR\uff0cSTI</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\u53ea\u6709 LD\uff0cLDR\uff0cLDI \u4f1a\u8bbe\u7f6e CC \u6761\u4ef6\u7801\uff0cstore \u7c7b\u6307\u4ee4\u4e0d\u4f1a\u3002\u5982\u679c\u662f load \u7c7b\u6307\u4ee4\uff0c\u6211\u4eec\u4f1a\u6839\u636e\u6700\u540e\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u51fa\u6765\uff0c\u5e76\u4e14\u8981\u88ab\u653e\u5165\u5bc4\u5b58\u5668\u7684\u503c\u66f4\u65b0 CC\u3002</p> <p></p> <ul> <li> <p>The source is the data to be moved</p> </li> <li> <p>The destination is  the location where it is moved to</p> </li> <li> <p>Bits [11:9] specify one of these operands, the register. If the instruction is a load, DR refers to the destination general purpose register that will contain the value after it is read from memory (at the completion of the instruction cycle). </p> </li> </ul> <p>\u4f4d [11:9] \u6307\u5b9a\u8fd9\u4e9b\u64cd\u4f5c\u6570\u4e4b\u4e00\uff0c\u5373\u5bc4\u5b58\u5668\u3002\u5982\u679c\u6307\u4ee4\u662f\u52a0\u8f7d\uff0c\u5219 DR \u6307\u7684\u662f\u76ee\u6807\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u8be5\u5bc4\u5b58\u5668\u5c06\u5305\u542b\u4ece\u5185\u5b58\u8bfb\u53d6\u540e\uff08\u6307\u4ee4\u5468\u671f\u5b8c\u6210\u65f6\uff09\u7684\u503c\u3002</p> <ul> <li>If the instruction is a store, SR refers to the register that contains the value that will be written to memory.</li> </ul> <p>\u5982\u679c\u6307\u4ee4\u662f\u5b58\u50a8\uff0c\u5219 SR \u6307\u7684\u662f\u5305\u542b\u5c06\u5199\u5165\u5185\u5b58\u7684\u503c\u7684\u5bc4\u5b58\u5668</p>"},{"location":"course/ICS/The%20LC-3/#531-pc-relative-modepc1-28pc28","title":"5.3.1 PC-Relative Mode([PC+1-2^8^,PC+2^8^])","text":"<p>LD\uff08opcode = 0010\uff09\u548cST\uff08opcode = 0011\uff09\u90fd\u662fPC-relative addressing mode</p> <p>\u4e4b\u6240\u4ee5\u5982\u6b64\u547d\u540d\uff0c\u662f\u56e0\u4e3a\u6307\u4ee4\u7684\u4f4d [8:0] \u6307\u5b9a\u4e86\u76f8\u5bf9\u4e8e PC \u7684\u504f\u79fb\u91cf\u3002\u5185\u5b58\u5730\u5740\u662f\u901a\u8fc7\u5c06\u4f4d[8:0]\u7b26\u53f7\u6269\u5c55\u81f316\u4f4d\u5e76\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u9012\u589e\u7684PC\u6765\u8ba1\u7b97\u7684\u3002\u9012\u589e\u7684 PC \u662f FETCH \u9636\u6bb5\u4e4b\u540e\uff08\u5373 PC \u9012\u589e\u4e4b\u540e\uff09\u7a0b\u5e8f\u8ba1\u6570\u5668\u7684\u5185\u5bb9\u3002</p> <ul> <li>\u5bf9\u4e8eLD\uff0c\u8ba1\u7b97\u51fa\u6765\u7684\u7ed3\u679c\uff08PC+offset\uff09\u662f\u6307\u5b9a\u8981\u8bbf\u95ee\u7684\u5185\u5b58\u5730\u5740\uff0c\u5b83\u7684\u5185\u5bb9\u5c06\u88ab\u4fdd\u5b58\u5728\u76ee\u6807\u5bc4\u5b58\u5668DR\uff08\u7531Bits[11:9]\uff09\u51b3\u5b9a\u3002</li> <li>\u5bf9\u4e8eST\uff0c\u6307\u4ee4\u5c06\u4f4d[11:9]\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u5199\u5165\u5730\u5740\u4e3aPC=offset\u7684\u5185\u5b58\u5730\u5740</li> </ul> <p></p> <p>\u6ce8\u610f\u70b9\uff1a\u6b64\u5904\u8ba1\u7b97\u504f\u79fb\u91cf\uff0c\u9996\u5148\u8fdb\u884c\u7b26\u53f7\u8865\u4f4d\uff0c\u8f6c\u6362\u4e3axFFAF\uff0c\u518d\u4e0ePC+1 = x4019\u76f8\u52a0\u5f97\u5230x3FC8</p> <ol> <li>\u5173\u4e8eLD\uff0c\u9700\u8981\u53d6\u51fa\u6307\u5b9a\u5730\u5740\u7684\u5185\u5bb9\u6570\u636e\u5e76\u5b58\u5165\u5bc4\u5b58\u5668\u3002\u6240\u4ee5\uff0c\u9996\u5148\u8ba1\u7b97\u51fa\u8be5\u6307\u5b9a\u5730\u5740PC+offset\uff0c\u5e76\u5b58\u5165MAR</li> <li>\u627e\u5230MAR\u5bf9\u5e94\u7684MDR\u4e2d\u7684\u6570\u636e</li> <li>\u5c06MDR\u7684value\u5b58\u5165\u5bc4\u5b58\u5668\u4e2d</li> </ol> <p>\u8fd8\u4f1a\u53d1\u73b0\uff0c<code>offset\u662fbits[8:0]\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u5bf9\u5e94\u7684\u503c\uff0c\u53d6\u503c\u8303\u56f4\u662f[-256,255]</code>,\u5982\u679c\u9700\u8981\u504f\u79fb\u91cf\u5927\u4e8e\u8fd9\u4e2a\u8303\u56f4\uff0c\u5c31\u8981\u4f7f\u7528\u5176\u4ed6\u5bfb\u5740\u6a21\u5f0f</p> <p>PC\u76f8\u5bf9\u7684\u5bfb\u5740\u65b9\u5f0f\u80fd\u8bbf\u95ee\u54ea\u4e2a\u8303\u56f4\u5185\u7684\u6570\u636e\uff1f</p> <p>\\([PC+1-2^8\uff0cPC+1+2^8-1=PC+2^8]\\)</p> <p></p>"},{"location":"course/ICS/The%20LC-3/#532-indirect-mode","title":"5.3.2 Indirect Mode\uff08\u65e0\u8303\u56f4\u9650\u5236\uff09","text":"<p><code>LDI\uff08opcode = 1010\uff09\u548cSTI\uff08opcode = 1011\uff09</code>specify <code>the indirect addressing mode</code></p> <p>\u95f4\u63a5\u5bfb\u5740\uff0c\u6307\u4ee4\u683c\u5f0f\u548c LD \u76f8\u540c\uff0c\u53ea\u662f\u9700\u8981\u8bbf\u95ee\u4e24\u6b21\u5185\u5b58\uff1a\u9996\u5148\u8ba1\u7b97\u51faPC+offset\uff0c\u968f\u540e\u8bbf\u95ee\u5185\u5b58\u53d6\u51fa\u503c\uff0c\u7136\u540e\u5c06\u521a\u521a\u53d6\u51fa\u7684\u503c\u4f5c\u4e3a\u5730\u5740\u518d\u6b21\u8bbf\u95ee\u5185\u5b58\uff0c\u6700\u540e\u53d6\u51fa\u7684\u503c\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\u3002</p> <p>\u7136\u800c\uff0c\u8be5\u5730\u5740\u4e0d\u662f\u8981\u52a0\u8f7d\u6216\u5b58\u50a8\u7684\u64cd\u4f5c\u6570\u7684\u5730\u5740\uff0c\u800c\u662f\u8981\u52a0\u8f7d\u6216\u5b58\u50a8\u7684\u64cd\u4f5c\u6570\u7684\u5730\u5740\u7684\u5730\u5740\u3002\u56e0\u6b64\u79f0\u4e3a\u95f4\u63a5</p> <p></p> <p>PC+offset = x4A1C + xFFCC = x49EB,\u53d1\u73b049EB\u4e2d\u5b58\u653e\u7740\u7684\u662f\u4e00\u4e2a\u5730\u5740x2110\uff0c\u4ece\u800c\u5c06x2110\u7684\u5185\u5bb9\u5b58\u5165\u76ee\u6807\u5c31\u5bc4\u5b58\u5668\u4e2d</p> <p></p> <ol> <li>\u8ba1\u7b97PC + offset\uff0c\u5e76\u5c06\u6240\u5f97\u5730\u5740x49EB\u5b58\u5165MAR\u4e2d</li> <li>x49EB\u7684\u5185\u5bb9x2110\u88ab\u5b58\u5165\u76ee\u6807\u5bc4\u5b58\u5668R3\u4e2d</li> <li>x2110\u4e0d\u662foperand\uff0c\u800c\u662foperand\u7684\u5730\u5740\uff0c\u5c06x2110\u5b58\u653e\u5230MAR\u4e2d</li> <li>memory is read\uff0cMDR again loaded\u3002MDR is loaded with the contents of x2110</li> <li>\u5c06MDR\u7684\u6570\u636e\u5b58\u5165\u76ee\u6807\u5bc4\u5b58\u5668</li> </ol> <p>Indirect\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u8303\u56f4\u7684\u5730\u5740</p>"},{"location":"course/ICS/The%20LC-3/#533-baseoffset-mode","title":"5.3.3 Base+offset Mode\uff08\u65e0\u8303\u56f4\u9650\u5236\uff09","text":"<p><code>LDR (opcode = 0110) and STR (opcode = 0111) specify the Base+offset addressing mode.</code></p> <ul> <li>Base + offset: The address of the operand is obtained by adding a sign-extended six-bit offset to a base register.</li> <li>bits[5:0]\u8868\u793a\u504f\u79fb\u91cfoffset</li> <li>bits[8:6]\u8868\u793a\u57fa\u5740\u5bc4\u5b58\u5668base register</li> <li>bits[11:9]\u8868\u793a\u76ee\u6807\u5bc4\u5b58\u5668destination register</li> </ul> <p></p> <p></p> <ol> <li>R2 \u7684value x2345\u548coffset x001D\u8fdb\u884c\u76f8\u52a0\u5f97\u5230x2362\uff0c\u5e76\u5c06x2362\u5b58\u5165MAR\u4e2d</li> <li>\u8bfb\u53d6\u5185\u5b58\uff0cx2362\u7684\u5185\u5bb9\u5b58\u5165MDR\u4e2d</li> <li>\u5c06MDR\u4e2d\u5b58\u653e\u7684\u5185\u5bb9\u5b58\u5165R1</li> </ol> <p>Base+offset\uff0c\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u8303\u56f4\u5185\u7684\u5730\u5740\uff0c\u53ea\u8981\u5728\u57fa\u5740\u5bc4\u5b58\u5668\u4e2d\u6539\u53d8\u6570\u636e\u5373\u53ef</p>"},{"location":"course/ICS/The%20LC-3/#534-an-example","title":"5.3.4 An Example","text":"<ol> <li>PC = x30F6, opcode = 1110\uff0c\u8bf4\u660e\u662fLEA\uff08\u5355\u7eaf\u5c06\u5730\u5740\u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff09\uff0cPC + offset = x30F7 + xFFFD = x30F4,\u5373R1\u5b58\u653e x30F4</li> <li>PC = x30F7\uff0copcode = 0001\uff0c\u8bf4\u660e\u662fADD\uff0c\u5148\u8ba1\u7b97\u540e\u4e94\u4f4dbits\u7684immediate\uff0c\u8fdb\u884c\u7b26\u53f7\u6269\u5145\uff0c\u5f97\u5230imm = \\(\uff0814\uff09_{10} = E_{16}\\)\u3002SR1 + imm = x30F4 + x000E = x3102\uff0c\u4ece\u800cR2 \u5b58\u653e x3102</li> <li>PC = x30F8\uff0copcode = 0011\uff0c\u8bf4\u660e\u662fST\uff0c\u91c7\u7528PC-relative addressing mode\uff0cPC + offset = x30F9 + xFFFB = x30F4\u3002\u4ece\u800cR2 \u5b58\u653e\u7684\u662f\u5730\u5740x30F4</li> <li>PC = x30F9\uff0copcode = 0101\uff0c\u8bf4\u660e\u662fAND\uff0c\u5bf9\u5bc4\u5b58\u5668R2\u8fdb\u884c\u521d\u59cb\u5316\uff0cR2\u5b58\u653e0</li> <li>PC = x301A\uff0copcode = 0001\uff0c\u8bf4\u660e\u662fADD\uff0cR2 = R2 + imm = 5</li> <li>PC = x301B\uff0copcode = 0111\uff0c\u8bf4\u660e\u662fSTR\uff08use base+offset addressing mode\uff0c\u57fa\u5740\u5bc4\u5b58\u5668 + \u504f\u79fb\u91cf\uff09\uff0c\u57fa\u5740\u5bc4\u5b58\u5668\u662fR1\uff0cR1\u5b58\u653e\u7740x30F4\uff0c\u504f\u79fb\u91cfoffset = 14 = \\(E_{16}\\),\u5219\u57fa\u5740\u5bc4\u5b58\u5668+\u504f\u79fb\u91cf = x30F4 + x000E = x3102\uff0c\u5c06\u5bc4\u5b58\u5668R2\u7684\u5185\u5bb9value = 5\u5199\u5165\u5185\u5bb9x3102\uff0c\u5373M[x3102] = 5</li> <li>PC = x30FC\uff0copcode = 1010\uff0c\u8868\u793aLDI\uff08LD + indirect addressing mode\uff0c\u5b58\u653e\u5730\u5740\u7684\u5730\u5740 of operand\uff09\uff0cPC + offset = x30FD + xFFF7 = x30F4\uff0cx30F4\u5b58\u653e\u7740operand \u7684\u5730\u5740\uff0c\u53c8M[30F4] = x3102\uff0c\u5219x3102\u662foperand = \u5730\u5740\uff0cM[x3102] = 5,\u8bf4\u660eoperand\u64cd\u4f5c\u6570\u662f5\uff0c\u5c06value = 5 \u5199\u5165R3\u4e2d</li> </ol>"},{"location":"course/ICS/The%20LC-3/#54-control-instructions","title":"5.4 Control Instructions","text":"<p>The LC-3 has five opcodes that enable the sequential execution flow to be broken: <code>conditional branch, unconditional jump, subroutine call (sometimes called function), TRAP, and RTI (Return from Trap or Interrupt).</code></p>"},{"location":"course/ICS/The%20LC-3/#541-conditional-reanches","title":"5.4.1 Conditional Reanches","text":"<p>Based on the execution of previous instructions in the program, the conditional branch\u2019s EXECUTE phase either does nothing or it loads the PC with the address of the instruction it wishes to execute next. </p> <p>\u6839\u636e\u7a0b\u5e8f\u4e2d\u5148\u524d\u6307\u4ee4\u7684\u6267\u884c\uff0c\u6761\u4ef6\u5206\u652f\u7684 EXECUTE \u9636\u6bb5\u8981\u4e48\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u8981\u4e48\u5411 PC \u52a0\u8f7d\u5b83\u5e0c\u671b\u63a5\u4e0b\u6765\u6267\u884c\u7684\u6307\u4ee4\u7684\u5730\u5740\u3002</p> <p>During the EXECUTE phase of the BR instruction cycle, the processor examines the condition codes whose associated bits in the instruction, bits [11:9], are 1. Note the lower case n, z, and p in bits [11:9] of the BR instruction format shown above. </p> <ul> <li> <p>If bit [11] is 1, condition code N is examined. If bit [10] is 1,condition code Z is examined. If bit [9] is 1, condition code P is examined.</p> </li> <li> <p>If any of bits [11:9] are 0, the associated condition codes are not examined. </p> </li> <li> <p>If any of the condition codes that are examined are set (i.e., equal to 1), then the PC is loaded with the address obtained in the EVALUATE ADDRESS phase.</p> </li> </ul> <p>\u5982\u679c\u8bbe\u7f6e\u4e86\u6240\u68c0\u67e5\u7684\u4efb\u4f55\u6761\u4ef6\u4ee3\u7801\uff08\u5373\u7b49\u4e8e 1\uff09\uff0c\u5219 PC \u5c06\u52a0\u8f7d\u5728 EVALUATE ADDRESS \u9636\u6bb5\u83b7\u5f97\u7684\u5730\u5740\u3002</p> <p>\u6211\u4eec\u8df3\u8f6c\u7684\u6761\u4ef6\u4e3an * N+ z * Z + p * P \u4e3a\u771f&gt;0</p> <ul> <li>If none of the condition codes that are examined are set, the incremented PC is left unchanged, and the next sequential instruction will be fetched at the start of the next instruction cycle.</li> </ul> <p>\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u6240\u68c0\u67e5\u7684\u6761\u4ef6\u4ee3\u7801\uff0c\u5219\u9012\u589e\u7684 PC \u4fdd\u6301\u4e0d\u53d8\uff0c\u5e76\u4e14\u5c06\u5728\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5468\u671f\u5f00\u59cb\u65f6\u83b7\u53d6\u4e0b\u4e00\u4e2a\u987a\u5e8f\u6307\u4ee4\u3002</p> <p></p> <p></p> <ul> <li>Each of the three AND gates corresponds to one of the three condition codes.The output of the AND gate is 1 if the corresponding condition code is 1 </li> </ul> <p>\u4e09\u4e2a\u4e0e\u95e8\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5bf9\u5e94\u4e8e\u4e09\u4e2a\u6761\u4ef6\u4ee3\u7801\u4e4b\u4e00\u3002\u5982\u679c\u76f8\u5e94\u7684\u6761\u4ef6\u7801\u4e3a1\uff0c\u5219\u4e0e\u95e8\u7684\u8f93\u51fa\u4e3a1</p> <ul> <li>If any of the three AND gates have an output 1, the   OR gate has an output 1, indicating that the sequential instruction flow should be broken, and the PC should be loaded with the address evaluated during the   EVALUATE ADDRESS phase of the instruction cycle.</li> </ul> <p>\u5982\u679c\u4e09\u4e2a AND \u95e8\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5177\u6709\u8f93\u51fa 1\uff0c\u5219 OR \u95e8\u5177\u6709\u8f93\u51fa 1\uff0c\u8868\u660e\u987a\u5e8f\u6307\u4ee4\u6d41\u5e94\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14 PC \u5e94\u52a0\u8f7d\u5728\u6307\u4ee4\u5468\u671f\u7684 EVALUATE ADDRESS \u9636\u6bb5\u671f\u95f4\u8bc4\u4f30\u7684\u5730\u5740</p> <p>In the case of the conditional branch instruction at x4027, the answer is yes, and the PC is loaded with x4101, replacing x4028, which had been loaded into the PC during the FETCH phase of the BR instruction.</p> <p>\u82e5\u6761\u4ef6\u7801conditional code \u90fd\u4e3a1\uff0c\u5219\u4e00\u5b9a\u8df3\u8f6c</p> <p>\u82e5\u6761\u4ef6\u7801conditional code \u90fd\u4e3a0\uff0c\u5219\u4e00\u5b9a\u4e0d\u8df3\u8f6c\uff0c\u6267\u884cPC+1</p> <p></p> <p></p> <p>\u6b64\u5904\u7684\u7b2c\u4e00\u6b65\u662f\u4e3a\u4e86\u83b7\u53d6CC\uff0cADD\u64cd\u4f5c\u540eCC\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u9488\u5bf9\u7684R0\u7684\u503c\u3002\u6b64\u5904R0+R0\u4e0d\u4f1a\u6539\u53d8R0\u7684\u6b63\u8d1f\u6027</p>"},{"location":"course/ICS/The%20LC-3/#542-two-methods-of-loop-control","title":"5.4.2 Two methods of Loop Control","text":"<p><code>The BR instruction at the end of the sequence controls the number of times the loop body is executed</code></p> <p>BR\u6307\u4ee4\u63a7\u5236\u5faa\u73af\u8bed\u53e5\u8fdb\u884c\u7684\u6b21\u6570</p>"},{"location":"course/ICS/The%20LC-3/#5421-method1loop-control-with-a-counter","title":"5.4.2.1 Method1\uff1aLoop Control with a Counter","text":"<p>Suppose we know that the 12 locations x3100 to x310B contain integers, and we wish to compute the sum of these 12 integers.</p> <p>\u95ee\u9898\uff1a\u5047\u8bbe\u6211\u4eec\u77e5\u9053 x3100 \u5230 x310B \u7684 12 \u4e2a\u4f4d\u7f6e\u5305\u542b\u6574\u6570\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u8ba1\u7b97\u8fd9 12 \u4e2a\u6574\u6570\u7684\u603b\u548c\u3002</p> <p></p> <p></p> <ol> <li>initialize the variables.\u521d\u59cb\u5316\u53d8\u91cf</li> </ol> <ul> <li> <p>the address of the next integer to be added (assigned to R1)</p> <p>R1 = x3100</p> </li> <li> <p>the running sum (assigned to R3)</p> <p>R3 = 0</p> </li> <li> <p>the number of integers left to be added (assigned to R2).</p> <p>R2 = 12</p> </li> </ul> <ol> <li> <p>The program repeats the process of loading into R4 one of the 12 integers and adding it to R3. </p> </li> <li> <p>Each time we perform the ADD, we increment R1 so it will point to (i.e., contain the address of) the next number to be added and decrement R2 so we will know how many numbers still need to be added.</p> </li> <li> <p>When R2 becomes zero, the Z condition code is set, and we can detect that we are done.</p> </li> </ol> <ul> <li> <p>PC = x3000\uff0copcode = 1110\uff0cLEA\uff08\u5c06\u5730\u5740x3100\u5199\u5165\u5bc4\u5b58\u5668R1\uff09\u3002PC + offset = x3001 + x00FF = x3100\uff0c\u786e\u5b9aoffset = x00FF\uff0c\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\uff0c011111111</p> </li> <li> <p>PC = x3001\uff0copcode = 0101\uff0cAND\uff08R3\u521d\u59cb\u5316\uff09\u3002</p> </li> <li> <p>PC = x3002\uff0copcode = 0101\uff0cAND\uff08R2\u521d\u59cb\u5316\uff09\u3002</p> </li> <li> <p>PC = x3003\uff0copcode = 0001\uff0cADD\uff08\u5bf9R2 = R2 + 12\uff09</p> </li> <li> <p>PC = x3004\uff0copcode = 0000\uff0cBR\uff08Bit[10] = 1,\u68c0\u67e5Z\u7684\u6761\u4ef6\u4ee3\u7801\uff0c\u5982\u679c\u5bf9\u5e94\u7684R2\u7684\u503c\u4e3a0\uff0c\u5219\u8df3\u8f6c\u5230x300A=x3005+x0005\uff09</p> </li> <li> <p>PC = x3005\uff0copcode = 0110\uff0cLD\uff08Base+offset Mode\uff0c\u5c06R1\u4e2d\u5b58\u653e\u7684\u5730\u5740\u5bf9\u5e94\u7684value \u5b58\u653e\u5230R4\uff09</p> </li> <li> <p>PC = x3006\uff0copcode = 0001\uff0cADD\uff08\u5c06R3\u548cR4\u8fdb\u884c\u76f8\u52a0\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u5165R3\uff09</p> </li> <li> <p>PC = x3007\uff0copcode = 0001\uff0cADD\uff08R1+1\uff09R1 will point to the next location in memory containing an integer to be added.\u5c06\u6307\u5411\u5185\u5b58\u4e2d\u5305\u542b\u8981\u76f8\u52a0\u7684\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> </li> <li> <p>PC = x3008\uff0copcode = 0001\uff0cADD\uff08R2-  1\uff09</p> </li> <li> <p>PC = x3009\uff0copcode = 0000\uff0cBR\uff08NEP= 111\uff0cunconditional branch\uff0c\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0cPC+offset = x300A+xFFFA = x3004\uff09.</p> </li> </ul> <p><code>so the next instruction to be executed (the conditional branch at x3004) will be based on the instruction executed at x3008.</code></p> <p>The conditional branch instruction at x3004 follows the instruction at x3009, which does not affect condition codes, which in turn follows the instruction at x3008.</p> <p>\u56e0\u4e3ax3009\u5904\u7684\u6307\u4ee4\u4e0d\u5f71\u54cd\u6761\u4ef6\u4ee3\u7801</p> <p>\u56e0\u6b64\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u6307\u4ee4\uff08x3004 \u5904\u7684\u6761\u4ef6\u5206\u652f\uff09\u5c06\u57fa\u4e8e x3008 \u5904\u6267\u884c\u7684\u6307\u4ee4\u3002\u5373\u6839\u636eR2\u7684\u503c\u8fdb\u884c\u5224\u65ad\u662f\u5426\u8df3\u8f6c</p> <ul> <li> <p>The conditional branch instruction causes the execution sequence to follow: x3000, x3001, x3002, x3003, x3004, x3005, x3006, x3007, x3008, x3009, x3004, x3005, x3006, x3007, x3008, x3009, x3004, x3005, and so on. The loop body consists of the instructions at x3005 to x3009. When the value in R2 becomes 0, the PC is loaded with x300A, and the program continues at x300A with its next activity.</p> </li> <li> <p>\u540e\u7eed\u53ea\u9700\u5728x300A\u6dfb\u52a0halt\u6307\u4ee4\u505c\u6b62\u5373\u53ef</p> </li> </ul>"},{"location":"course/ICS/The%20LC-3/#5422-method2loop-control-with-a-sentinel","title":"5.4.2.2 Method2\uff1aLoop Control with a Sentinel","text":"<p>\u524d\u4e00\u79cd\u65b9\u6cd5\u91c7\u7528\u8ba1\u6570\u5668\uff0c\u5df2\u77e5\u603b\u5171\u9700\u8981\u6267\u884c\u7684\u6b21\u6570\u4e3a12\uff0c\u53ea\u9700\u5728\u6bcf\u6b21\u6267\u884c\u5b8c\u5faa\u73af\u540e\uff0ccounter-1\uff0c\u5e76\u4e14\u770bcounter\u662f\u5426\u4e3a0\u5373\u53ef</p> <p>A second method for controlling the number of executions of a loop is to use a <code>sentinel</code>.</p> <p>\u63a7\u5236\u5faa\u73af\u6267\u884c\u6b21\u6570\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u54e8\u5175</p> <p>This method is particularly effective if we do not know ahead of time how many iterations we will want to perform. </p> <p>\u5982\u679c\u6211\u4eec\u4e8b\u5148\u4e0d\u77e5\u9053\u8981\u6267\u884c\u591a\u5c11\u6b21\u8fed\u4ee3\uff0c\u5219\u6b64\u65b9\u6cd5\u7279\u522b\u6709\u6548\u3002</p> <p></p> <p>\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u5b58\u50a8\u5728 x3100 \u5230 x310B \u4f4d\u7f6e\u7684\u503c\u90fd\u662f\u6b63\u6570\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u8d1f\u6570\u4f5c\u4e3a\u54e8\u5175\u3002</p> <p>\u5047\u8bbe\u5b58\u50a8\u5728\u5185\u5b58\u5730\u5740x310C\u5904\u7684\u54e8\u5175\u662f-1.</p> <p></p> <ul> <li> <p>PC = x3000\uff0copcode = 1110\uff0cLEA\uff08\u5c06\u5730\u5740x3100\u5199\u5165\u5bc4\u5b58\u5668R1\uff09\u3002PC + offset = x3001 + x00FF = x3100\uff0c\u786e\u5b9aoffset = x00FF\uff0c\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\uff0c011111111</p> </li> <li> <p>PC = x3001\uff0copcode = 0101\uff0cAND\uff08R3\u521d\u59cb\u5316\uff09\u3002</p> </li> <li> <p>PC = x3002\uff0copcode = 0110\uff0cLD\uff08Base+offset Mode\uff0c\u5c06R1\u4e2d\u5b58\u653e\u7684\u5730\u5740\u5bf9\u5e94\u7684value \u5b58\u653e\u5230R4\uff09</p> </li> <li> <p>PC = x3003\uff0copcode = 0000\uff0cBR\uff08n\uff0cx3008\uff09\u3002PC + offset = x3004 + x0004 = x3008.</p> </li> </ul> <p>\u4e00\u65e6\uff08\u54e8\u5175\uff09\u4e3a\u8d1f\u6570\u6210\u7acb\uff0c\u5c31\u8df3\u8f6c\u5230x3008\u6307\u4ee4halt</p> <ul> <li> <p>PC = x3004\uff0copcode = 0001\uff0cADD\uff08\u5c06R3\u548cR4\u8fdb\u884c\u76f8\u52a0\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u5165R3\uff09</p> </li> <li> <p>PC = x3005\uff0copcode = 0001\uff0cADD\uff08R1+1\uff09R1 will point to the next location in memory containing an integer to be added.\u5c06\u6307\u5411\u5185\u5b58\u4e2d\u5305\u542b\u8981\u76f8\u52a0\u7684\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> </li> <li> <p>PC = x3006\uff0copcode = 0110\uff0cLD\uff08Base+offset Mode\uff0c\u5c06R1\u4e2d\u5b58\u653e\u7684\u5730\u5740\u5bf9\u5e94\u7684value \u5b58\u653e\u5230R4\uff09</p> </li> <li> <p>PC = x3007\uff0copcode = 0000\uff0cBR\uff08NEP= 111\uff0cunconditional branch\uff0c\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0cPC+offset = x3008+xFFFB = x3003\uff09.</p> </li> </ul>"},{"location":"course/ICS/The%20LC-3/#543-the-jmp-instruction","title":"5.4.3 The JMP Instruction","text":"<ul> <li> <p>\u666e\u901a\u7684BR\uff0coffset\u6709\u8303\u56f4\u9650\u5236\uff0c\u6240\u4ee5\u8df3\u8f6c\u7684\u8303\u56f4\u4e5f\u53d7\u9650\u5236</p> </li> <li> <p>The JMP instruction loads the PC with the contents of the register specified by bits [8:6] of the instruction</p> </li> </ul> <p>JMP \u6307\u4ee4\u5c06\u6307\u4ee4\u7684\u4f4d [8:6] \u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5185\u5bb9\u52a0\u8f7d\u5230 PC</p> <p>\u5373JMP\u76f4\u63a5\u8df3\u5230BaseR\u6240\u5b58\u50a8\u7684\u503c\u5904\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230\u4efb\u4f55\u5730\u65b9\uff0c\u65e0\u8303\u56f4\u9650\u5236</p> <p></p> <p><code>R2 contains the value x6600\uff08\u5bf9\u5e94\u4e8e\u6307\u5b9a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff0c\u9700\u8981\u52a0\u8f7d\u5230PC\uff0c\u5373\u4e0b\u4e00\u6761\u6267\u884c\uff09</code>, and the PC contains x4000, then the instruction at x4000 (the JMP instruction) will be executed, followed by the instruction located at x6600. Since registers contain 16 bits (the full address space of memory), the JMP instruction has no limitation on where the next instruction to be executed must reside.</p> <p>R2\u5305\u542b\u503cx6600\uff0c\u800cPC\u5305\u542bx4000\uff0c\u5219\u5c06\u6267\u884cx4000\u5904\u7684\u6307\u4ee4\uff08JMP\u6307\u4ee4\uff09\uff0c\u7136\u540e\u6267\u884c\u4f4d\u4e8ex6600\u5904\u7684\u6307\u4ee4\u3002\u7531\u4e8e\u5bc4\u5b58\u5668\u5305\u542b 16 \u4f4d\uff08\u5b58\u50a8\u5668\u7684\u5b8c\u6574\u5730\u5740\u7a7a\u95f4\uff09\uff0c\u56e0\u6b64 JMP \u6307\u4ee4\u5bf9\u4e8e\u8981\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u5fc5\u987b\u9a7b\u7559\u5728\u4f55\u5904\u6ca1\u6709\u9650\u5236\u3002</p>"},{"location":"course/ICS/The%20LC-3/#544-the-trap-instruction","title":"5.4.4 The TRAP Instruction","text":"<p><code>The TRAP (opcode = 1111)</code>instruction changes the PC to a memory address that is part of the operating system so that the operating system will perform some task on behalf of the program that is executing.</p> <p>TRAP\uff08\u64cd\u4f5c\u7801 = 1111\uff09\u6307\u4ee4\u5c06 PC \u66f4\u6539\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e00\u90e8\u5206\u7684\u5185\u5b58\u5730\u5740\uff0c\u4ee5\u4fbf\u64cd\u4f5c\u7cfb\u7edf\u5c06\u4ee3\u8868\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\u6267\u884c\u67d0\u4e9b\u4efb\u52a1\u3002</p> <p></p> <ul> <li>bit[15:12] = 1111</li> <li>bit[11:8] = 0000,\u9ed8\u8ba4\u4e3a0</li> <li>bits[7:0] : trapvector</li> </ul> <p>TRAP\u6267\u884c\u7684\u662f\u8c03\u7528\u7cfb\u7edf\u7684\u670d\u52a1\uff08\u4ece\u952e\u76d8\u83b7\u53d6\u8f93\u5165\uff0c\u8f93\u51fa\u5230\u7ec8\u7aef\uff0c\u7ec8\u6b62\u7a0b\u5e8fhalt\u2026\u2026\uff09</p> <ul> <li>Input a character from the keboard \u2014\u2014 trapvector = x23</li> <li>Output a character to the monitor \u2014\u2014 trapvector = x21</li> <li>Halt the program \u2014\u2014 trapvector = x25</li> <li>\u5bf9\u4e8e trap \u6307\u4ee4\uff0c\u6211\u4eec\u4f1a\u628a trapvector \u96f6\u6269\u5145\u4e3a 16 \u4f4d\u4f5c\u4e3a\u5730\u5740\uff0c\u53d6\u51fa\u5bf9\u5e94\u5730\u5740\u7684\u503c\u3002\u8fd9\u4e2a\u503c\u5c31\u662f trap \u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8df3\u5230\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u65b9\u5373\u53ef\u3002</li> </ul>"},{"location":"course/ICS/The%20LC-3/#55-another-examplecounting-occurrence-of-a-character","title":"5.5 Another Example\uff1aCounting Occurrence of a Character\u8ba1\u7b97\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570","text":"<ol> <li>R0 will hold the character that is being counted R0 </li> </ol> <p>R0\u5c06\u4fdd\u5b58\u6b63\u5728\u8ba1\u6570\u7684\u5b57\u7b26</p> <ol> <li>R1 will hold, in turn, each character that we get from the file being examined</li> </ol> <p>R1 \u5c06\u4f9d\u6b21\u4fdd\u5b58\u6211\u4eec\u4ece\u6b63\u5728\u68c0\u67e5\u7684\u6587\u4ef6\u4e2d\u83b7\u5f97\u7684\u6bcf\u4e2a\u5b57\u7b26</p> <ol> <li>R2 will keep track of the number of occurrences; </li> </ol> <p>\u7528\u4e8e\u8bb0\u5f55\u51fa\u73b0\u7684\u6b21\u6570</p> <ol> <li>R3 will point to the next character in the file that is being examined. We refer to it as a pointer since it points to (i.e., contains the address of) the location where the next character of the file that we wish to examine resides. </li> </ol> <p>R3 \u5c06\u6307\u5411\u6b63\u5728\u68c0\u67e5\u7684\u6587\u4ef6\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u6307\u5411\uff08\u5373\u5305\u542b\u5176\u5730\u5740\uff09\u6211\u4eec\u5e0c\u671b\u68c0\u67e5\u7684\u6587\u4ef6\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u6240\u5728\u7684\u4f4d\u7f6e\u3002</p> <ol> <li>Processing each character requires one iteration of a loop. We will use the sentinel method, using the ASCII code for EOT (End of Transmission) (00000100) as the sentinel. </li> </ol> <p>\u5904\u7406\u6bcf\u4e2a\u5b57\u7b26\u9700\u8981\u5faa\u73af\u4e00\u6b21\u8fed\u4ee3\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u54e8\u5175\u65b9\u6cd5\uff0c\u4f7f\u7528EOT\uff08\u4f20\u8f93\u7ed3\u675f\uff09\u7684ASCII\u7801\uff0800000100\uff09\u4f5c\u4e3a\u54e8\u5175\u3002</p> <ol> <li> <p>\u5728\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u9996\u5148\u5c06R1\u7684\u5185\u5bb9\u548cEOT\u7684ASCII\u7801\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\u5219\u9000\u51fa\u5faa\u73af\uff0c\u7a0b\u5e8f\u8fdb\u5165\u6700\u540e\u4e00\u6b65\u3002\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219R1(\u5f53\u524d\u6b63\u5728\u68c0\u67e5\u7684\u5b57\u7b26)\u548cR0\uff08\u4ece\u952e\u76d8\u8f93\u5165\u7684\u5b57\u7b26\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e24\u8005\u76f8\u7b49\uff0c\u5219R2+1\uff0c\u4e0d\u76f8\u7b49\u5219R2\u4fdd\u6301\u4e0d\u53d8\u3002\u540e\u7eedR3\u6307\u9488+1\uff0c\u5c06\u4e0b\u4e00\u4e2a\u5b57\u7b26\u52a0\u8f7d\u5230R1\uff0c\u8fd4\u56de\u5230\u68c0\u67e5R1\u548c\u54e8\u5175\u662f\u5426\u76f8\u7b49</p> </li> <li> <p>\u5f53\u5230\u8fbe\u6587\u4ef6\u672b\u5c3e\u540e\uff0c\u6240\u6709\u7684\u5b57\u7b26\u90fd\u5df2\u88ab\u68c0\u67e5\uff0c\u5e76\u4e14\u8ba1\u6570\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5305\u542b\u5728R2\u4e2d</p> </li> </ol> <p></p> <ul> <li> <p>PC = x3000\uff0copcode = 0101\uff0cAND\uff0c\u521d\u59cb\u5316R2\uff0cR2 will keep track of the number of occurrences; \u7528\u4e8e\u8bb0\u5f55\u51fa\u73b0\u7684\u6b21\u6570</p> </li> <li> <p>PC = x3001\uff0copcode = 0010\uff0cLD\uff0cloads the starting address of the file to be examined into R3. </p> </li> <li> <p>PC = x3002\uff0copcode = 1111\uff0cTRAP\uff0crequests the operating system to perform a service call on behalf of this program. The function requested, as identified by the eight-bit trapvector 00100011 (i.e., x23), is to load into R0 the ASCII code of the next character typed on the   keyboard. \u8bf7\u6c42\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u8868\u8be5\u7a0b\u5e8f\u6267\u884c\u670d\u52a1\u8c03\u7528\u3002\u6240\u8bf7\u6c42\u7684\u529f\u80fd\u7531\u516b\u4f4d\u9677\u9631\u5411\u91cf 00100011\uff08\u5373 x23\uff09\u6807\u8bc6\uff0c\u662f\u5c06\u952e\u76d8\u4e0a\u952e\u5165\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684 ASCII \u4ee3\u7801\u52a0\u8f7d\u5230 R0 \u4e2d</p> </li> <li> <p>PC = x3003\uff0copcode = 0110\uff0cLDR\uff08DR + Base\uff09\uff0coffset = 0\uff0cloads the character pointed to by R3 into R1</p> </li> <li> <p>PC = x3004\uff0copcode = 0001\uff0cADD\uff0csubtracting 4 (the ASCII code for EOT) from R1 and storing it in R4. \u4ece R1 \u4e2d\u51cf\u53bb 4\uff08EOT \u7684 ASCII \u4ee3\u7801\uff09\u5e76\u5c06\u5176\u5b58\u50a8\u5230 R4 \u4e2d\u3002If the result is zero, the end of the file has been reached, and it is time to output the count.\u5982\u679c\u7ed3\u679c\u4e3a\u96f6\uff0c\u5219\u5df2\u5230\u8fbe\u6587\u4ef6\u672b\u5c3e\uff0c\u662f\u65f6\u5019\u8f93\u51fa\u8ba1\u6570\u4e86\u3002</p> </li> <li> <p>PC = x3005\uff0copcode = 0000\uff0cBR\uff0cIf the result is zero, the end of the file has been reached, and it is time to output the count.\u5982\u679c\u7ed3\u679c\u4e3a\u96f6\uff0c\u5219\u5df2\u5230\u8fbe\u6587\u4ef6\u672b\u5c3e\uff0c\u662f\u65f6\u5019\u8f93\u51fa\u8ba1\u6570\u4e86\u3002\u8df3\u8f6c\u5230x300E</p> </li> <li> <p>If R4 is not equal to zero, the character in R1 is legitimate and must be examined. The sequence of instructions at locations x3006, x3007, and x3008 determines whether the contents of R1 and R0 are identical. Taken together, the three instructions compute R0 \u2212 R1 This produces all zeros only if the bit patterns of R1 and R0 are identical. </p> </li> </ul> <p>\u5982\u679cR4\u4e0d\u7b49\u4e8e0\uff0c\u5219\u8fdb\u5165\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u540e\u7eed\u5224\u65adR1\u548cR0\u662f\u5426\u76f8\u7b49\u3002x3006,x3007,x3008\u5904\u7684\u6307\u4ee4\u5408\u5728\u4e00\u8d77\u5224\u65adR0\u548cR1\u662f\u5426\u76f8\u7b49\u3002</p> <p>\u5148x3006\uff0c\u5bf9R1\u8fdb\u884c\u9010\u4f4d\u53d6\u53cd\uff0c\u518dx3007\uff0c\u5bf9R1+1\u64cd\u4f5c\uff0c\u5f97\u5230R1\u7684\u76f8\u53cd\u6570\uff0c\u6700\u540ex3008\uff0cADD\uff0cR1+R0\u4fdd\u5b58\u5728R1\u4e2d</p> <ul> <li> <p>PC = x3009\uff0copcode = 0000\uff0cBR\uff0c\u5224\u65adR1\u662f\u6b63\u6570\u8d1f\u6570\u6216\u80050.\u5982\u679cR1\u662f0\uff0c\u5219\u4e0d\u8df3\u8f6c\uff0c\u8fdb\u5165\u4e0b\u4e00\u6761R2 = R2+1\uff0c\u8ba1\u6570\u52a0\u4e00\uff1b\u5982\u679cR1\u4e0d\u7b49\u4e8e0\uff0c\u5219\u8df3\u8f6c\u5230x300B\uff0cR3=R3+1\uff0cx300B \u5904\u7684\u6307\u4ee4\u9012\u589e R3\uff0c\u56e0\u6b64\u5b83\u5c06\u6307\u5411\u6b63\u5728\u68c0\u67e5\u7684\u6587\u4ef6\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26</p> </li> <li> <p>PC = x300C\uff0copcode = 0110\uff0cLDR\uff08DR + Base\uff09\uff0coffset = 0\uff0cloads the character pointed to by R3 into R1\uff0c\u5f00\u59cb\u68c0\u6d4b\u65b0\u7684\u5b57\u7b26</p> </li> <li> <p>PC = x300D\uff0copcode = 0000\uff0cBR\uff0c\u8df3\u8f6c\u5230x3004\uff0c\u65b0\u7684\u4e00\u8f6e\u5f00\u59cb</p> </li> <li> <p>PC = x300E\uff0copcode = 0010\uff0cLD\uff0c\u6b64\u65f6\uff0c\u5df2\u7ecf\u68c0\u6d4b\u5230\u54e8\u5175EOT\uff0c\u5c06 00110000 \u52a0\u8f7d\u5230 R0 \u4e2d</p> </li> <li> <p>PC = x300F\uff0copcode = 0001\uff0cADD\uff0cx300F \u5904\u7684\u6307\u4ee4\u5c06\u8ba1\u6570\u6dfb\u52a0\u5230 R0 \u4e2d\uff0c\u8fd9\u4f1a\u5c06\u8ba1\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\uff08\u5728 R2 \u4e2d\uff09\u8f6c\u6362\u4e3a\u8ba1\u6570\u7684 ASCII \u8868\u793a\u5f62\u5f0f\uff08\u5728 R0 \u4e2d\uff09\u3002</p> </li> <li> <p>PC = x3010\uff0copcode = 1111\uff0cTRAP\uff0c\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684 TRAP\uff0c\u5c06 R0 \u7684\u5185\u5bb9\u8f93\u51fa\u5230\u76d1\u89c6\u5668\u3002</p> </li> <li> <p>PC = x3011\uff0copcode = 1111\uff0cTRAP\uff0c\u8c03\u7528 TRAP \u6307\u4ee4\u6765\u7ec8\u6b62\u7a0b\u5e8f</p> </li> </ul>"},{"location":"course/ICS/The%20LC-3/#56-the-data-path-revisited","title":"5.6 The Data Path Revisited","text":""},{"location":"course/ICS/The%20LC-3/#561-basic-components-of-the-data-path","title":"5.6.1 Basic Components of the Data Path","text":""},{"location":"course/ICS/The%20Von%20Neumann%20Model/","title":"Chapter 4 | The von Neumann Modle\u51af\u8bfa\u4f9d\u66fc\u6a21\u578b","text":""},{"location":"course/ICS/The%20Von%20Neumann%20Model/#41-basic-components","title":"4.1 Basic Components","text":"<p>To get a task done by a computer, we need two things: </p> <ul> <li> <p>(a) a computer program that specifies what the computer must do to perform the task,</p> </li> <li> <p>(b) the computer that is to carry out the task.</p> </li> </ul> <p><code>The von Neumann model consists of five parts: memory, a processing unit, input, output, and a control unit.</code></p> <p></p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#411-memory","title":"4.1.1 Memory","text":"<ul> <li>\u5f53\u4eca\u5927\u591a\u6570\u7535\u8111\u90fd\u662f16GB\u5185\u5b58</li> <li>consist of \\(2^{34}\\)\u200bdistinct memory locations,each of which is capable of storing eight bits of information.</li> <li>\u5730\u5740\u7a7a\u95f4\uff08address space\uff09\u4e3a \\(2^{34}\\),\u5bfb\u5740\u80fd\u529b\uff08addressability\uff09\u662f8bits</li> <li>16 = \\(2^4\\),1GB = \\(2^{10} MB = 2^{20}KB=2^{30}B\\),16GB = \\(2^{34}B\\)</li> </ul> <p><code>\u5bf9\u4e8eLC-3\uff0c</code><code>We will see that the memory address space of the LC-3 is $2^16$, and the addressability is 16 bits.</code></p> <p>we first place the address of that location in the memory\u2019s address register (MAR)\u5730\u5740\u5bc4\u5b58\u5668 and then interrogate(\u8be2\u95ee) the computer\u2019s memory. The information stored in the location having that address will be placed in the memory\u2019s data register (MDR)\u6570\u636e\u5bc4\u5b58\u5668. To write (or store) a value in a memory location, we first write the address of the memory location in the MAR, and the value to be stored in the MDR. We then interrogate the computer\u2019s memory with the write enable signal asserted. The information contained in the MDR will be written into the memory location whose address is in the MAR</p> <p>\u6211\u4eec\u9996\u5148\u5c06\u8be5\u4f4d\u7f6e\u7684\u5730\u5740\u653e\u5165\u5185\u5b58\u7684\u5730\u5740\u5bc4\u5b58\u5668\uff08MAR\uff09\u4e2d\uff0c\u7136\u540e\u8be2\u95ee\u8ba1\u7b97\u673a\u7684\u5185\u5b58\u3002\u5b58\u50a8\u5728\u5177\u6709\u8be5\u5730\u5740\u7684\u4f4d\u7f6e\u7684\u4fe1\u606f\u5c06\u88ab\u653e\u7f6e\u5728\u5b58\u50a8\u5668\u7684\u6570\u636e\u5bc4\u5b58\u5668\uff08MDR\uff09\u4e2d\u3002\u8981\u5c06\u503c\u5199\u5165\uff08\u6216\u5b58\u50a8\uff09\u5230\u5185\u5b58\u4f4d\u7f6e\uff0c\u6211\u4eec\u9996\u5148\u5c06\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740\u5199\u5165 MAR \u4e2d\uff0c\u5e76\u5c06\u8981\u5b58\u50a8\u7684\u503c\u5199\u5165 MDR \u4e2d\u3002\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u7f6e\u4f4d\u5199\u5165\u4f7f\u80fd\u4fe1\u53f7\u6765\u8be2\u95ee\u8ba1\u7b97\u673a\u7684\u5185\u5b58\u3002 MDR\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u5c06\u88ab\u5199\u5165MAR\u4e2d\u5730\u5740\u7684\u5185\u5b58\u4f4d\u7f6e</p> <p>The value stored in that location can be changed, but the location\u2019s memory address remains unchanged.</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#412-processing-unit","title":"4.1.2 Processing Unit","text":"<ul> <li> <p>The processing unit in a modern computer can consist of many sophisticated\uff08\u590d\u6742\u7684\uff09 complex functional units\uff08\u590d\u6742\u7684\u529f\u80fd\u5355\u5143\uff09, each performing one particular operation(divide, square root, etc.).</p> </li> <li> <p><code>ALU</code>is the simplest processing unit</p> </li> <li> <p>ALU is the abbreviation(\u7f29\u5199) for <code>Arithmetic and Logic Unit</code>, so called because it is usually capable of performing basic arithmetic functions (like ADD and SUBTRACT) and basic logic operations (like bit-wise AND, OR, and NOT) </p> </li> </ul> <p>\u80fd\u591f\u6267\u884c\u57fa\u672c\u7b97\u672f\u51fd\u6570\u548c\u57fa\u672c\u903b\u8f91\u8fd0\u7b97                                                                                                                                      </p> <ul> <li>The ALU normally processes data elements of a fixed size referred to as the word length of the computer. The data elements are called words.</li> </ul> <p>ALU \u901a\u5e38\u5904\u7406\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\u5143\u7d20\uff0c\u79f0\u4e3a\u8ba1\u7b97\u673a\u7684\u5b57\u957f\u3002\u6570\u636e\u5143\u7d20\u79f0\u4e3a\u5355\u8bcd\u3002</p> <p><code>\u5728LC-3\u4e2d\uff0cALU process 16-bits words\uff0chas a word length of 16 bits</code></p> <ul> <li>Almost all computers, have temporary storage for storing the result of A + B in order to avoid the much longer access time that would be necessary when it came time to multiply. The most common form of temporary storage is a set of registers</li> </ul> <p>\u51e0\u4e4e\u6240\u6709\u8ba1\u7b97\u673a\u90fd\u6709\u4e34\u65f6\u5b58\u50a8\u5668\u6765\u5b58\u50a8 A + B \u7684\u7ed3\u679c\uff0c\u4ee5\u907f\u514d\u4e58\u6cd5\u65f6\u9700\u8981\u66f4\u957f\u7684\u8bbf\u95ee\u65f6\u95f4\u3002\u6700\u5e38\u89c1\u7684\u4e34\u65f6\u5b58\u50a8\u5f62\u5f0f\u662f\u4e00\u7ec4\u5bc4\u5b58\u5668</p> <ul> <li>Typically, the size of each register is identical to the size of values processed by the ALU; that is, they each contain one word. <code>The LC-3 has eight registers (R0, R1, ... R7), each containing 16 bits.</code></li> </ul> <p>\u901a\u5e38\uff0c\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u5927\u5c0f\u4e0e ALU \u5904\u7406\u7684\u503c\u7684\u5927\u5c0f\u76f8\u540c\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u6bcf\u4e2a\u90fd\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002 LC-3 \u6709\u516b\u4e2a\u5bc4\u5b58\u5668\uff08R0\u3001R1\u3001...R7\uff09\uff0c\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5305\u542b 16 \u4f4d\u3002</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#413-input-and-output","title":"4.1.3 Input and Output","text":""},{"location":"course/ICS/The%20Von%20Neumann%20Model/#414-control-unit","title":"4.1.4 Control Unit","text":"<ul> <li>It is the control unit that keeps track of both where we are within the process of executing the program and where we are in the process of executing each instruction.</li> </ul> <p>\u5b83\u8ddf\u8e2a\u6211\u4eec\u5728\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u7684\u4f4d\u7f6e\u4ee5\u53ca\u6211\u4eec\u5728\u6267\u884c\u6bcf\u6761\u6307\u4ee4\u7684\u8fc7\u7a0b\u4e2d\u7684\u4f4d\u7f6e</p> <ul> <li>To keep track of which instruction is being executed, the control unit has an instruction register to contain that instruction.</li> </ul> <p>\u4e3a\u4e86\u8ddf\u8e2a\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\uff0c\u63a7\u5236\u5355\u5143\u6709\u4e00\u4e2a\u6307\u4ee4\u5bc4\u5b58\u5668\u6765\u5305\u542b\u8be5\u6307\u4ee4\u3002</p> <ul> <li>To keep track of which instruction is to be processed next, the control unit has a register that contains the next instruction\u2019s address.</li> </ul> <p>\u4e3a\u4e86\u8ddf\u8e2a\u63a5\u4e0b\u6765\u8981\u5904\u7406\u54ea\u6761\u6307\u4ee4\uff0c\u63a7\u5236\u5355\u5143\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d\u5305\u542b\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002</p> <ol> <li>program counter\uff08PC\uff09\u7a0b\u5e8f\u8ba1\u6570\u5668   PC\u5b58\u653e\u7684\u662f\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740</li> <li>instruction register\uff08IR\uff09\u6307\u4ee4\u5bc4\u5b58\u5668 IR\u5b58\u653e\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4</li> <li>FSM\uff1a\u6709\u9650\u72b6\u6001\u673a\u6839\u636eIR\uff0c\u51b3\u5b9a\u63a7\u5236\u4fe1\u53f7\uff0c\u5e76\u628a\u63a7\u5236\u4fe1\u53f7\u4f20\u5230\u5176\u4ed6\u90e8\u4ef6\uff08ALU\uff09</li> </ol>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#42-the-lc-3an-example-von-neumann-machine","title":"4.2 The LC-3\uff1aAn example von Neumann Machine","text":"<ul> <li>Filled-in arrowheads denote data elements that flow along the corresponding paths. Not-filled-in arrowheads denote control signals that control the processing of the data elements</li> </ul> <p>\u5b9e\u5fc3\u7bad\u5934\u8868\u793a\u6cbf\u7740\u76f8\u5e94\u8def\u5f84\u6d41\u52a8\u7684\u6570\u636e\u5143\u7d20\u3002\u672a\u586b\u5145\u7684\u7bad\u5934\u8868\u793a\u63a7\u5236\u6570\u636e\u5143\u7d20\u5904\u7406\u7684\u63a7\u5236\u4fe1\u53f7</p> <ul> <li>eg:the box labeled ALU in the processing unit processes two 16-bit values and produces a 16-bit result. The two   sources and the result are all data, and are designated by filled-in arrowheads.The operation performed on those two 16-bit data elements (it is labeled ALUK) is part of the control\u2014therefore, a not-filled-in arrowhead.</li> </ul> <p>\u5904\u7406\u5355\u5143\u4e2d\u6807\u6709 ALU \u7684\u6846\u5904\u7406\u4e24\u4e2a 16 \u4f4d\u503c\u5e76\u4ea7\u751f 16 \u4f4d\u7ed3\u679c\u3002\u4e24\u4e2a\u6765\u6e90\u548c\u7ed3\u679c\u90fd\u662f\u6570\u636e\uff0c\u5e76\u7528\u5b9e\u5fc3\u7bad\u5934\u8868\u793a\u3002\u5bf9\u8fd9\u4e24\u4e2a 16 \u4f4d\u6570\u636e\u5143\u7d20\uff08\u6807\u8bb0\u4e3a ALUK\uff09\u6267\u884c\u7684\u64cd\u4f5c\u662f\u63a7\u5236\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u662f\u4e00\u4e2a\u672a\u586b\u5145\u7684\u7bad\u5934</p> <ol> <li>Memory</li> </ol> <ul> <li>MEMORY consists of the storage elements, along with the <code>Memory Address Register (MAR) for addressing individual locations</code> and </li> <li><code>the Memory Data Register (MDR) for holding the contents of a memory location on its way to/from the storage</code></li> <li> <p>\u5b58\u50a8\u5668\u7531\u5b58\u50a8\u5143\u4ef6\u4ee5\u53ca\u7528\u4e8e\u5bfb\u5740\u5404\u4e2a\u4f4d\u7f6e\u7684\u5b58\u50a8\u5668\u5730\u5740\u5bc4\u5b58\u5668 (MAR) \u7ec4\u6210\u548c\u5185\u5b58\u6570\u636e\u5bc4\u5b58\u5668 (MDR)\uff0c\u7528\u4e8e\u5728\u8fdb\u51fa\u5b58\u50a8\u5668\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u5b58\u5185\u5b58\u4f4d\u7f6e\u7684\u5185\u5bb9</p> </li> <li> <p>\u6ce8\u610f\u5230\uff0cMAR contains 16 bits,\u8bf4\u660eLC-3\u7684\u5730\u5740\u7a7a\u95f4\u662f\\(2^{16}\\) memory locations</p> </li> <li>MDR contains 16 bits\uff0c\u8bf4\u660e\u5bfb\u5740\u80fd\u529b\u662f16 bits</li> </ul> <ol> <li>input and output</li> </ol> <ul> <li> <p>input and output consist of a keyboard and a minitor</p> </li> <li> <p>The simplest keyboard requires two registers: a <code>keyboard data register (KBDR)</code> for holding the ASCII codes of keys struck and a <code>keyboard status register (KBSR)</code> for maintaining status information about the keys struck.</p> </li> </ul> <p>\u4e00\u4e2a\u952e\u76d8\u6570\u636e\u5bc4\u5b58\u5668\uff08keyboard data register\uff09\uff0c\u7528\u4e8e\u4fdd\u5b58\u6240\u6572\u51fb\u6309\u952e\u7684ASCII\u7801\u503c\uff0c\u4e00\u4e2a\u952e\u76d8\u72b6\u6001\u5bc4\u5b58\u5668\uff08keyboard status register\uff09\u7ef4\u62a4\u6709\u5173\u6240\u6572\u51fb\u6309\u952e\u7684\u72b6\u6001\u4fe1\u606f</p> <ul> <li>The simplest monitor also requires two registers: a <code>display data register (DDR)</code> for holding the ASCII code of something to be displayed on the screen and a <code>display status register (DSR)</code> for maintaining associated status information. </li> </ul> <p>\u4e00\u4e2a\u5c4f\u5e55\u663e\u793a\u6570\u636e\u5bc4\u5b58\u5668\uff08DDR\uff09\uff0c\u7528\u4e8e\u4fdd\u5b58\u8981\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u5185\u5bb9\u7684ASCII\u7801\uff0c\u4e00\u4e2a\u663e\u793a\u72b6\u6001\u5bc4\u5b58\u5668\uff08DSR\uff09\uff0c\u7528\u4e8e\u7ef4\u62a4\u76f8\u5173\u7684\u72b6\u6001\u4fe1\u606f</p> <ol> <li>The processing unit</li> </ol> <ul> <li>THE PROCESSING UNIT consists of <code>a functional unit (ALU)</code>that performs arithmetic and logic operations and eight registers (R0, ... R7) for storing temporary values that will be needed in the near future as operands for subsequent instructions. </li> </ul> <p>\u5904\u7406\u5355\u5143\u7531\u4e00\u4e2a\u6267\u884c\u7b97\u672f\u548c\u903b\u8f91\u8fd0\u7b97\u7684\u529f\u80fd\u5355\u5143\uff08ALU\uff09\u548c\u516b\u4e2a\u5bc4\u5b58\u5668\uff08R0\uff0c... R7\uff09\u7ec4\u6210\uff0c\u7528\u4e8e\u5b58\u50a8\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u4f5c\u4e3a\u540e\u7eed\u6307\u4ee4\u7684\u64cd\u4f5c\u6570\u6240\u9700\u7684\u4e34\u65f6\u503c\u3002</p> <ul> <li>The LC-3 ALU can perform <code>one arithmetic   operation (addition) and two logical operations (bitwise AND and bitwise NOT).</code></li> </ul> <p>LC-3 ALU \u53ef\u4ee5\u6267\u884c\u4e00\u9879\u7b97\u672f\u8fd0\u7b97\uff08\u52a0\u6cd5\uff09\u548c\u4e24\u9879\u903b\u8f91\u8fd0\u7b97\uff08\u6309\u4f4d AND \u548c\u6309\u4f4d NOT\uff09</p> <ol> <li>The control unit</li> </ol> <ul> <li>Its most important structure is the<code>finite state machine</code>, which directs all the activity.</li> <li>CLK specifies how long each clock cycle lasts</li> <li>The instruction register (IR) is also an input to the finite state machine since the LC-3 instruction being processed determines what activities must be carried out.</li> <li>The program counter (PC) is also a part of the control unit; it keeps track of the next instruction to be executed after the current instruction finishes</li> </ul>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#43-instruction-processing","title":"4.3 Instruction processing \u6307\u4ee4\u5904\u7406","text":""},{"location":"course/ICS/The%20Von%20Neumann%20Model/#431-the-instruction","title":"4.3.1 The instruction","text":"<ul> <li>The most basic unit of computer processing is the instruction. It is made up of two parts, the opcode (what the instruction does) and the operands (who it does it to!)</li> </ul> <p>opcode\uff1a\u64cd\u4f5c\u7801\uff0c\u6307\u4ee4\u505a\u4ec0\u4e48\uff0coperand\uff1a\u64cd\u4f5c\u6570\uff0c\u5b83\u5bf9\u8c01\u505a</p> <ul> <li> <p>The LC-3 has three<code>operate instructions</code>: one arithmetic (ADD) and two logicals (AND and NOT). </p> </li> <li> <p><code>Data movement instructions</code> move information from the processing unit to and from memory and to and from input/output devices. (\u6570\u636e\u79fb\u52a8\u6307\u4ee4\u5c06\u4fe1\u606f\u4ece\u5904\u7406\u5355\u5143\u79fb\u5165\u6216\u79fb\u51fa\u5b58\u50a8\u5668\uff0c\u79fb\u5165\u6216\u79fb\u51fa\u8f93\u5165\u8f93\u51fa\u8bbe\u5907)The LC-3 has six data movement instructions.</p> </li> <li> <p><code>Control instructions</code> are necessary for altering the sequential processing of instructions(\u6539\u53d8\u6307\u4ee4\u7684\u987a\u5e8f).</p> </li> </ul> <p>normally the next instruction executed is the instruction contained in the next memory location.\uff08\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u662f\u4e0b\u4e00\u4e2a\u5b58\u50a8\u4f4d\u7f6e\u4e2d\u5305\u542b\u7684\u6307\u4ee4\uff09 If a program consists of instructions 1,2,3,4...10 located in memory locations A, A+1, A+2, ...A+9\uff08\u6307\u4ee4\u4f4d\u4e8e\u5185\u5b58\u5730\u5740\u2026\u2026\uff09, normally the instructions would be executed in the sequence 1,2,3...10.</p> <p>\u5173\u4e8eLC-3\u7684\u6307\u4ee4instruction</p> <ol> <li>An LC-3 instruction consists of 16 bits (one word), numbered from left to right, bit [15] to bit [0]. </li> <li>Bits [15:12] contain the opcode. This means there are at most \\(2^4\\) distinct opcodes. Actually, we use only 15 of the possible four-bit codes. One is reserved for some future use. </li> <li>Bits [11:0] are used to figure out where the operands are.</li> </ol>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4311-the-add-instruction","title":"4.3.1.1 The add instruction","text":"<ul> <li> <p>The ADD instruction is an operate instruction that requires three operands: <code>two source operands</code> (the numbers to be added) and <code>one destination operand</code> (where the sum is to be stored after the addition is performed).</p> </li> <li> <p>ADD \u6307\u4ee4\u8981\u6c42\u81f3\u5c11\u4e24\u4e2a\u6e90\u64cd\u4f5c\u6570\u4e4b\u4e00\u5305\u542b\u5728\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e4b\u4e00\u4e2d\uff0c\u5e76\u4e14 ADD \u7684\u7ed3\u679c\u653e\u5165\u8fd9\u516b\u4e2a\u5bc4\u5b58\u5668\u4e4b\u4e00\u4e2d\u3002</p> </li> <li> <p>\u683c\u5f0f\uff1a</p> </li> </ul> <p></p> <ul> <li> <p>0001 \u8868\u793aopcode add [15:12]</p> </li> <li> <p>Bits [11:9] identify the location to be used for storing the result(\u5b58\u50a8\u7ed3\u679c), in this case register6 (R6).</p> </li> <li> <p>Bits [8:6] identify the register that contains one of the two source operands,in this case R2.</p> </li> <li> <p>\u4e24\u79cd\u8868\u793a\u65b9\u6cd5\u7684\u533a\u522b\u5728\u4e8ebit5\u662f0\u8fd8\u662f1\uff0c</p> </li> <li> <p>the first case, bit 5 is 0,signifying that the second source operand is in the register specified by bits [2:0], in this case R6.</p> <p>\u8868\u793a\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\u4f4d\u4e8e\u4f4d[2:0]\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\uff0c\u672c\u9898\u4e3aR6</p> </li> <li> <p>In the second case,bit 5 is 1, signifying that the second source operand is formed by sign-extending(\u7b26\u53f7\u6269\u5145) the integer in bits [4:0] to 16 bits. In this case, the second source operand is the positive integer 6.</p> </li> </ul> <p>\u8868\u793a\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\u662f\u901a\u8fc7\u5c06\u4f4d[4:0]\u4e2d\u7684\u6574\u6570\u7b26\u53f7\u6269\u5c55\u523016\u4f4d\u800c\u5f62\u6210\u7684\u3002\u672c\u9898\u4e3a\u6b63\u6574\u65706</p> <p></p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4312-the-and-instruction","title":"4.3.1.2 The AND instruction","text":"<ul> <li>\u683c\u5f0f\u548cADD \u76f8\u540c</li> <li>opcode is 0101</li> </ul> <p>R3\u548c00\u2026\u202600\uff0816\u4e2a\uff09\u8fdb\u884cAND \u64cd\u4f5c\uff0c\u5e76\u5c06\u7ed3\u679c\u50a8\u5b58\u5728R2\u4e2d\uff0c\u8fbe\u5230\u521d\u59cb\u5316R2\u7684\u76ee\u7684</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4313-the-ld-instruction","title":"4.3.1.3 The LD instruction","text":"<ul> <li><code>LD \u8868\u793a load\uff0c\u5373\u5230\u5185\u5b58\u5730\u5740\u4e2d\u53d6\u51fa\u6570\u636e\u5e76\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668</code>\u4e2d\uff0c\u201cgo to a particular memory location, read the   value that is contained there, and store that value in one of the registers.\u201d</li> </ul> <ul> <li> <p>LD \u91c7\u7528PC + offset \u65b9\u5f0f\u5bfb\u5740</p> </li> <li> <p>opcode is 0010</p> </li> <li>[11:9]\u8868\u793a\u7528\u4e8e\u5b58\u50a8\u7684\u5bc4\u5b58\u5668DR,\u9700\u8981\u5c06\u6570\u636e\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d</li> <li>Bits[8:0]\u8868\u793aoffset\u504f\u79fb\u91cf\uff0c\u5148\u5c06\u8fd99\u4f4dbits\u62d3\u5c55\u621016\u4f4d\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8865\u7801\u7684\u5f62\u5f0f\u6c42\u51fa\u503c\uff0c\u5c06\u4ed6\u52a0\u5230PC\uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\uff0c\u5f53\u524d\u6307\u4ee4\u7684\u4f4d\u7f6e\uff09\u7684\u5f53\u524d\u4f4d\u7f6e\u4e2d\u3002</li> <li>\u4e0a\u56fe\u4e2d\uff0c\u6307\u4ee4\u544a\u8bc9\u8ba1\u7b97\u673a\u5c06PC\u7684\u5185\u5bb9\u52a0198\u5f62\u6210\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740\uff0c\u5e76\u5c06\u8be5\u5185\u5b58\u4f4d\u7f6e\u7684\u5185\u5bb9\u52a0\u8f7d\u5230R2\u4e2d</li> </ul> <p>\u6ce8\u610f\u70b9\uff1a\u6b64\u65f6\u7684PC\u8868\u793a\u539f\u5148LD\u5bf9\u5e94\u7684PC\u518d+1</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#432-the-instruction-cycle","title":"4.3.2 The instruction cycle \u6307\u4ee4\u5468\u671f","text":"<ul> <li>fetch                        \u83b7\u53d6</li> <li>decode                    \u89e3\u7801</li> <li>evaluate address    \u83b7\u53d6\u5730\u5740</li> <li>fetch operands       \u83b7\u53d6\u64cd\u4f5c\u6570</li> <li>execute                   \u6267\u884c</li> <li>store result             \u5b58\u50a8\u7ed3\u679c</li> </ul>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4321-fetch","title":"4.3.2.1 Fetch","text":"<ul> <li>The FETCH phase obtains the next instruction from memory and loads it into the instruction register (IR) of the control unit</li> </ul> <p>FETCH\u9636\u6bb5\u4ece\u5185\u5b58\u4e2d\u83b7\u53d6\u4e0b\u4e00\u6761\u6307\u4ee4\u5e76\u5c06\u5176\u52a0\u8f7d\u5230\u63a7\u5236\u5355\u5143\u7684\u6307\u4ee4\u5bc4\u5b58\u5668\uff08IR\uff09\u4e2d</p> <ul> <li>The program counter\uff08PC\uff09contain the address of the next instruction to be processed</li> </ul> <p>\u6b65\u9aa4\uff1a</p> <ul> <li>Step 1: Load the MAR with the contents of the PC, and   simultaneously increment the PC.\uff08one clock cycle\uff09</li> </ul> <p>\u5c06PC\u7684\u5185\u5bb9\u52a0\u8f7d\u5230MAR\u4e2d\uff0c\u540c\u65f6PC = PC + 1</p> <ul> <li>Step 2: Interrogate memory, resulting in the instruction   being placed in the MDR.\uff08one or more clock cycle\uff09</li> </ul> <p>\u8bbf\u95ee\u5185\u5b58\uff0c\u5c06\u6307\u4ee4\u653e\u5165MDR\u4e2d</p> <ul> <li>Step 3: Load the IR with the contents of the MDR.</li> </ul> <p>\u5c06MDR\u7684\u5185\u5bb9\u52a0\u8f7d\u5230IR\u4e2d\uff08one clock cycle\uff09</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4322-decode","title":"4.3.2.2 decode","text":"<p>FSM\uff08finite state machine\uff09 \uff0c\u6839\u636eIR\u5b58\u50a8\u7684\u6307\u4ee4\u5185\u5bb9\u8fdb\u884c\u89e3\u7801\u3002</p> <p><code>\u786e\u5b9a\u64cd\u4f5c\u7801opcode\uff0c\u901a\u8fc7opcode\u524d\u56db\u4f4dbits\u51b3\u5b9a\u6307\u4ee4\u7c7b\u578b</code></p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4323-evaluate-address","title":"4.3.2.3 evaluate address","text":"<p>\u8ba1\u7b97\u6211\u4eec\u8981\u8bbf\u95ee\u5185\u5b58\u7684\u5730\u5740\u3002\uff08\u8fd9\u4e2a\u9636\u6bb5\u53ea\u4f1a\u5728\u6211\u4eec\u9700\u8981\u8bbf\u95ee\u5185\u5b58\u65f6\u624d \u51fa\u73b0\uff09 e.g. LD</p> <p>LD \u6307\u4ee4\u5c06\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u503c\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\u3002\u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u5730\u5740\u662f\u901a\u8fc7\u5c06\u6307\u4ee4\u7684\u4f4d [8:0] \u7b26\u53f7\u6269\u5c55\u4e3a 16 \u4f4d\u5e76\u5c06\u8be5\u503c\u6dfb\u52a0\u5230 PC \u7684\u5f53\u524d\u5185\u5bb9\u6765\u83b7\u5f97\u7684\u3002\u8be5\u8ba1\u7b97\u662f\u5728\u8bc4\u4f30\u5730\u5740\u9636\u6bb5\u6267\u884c\u7684\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u975e\u6240\u6709\u6307\u4ee4\u90fd\u8bbf\u95ee\u5185\u5b58\u6765\u52a0\u8f7d\u6216\u5b58\u50a8\u6570\u636e\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230LC-3\u4e2d\u7684ADD\u548cAND\u6307\u4ee4\u4ece\u5bc4\u5b58\u5668\u6216\u6307\u4ee4\u672c\u8eab\u83b7\u53d6\u5176\u6e90\u64cd\u4f5c\u6570\uff0c\u5e76\u5c06ADD\u6216AND\u6307\u4ee4\u7684\u7ed3\u679c\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u6307\u4ee4\uff0c\u4e0d\u9700\u8981\u8bc4\u4f30\u5730\u5740\u9636\u6bb5\u3002</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4324-fetch-operands","title":"4.3.2.4 fetch operands","text":"<p>\u53d6\u51fa\u6e90\u64cd\u4f5c\u6570\uff08\u5305\u62ec\u5185\u5b58\u548c\u5bc4\u5b58\u5668\u5806\u4e2d\u7684\u6570\u636e\uff09e.g. LD \u5728\u8fd9\u4e2a\u9636\u6bb5 \u4f1a\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u6570\u636e\uff0cADD \u5728\u8fd9\u4e2a\u9636\u6bb5\u4f1a\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u53d6\u51fa\u6570\u636e\u3002</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4325-execute","title":"4.3.2.5 execute","text":"<p>\u6267\u884c\u8ba1\u7b97\u3002 e.g. ADD \u6307\u4ee4\u5728\u8fd9\u4e2a\u9636\u6bb5\u6211\u4eec\u4f1a\u52a0\u4e0a\u6e90\u64cd\u4f5c\u6570\u3002</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#4326-store-result","title":"4.3.2.6 Store result","text":"<p>\u628a\u7ed3\u679c\u5199\u56de\u5230\u76ee\u7684\u5730\u3002 e.g. \u6bd4\u5982 ADD \u4f1a\u628a\u8ba1\u7b97\u7684\u7ed3\u679c\u5199\u56de\u5230\u5bc4\u5b58\u5668\u5806\u4e2d\uff0cST (store) \u4f1a\u628a\u6570\u636e\u5199\u56de\u5230\u5185\u5b58\u4e2d\u3002</p> <p>\u867d\u7136\u5b58\u5728\u6307\u4ee4\u5468\u671f\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4f46\u662f\u5e76\u4e0d\u4e00\u5b9a\u6240\u6709\u7684\u6307\u4ee4\u90fd\u8981\u7ecf\u8fc7\u8fd9\u516d\u4e2a\u8fc7\u7a0b\u3002eg\uff1aADD\u6307\u4ee4\u53ef\u4ee5\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\uff0c\u5b8c\u6210fetch operands\uff0cexecute\uff0cstore result</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#433-change-the-sequence-of-execution","title":"4.3.3 Change the Sequence of Execution","text":"<ul> <li>control instruction\u2014\u2014change the sequence of instruction execution.</li> </ul> <ul> <li> <p>bit[15:12] : opcode(0000\u8868\u793aBR\u7684\u64cd\u4f5c\u7801)</p> </li> <li> <p>bit[11:9] : \u8868\u793a\u8df3\u8f6c\u7684\u6761\u4ef6\u3002\uff08bit[11:9]\u5206\u522b\u5bf9\u5e94NZP\uff09</p> </li> <li> <p>bit[8:0] : offset \u504f\u79fb\u91cf\uff0c\u548cLD\u4e00\u6837\u9700\u8981\u7b26\u53f7\u6269\u5145\u81f316\u4f4d\uff0c\u8fd9\u6837PC+offset \u5c31\u662f\u6211\u4eec\u8981\u8df3\u8f6c\u5230\u7684\u5730\u5740</p> </li> </ul> <p>\u6ce8\u610f\u4e00\u4e0b\uff1a\uff0c\u6b64\u5904\u7684PC\u662fBR\u5bf9\u5e94\u7684\u539fPC+1</p> <p>\u5173\u4e8eConditional Code</p> <ul> <li>CC\uff08conditional codes\uff09\u662f\u4e09\u4e2a1-bit\u7684\u72b6\u6001\uff08NZP\uff09\u3002</li> <li>N \u8868\u793a negative\uff0cZ\u8868\u793azero\uff0cP\u8868\u793apositive\u3002\u90e8\u5206\u6307\u4ee4\u6267\u884c\u540e\uff0c\u4f1a\u6839\u636e\u6267\u884c\u7ed3\u679c\u66f4\u65b0NZP\u4e09\u4e2a\u6761\u4ef6\u7801\u3002</li> <li>BR\u6839\u636eCC\u6765\u51b3\u5b9a\u662f\u5426\u8df3\u8f6c\u3002</li> <li>\u5982\u679cconditional code \u5168\u4e3a1\uff0c\u5219\u4e00\u5b9a\u8df3\u8f6c</li> <li>\u5982\u679cconditional code \u5168\u4e3a0\uff0c\u5219\u4e00\u5b9a\u4e0d\u8df3\u8f6c</li> <li>\u5176\u4ed6\u60c5\u51b5\uff0c\u5148\u770bconditional code\u76841\u5728\u54ea\u4e00\u4f4d\uff0c\u518d\u770b\u90a3\u4e2a\u4e00\u5bf9\u5e94\u7684\u6761\u4ef6\u7801\u662f\u5426\u4e3a1\uff0c\u53ea\u8981\u4e24\u8005\u5168\u4e3a1\uff0c\u5219\u6ee1\u8db3\u8df3\u8f6c\u8981\u6c42</li> <li>\u5982\u679c\u6267\u884c\u8df3\u8f6c\uff0c\u5c31\u7528PC+offset \u4ee3\u66ffPC+1</li> <li>\u5bf9\u4e8e\u4e0d\u6267\u884c\u8df3\u8f6c\uff0c\u4ecd\u7136\u662fPC+1</li> </ul>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#434-control-of-the-instruction-cycle","title":"4.3.4 Control of the instruction cycle","text":"<ol> <li> <p>Fetch\u9636\u6bb5\uff1a\u9700\u8981\u4e09\u4e2a\u65f6\u949f\u5468\u671f</p> </li> <li> <p>MAR is loaded with the contents of the PC\uff0cand the PC is incremented</p> <p>MAR \u52a0\u8f7d PC\uff08\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5185\u5b58\u5730\u5740\uff09 \u7684\u5185\u5bb9\uff0cPC\u5730\u5740+1</p> <p>\u4e2d\u95f4\u9700\u8981GatePC and LD.MAR.\uff0cGatePC connects the PC to the processor bus\uff0cGatePC\u5c06PC\u8fde\u63a5\u5230\u603b\u7ebf\uff0c\u6cbf\u7740\u603b\u7ebf\u5230\u8fbeMemory\u548cMAR</p> <p>LD.MAR\u662fMAR\u7684write enable signal\uff0c\u9700\u8981\u5728\u65f6\u949f\u5468\u671f\u7ed3\u675f\u4e4b\u524d\u5c06\u603b\u7ebf\u7684\u5185\u5bb9\uff08PC\uff09\u52a0\u8f7d\u5230MAR\u4e0a</p> </li> <li> <p>MDR\u8bfb\u53d6MAR\u7684\u6570\u636e</p> </li> <li> <p>\u6307\u4ee4\u4eceMDR\u4f20\u8f93\u5230\u6307\u4ee4\u5bc4\u5b58\u5668\uff08IR\uff09\u3002\u9700\u8981GateMDR\u548cLD.IR</p> </li> <li> <p>Decode\u9636\u6bb5\uff1a\u4e00\u4e2a\u65f6\u949f\u5468\u671f</p> </li> <li> <p>\u6709\u9650\u72b6\u6001\u673a\uff0c\u6839\u636eIR[15:12]\u4e2d\u7684\u7279\u5b9a\u64cd\u4f5c\u7801opcode\uff0c\u4f20\u8f93\u7ed9ALU</p> </li> <li>\u53ef\u80fd\u8fd8\u6709\u6839\u636eIR[5]\uff0c\u5224\u65ad\u662fSR+SR\uff0c\u8fd8\u662fSR+imm\uff08immediate\uff09</li> <li>\u56e0\u6b64\u8fd8\u9700\u8981\u8ba1\u7b97IR[4:0]\u7684\u7b26\u53f7\u6269\u5145\u81f316\u4f4d</li> </ol>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#435-addldbr","title":"4.3.5 \u5b8c\u6574\u53d9\u8ff0ADD\uff0cLD\uff0cBR\u7684\u5168\u6d41\u7a0b","text":"<ol> <li>Fetch\uff1a</li> </ol> <p>MAR is loaded with the contents of the PC\uff0cand the PC is incremented\uff08MAR \u52a0\u8f7d PC\uff08\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5185\u5b58\u5730\u5740\uff09 \u7684\u5185\u5bb9\uff0cPC\u5730\u5740+1\uff09\u4e2d\u95f4\u9700\u8981GatePC and LD.MAR.\uff0cGatePC connects the PC to the processor bus\uff0cGatePC\u5c06PC\u8fde\u63a5\u5230\u603b\u7ebf\uff0c\u6cbf\u7740\u603b\u7ebf\u5230\u8fbeMemory\u548cMAR</p> <p>LD.MAR\u662fMAR\u7684write enable signal\uff0c\u9700\u8981\u5728\u65f6\u949f\u5468\u671f\u7ed3\u675f\u4e4b\u524d\u5c06\u603b\u7ebf\u7684\u5185\u5bb9\uff08PC\uff09\u52a0\u8f7d\u5230MAR\u4e0a</p> <p>MDR\u8bfb\u53d6MAR\u7684\u6570\u636e</p> <p>\u6307\u4ee4\u4eceMDR\u4f20\u8f93\u5230\u6307\u4ee4\u5bc4\u5b58\u5668\uff08IR\uff09\u3002\u9700\u8981GateMDR\u548cLD.IR</p> <ol> <li>Decode\uff1a</li> </ol> <p>IR\u51fa\u53d1\uff0c\u5148\u4f20\u8f93\u5230finite state machine\uff0c\u83b7\u5f97bits[15:12],\u5c06opcode\u64cd\u4f5c\u7801\u8f6c\u5316\u540e\u4f20\u5230ALUK\u3002</p> <p>\u5206\u652f\u68c0\u67e5bit[5],\u5224\u65adadd\u7684\u7c7b\u578b\u3002</p> <p>\u5206\u652f sign-extending\uff08SEXT\uff09\uff0c\u5c06bits[4:0]\u8fdb\u884c\u7b26\u53f7\u6269\u5145\uff0c\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u52a0\u6570</p> <ol> <li>Evaluate address\uff1a</li> </ol> <p>add\u90fd\u662f\u4ece\u5bc4\u5b58\u5668\u53d6\u503c\uff0c\u4e0d\u9700\u8981\u5185\u5b58\uff0c\u8fd9\u4e00\u6b65\u4e0d\u53d1\u6325\u4f5c\u7528</p> <ol> <li>Fetch operands\uff1a</li> </ol> <p>\u4eceSR1\u548cSR2\u4e2d\u53d6\u51fa\u503c\uff0c\u5173\u4e8eSR2\u7684\u503c\u9700\u8981\u7ecf\u8fc7\u591a\u8def\u9009\u62e9\u5668\uff08SR2MUX\uff09\uff0c\u6709\u4e4b\u524d\u7684bit[5]\u51b3\u5b9a\u662f\u54ea\u4e2ainput</p> <ol> <li>Execute\uff1a</li> </ol> <p>SR2MUX\u548cSR1OUT\u51fa\u6765\u7684\u503c\u5230ALU\uff0cALUK\u51b3\u5b9a\u8ba1\u7b97\u7684\u7c7b\u578bADD\uff0c\u8fdb\u884c\u8ba1\u7b97</p> <ol> <li>Store result\uff1a</li> </ol> <p>ALU\u51fa\u6765\u7684\u503c\u7ecf\u8fc7ALUgate\u5230\u8fbeprocessing bus\uff08\u603b\u7ebf\uff09\u5f80\u4e0a\u8d70\uff0c\u5230REG FILE\uff0c\u6700\u540e\u4fdd\u5b58\u5728DR\u4e2d</p>"},{"location":"course/ICS/The%20Von%20Neumann%20Model/#44-our-first-programa-multiplication-algorithm","title":"4.4 Our first program\uff1aA Multiplication Algorithm","text":"<ul> <li>\u4e58\u6cd5\u5c55\u5f00\u5c31\u662f\u52a0\u6cd5</li> <li>Let us assume that memory location x3007, abbreviated M[x3007], contains the value 5, and M[x3008] contains the value 4. We start by copying the two values from memory to the two registers R1 and R2. We are going to accumulate   the results of the additions in R3, so we initialize R3 to 0. Then we add 5 to R3, and subtract 1 from R2 so we will know how many more times we will need to add 5 to R3. We keep doing this (adding 5 to R3 and subtracting 1 from R2) until R2 contains the value 0. That tells us that we have added 5 to R3 four times and we are done, so we HALT the computer. R3 contains the value 20, the result of our multiplication.</li> </ul> <ol> <li> <p>\u521d\u59cb\u5316</p> </li> <li> <p>To move the data from memory locations M[x3007] and M[x3008] to R1 and R2</p> </li> </ol> <p>\u4f7f\u7528LD</p> <ol> <li>R3 is initialized to 0 by performing a bit-wise AND of the contents of R3 with the sign-extended immediate value 0 and loading the result into R3.</li> </ol> <p>\u4f7f\u7528AND</p> <ol> <li> <p>executes the ADD instructions at M[x3003] and M[x3004]. </p> </li> <li> <p>The ADD instruction at M[x3004] adds \u22121 to the contents of R</p> </li> <li> <p>The BR instruction in M[x3005] loads the PC with the address x3003 if the result of the previous instruction (the one in M[x3004]) is not 0. </p> </li> </ol> <p>BR\u8df3\u8f6c</p> <ol> <li>HALT</li> </ol>"},{"location":"course/ICS/Welcome%20Aboard/","title":"Chapter 1 | Welcome Aboard","text":""},{"location":"course/ICS/Welcome%20Aboard/#11-two-recurring-themes","title":"1.1 Two recurring themes \u4e24\u4e2a\u53cd\u590d\u51fa\u73b0\u7684\u4e3b\u9898","text":"<ul> <li><code>the notion of abstaction</code>\uff08\u62bd\u8c61\u5316\u7684\u6982\u5ff5\uff09</li> <li><code>the importance of not separating in you mind the notions of hardware and software</code> \uff08\u4e0d\u8981\u5c06\u8f6f\u4ef6\u4e0e\u786c\u4ef6\u5206\u5272\u5f00\uff09</li> </ul>"},{"location":"course/ICS/Welcome%20Aboard/#111-the-notion-of-abstraction","title":"1.1.1 the notion of abstraction","text":"<ul> <li>It will be the central to all that you will learn and expect  to use in practicing your craft\uff08\u6280\u5de7\uff09</li> <li>Abstraction is a technique for establishing a simpler way for a person to interact with a system\uff08\u4eba\u4e0e\u7cfb\u7edf\u4ea4\u4e92\uff09, removing the details that are unnecessary\uff08\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u7ec6\u8282\uff09 for the person to interact effectively with that system.\u4e5f\u5c31\u662f\u7740\u773c\u4e8e\u9ad8\u5c42\u6b21\uff0c\u805a\u7126\u4e8e\u5173\u952e\u90e8\u5206</li> <li>\u62bd\u8c61\u80fd\u529b\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u79cd\u6a21\u578b\u63d0\u53d6\u80fd\u529b\uff0c\u5c06\u4f60\u6240\u5173\u6ce8\u7684\u5185\u5bb9\u4ece\u4e00\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\u63d0\u70bc\u51fa\u6765\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u7701\u7565\u7684\u90fd\u662f\u8fd9\u4e2a\u201c\u5185\u5bb9\u201d\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u89c6\u5176\u4e3a\u4e00\u4e2a\u9ed1\u7bb1\uff0c\u800c\u66f4\u52a0\u5173\u6ce8\u5982\u4f55\u4f7f\u7528\u8fd9\u6837\u4e00\u4e2a\u9ed1\u7bb1\u3001\u8fd9\u6837\u4e00\u4e2a\u9ed1\u7bb1\u5728\u5404\u79cd\u60c5\u51b5\u4e0b\u6709\u600e\u6837\u7684\u884c\u4e3a\u3002</li> <li>\u7136\u800c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\uff0c\u4e0d\u53bb\u7740\u773c\u4e8e\u7ec6\u5c0f\u7684\u90e8\u5206\u3002\u5bf9\u903b\u8f91\u95e8\u7684\u8bbe\u8ba1\uff0c\u5982\u679c\u903b\u8f91\u7535\u8def\u5de5\u4f5c\u51fa\u73b0\u95ee\u9898\uff0c\u67e5\u770b\u95e8\u7684\u5185\u90e8\u7ed3\u6784\u5e76\u67e5\u770b\u5176\u529f\u80fd\u662f\u5426\u5bfc\u81f4\u95ee\u9898\u901a\u5e38\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u5148\u5927\u540e\u5c0f\u7684\u89e3\u51b3\u601d\u8def\u3002</li> <li>\u4f46\u5982\u679c\u6211\u4eec\u5fc5\u987b\u5c06\u591a\u4e2a\u7ec4\u4ef6\u7ec4\u5408\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u5e94\u8be5\u5c0f\u5fc3\uff0c\u4e0d\u8981\u8ba9\u5b83\u4eec\u7684\u62bd\u8c61\u6210\u4e3a\u6211\u4eec\u7406\u89e3\u7684\u6700\u6df1\u5c42\u6b21\u3002\u5982\u679c\u6211\u4eec\u4e0d\u77e5\u9053\u5176\u62bd\u8c61\u7ea7\u522b\u4ee5\u4e0b\u7684\u7ec4\u4ef6\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u53d7\u5230\u5b83\u4eec\u5728\u6ca1\u6709\u6211\u4eec\u5e72\u9884\u7684\u60c5\u51b5\u4e0b\u4e00\u8d77\u5de5\u4f5c\u7684\u6446\u5e03\u3002\u5982\u679c\u5b83\u4eec\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\uff0c\u5e76\u4e14\u6211\u4eec\u65e0\u6cd5\u4f4e\u4e8e\u62bd\u8c61\u5c42\u6b21\uff0c\u6211\u4eec\u5c31\u4f1a\u9677\u5165\u56f0\u5883\u3002\u6211\u4eec\u5e94\u8be5\u6ce8\u610f\u4e0d\u8981\u9677\u5165\u8fd9\u79cd\u72b6\u6001\u3002</li> <li> <ul> <li></li> </ul> </li> <li> <ul> <li></li> </ul> </li> </ul>"},{"location":"course/ICS/Welcome%20Aboard/#112-hardware-and-software","title":"1.1.2 hardware and software","text":"<p>\u5c31\u8f6f\u4ef6\u800c\u8a00\uff0c\u5b83\u4eec\u901a\u5e38\u6307\u7684\u662f\u7a0b\u5e8f\uff0c\u65e0\u8bba\u662f Android\u3001ChromeOS\u3001Linux \u6216 Windows \u7b49\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8fd8\u662f Access\u3001MongoDB\u3001Oracle \u6216 DB-terrific \u7b49\u6570\u636e\u5e93\u7cfb\u7edf\uff0c\u8fd8\u662f Facebook\u3001Chrome\u3001Excel \u7b49\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u5b57\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u4eba\u5bf9\u8fd9\u4e24\u4ef6\u4e8b\u4e2d\u7684\u4e00\u4ef6\u4e8b\u4e86\u89e3\u5f88\u591a\uff0c\u800c\u5bf9\u53e6\u4e00\u4ef6\u4e8b\u77e5\u4e4b\u751a\u5c11\u3002\u901a\u5e38\uff0c\u8fdb\u4e00\u6b65\u7684\u6697\u793a\u662f\uff0c\u6210\u4e3a\u5176\u4e2d\u4e00\u4e2a\uff08\u786c\u4ef6\u6216\u8f6f\u4ef6\uff09\u7684\u4e13\u5bb6\uff0c\u800c\u5bf9\u53e6\u4e00\u4e2a\u4e00\u65e0\u6240\u77e5\u662f\u53ef\u4ee5\u7684\u3002\u5c31\u597d\u50cf\u786c\u4ef6\uff08\u8ba1\u7b97\u673a\u53ca\u5176\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\uff09\u548c\u8f6f\u4ef6\uff08\u6307\u5bfc\u8ba1\u7b97\u673a\u6267\u884c\u547d\u4ee4\u7684\u7a0b\u5e8f\uff09\u4e4b\u95f4\u6709\u4e00\u5835\u5927\u5899\uff0c\u4eba\u4eec\u5e94\u8be5\u6ee1\u8db3\u4e8e\u7559\u5728\u4e00\u8fb9\u90a3\u5835\u5899\u6216\u53e6\u4e00\u5835\u5899\u7684\u3002</p> <p>\u603b\u4e4b\u5c31\u662f\uff0c\u5e0c\u671b\u540c\u65f6\u638c\u63e1\u786c\u4ef6\u548c\u8f6f\u4ef6\u77e5\u8bc6</p>"},{"location":"course/ICS/Welcome%20Aboard/#12-computer-system","title":"1.2 Computer system","text":"<p>A computer system generally includes, in addition to the processor\uff08CPU\uff09, a keyboard for typing commands\uff08\u952e\u76d8\u8f93\u5165\u547d\u4ee4\u884c\uff09, a mouse or keypad or joystick for positioning on menu entries, a monitor\uff08\u663e\u793a\u5668\uff09 for displaying information that the computer system has produced, memory for temporarily storing information\uff08\u5185\u5b58\u77ed\u65f6\u95f4\u5b58\u50a8\uff09, disks and USB memory sticks of one sort or another for storing information for a very long time\uff08\u786c\u76d8\u957f\u65f6\u95f4\u5b58\u50a8\uff09, even after the computer has been turned off, connections to other devices such as a printer for obtaining paper copies of that information, and the collection of programs (the software) that the user wishes to execute.</p> <p>\u7535\u8111\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e0d\u4ec5\u4ec5\u662fCPU\uff0c\u8fd8\u5305\u62ec\u4e00\u7cfb\u5217\u9644\u52a0\u7ec4\u4ef6\uff08\u952e\u76d8\uff0c\u9f20\u6807\uff0c\u663e\u793a\u5668\uff0c\u5185\u5b58\uff0c\u786c\u76d8\u7b49\u7b49\uff09</p>"},{"location":"course/ICS/Welcome%20Aboard/#13-two-very-important-ideas","title":"1.3 Two very important ideas","text":"<ul> <li>idea_1\uff1a</li> <li>All computers (the biggest and the smallest, the fastest and the slowest, the most expensive and the cheapest) are capable of computing exactly the same things if they are given enough time and enough memory.</li> </ul> <p>\u5728\u7ed9\u5b9a\u5145\u8db3\u7684\u65f6\u95f4\u548c\u5185\u5b58\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u8ba1\u7b97\u673a\u80fd\u6267\u884c\u7684\u4efb\u52a1\u662f\u76f8\u540c\u7684\uff0c\u5feb\u901f\u8ba1\u7b97\u673a\u548c\u6162\u901f\u8ba1\u7b97\u673a\u7684\u533a\u522b\u5728\u4e8e\u5b8c\u6210\u65f6\u95f4\u4e0d\u540c\u3002</p> <p><code>Some computers can do things faster,but none can do more than any other</code></p> <ul> <li>idea_2:</li> <li>It is necessary to transform our problem from the language of human to the voltages that influence the flow of electrons.</li> </ul> <p>\u8ba1\u7b97\u673a\u65e0\u6cd5\u7406\u89e3\u4eba\u7c7b\u7684\u8bed\u8a00\uff08\u81ea\u7136\u8bed\u8a00\uff0cnature language\uff09\uff0c\u9700\u8981\u8f6c\u5316\u4e3a\u5f71\u54cd\u7535\u5b50\u6d41\u52a8\u7684\u7535\u538b\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528\u4e00\u79cd\u8ba1\u7b97\u673a\u80fd\u591f\u201c\u6267\u884c\u201d\uff08\u800c\u975e\u201c\u7406\u89e3\u201d\uff0c\u8ba1\u7b97\u673a\u4e0d\u9700\u8981\u7406\u89e3\uff0c\u5b83\u53ea\u9700\u8981\u6267\u884c\uff0c\u6240\u4ee5\u4e4b\u540e\u8bf4\u7684\u4e1c\u897f\u53eb\u201c\u6307\u4ee4\u201d\uff09\u7684\u201c\u8bed\u8a00\u201d\u53bb\u6307\u5bfc\u8ba1\u7b97\u673a\u89e3\u51b3\u95ee\u9898\u3002</p>"},{"location":"course/ICS/Welcome%20Aboard/#14-computer-as-universal-computational-devices","title":"1.4 computer as universal computational devices\uff08\u901a\u7528\u8ba1\u7b97\u8bbe\u5907\uff09","text":"<p>computer\u7684\u72ec\u7279\u4e4b\u5904\uff1a</p> <p>You can tell a computer how to <code>add numbers</code>. You can tell it how to <code>multiply.</code> You can tell it how to alphabetize a list or perform any computation you like. When you think of a new kind of computation,you do not have to buy or design a new computer. You just <code>give the old computer a new set of instructions (a program) to carry out the new computation</code>. </p>"},{"location":"course/ICS/Welcome%20Aboard/#15-how-do-we-get-the-electrons-to-do-the-work","title":"1.5 How do we get the electrons to do the work?\uff08\u6211\u4eec\u8be5\u5982\u4f55\u4f7f\u7535\u5b50\u5b8c\u6210\u6211\u4eec\u7684\u4efb\u52a1\uff09","text":"<p>\u4f9d\u6b21\u4eceproblem\uff0calgorithms\uff0clanguage\uff0cISA\uff0cmicroarchitecture\u89d2\u5ea6\u8fdb\u884c\u89e3\u7b54</p>"},{"location":"course/ICS/Welcome%20Aboard/#151-problemfilled-with-ambiguity","title":"1.5.1 problem\u2014\u2014filled with ambiguity\uff08\u6a21\u7cca\u6027\uff09","text":"<p>Such ambiguity would be unacceptable in instructions provided to a computer. The computer, electronic idiot that it is, can only do as it is told. <code>To tell it to do something where there are multiple interpretations would cause the computer to not know which interpretation to follow.</code></p> <p>\u7531\u4e8e\u95ee\u9898\u5177\u6709\u6a21\u7cca\u6027\uff0c\u5b58\u5728\u7740\u591a\u79cd\u89e3\u91ca\uff0c\u6545\u8ba1\u7b97\u673a\u4e0d\u77e5\u9053\u9075\u5faa\u4f55\u79cd\u89e3\u91ca</p>"},{"location":"course/ICS/Welcome%20Aboard/#152-algorithm","title":"1.5.2 Algorithm","text":"<p>An algorithm is a step-by-step procedure that is guaranteed to <code>terminate</code>, such that each step is <code>precisely stated</code> and can <code>be carried out by the computer</code>. </p> <ul> <li><code>definiteness</code>:describe the notion that each step is precisely stated.</li> <li>\u6b63\u786e\u6027\uff08\u6ca1\u6709\u6b67\u4e49\uff09\uff0c\u6bcf\u4e00\u6b65\u90fd\u88ab\u6b63\u786e\u5730\u5b9a\u4e49</li> <li><code>effective computability</code>:describe the notion that each step can be carried out by a computer. </li> <li>\u6709\u6548\u53ef\u8ba1\u7b97\u6027\u201d\u6765\u63cf\u8ff0\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u7531\u8ba1\u7b97\u673a\u6267\u884c\u7684\u6982\u5ff5\u3002take the largest prime number,\u4e0d\u5b58\u5728\u53ef\u6267\u884c\u6027</li> <li><code>finiteness</code>: describe the notion that the procedure terminates.</li> <li>\u6709\u9650\u6027\uff0c\u5373\u7a0b\u5e8f\u8ba1\u7b97\u6700\u7ec8\u4f1a\u505c\u6b62</li> </ul>"},{"location":"course/ICS/Welcome%20Aboard/#153-program","title":"1.5.3 program","text":"<p>transform the algorithm into a computer program in one of the programming languages that are available. Programming languages are \u201cmechanical languages.\u201d</p> <p>\u7f16\u7a0b\u8bed\u8a00\uff08\u673a\u5668\u8bed\u8a00\uff09\u4e0d\u5b58\u5728\u6a21\u7cca\u6027\uff0c\u662f\u5bf9\u8ba1\u7b97\u673a\u7684\u6307\u4ee4</p> <p><code>two kinds of programming languages</code></p> <ul> <li> <p>high-level languages\uff08C\uff0cC++\uff09</p> </li> <li> <p>High-level languages are at a distance (a high level) from the underlying computer. At their best, they are independent of the computer on which the programs will execute. We say the language is \u201cmachine independent.\u201d</p> </li> <li> <p>\u9ad8\u5c42\u6b21\u8bed\u8a00\u8fdc\u79bb\u8ba1\u7b97\u673a\u7684\u5e95\u5c42\u6846\u67b6\uff0c</p> </li> <li> <p>low-level languages\uff08LC-3\uff0cMIPS\uff0cRISC-V\uff09</p> </li> <li> <p>Low-level languages are tied to the computer on which the programs will execute. There is generally one such low-level language for each computer. That language is called the assembly language for that computer.</p> </li> <li> <p>\u6c47\u7f16\u8bed\u8a00</p> </li> <li> <p>complier \u7f16\u8bd1\u5668\u5c06\u9ad8\u7ea7\u8bed\u8a00\u76f4\u63a5\u8f6c\u5316\u6210ISA</p> </li> <li> <p>Assembler \u6c47\u7f16\u5668\u5c06\u4f4e\u7ea7\u8bed\u8a00\uff08\u6c47\u7f16\u8bed\u8a00\uff09\u8f6c\u5316\u4e3aISA</p> </li> </ul>"},{"location":"course/ICS/Welcome%20Aboard/#154-isainstruction-set-architecture","title":"1.5.4 ISA\u2014\u2014instruction set architecture\uff08\u6307\u4ee4\u96c6\u67b6\u6784\uff09","text":"<p>The instruction set architecture (ISA) is the complete specification of the interface between programs that have been written and the <code>underlying computer hardware</code>that must carry out the work of those programs.</p> <p>\u6307\u4ee4\u96c6\u67b6\u6784\uff08ISA\uff09\u662f\u5df2\u7f16\u5199\u7684\u7a0b\u5e8f\u4e0e\u5fc5\u987b\u6267\u884c\u8fd9\u4e9b\u7a0b\u5e8f\u5de5\u4f5c\u7684\u5e95\u5c42\u8ba1\u7b97\u673a\u786c\u4ef6\u4e4b\u95f4\u63a5\u53e3\uff0c\u8f6f\u4ef6\u4e0e\u786c\u4ef6\u7684\u63a5\u53e3</p> <ul> <li>The term <code>opcode(\u6307\u4ee4\u64cd\u4f5c\u7801)</code> is used to describe the operation.</li> <li> <p>The term <code>operand(\u64cd\u4f5c\u6570)</code> is used to describe individual data values. </p> </li> <li> <p>The ISA specifies the acceptable representations for operands. They are called <code>data types</code>. A data type is a representation of an operand such that the computer can perform operations on that representation. The ISA specifies the mechanisms that the computer can use to figure out where the operands are located. These mechanisms are called <code>addressing modes(\u5bfb\u5740\u6a21\u5f0f)</code>.</p> </li> </ul> <p><code>the number of opcodes,data types,and addressing modes specified by an ISA vary among different ISAs.</code></p> <p>\u4e0d\u540c\u7684ISA\u6307\u5b9a\u7684\u64cd\u4f5c\u7801\u6570\u91cf\u3001\u6570\u636e\u7c7b\u578b\u3001\u5bfb\u5740\u6a21\u5f0f\u5404\u4e0d\u76f8\u540c\u3002</p> <p>Some ISAs have as few as a half dozen opcodes,whereas others have as many as several hundred. \u4e00\u4e9b ISA \u7684\u64cd\u4f5c\u7801\u5c11\u81f3\u516d\u4e2a\uff0c\u800c\u5176\u4ed6 ISA \u7684\u64cd\u4f5c\u7801\u5219\u591a\u8fbe\u6570\u767e\u4e2a\u3002</p> <p>Some ISAs have only one data type, while others have more than a dozen. </p> <p>Some ISAs have one or two addressing modes, whereas others have more than 20. </p> <p>The x86, the ISA used in the PC, has more than 200 opcodes, more than a dozen data types, and more than two dozen addressing modes.</p> <p>\u4e00\u4e9b ISA \u7684\u64cd\u4f5c\u7801\u5c11\u81f3\u516d\u4e2a\uff0c\u800c\u5176\u4ed6 ISA \u7684\u64cd\u4f5c\u7801\u5219\u591a\u8fbe\u6570\u767e\u4e2a\u3002\u6709\u4e9b ISA \u53ea\u6709\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u6709\u5341\u51e0\u79cd\u3002\u6709\u4e9bISA\u6709\u4e00\u79cd\u6216\u4e24\u79cd\u5bfb\u5740\u6a21\u5f0f\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u670920\u591a\u79cd\u3002PC\u4e2d\u4f7f\u7528\u7684x86 ISA\u6709200\u591a\u79cd\u64cd\u4f5c\u7801\u3001\u5341\u591a\u79cd\u6570\u636e\u7c7b\u578b\u548c\u4e24\u6253\u4ee5\u4e0a\u5bfb\u5740\u6a21\u5f0f\u3002</p> <ul> <li>The translation from a high-level language to the ISA of the computer on which the program will execute is usually done by compiler\uff08\u7f16\u8bd1\u5668\uff09, and the translation from the unique assembly language of  a computer to its ISA is done by an assembler.</li> </ul> <p>high-level language \u5230 ISA\u7684\u8f6c\u5316\uff0c\u9700\u8981\u7f16\u8bd1\u5668compiler</p>"},{"location":"course/ICS/Welcome%20Aboard/#155-microarchitecturelogic-circuitdevice","title":"1.5.5 microarchitecture,logic circuit,device","text":"<ul> <li> <ul> <li></li> </ul> </li> <li> <p><code>Infinite microarchitectures could exist for a single ISA\uff0c\u65e0\u7a77\u591a\u4e2a\u5fae\u67b6\u6784\u9002\u7528\u4e8e\u4e00\u4e2aISA eg:\u6c7d\u8f66\u7684\u6784\u9020\u76f8\u540c\uff0c\u4f46\u662f\u7c7b\u578b\u4e0d\u540c</code></p> </li> <li><code>one ISA is normally implemented by a single microarchitecture  eg:\u4e00\u4e2a\u6c7d\u8f66\u53ea\u6709\u4e00\u4e2a\u7c7b\u578b</code></li> </ul>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BC%A6%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BC%A6%E7%90%86/","title":"\u4eba\u5de5\u667a\u80fd\u4f26\u7406","text":"<p>\u4f26\u7406\uff1a\u4eba\u548c\u4eba\u4e4b\u95f4\u7684\u8a00\u884c\u9053\u5fb7\u4e0e\u51c6\u5219\uff0c\u4ee5\u6307\u5bfc\u4e2a\u4f53\u4e4b\u95f4\u7684\u4e92\u52a8\u884c\u4e3a</p> <p>\u79d1\u6280\u4f26\u7406\uff1a\u79d1\u6280\u4f26\u7406\u662f\u79d1\u6280\u6d3b\u52a8\u9700\u8981\u9075\u5faa\u7684\u4ef7\u503c\u7406\u5ff5\u548c\u884c\u4e3a\u89c4\u8303</p> <ul> <li>CPH\u4e09\u5143\u7a7a\u95f4\u7ed3\u6784\uff1a\u4fe1\u606f\u7a7a\u95f4-\u7269\u7406\u4e16\u754c-\u4eba\u7c7b\u793e\u4f1a</li> <li>\u4eba\u7c7b\u4e0e\u81ea\u5df1\u53d1\u660e\u7684\u4e00\u79cd\u4ea7\u54c1\u5728\u793e\u4f1a\u4e2d\u6240\u6784\u6210\u7684\u5173\u8054</li> </ul>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BC%A6%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%AF%E8%A7%A3%E9%87%8A%E6%80%A7/","title":"\u4eba\u5de5\u667a\u80fd\u53ef\u89e3\u91ca\u6027","text":"<p>\u7814\u7a76\u5bf9\u8c61\uff1a</p> <ul> <li>\u795e\u7ecf\u7f51\u7edc\u4e2d\u5c42\u7279\u5f81\u5728\u8bed\u4e49\u5c42\u9762\u7684\u53ef\u89e3\u91ca\u6027\u3002\u5373\u7814\u7a76\u795e\u7ecf\u7f51\u7edc\u4e2d\u5c42\u7279\u5f81\u662f\u5426\u8868\u8fbe\u4e86\u660e\u786e\u7684\u8bed\u4e49\uff0c\u662f\u5426\u53ef\u4ee5\u5c06\u795e\u7ecf\u7f51\u7edc\u6df7\u4e71\u7684\u4e2d\u5c42\u7279\u5f81\u62c6\u5206\u89e3\u6784\u4e3a\u8bed\u4e49\u6e05\u6670\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u662f\u5426\u53ef\u4ee5\u7aef\u5bf9\u7aef\u5730\u81ea\u52a8\u5b66\u4e60\u8bed\u4e49\u6e05\u6670\u7684\u4e2d\u5c42\u7279\u5f81</li> <li>\u795e\u7ecf\u7f51\u7edc\u51b3\u7b56\u903b\u8f91\u7684\u53ef\u89e3\u91ca\u6027\u3002\u5373\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u51b3\u7b56\u7ed3\u679c\u7ed9\u4e88\u8bed\u4e49\u903b\u8f91\u4e0a\u7684\u89e3\u91ca\uff0c\u5305\u62ec\u63d0\u53d6\u56e0\u679c\u51b3\u7b56\u903b\u8f91\u3001\u7ebf\u6027\u52a0\u548c\u903b\u8f91\u7b49</li> <li>\u57fa\u4e8e\u53ef\u89e3\u91ca\u6027\u7684\u4e2d\u5c42\u5bf9\u7aef\u7684\u6a21\u578b\u5b66\u4e60\u3002\u4e0d\u540c\u4e8e\u4f20\u7edf\u7aef\u5bf9\u7aef\u7684\u6a21\u578b\u5b66\u4e60\u9700\u8981\u5927\u91cf\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u57fa\u4e8e\u53ef\u89e3\u91ca\u6027\u7684\u4e2d\u5c42\u5bf9\u7aef\u7684\u6a21\u578b\u5b66\u4e60\u5229\u7528\u7f51\u7edc\u4e2d\u5c42\u7279\u5f81\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u76f4\u63a5\u5728\u8bed\u4e49\u5c42\u9762\u4e0a\u8fc1\u79fb\u9884\u8bad\u7ec3\u7279\u5f81\u6765\u642d\u5efa\u65b0\u6a21\u578b\uff0c\u4fee\u6539\u9884\u8bad\u7ec3\u7279\u5f81\u6765\u4f18\u5316\u6a21\u578b\uff0c\u5728\u8bed\u4e49\u5c42\u9762\u8bca\u65ad\u795e\u7ecf\u7f51\u7edc\u7684\u6f5c\u5728\u9519\u8bef\u8868\u8fbe\u3002\u57fa\u4e8e\u53ef\u89e3\u91ca\u6027\u7684\u4e2d\u5c42\u5bf9\u7aef\u5b66\u4e60\u5f80\u5f80\u5728\u5f31\u76d1\u7763\u6761\u4ef6\u4e0b\u5177\u6709\u826f\u597d\u7684\u6cdb\u5316\u80fd\u529b</li> </ul>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BC%A6%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A8%A1%E5%9E%8B%E5%AE%89%E5%85%A8/","title":"\u4eba\u5de5\u667a\u80fd\u6a21\u578b\u5b89\u5168","text":"<p>\u5bf9\u6297\u653b\u51fb\uff1a\u5728\u8f93\u5165\u8bc6\u522b\u6837\u672c\u4e2d\u4eba\u4e3a\u6545\u610f\u6dfb\u52a0\u82e5\u5e72\u4eba\u7c7b\u65e0\u6cd5\u5bdf\u89c9\u7684\u7ec6\u5fae\u5e72\u6270\u4fe1\u606f\uff0c\u5bfc\u81f4\u6a21\u578b\u4ee5\u9ad8\u7f6e\u4fe1\u5ea6\u7ed9\u51fa\u9519\u8bef\u7684\u8bc6\u522b\u7ed3\u679c\uff0c\u8fd9\u4e00\u653b\u51fb\u4eba\u5de5\u667a\u80fd\u6a21\u578b\u7684\u884c\u4e3a\u88ab\u79f0\u4e3a\u5bf9\u6297\u653b\u51fb</p> <p>\u5bf9\u6297\u6837\u672c\u751f\u6210\uff1a$$ \\text{Minimize}\\Vert\\delta\\Vert_2\\quad s.t.f(x+\\delta)=y',x+\\delta\\in[0,1]^m $$ L-BFGS\uff1a$$ \\text{Minimize} c|\\delta|+L_{CE}(x+\\delta,y')\\quad s.t.x+\\delta\\in[0,1]^m $$ \u5176\u4e2d\\(L_{CE}\\)\u4e3a\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570</p> <p>FSGM\uff1a$$ x'=x+\\delta=x+\\eta\\cdot\\text{sign}(\\nabla_xf(x)) $$ PGD\uff1a$$ x'_{k+1}=\\text{Proj}\\set{x_k'+\\alpha\\cdot\\text{sign}(\\nabla_xf(x_k'))} $$ \u9ed1\u76d2\u653b\u51fb\uff1a\u653b\u51fb\u8005\u53ef\u4ee5\u81ea\u5df1\u8bad\u7ec3\u4e00\u4e2a\u66ff\u4ee3\u7f51\u7edc\uff0c\u5229\u7528\u53ef\u8bbf\u95ee\u68af\u5ea6\u7684\u66ff\u4ee3\u6a21\u578b\u751f\u6210\u5bf9\u6297\u6837\u672c\uff0c\u5e76\u501f\u52a9\u5bf9\u6297\u6837\u672c\u5728\u4e0d\u540c\u6a21\u578b\u7684\u8fc1\u79fb\u6027\u5b9e\u73b0\u5bf9\u539f\u59cb\u6a21\u578b\u7684\u653b\u51fb</p> <p>\u6570\u636e\u6295\u6bd2\uff1a</p> <ul> <li>\u6807\u7b7e\u53cd\u8f6c\u6295\u6bd2</li> <li>\u5e72\u51c0\u6837\u672c\u6295\u6bd2\u653b\u51fb</li> <li>\u540e\u95e8\u653b\u51fb\uff1a\u589e\u52a0\u540e\u95e8\u89e6\u53d1\u5668</li> </ul> <p>\u9632\u5fa1\uff1a</p> <ul> <li>\u6d4b\u8bd5\u9636\u6bb5\u9632\u5fa1</li> <li>\u8bad\u7ec3\u9636\u6bb5\u9632\u5fa1</li> </ul> <p>\u9690\u79c1\u4fdd\u62a4\uff1a</p> <ul> <li>\u5dee\u5206\u9690\u79c1</li> <li>\u540c\u6001\u52a0\u5bc6</li> <li>\u5b89\u5168\u591a\u65b9\u8ba1\u7b97</li> </ul>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%9A%E5%BC%88/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E5%8D%9A%E5%BC%88%E8%AE%BA/","title":"\u4eba\u5de5\u667a\u80fd\u4e0e\u535a\u5f08\u8bba","text":""},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%9A%E5%BC%88/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E5%8D%9A%E5%BC%88%E8%AE%BA/#_1","title":"\u535a\u5f08\u7b56\u7565\u6c42\u89e3","text":"<p>\u6982\u5ff5\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\\(N\\)\u4e2a\u73a9\u5bb6\u53c2\u52a0\u7684\u535a\u5f08\uff0c\u73a9\u5bb6\u5728\u535a\u5f08\u4e2d\u91c7\u53d6\u7684\u7b56\u7565\u4e3a\\(\\sigma_i\\).\u5bf9\u4e8e\u6240\u6709\u73a9\u5bb6\uff0c\u6240\u6709\u7b56\u7565\u6784\u6210\u4e00\u4e2a\u7b56\u7565\u96c6\u5408\\(\\sigma=\\set{\\sigma_1,\\sigma_2,\\cdots,\\sigma_N}\\)\uff0c\u8bb0\u9664\u73a9\u5bb6i\u5916\u5176\u5b83\u73a9\u5bb6\u7684\u7b56\u7565\u7ec4\u5408\u8bb0\u4f5c\\(\\sigma_{-i}=\\set{\\sigma_1,\\cdots,\\sigma_{i-1},\\sigma_{i+1},\\cdots,\\sigma_N}\\)</p> <p>\u6700\u4f18\u53cd\u5e94\u7b56\u7565\uff1a\u7ed9\u5b9a\u7b56\u7565\u7ec4\u5408\\(\\sigma\\)\uff0c\u73a9\u5bb6\\(i\\)\u5728\u7ec8\u7ed3\u5c40\u52bf\u4e0b\u7684\u6536\u76ca\u4e3a\\(u_i(\\sigma)\\)\uff0c\u7ed9\u5b9a\u5176\u5b83\u73a9\u5bb6\u7684\u7b56\u7565\u7ec4\u5408\\(\\sigma_{-i}\\)\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u73a9\u5bb6\\(i\\)\u7684\u6700\u4f18\u53cd\u5e94\u7b56\u7565\\(\\sigma_i^*\\)\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6</p> \\[u_i(\\sigma_i^*,\\sigma_{-i})\\geqslant\\max_{\\sigma_i'\\in\\Sigma_i}u_i(\\sigma_i',\\sigma_{-i})\\] <p>\u5176\u4e2d\\(\\Sigma_i\\)\u662f\u73a9\u5bb6i\u53ef\u9009\u62e9\u7684\u6240\u6709\u7b56\u7565\u3002</p> <p>\u5728\u7b56\u7565\u7ec4\u5408\\(\\sigma^*\\)\u4e2d\uff0c\u5982\u679c\u6bcf\u4e2a\u73a9\u5bb6\u7684\u7b56\u7565\u76f8\u5bf9\u4e8e\u5176\u4ed6\u73a9\u5bb6\u7684\u7b56\u7565\u800c\u8a00\u90fd\u662f\u6700\u4f73\u53cd\u5e94\u7b56\u7565\uff0c\u90a3\u4e48\\(\\sigma^*\\)\u662f\u7eb3\u4ec0\u5747\u8861\u7b56\u7565\uff0c\u5373</p> \\[ u_i(\\sigma^*)\\geqslant\\max_{\\sigma_i'\\in\\Sigma_i}u_i(\\sigma_i^*,\\cdots,\\sigma_N^*) \\] <p>\u8fd1\u4f3c\u6c42\u89e3\u7eb3\u4ec0\u5747\u8861\uff1a\u9057\u61be\u6700\u5c0f\u5316\u7b97\u6cd5</p> <ul> <li>\u6982\u5ff5\uff1a\u9057\u61be\u6700\u5c0f\u5316\u7b97\u6cd5\u662f\u4e00\u79cd\u6839\u636e\u4ee5\u5f80\u535a\u5f08\u8fc7\u7a0b\u4e2d\u6240\u5f97\u9057\u61be\u7a0b\u5ea6\u6765\u9009\u62e9\u672a\u6765\u884c\u4e3a\u7684\u65b9\u6cd5</li> <li>\u7d2f\u52a0\u9057\u61be\u503c\uff1a\u73a9\u5bb6i\u5728\u8fc7\u53bb\\(T\\)\u8f6e\u4e2d\u91c7\u53d6\u7b56\u7565\\(\\sigma_i\\)\u7684\u7d2f\u52a0\u9057\u61be\u503c\u5b9a\u4e49\u5982\u4e0b $$ Regret_i^T(\\sigma_i)=\\sum_{t=1}^Tu_i(\\sigma_i,\\sigma_{-i}^t)-u_i(\\sigma') $$</li> <li>\u6709\u6548\u9057\u61be\u503c\uff1a $$ Regret_i^{T,+}(\\sigma_i)=\\max(Regret_i^T(\\sigma_i),0) $$</li> <li>\u9057\u61be\u5339\u914d\uff1a</li> </ul> \\[ P(\\sigma_i^{T+1})=\\left\\{\\begin{array}{ll} \\dfrac{Regret_i^{T,+}(\\sigma_i)}{\\sum\\limits_{\\sigma'\\in\\Sigma_i}Regret_i^{T,+}}&amp;,if \\sum_{\\sigma_i'\\in\\Sigma_i}Regret_i^{T,+}(\\sigma_i')&gt;0\\\\ \\dfrac{1}{|\\Sigma_i|}&amp;,Otherwise \\end{array} \\right. \\] <p>\u9057\u61be\u6700\u5c0f\u5316\u7b97\u6cd5\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u9700\u8981\u53cd\u590d\u6a21\u62df\u535a\u5f08\u591a\u6b21\uff0c\u624d\u80fd\u62df\u5408\u8fd1\u4f3c\u7684\u6700\u4f18\u53cd\u5e94\u7b56\u7565\u3002</p> <p>\u95ee\u9898\uff1a\u5bf9\u4e8e\u56f4\u68cb\u548c\u6251\u514b\u7b49\u9700\u8981\u591a\u8f6e\u51b3\u7b56(\u5373\u5e8f\u8d2f\u51b3\u7b56)\u624d\u80fd\u5224\u65ad\u80dc\u8d1f\u7684\u535a\u5f08\u95ee\u9898\u65e0\u6cd5\u4e00\u6b21\u51b3\u7b56\u5206\u80dc\u8d1f</p> <p>\u865a\u62df\u9057\u61be\u6700\u5c0f\u5316\u7b97\u6cd5\uff1a</p> <p>\u601d\u60f3\uff1a\u5bf9\u4e8e\u4efb\u4f55\u5e8f\u8d2f\u51b3\u7b56\u7684\u535a\u5f08\u5bf9\u6297\uff0c\u53ef\u5c06\u535a\u5f08\u8fc7\u7a0b\u8868\u793a\u6210\u4e00\u68f5\u535a\u5f08\u6811\uff0c\u535a\u5f08\u6811\u79cd\u7684\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u4fe1\u606f\u96c6\\(I\\)\uff0c\u4fe1\u606f\u96c6\u4e2d\u5305\u542b\u4e2d\u95f4\u8282\u70b9\u72b6\u6001\u53ca\u5230\u8fbe\u8be5\u8282\u70b9\u7684\u6240\u6709\u5386\u53f2\u884c\u52a8</p> <p>\u5728\u4fe1\u606f\u96c6\\(I\\)\u4e0b\uff0c\u73a9\u5bb6\u53ef\u4ee5\u91c7\u53d6\u7684\u884c\u52a8\u96c6\u5408\u8bb0\u4f5c\\(A(I)\\)\uff0c\u73a9\u5bb6i\u6240\u91c7\u53d6\u7684\u884c\u52a8\\(a_i\\in A(I)\\)\u53ef\u8ba4\u4e3a\u662f\u5176\u91c7\u53d6\u7684\u7b56\u7565\\(\\sigma_i\\)\u7684\u4e00\u90e8\u5206\uff0c\u5728\u4fe1\u606f\u96c6\\(I\\)\u4e0b\u91c7\u53d6\u7684\u884c\u52a8\\(a\\)\u6240\u4ee3\u8868\u7684\u7b56\u7565\u96c6\u8bb0\u4e3a\\(\\sigma_{I\\to a}\\).\u8ba1\u7b97\u865a\u62df\u9057\u61be\u503c\u7684\u5bf9\u8c61\u5c31\u662f\u535a\u5f08\u6811\u4e2d\u6bcf\u4e2a\u4e2d\u95f4\u7ed3\u70b9\u5728\u4fe1\u606f\u96c6\u4e0b\u6240\u91c7\u53d6\u7684\u884c\u52a8\uff0c\u5e76\u6839\u636e\u9057\u61be\u503c\u5339\u914d\u5f97\u5230\u8be5\u7ed3\u70b9\u5728\u4fe1\u606f\u96c6\u4e0b\u5e94\u8be5\u91c7\u53d6\u7684\u7b56\u7565\\(\\sigma_{I\\to a}\\)</p> <p>\u5728\u4e00\u6b21\u535a\u5f08\u4e2d\uff0c\u6240\u6709\u73a9\u5bb6\u4ea4\u66ff\u91c7\u53d6\u7684\u884c\u52a8\u5e8f\u5217\u8bb0\u4e3a\\(h\\)\uff0c\u5bf9\u4e8e\u6240\u6709\u73a9\u5bb6\u7684\u7b56\u7565\u7ec4\u5408\\(\\sigma\\)\uff0c\u884c\u52a8\u5e8f\u5217\\(h\\)\u51fa\u73b0\u7684\u6982\u7387\u8bb0\u4e3a\\(\\pi^\\sigma(h)\\)\uff0c\u5728\u7b56\u7565\u7ec4\u5408\\(\\sigma\\)\u4e0b\uff0c\u6240\u6709\u80fd\u591f\u5230\u8fbe\u8be5\u4fe1\u606f\u96c6\u7684\u884c\u52a8\u5e8f\u5217\u7684\u6982\u7387\u7d2f\u52a0\u5c31\u662f\u8be5\u4fe1\u606f\u96c6\u7684\u51fa\u73b0\u6982\u7387\uff0c\u5373\\(\\pi^\\sigma(I)=\\sum_{h\\in I}\\pi^\\sigma(h)\\)</p> <p>\u535a\u5f08\u7684\u7ec8\u7ed3\u5c40\u52bf\u96c6\u5408\u8bb0\u4e3a\\(Z\\)\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7ec8\u7ed3\u5c40\u52bf\\(z\\in Z\\)\uff0c\u73a9\u5bb6\\(i\\)\u5728\u7ec8\u7ed3\u5c40\u52bf\u4e0b\u7684\u6536\u76ca\u8bb0\u4f5c\\(u_i(z)\\)\uff0c\u7ed9\u5b9a\u884c\u52a8\u5e8f\u5217\\(h\\)\uff0c\u4f9d\u7167\u7b56\u7565\u7ec4\u5408\\(\\sigma\\)\u6700\u7ec8\u5230\u8fbe\u7ec8\u7ed3\u5c40\u52bf\\(z\\)\u7684\u6982\u7387\u8bb0\u4f5c\\(\\pi^\\sigma(h,z)\\)</p> <p>\u5728\u7b56\u7565\u7ec4\u5408\\(\\sigma\\)\u4e0b\uff0c\u5bf9\u73a9\u5bb6i\u800c\u8a00\uff0c\u4ece\u6839\u7ed3\u70b9\u5230\u5f53\u524d\u7ed3\u70b9\u7684\u884c\u52a8\u5e8f\u5217\u8def\u5f84h\u7684\u865a\u62df\u4ef7\u503c\u8ba1\u7b97\u5982\u4e0b\uff1a $$ v_i(\\sigma,h)=\\sum_{z\\in Z}\\pi_{-i}^\\sigma(h)\\times\\pi^\\sigma(h,z)\\times u_i(z) $$ \uff08\u4e0d\u8003\u8651\u73a9\u5bb6i\u7684\u7b56\u7565\u5230\u8fbe\u5f53\u524d\u8282\u70b9\u7684\u6982\u7387*\u5f53\u524d\u8282\u70b9\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u7684\u6982\u7387*\u53f6\u5b50\u8282\u70b9\u7684\u6536\u76ca\uff09</p> <p>\u5728\u5b9a\u4e49\u884c\u52a8\u5e8f\u5217\u8def\u5f84h\u7684\u865a\u62df\u4ef7\u503c\u4e4b\u540e\uff0c\u5c31\u53ef\u5982\u4e0b\u8ba1\u7b97\u73a9\u5bb6i\u5728\u57fa\u4e8e\u8def\u5f84h\u5230\u8fbe\u5f53\u524d\u7ed3\u70b9\u91c7\u53d6\u884c\u52a8a\u7684\u9057\u61be\u503c\uff1a $$ r_i(h,a)=v_i(\\sigma_{I\\to a},h)-v_i(\\sigma,h) $$ \u5bf9\u80fd\u591f\u5230\u8fbe\u540c\u4e00\u4e2a\u4fe1\u606f\u96c6I(\u5373\u535a\u5f08\u6811\u4e2d\u540c\u4e00\u4e2a\u4e2d\u95f4\u7ed3\u70b9)\u7684\u6240\u6709\u884c\u52a8\u5e8f\u5217\u7684\u9057\u61be\u503c\u8fdb\u884c\u7d2f\u52a0\uff0c\u5373\u53ef\u5f97\u5230\u4fe1\u606f\u96c6I\u7684\u9057\u61be\u503c\uff1a $$ r_i(I,a)=\\sum_{h\\in I}r_i(h,a) $$ \u7c7b\u4f3c\u4e8e\u9057\u61be\u6700\u5c0f\u5316\u7b97\u6cd5\uff0c\u865a\u62df\u9057\u61be\u6700\u5c0f\u5316\u7684\u9057\u61be\u503c\u662f\\(T\\)\u8f6e\u91cd\u590d\u535a\u5f08\u540e\u7684\u7d2f\u52a0\u503c\uff0c\u5373 $$ Regret_i^{T,+}(I,a)=\\sum_{t\\in I}r_i^t(I,a) $$ \u6709\u6548\u9057\u61be\u503c\uff1a $$ Regret_i^{T,+}(\\sigma_i)=\\max(Regret_i^T(\\sigma_i),0) $$ \u6839\u636e\u6709\u6548\u865a\u62df\u9057\u61be\u503c\u8fdb\u884c\u9057\u61be\u5339\u914d\uff0c\u4ee5\u8ba1\u7b97\u7ecf\u8fc7T\u8f6e\u535a\u5f08\u540e\uff0c\u73a9\u5bb6i\u5728\u4fe1\u606f\u96c6I\u60c5\u51b5\u4e0b\u4e8e\u540e\u7eedT+1\u8f6e\u9009\u62e9\u884c\u52a8a\u7684\u6982\u7387\uff0c\u5373</p> \\[ \\sigma_i^{T+1}(I,a)=\\left\\{\\begin{array}{ll} \\dfrac{Regret_i^{T,+}(I,a)}{\\sum\\limits_{a\\in A(I)}Regret_i^{T,+}(I,a)}&amp;,if \\sum_{a\\in A(I)}Regret_i^{T,+}(I,a)&gt;0\\\\ \\dfrac{1}{|A(I)|}&amp;,Otherwise \\end{array} \\right. \\] <p>\u7b97\u6cd5\u6b65\u9aa4\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u9057\u61be\u503c\u548c\u7d2f\u52a0\u7b56\u7565\u8868\u4e3a0</li> <li>\u91c7\u7528\u968f\u673a\u9009\u62e9\u7684\u65b9\u6cd5\u51b3\u5b9a\u7b56\u7565</li> <li>\u5229\u7528\u5f53\u524d\u7b56\u7565\u4e0e\u5bf9\u624b\u8fdb\u884c\u535a\u5f08</li> <li>\u8ba1\u7b97\u6bcf\u4e2a\u73a9\u5bb6\u91c7\u53d6\u6bcf\u6b21\u884c\u52a8\u540e\u7684\u9057\u61be\u503c</li> <li>\u6839\u636e\u535a\u5f08\u7ed3\u679c\u8ba1\u7b97\u6bcf\u4e2a\u884c\u52a8\u7684\u7d2f\u52a0\u9057\u61be\u503c\u4ee5\u66f4\u65b0\u7b56\u7565</li> <li>\u91cd\u590d3~5\u82e5\u5e72\u6b21\uff0c\u4e0d\u65ad\u4f18\u5316\u7b56\u7565</li> <li>\u636e\u91cd\u590d\u535a\u5f08\u6700\u7ec8\u7684\u7b56\u7565\uff0c\u5b8c\u6210\u6700\u7ec8\u7684\u52a8\u4f5c\u9009\u62e9</li> </ol> <p>\u5b89\u5168\u5b50\u535a\u5f08\uff1a</p> <ul> <li>\u601d\u60f3\uff1a\u5b8c\u5168\u4fe1\u606f\u535a\u5f08\u4e0b\u7684\u5b50\u535a\u5f08\u4e0e\u535a\u5f08\u5176\u4ed6\u90e8\u5206\u65e0\u5173\uff0c\u53ef\u4ee5\u5355\u72ec\u8003\u8651</li> <li>\u6982\u5ff5\uff1a\u5728\u5b50\u535a\u5f08\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u4e00\u5b9a\u4e0d\u5dee\u4e8e\u5168\u5c40\u7684\u8fd1\u4f3c\u89e3\u6cd5</li> </ul>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%9A%E5%BC%88/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E5%8D%9A%E5%BC%88%E8%AE%BA/#_2","title":"\u535a\u5f08\u89c4\u5219\u8bbe\u8ba1","text":""},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%9A%E5%BC%88/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E5%8D%9A%E5%BC%88%E8%AE%BA/#_3","title":"\u53cc\u8fb9\u5339\u914d\u7b97\u6cd5","text":"<p>\u7a33\u5b9a\u5a5a\u59fb\u95ee\u9898\uff1a\u5047\u8bbe\u6709n\u4e2a\u5355\u8eab\u7537\u6027\u6784\u6210\u7684\u96c6\u5408M=\\(\\set{m_1,\\cdots,m_n}\\),\u4ee5\u53can\u4e2a\u5355\u8eab\u5973\u6027\u6784\u6210\u7684\u96c6\u5408\\(F=\\set{f_1,\\cdots,f_n}\\)\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u540d\u5355\u8eab\u7537\u6027m,\u4ed6\u90fd\u6709\u81ea\u5df1\u7231\u6155\u7684\u5355\u8eab\u5973\u6027\u7684\u987a\u5e8f\\(s_{mi}:=f_{mi,1}\\succ\\cdots\\succ f_{mi,n}\\),\u8fd9\u91cc\\(f_{mi,j}\\)\u8868\u793a\u7b2ci\u540d\u7537\u6027\u6240\u559c\u6b22\u5355\u8eab\u5973\u6027\u4e2d\u6392\u5728\u7b2cj\u4f4d\u7684\u5355\u8eab\u5973\u6027\u3002\u7b97\u6cd5\u7684\u6700\u7ec8\u76ee\u6807\u662f\u4e3a\u8fd9n\u4e2a\u7537\u6027\u548c\u5973\u6027\u5339\u914d\u5f97\u5230n\u5bf9\u4f34\u4fa3\uff0c\u6bcf\u4e00\u5bf9\u4f34\u4fa3\u53ef\u4ee5\u8868\u793a\u4e3a\\((m_i,f_j)\\)</p> <p>\u7b97\u6cd5\u6b65\u9aa4\uff1a</p> <ol> <li>\u5355\u8eab\u7537\u6027\u5411\u6700\u559c\u6b22\u7684\u5973\u6027\u8868\u767d</li> <li>\u6240\u6709\u6536\u5230\u8868\u767d\u7684\u5973\u6027\u4ece\u5411\u5176\u8868\u767d\u7684\u7537\u6027\u4e2d\u9009\u62e9\u6700\u559c\u6b22\u7684\u7537\u6027\uff0c\u6682\u65f6\u5339\u914d</li> <li>\u672a\u5339\u914d\u7684\u7537\u6027\u7ee7\u7eed\u5411\u6ca1\u6709\u62d2\u7edd\u8fc7\u4ed6\u7684\u5973\u6027\u8868\u767d\u3002\u6536\u5230\u8868\u767d\u7684\u5973\u6027\u5982\u679c\u6ca1\u6709\u5b8c\u6210\u5339\u914d\uff0c\u5219\u4ece\u8fd9\u4e00\u6279\u8868\u767d\u8005\u4e2d\u9009\u62e9\u6700\u559c\u6b22\u7684\u7537\u6027\u3002\u5373\u4f7f\u6536\u5230\u8868\u767d\u7684\u5973\u6027\u5df2\u7ecf\u5b8c\u6210\u5339\u914d\uff0c\u4f46\u662f\u5982\u679c\u5979\u8ba4\u4e3a\u6709\u66f4\u559c\u6b22\u7684\u7537\u6027\uff0c\u5219\u53ef\u4ee5\u62d2\u7edd\u4e4b\u524d\u7684\u5339\u914d\u8005\uff0c\u91cd\u65b0\u5339\u914d</li> <li>\u5982\u6b64\u5faa\u73af\u8fed\u4ee3\uff0c\u76f4\u5230\u6240\u6709\u4eba\u90fd\u6210\u529f\u5339\u914d\u4e3a\u6b62</li> </ol>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%9A%E5%BC%88/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E5%8D%9A%E5%BC%88%E8%AE%BA/#_4","title":"\u5355\u8fb9\u5339\u914d\u7b97\u6cd5","text":"<p>\u6700\u5927\u4ea4\u6613\u5708\u7b97\u6cd5\uff1a</p> <ol> <li>\u9996\u5148\u8bb0\u5f55\u6bcf\u4e2a\u6807\u7684\u7269\u7684\u521d\u59cb\u5360\u6709\u8005\uff0c\u6216\u8005\u5bf9\u7269\u54c1\u8fdb\u884c\u968f\u673a\u5206\u914d</li> <li>\u6bcf\u4e2a\u4ea4\u6613\u8005\u8fde\u63a5\u4e00\u6761\u6307\u5411\u4ed6\u6700\u559c\u6b22\u7684\u6807\u7684\u7269\u7684\u8fb9\uff0c\u5e76\u4ece\u6bcf\u4e00\u4e2a\u6807\u7684\u7269\u8fde\u63a5\u5230\u5176\u5360\u6709\u8005\u6216\u8005\u5177\u6709\u9ad8\u4f18\u5148\u6743\u7684\u4ea4\u6613\u8005</li> <li>\u6b64\u65f6\u5f62\u6210\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u4e14\u5fc5\u5b58\u5728\u73af\uff0c\u8fd9\u79cd\u73af\u79f0\u4e3a\u201c\u4ea4\u6613\u5708\u201d\u3002\u5bf9\u4e8e\u4ea4\u6613\u5708\u4e2d\u7684\u4ea4\u6613\u8005\uff0c\u5c06\u6bcf\u4eba\u6307\u5411\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u6807\u7684\u7269\u8d4b\u4e88\u4ea4\u6613\u8005\uff0c\u540c\u65f6\u4ea4\u6613\u8005\u653e\u5f03\u539f\u5148\u5360\u6709\u7684\u6807\u7684\u7269\uff0c\u5360\u6709\u8005\u548c\u5339\u914d\u6210\u529f\u7684\u6807\u7684\u7269\u79bb\u5f00\u5339\u914d\u5e02\u573a</li> <li>\u4ece\u5269\u4f59\u7684\u4ea4\u6613\u8005\u548c\u6807\u7684\u7269\u4e4b\u95f4\u91cd\u590d\u8fdb\u884c\u4ea4\u6613\u5708\u5339\u914d\uff0c\u76f4\u5230\u65e0\u6cd5\u5f62\u6210\u4ea4\u6613\u5708\uff0c\u7b97\u6cd5\u505c\u6b62</li> </ol>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%9A%E5%BC%88/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u73a9\u5bb6\uff1a\u53c2\u4e0e\u535a\u5f08\u7684\u51b3\u7b56\u4e3b\u4f53\uff0c\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u5b8c\u5168\u7406\u6027</p> <p>\u4fe1\u606f\uff1a\u4e0e\u535a\u5f08\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u4f8b\u5982\u535a\u5f08\u7684\u8fdb\u5c55\u53ca\u5bf9\u624b\u91c7\u53d6\u7684\u7b56\u7565\u7b49</p> <p>\u7b56\u7565\uff1a\u53c2\u4e0e\u8005\u53ef\u4ee5\u91c7\u53d6\u7684\u884c\u52a8\u65b9\u6848</p> <p>\u7b56\u7565\u96c6\uff1a\u53c2\u4e0e\u8005\u6240\u80fd\u91c7\u7eb3\u7b56\u7565\u7684\u5168\u4f53\u7ec4\u5408</p> <p>\u7eaf\u7b56\u7565\uff1a\u53c2\u4e0e\u8005\u786e\u5b9a\u5730\u9009\u62e9\u884c\u4e3a</p> <p>\u6df7\u5408\u7b56\u7565\uff1a\u53c2\u4e0e\u8005\u6309\u7167\u4e00\u5b9a\u7684\u6982\u7387\u968f\u673a\u9009\u62e9\u82e5\u5e72\u4e0d\u540c\u7684\u884c\u52a8</p> <p>\u5c40\u52bf\uff1a\u53c2\u4e0e\u8005\u91c7\u53d6\u5404\u81ea\u7684\u884c\u52a8\u4e4b\u540e\u5f62\u6210\u7684\u72b6\u6001</p> <p>\u6536\u76ca\uff1a\u4e0d\u540c\u7684\u5c40\u52bf\u4e0b\uff0c\u5404\u4e2a\u53c2\u4e0e\u8005\u5f97\u5230\u7684\u5229\u76ca\u6216\u56de\u62a5</p> <p>\u671f\u671b\u6536\u76ca\uff1a\u6df7\u5408\u7b56\u7565\u4e0b\u5bf9\u5e94\u7684\u73a9\u5bb6\u6536\u76ca</p>"},{"location":"course/aid/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%9A%E5%BC%88/%E7%BA%B3%E4%BB%80%E5%9D%87%E8%A1%A1/","title":"\u7eb3\u4ec0\u5747\u8861","text":"<p>\u6982\u5ff5\uff1a\u535a\u5f08\u7684\u7a33\u5b9a\u5c40\u52bf\u5373\u4e3a\u7eb3\u4ec0\u5747\u8861</p> <ul> <li>\u53c2\u4e0e\u8005\u505a\u51fa\u4e86\u8fd9\u6837\u4e00\u79cd\u7b56\u7565\u7ec4\u5408\uff0c\u5728\u8be5\u7b56\u7565\u7ec4\u5408\u4e2d\uff0c\u4efb\u4f55\u53c2\u4e0e\u8005\u5355\u72ec\u6539\u53d8\u7b56\u7565\u90fd\u4e0d\u4f1a\u5f97\u5230\u597d\u5904</li> </ul> <p>Nash\u5b9a\u7406\uff1a\u82e5\u53c2\u4e0e\u8005\u6709\u9650\uff0c\u6bcf\u4f4d\u53c2\u4e0e\u8005\u7684\u7b56\u7565\u96c6\u6709\u9650\uff0c\u6536\u76ca\u51fd\u6570\u4e3a\u5b9e\u503c\u51fd\u6570\uff0c\u5219\u535a\u5f08\u5fc5\u5b58\u5728\u6df7\u5408\u7b56\u7565\u610f\u4e49\u4e0b\u7684\u7eb3\u4ec0\u5747\u8861</p> <p>\u6df7\u5408\u7b56\u7565\u7eb3\u4ec0\u5747\u8861</p> <p>\u7b56\u6885\u6d1b\u5b9a\u7406\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6709\u9650\u6b65\u7684\u53cc\u4eba\u5b8c\u5168\u4fe1\u606f\u96f6\u548c\u52a8\u6001\u535a\u5f08\uff0c\u4e00\u5b9a\u5b58\u5728\u5148\u624b\u5fc5\u80dc\u7b56\u7565\u3001\u540e\u624b\u5fc5\u80dc\u7b56\u7565\u6216\u53cc\u65b9\u4fdd\u5e73\u7b56\u7565</p>"},{"location":"course/aid/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u667a\u80fd\u4f53\uff1a\u667a\u80fd\u4f53\u662f\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u7684\u4e3b\u4f53\uff0c\u5b83\u80fd\u591f\u6839\u636e\u7ecf\u9a8c\u505a\u51fa\u4e3b\u89c2\u5224\u65ad\u5e76\u6267\u884c\u52a8\u4f5c\uff0c\u662f\u6574\u4e2a\u667a\u80fd\u7cfb\u7edf\u7684\u6838\u5fc3</p> <p>\u73af\u5883\uff1a\u667a\u80fd\u4f53\u4ee5\u5916\u7684\u4e00\u5207\u7edf\u79f0\u4e3a\u73af\u5883\uff0c\u73af\u5883\u5728\u4e0e\u667a\u80fd\u4f53\u7684\u4ea4\u4e92\u4e2d\uff0c\u80fd\u88ab\u667a\u80fd\u4f53\u91c7\u53d6\u7684\u52a8\u4f5c\u5f71\u54cd\uff0c\u540c\u65f6\u73af\u5883\u4e5f\u80fd\u5411\u667a\u80fd\u4f53\u53cd\u9988\u72b6\u6001\u548c\u5956\u52b1\u3002\u867d\u8bf4\u667a\u80fd\u4f53\u4ee5\u5916\u7684\u4e00\u5207\u90fd\u53ef\u89c6\u4e3a\u73af\u5883\uff0c\u4f46\u5728\u8bbe\u8ba1\u7b97\u6cd5\u65f6\u5e38\u5e38\u4f1a\u6392\u9664\u4e0d\u76f8\u5173\u7684\u56e0\u7d20\uff0c\u5efa\u7acb\u4e00\u4e2a\u7406\u60f3\u7684\u73af\u5883\u6a21\u578b\u6765\u5bf9\u7b97\u6cd5\u529f\u80fd\u8fdb\u884c\u6a21\u62df</p> <p>\u72b6\u6001\uff1a\u72b6\u6001\u53ef\u4ee5\u7406\u89e3\u4e3a\u667a\u80fd\u4f53\u5bf9\u73af\u5883\u7684\u4e00\u79cd\u7406\u89e3\u548c\u7f16\u7801\uff0c\u901a\u5e38\u5305\u542b\u5bf9\u667a\u80fd\u4f53\u6240\u91c7\u53d6\u51b3\u7b56\u4ea7\u751f\u5f71\u54cd\u7684\u4fe1\u606f</p> <p>\u52a8\u4f5c\uff1a\u52a8\u4f5c\u662f\u667a\u80fd\u4f53\u5bf9\u73af\u5883\u4ea7\u751f\u5f71\u54cd\u7684\u65b9\u5f0f\uff0c\u8fd9\u91cc\u8bf4\u7684\u52a8\u4f5c\u5e38\u5e38\u6307\u6982\u5ff5\u4e0a\u7684\u52a8\u4f5c\uff0c\u5728\u8bbe\u8ba1\u673a\u5668\u4eba\u65f6\u8fd8\u987b\u8003\u8651\u52a8\u4f5c\u7684\u6267\u884c\u673a\u6784</p> <p>\u7b56\u7565\uff1a\u7b56\u7565\u662f\u667a\u80fd\u4f53\u5728\u6240\u5904\u72b6\u6001\u4e0b\u6267\u884c\u67d0\u4e2a\u52a8\u4f5c\u7684\u4f9d\u636e\uff0c\u5373\u7ed9\u5b9a\u4e00\u4e2a\u72b6\u6001\uff0c\u667a\u80fd\u4f53\u53ef\u6839\u636e\u4e00\u4e2a\u7b56\u7565\u6765\u9009\u62e9\u5e94\u8be5\u91c7\u53d6\u7684\u52a8\u4f5c</p> <p>\u5956\u52b1\uff1a\u5956\u52b1\u662f\u667a\u80fd\u4f53\u5e8f\u8d2f\u5f0f\u91c7\u53d6\u4e00\u7cfb\u5217\u52a8\u4f5c\u540e\u4ece\u73af\u5883\u83b7\u5f97\u7684\u6536\u76ca\u3002\u6ce8\u610f\uff0c\u5956\u52b1\u6982\u5ff5\u662f\u73b0\u5b9e\u4e2d\u5956\u52b1\u548c\u60e9\u7f5a\u7684\u7edf\u5408\uff0c\u4e00\u822c\u7528\u6b63\u503c\u4ee3\u8868\u5b9e\u9645\u5956\u52b1\uff0c\u7528\u8d1f\u503c\u4ee3\u8868\u5b9e\u9645\u60e9\u7f5a</p>"},{"location":"course/aid/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/","title":"\u5f3a\u5316\u5b66\u4e60\u65b9\u6cd5","text":"<p>\u601d\u8def\uff1a\u4ece\u4e00\u4e2a\u4efb\u610f\u7684\u7b56\u7565\u5f00\u59cb\uff0c\u9996\u5148 \u8ba1\u7b97\u8be5\u7b56\u7565\u4e0b\u7684\u4ef7\u503c\u51fd\u6570(\u6216\u52a8\u4f5c\u4e00\u4ef7\u503c\u51fd\u6570)\uff0c\u7136\u540e\u6839\u636e\u4ef7\u503c\u51fd\u6570\u8c03\u6574\u3001\u6539\u8fdb\u7b56\u7565\u4f7f\u5176\u66f4\u4f18\uff0c\u4e0d\u65ad\u8fed\u4ee3\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u7b56\u7565\u6536\u655b</p> <ul> <li>\u7b56\u7565\u8bc4\u4f30\uff1a\u901a\u8fc7\u7b56\u7565\u8ba1\u7b97\u4ef7\u503c\u51fd\u6570</li> <li>\u7b56\u7565\u4f18\u5316\uff1a\u901a\u8fc7\u4ef7\u503c\u51fd\u6570\u4f18\u5316\u7b56\u7565</li> <li>\u7b56\u7565\u8fed\u4ee3\uff1a\u7b56\u7565\u8bc4\u4f30\u548c\u7b56\u7565\u4f18\u5316\u4ea4\u66ff\u8fdb\u884c\u7684\u5f3a\u5316\u5b66\u4e60\u6c42\u89e3\u65b9\u6cd5 </li> </ul> <p>\u7b56\u7565\u4f18\u5316\u5b9a\u7406\uff1a\\(\\forall s\\in S,q_\\pi(s,\\pi'(s))\\geqslant q_\\pi(s,\\pi(s))\\Rightarrow\\forall s\\in S,V_\\pi'(s)\\geqslant V_\\pi(s)\\)</p> <p>\u4f8b\uff1a</p> <p> $$ q_\\pi(s_1,\\uparrow)=\\sum_{s'\\in S}P(s'|s_1,\\uparrow)[R(s_1,\\uparrow,s')+\\gamma V_\\pi(s')]=1\\times(0+0.99+0.3)\\approx0.3 $$</p> \\[ q_\\pi(s_1,\\rightarrow)=\\sum_{s'\\in S}P(s'|s_1,\\rightarrow)[R(s_1,\\rightarrow,s')+\\gamma V_\\pi(s')]=1\\times(0+0.99+0.4)\\approx0.4 \\] <p>\u6545\u5c06\\(\\pi=\\uparrow\\)\u4f18\u5316\u4e3a\\(\\pi^*=\\rightarrow\\).</p> <p>\u7b56\u7565\u8bc4\u4f30\u65b9\u6cd5\uff1a\u6839\u636e\u7b56\u7565\\(\\pi\\)\u6765\u8ba1\u7b97\u76f8\u5e94\u7684\u4ef7\u503c\u51fd\u6570\\(V_\\pi\\)\u6216\u52a8\u4f5c-\u4ef7\u503c\u51fd\u6570\\(q_\\pi\\)</p> <ul> <li>\u65b9\u6cd5<ul> <li>DP</li> <li>MC</li> <li>\u65f6\u5e8f\u5dee\u5206</li> </ul> </li> <li>\u672c\u8d28\uff1a\u6c42\u89e3\u8d1d\u5c14\u66fc\u65b9\u7a0b\u7ec4<ul> <li>\u9ad8\u65af\u6d88\u5143</li> <li>Gauss-Seidel\u8fed\u4ee3</li> </ul> </li> </ul> <p>DP\uff1a</p> <ul> <li>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ V_\\pi(s)\\leftarrow\\sum_{a\\in A}\\pi(s,a)\\sum_{s'\\in S}P(s'|s,a)[R(s,a,s')+\\gamma V_\\pi(s')] $$</li> <li>\u7b97\u6cd5\uff1a </li> </ul> <p>MC\uff1a\u5927\u6570\u5b9a\u7406\u6307\u51fa\uff0c\u5bf9\u4e8e\u72ec\u7acb\u540c\u5206\u5e03\u7684\u6837\u672c\u6570\u636e\uff0c\u5f53\u6837\u672c\u8db3\u591f\u5927\u65f6\uff0c\u6837\u672c\u5e73\u5747\u503c\u5411\u671f\u671b\u503c\u6536\u655b</p> <ul> <li>\u7ed9\u5b9a\u72b6\u6001\\(s\\)\uff0c\u4ece\u8be5\u72b6\u6001\u51fa\u53d1\u4e0d\u65ad\u91c7\u6837\u540e\u7eed\u72b6\u6001\uff0c\u5f97\u5230\u4e0d\u540c\u7684\u72b6\u6001\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u91c7\u6837\u5e8f\u5217\u6765\u5206\u522b\u8ba1\u7b97\u72b6\u6001\\(s\\)\u7684\u56de\u62a5\u503c\uff0c\u5c06\u8fd9\u4e9b\u56de\u62a5\u503c\u7684\u5747\u503c\u4f5c\u4e3a\u5bf9\u72b6\u6001\\(s\\)\u7684\u4ef7\u503c\u51fd\u6570\u7684\u4f30\u8ba1</li> <li>\u7b97\u6cd5\uff1a </li> </ul> <p>\u65f6\u5e8f\u5dee\u5206\uff1a\u8499\u7279\u5361\u6d1b\u65b9\u6cd5\u548c\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u7684\u6709\u673a\u7ed3\u5408</p> <ul> <li>\u66f4\u65b0\u516c\u5f0f\uff1a $$ V_\\pi(s)\\leftarrow V_\\pi(s)+a[R+\\gamma V_\\pi(s')-V_\\pi(s)] $$</li> <li>\u7b97\u6cd5\uff1a </li> </ul> <p>Q-Learning\uff1a\u76f4\u63a5\u8bb0\u5f55\u548c\u66f4\u65b0\u52a8\u4f5c-\u4ef7\u503c\u51fd\u6570\\(q_n\\)\u800c\u4e0d\u662f\u4ef7\u503c\u51fd\u6570\\(V_\\pi\\)</p> <ul> <li>\u66f4\u65b0\u516c\u5f0f\uff1a $$ q_\\pi(s,a)\\leftarrow q_\\pi(s,a)+\\alpha[R+\\gamma\\max a'q_\\pi(s',a')-q_\\pi(s,a)] $$</li> <li>\u7b97\u6cd5\uff1a </li> </ul> <p>\\(\\epsilon\\)-greedy\uff1a\u4e3a\u667a\u80fd\u4f53\u6539\u53d8\u56fa\u6709\u7b56\u7565\u6dfb\u52a0\u4e00\u4e2a\u63a2\u7d22\u7684\u52a8\u529b</p> <ul> <li>\u7b56\u7565\uff1a</li> </ul> \\[ \\epsilon-\\text{greedy}(s)=\\left\\{\\begin{array}{ll}\\mathop{\\arg\\!\\max}_aq(s,a),&amp;P=1-\\epsilon,\\\\\\text{random}\\ a\\in A,&amp;P=\\epsilon\\end{array}\\right. \\] <ul> <li>\u7b97\u6cd5\uff1a </li> </ul> <p>\u53c2\u6570\u5316\\(Q\\)-learning\uff1a\u7528\u4e00\u4e2a\u56de\u5f52\u6a21\u578b\u62df\u5408\\(q_\\pi\\)\u51fd\u6570</p> <p></p> <p>\u5982\u679c\u4f7f\u7528\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u6765\u62df\u5408\u52a8\u4f5c-\u4ef7\u503c\u51fd\u6570\u5219\u79f0\u4e3adeep-Q learning</p> <p>\u95ee\u9898\uff1a</p> <ul> <li>\u91c7\u6837\u4e0d\u8db3</li> <li>\u96be\u4ee5\u6536\u655b</li> </ul> <p>DQN\uff1a</p> <ul> <li>\u635f\u5931\u51fd\u6570\uff1a $$ L(\\theta)=\\dfrac{1}{2}[R+\\gamma\\max_aq_\\pi(s',a';\\theta^--q_\\pi(s,a';\\theta))]^2 $$</li> <li>\u7f51\u7edc\u7ed3\u6784\uff1a  \u7b56\u7565\u68af\u5ea6\u5b9a\u7406\uff1a\u7b56\u7565\u51fd\u6570\\(\\pi_\\theta(s,a)\\)\u5728\u72b6\u6001s\u4e0b\u9009\u62e9\u52a8\u4f5ca\u7684\u6982\u7387\uff0c\u8bc4\u4f30\\(J(\\theta):=V_{\\pi_\\theta}(s_0)\\)</li> <li>\u68af\u5ea6\uff1a $$ \\nabla_\\theta J(\\theta)=\\nabla_\\theta\\sum_s\\mu_{\\pi_\\theta}(s)\\sum_aq_{\\pi_\\theta}(s,a)\\pi_\\theta(s,a)\\propto\\sum_s\\mu_{\\pi_\\theta}(s)\\sum_aq_{\\pi_\\theta}(s,a)\\nabla_\\theta\\pi_\\theta(s,a) $$</li> </ul> <p>\u5176\u4e2d\\(\\mu_{\\pi_\\theta}(s)\\)\u79f0\u4e3a\\(\\pi_\\theta\\)\u7684\u7b56\u7565\u5206\u5e03\uff0c\u6301\u7eed\u95ee\u9898\u4e2d\\(\\mu_{\\pi_\\theta}(s)\\)\u4e3a\u7b97\u6cd5\u5728\u7b56\u7565\\(\\pi_\\theta\\)\u5b89\u6392\u4e0b\u4ece\\(s_0\\)\u51fa\u53d1\u7ecf\u8fc7\u65e0\u9650\u591a\u6b65\u540e\u4f4d\u4e8e\u72b6\u6001\\(s\\)\u7684\u6982\u7387\uff1b\u5206\u6bb5\u95ee\u9898\u4e2d\\(\\mu_{\\pi_\\theta}(s)\\)\u4e3a\u5f52\u4e00\u5316\u540e\u7b97\u6cd5\u4ece\\(s_0\\)\u51fa\u53d1\u8bbf\u95ee\\(s\\)\u6b21\u6570\u7684\u671f\u671b\u3002</p> <p>\u57fa\u4e8eMC\u7684\u7b56\u7565\u68af\u5ea6\u6cd5\uff1a</p> <ul> <li>\u516c\u5f0f\uff1a $$ \\nabla_\\theta J(\\theta)\\propto \\mathbb E_{s,a\\sim\\pi}[q_{\\pi_\\theta}(s,a)\\nabla_\\theta\\ln\\pi_\\theta(s,a)]=\\mathbb E_{s,a,J(s,a)\\sim\\pi}[G_t\\nabla_\\theta\\ln\\pi_\\theta(s,a)] $$</li> <li> <p>REINFORCE\u7b97\u6cd5 </p> </li> <li> <p>Actor-Critic\u7b97\u6cd5\uff1a\u4ece\u65f6\u5e8f\u5dee\u5206\u89d2\u5ea6\u8fdb\u884c\u8bbe\u8ba1\uff0c\u65f6\u5e8f\u5dee\u5206\u4e0e\u8499\u7279\u5361\u6d1b\u91c7\u6837\u7684\u6838\u5fc3\u5dee\u522b\u5728\u4e8e\u4f7f\u7528\u4e0b\u4e00\u65f6\u523b\u72b6\u6001\u7684\u4ef7\u503c\u51fd\u6570\u6765\u4f30\u8ba1\u5f53\u524d\u72b6\u6001\u7684\u4ef7\u503c\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6574\u4e2a\u7247\u6bb5\u7684\u53cd\u9988\u503c</p> <ul> <li>\u4f7f\u7528\\(R+\\gamma V_{\\pi_\\theta}(s')\\)\u4ee3\u66ff\\(G\\) </li> </ul> </li> </ul> <p>\u5e94\u7528\uff1aAlphaGo</p> <p></p>"},{"location":"course/aid/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%AE%9A%E4%B9%89/","title":"\u5f3a\u5316\u5b66\u4e60\u95ee\u9898\u5b9a\u4e49","text":"<p>\u7b56\u7565\u51fd\u6570\\(\\pi(s,a)\\)\uff1a\u667a\u80fd\u4f53\u5728\u72b6\u6001s\u4e0b\u91c7\u53d6\u52a8\u4f5ca\u7684\u6982\u7387</p> <p>\u786e\u5b9a\u7684\u7b56\u7565\u51fd\u6570\u6307\u5728\u7ed9\u5b9a\u72b6\u6001s\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u52a8\u4f5ca\u4f7f\u5f97\u6982\u7387\\(\\pi(s,a)\\)\u53d6\u503c\u4e3a1\uff0c\u8bb0\\(a=\\pi(s)\\)</p> <p>\u56de\u62a5\u503c\\(G_t\\)</p> <p>\u4ef7\u503c\u51fd\u6570\\(V_\\pi(s)=\\mathbb E_\\pi[G_t|S_t=s]\\)\uff1a\u667a\u80fd\u4f53\u5728\u65f6\u523bt\u5904\u4e8e\u72b6\u6001s\u65f6\uff0c\u6309\u7167\u7b56\u7565\\(\\pi\\)\u91c7\u53d6\u884c\u52a8\u65f6\u6240\u83b7\u5f97\u56de\u62a5\u7684\u671f\u671b</p> <p>\u52a8\u4f5c-\u4ef7\u503c\u51fd\u6570\\(q_\\pi(s,a)=\\mathbb E_\\pi[G_t|S_t=s,A_t=a]\\)\uff1a\u8868\u793a\u667a\u80fd\u4f53\u5728\u65f6\u523bt\u5904\u4e8e\u72b6\u6001s\u65f6\uff0c\u9009\u62e9\u52a8\u4f5ca\u540e\uff0c\u5728t\u65f6\u523b\u540e\u6839\u636e\u7b56\u7565\\(\\pi\\)\u91c7\u53d6\u884c\u52a8\u6240\u83b7\u5f97\u56de\u62a5\u7684\u671f\u671b</p> <p>\u5f3a\u5316\u5b66\u4e60\u95ee\u9898\u53ef\u8f6c\u5316\u4e3a\u4e00\u4e2a\u7b56\u7565\u5b66\u4e60\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b\\(MDP=(S,A,P,R,\\gamma)\\)\uff0c\u5b66\u4e60\u4e00\u4e2a\u6700\u4f18\u7b56\u7565\\(\\pi^*\\ s.t.\\ \\forall s\\in S,V_{\\pi^*}(s) \\max\\)</p> <p>\u8d1d\u5c14\u66fc\u65b9\u7a0b\uff1a</p> \\[ \\begin{array}{ll} V_{\\pi}(s)&amp;=\\mathbb E_\\pi[R_{t+1}+\\gamma R_{t+2}+\\gamma^2 R_{t+3}+\\cdots|S_t=s]\\\\ &amp;=\\mathbb E_{a\\sim\\pi(s,\\cdot)}[\\mathbb E_\\pi[R_{t+1}+\\gamma R_{t+2}+\\gamma^2 R_{t+3}+\\cdots|S_t=s,A_t=a]]\\\\ &amp;=\\sum\\limits_{a\\in A}\\pi(s,a)q_\\pi(s,a) \\end{array} \\] \\[ \\begin{array}{ll} q_\\pi(s,a)&amp;=\\mathbb E_\\pi[R_{t+1}+\\gamma R_{t+2}+\\gamma^2R_{t+3}+\\cdots|S_t=s,A_t=a]\\\\ &amp;=\\mathbb E_{s'\\sim P(\\cdot|s,a)}[R(s,a,s')+\\gamma\\mathbb E_\\pi[R_{t+2}+\\gamma R_{t+3}+\\cdots|S_{t+1}=s']]\\\\ &amp;=\\sum_{s'\\in S}P(s'|s,a)[R(s,a,s')+\\gamma V_\\pi(s')] \\end{array} \\] <p>\u4e92\u76f8\u5e26\u5165\uff0c\u5f97\u8d1d\u5c14\u66fc\u65b9\u7a0b\uff1a</p> \\[ V_\\pi(s)=\\mathbb E_{a\\sim\\pi(s,\\cdot)}\\mathbb E_{s'\\sim P(\\cdot|s,a)}[R(s,a,s')+\\gamma V_\\pi(s')] \\] \\[ q_\\pi(s,a)=\\mathbb E_{s'\\sim P(\\cdot|s,a)}[R(s,a,s')+\\gamma\\mathbb E_{a'\\sim\\pi(s',\\cdot)}|q_\\pi(s',a')] \\]"},{"location":"course/aid/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B/","title":"\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b","text":"<p>\u968f\u673a\u8fc7\u7a0b\uff1a\u4e00\u5217\u968f\u65f6\u95f4\u53d8\u5316\u7684\u968f\u673a\u53d8\u91cf\uff0c\u5f53\u65f6\u95f4\u662f\u79bb\u6563\u91cf\u65f6\uff0c\u4e00\u4e2a\u968f\u673a\u8fc7\u7a0b\u53ef\u4ee5\u8868\u793a\u4e3a\\(\\set{X_t}_{t=0,1,\\cdots}\\)\uff0c\u6bcf\u4e2a\\(X_t\\)\u90fd\u662f\u4e00\u4e2a\u968f\u673a\u53d8\u91cf</p> <p>\u9a6c\u5c14\u53ef\u592b\u6027\uff1a\u4e0b\u4e00\u65f6\u523b\u7684\u72b6\u6001\\(X_{t+1}\\)\u53ea\u7531\u5f53\u524d\u72b6\u6001\\(X_t\\)\u51b3\u5b9a $$ P(X_{t+1}=x_{t+1}|X_0=x_0,X_1=x_1,\\cdots,X_t=x_t)=P(X_{t+1}=x_{t+1}|X_t=x_t) $$</p> <p>\u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff1a\\(P(S_{t+1}|S_t)\\)</p> <p>\u5956\u52b1\u51fd\u6570\uff1a\\(R_{t+1}:=R(S_t,S_{t+1})\\)\uff0c\u4ece\u7b2ct\u6b65\u8f6c\u79fb\u5230\u7b2ct+1\u6b65\u83b7\u5f97\u7684\u5956\u52b1</p> <p>\u56de\u62a5\uff1a\u53cd\u5e94\u8be5\u65f6\u523b\u5f97\u5230\u7684\u7d2f\u52a0\u5956\u52b1 $$ G_t=R_{t+1}+\\gamma R_{t+2}+\\gamma^2R_{t+3}+\\cdots $$</p> <p>\u6298\u6263\u56e0\u5b50\\(\\gamma\\in[0,1]\\)\uff0c\\(R_{t+k}\\)\u8868\u793a\u7b2c\\(t+k\\)\u65f6\u523b\u83b7\u5f97\u7684\u5956\u52b1</p> <p>\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\uff1a\\(MDP=(S,A,P,R,\\gamma)\\)</p> <ul> <li>\u72b6\u6001\u96c6\u5408\\(S\\)\uff1a\u6c42\u89e3\u95ee\u9898\u4e2d\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u72b6\u6001\u6784\u6210\u7684\u96c6\u5408\uff0c\u8fd9\u4e2a\u96c6\u5408\u53ef\u80fd\u662f\u4e00\u4e2a\u6709\u9650\u7684\u96c6\u5408\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u65e0\u9650\u7684\u96c6\u5408</li> <li>\u52a8\u4f5c\u96c6\u5408\\(A\\)\uff1a\u6c42\u89e3\u95ee\u9898\u4e2d\u667a\u80fd\u4f53\u80fd\u591f\u91c7\u53d6\u7684\u6240\u6709\u52a8\u4f5c\u6784\u6210\u7684\u96c6\u5408\uff0c\u8fd9\u4e2a\u96c6\u5408\u540c\u6837\u53ef\u4ee5\u662f\u6709\u9650\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u65e0\u9650\u7684</li> <li>\u72b6\u6001\u8f6c\u79fb\u6982\u7387\\(P(S_{t+1}|S_t,A_t)\\)\uff1a\u8868\u793a\u5728\u5f53\u524d\u72b6\u6001\\(S_t\\)\u4e0b\u91c7\u53d6\u52a8\u4f5c\\(A_t\\)\u540e\u8fdb\u5165\u4e0b\u4e00\u65f6\u523b\u72b6\u6001\\(S_{t+1}\\)\u7684\u6982\u7387\u3002\u663e\u7136\uff0c\u72b6\u6001\u8f6c\u79fb\u6982\u7387\u6ee1\u8db3\u9a6c\u5c14\u53ef\u592b\u6027\u3002\u72b6\u6001\u8f6c\u79fb\u53ef\u4ee5\u662f\u6982\u7387\u6027\u7684(stochastic),\u4e5f\u53ef\u4ee5\u662f\u786e\u5b9a\u7684(deterministic)\u3002\u786e\u5b9a\u7684\u72b6\u6001\u8f6c\u79fb\u6307\u5728\u7ed9\u5b9a\u72b6\u6001\\(S_t\\)\u4e0b\u91c7\u53d6\u52a8\u4f5c\\(A_t\\)\u540e\uff0c\u8f6c\u79fb\u5230\u67d0\u4e00\u72b6\u6001\u7684\u6982\u7387\u4e3a1</li> <li>\u5956\u52b1\u51fd\u6570\\(R(S_t,A_t,S_{t+1})\\)\uff1a\u5728\u72b6\u6001\\(S_t\\)\u4e0b\u6267\u884c\u52a8\u4f5c\\(A_t\\)\u540e\u5230\u8fbe\u72b6\u6001\\(S_{t+1}\\)\u65f6\uff0c\u667a\u80fd\u4f53\u80fd\u591f\u5f97\u5230\u7684\u5956\u52b1</li> <li>\u6298\u6263\u56e0\u5b50\\(\\gamma\\)\uff1a\u540e\u7eed\u65f6\u523b\u5956\u52b1\u5bf9\u5f53\u524d\u52a8\u4f5c\u7684\u4ef7\u503c\u7cfb\u6570\uff0c\\(\\gamma\\in[0,1]\\) </li> </ul> <p>\u4ea4\u4e92\uff1a </p> <ul> <li>\u8f68\u8ff9\uff1a\u72b6\u6001\u5e8f\u5217\\((S_0,S_1,\\cdots)\\)</li> <li>\u72b6\u6001\u5e8f\u5217\u4e2d\u5305\u542b\u7ec8\u6b62\u72b6\u6001\u7684\u95ee\u9898\u53eb\u4f5c\u5206\u6bb5\u95ee\u9898\uff0c\u4e0d\u5305\u542b\u7ec8\u6b62\u72b6\u6001\u7684\u95ee\u9898\u53eb\u4f5c\u6301\u7eed\u95ee\u9898\uff1b\u5728\u5206\u6bb5\u95ee\u9898\u4e2d\uff0c\u4e00\u4e2a\u4ece\u521d\u59cb\u72b6\u6001\u5230\u7ec8\u6b62\u72b6\u6001\u7684\u5b8c\u6574\u8f68\u8ff9\u79f0\u4e3a\u4e00\u4e2a\u7247\u6bb5</li> </ul>"},{"location":"course/aid/%E6%90%9C%E7%B4%A2%E6%8E%A2%E5%AF%BB%E4%B8%8E%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/A-star%E6%90%9C%E7%B4%A2/","title":"A-star\u641c\u7d22","text":"<p>A*\u641c\u7d22\uff1a\u5728\u8bc4\u4ef7\u51fd\u6570\u4e2d\u8003\u8651\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u8def\u5f84\u4ee3\u4ef7  \\(f(n)=g(n)+h(n)\\) </p> <p>\u5176\u4e2d\\(g(n)\\)\u4e3a\u8d77\u59cb\u8282\u70b9\u5230\u8282\u70b9\\(n\\)\u4ee3\u4ef7\uff08\u5f53\u524d\u6700\u5c0f\u4ee3\u4ef7\uff09</p> <p>\u4f8b\uff1a </p> <p>\u5904\u5904\u6700\u4f18 \\(\\Rightarrow\\) \u5168\u5c40\u6700\u4f18</p> <p>\u6027\u80fd\u5206\u6790\uff1aA*\u7b97\u6cd5\u7684\u5b8c\u5907\u6027\u548c\u6700\u4f18\u6027\u53d6\u51b3\u4e8e\u641c\u7d22\u95ee\u9898\u548c\u542f\u53d1\u51fd\u6570\u7684\u6027\u8d28</p> <ul> <li>\u8bb0\u53f7\uff1a<ul> <li>\\(h(n)\\)\uff1a\u7ed3\u70b9n\u7684\u542f\u53d1\u51fd\u6570\u53d6\u503c\uff08\u76f4\u7ebf\u8ddd\u79bb\uff09</li> <li>\\(g(n)\\)\uff1a\u4ece\u8d77\u59cb\u7ed3\u70b9\u5230\u7ed3\u70b9n\u6240\u5bf9\u5e94\u8def\u5f84\u7684\u4ee3\u4ef7</li> <li>\\(f(n)\\)\uff1a\u7ed3\u70b9n\u7684\u8bc4\u4ef7\u51fd\u6570\u53d6\u503c</li> <li>\\(c(n,a,n')\\)\uff1a\u4ece\u7ed3\u70b9n\u6267\u884c\u52a8\u4f5ca\u5230\u8fbe\u7ed3\u70b9n'\u7684\u5355\u6b65\u4ee3\u4ef7</li> <li>\\(h^*(n)\\)\uff1a\u4ece\u7ed3\u70b9n\u51fa\u53d1\u5230\u8fbe\u7ec8\u6b62\u7ed3\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7\uff08\u5b9e\u9645\u8ddd\u79bb\uff09</li> </ul> </li> <li>\u53ef\u5bb9\u6027\uff1a\\(\\forall n:h(n)\\leqslant h^*(n)\\)\uff0c\u5373\u542f\u53d1\u51fd\u6570\u4e0d\u4f1a\u8fc7\u9ad8\u4f30\u8ba1\u4ece\u8282\u70b9\\(n\\)\u5230\u7ec8\u6b62\u8282\u70b9\u6240\u5e94\u8be5\u4ed8\u51fa\u7684\u4ee3\u4ef7\uff08\u5373\u4f30\u8ba1\u4ee3\u4ef7\u5c0f\u4e8e\u7b49\u4e8e\u5b9e\u9645\u4ee3\u4ef7\uff09</li> <li>\u4e00\u81f4\u6027\uff1a \\(h(n)\\leqslant c(n,a,n')+h(n')\\)\u4e09\u89d2\u4e0d\u7b49\u5f0f</li> </ul> <p><pre><code>graph LR;\nA[n]--c---B[\"n'\"]\nB---C[E]\nA---C</code></pre> \u5b9a\u74061\uff1a\u4e00\u81f4 \\(\\Rightarrow\\) \u53ef\u5bb9</p> <p>\u8bc1\uff1a\u8bbe\u6700\u77ed\u8def\u4e3a\\(n_1\\to n_2\\to\\cdots\\to K\\) \\(h(K)=0\\)</p> <p>\\(\\because\\)\u4e00\u81f4  </p> <p>\\(\\therefore h(n_1)\\leqslant h(n_2)+c(n_1,a_1,n_2)\\leqslant h(n_3)+c(n_2,a_2,n_3)+c(n_1,a_1,n_2)\\)\\(\\leqslant\\cdots\\leqslant c(n_1,a_1,n_2)+c(n_2,a_2,n_3)+\\cdots+c(n_1,a_1,K)=h^*(n_1)\\)</p> <p>\u5b9a\u74062\uff1aA*\u5b8c\u5907\u6027</p> <ul> <li>\u641c\u7d22\u6811\u4e2d\u7684\u5206\u652f\u6570\u91cf\u662f\u6709\u9650\u7684\uff0c\u5373\u6bcf\u4e2a\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u6570\u91cf\u662f\u6709\u9650\u7684</li> <li>\u5355\u6b65\u4ee3\u4ef7\u7684\u4e0b\u754c\u662f\u4e00\u4e2a\u6b63\u6570</li> <li>\u542f\u53d1\u51fd\u6570\u6709\u4e0b\u754c</li> </ul> <p>\u5b9a\u74063\uff1a\u53ef\u5bb9 \\(\\Rightarrow\\) \u6700\u4f18</p> <p>\u8bc1\uff1a\u5047\u8bbeA*\u627e\u5230\u7684\u7ec8\u70b9\u4e3a\\(n\\)\uff0c\\(\\forall n'\\in\\)\u8fb9\u7f18\u8282\u70b9\uff0c\\(f(n)\\leqslant f(n')\\)</p> <p>\\(\\therefore f(n)=g(n)+h(n)=g(n)\\leqslant f(n')=g(n')+h(n')\\leqslant g(n')+h^*(n')\\)</p> <p>\\(\\therefore\\)\u4e3a\u6700\u77ed\u8def</p>"},{"location":"course/aid/%E6%90%9C%E7%B4%A2%E6%8E%A2%E5%AF%BB%E4%B8%8E%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/Minimax%E6%90%9C%E7%B4%A2/","title":"Minimax\u641c\u7d22","text":"<p>\u6982\u5ff5\uff1a</p> <ul> <li>\u72b6\u6001\uff1a\u72b6\u6001s\u5305\u62ec\u5f53\u524d\u7684\u6e38\u620f\u5c40\u9762\u548c\u5f53\u524d\u884c\u52a8\u7684\u667a\u80fd\u4f53\u3002\u521d\u59cb\u72b6\u6001so\u5305\u62ec\u521d\u59cb\u6e38\u620f\u5c40\u9762\u548c\u521d\u59cb\u884c\u52a8\u7684\u73a9\u5bb6\u3002\u7531\u4e8e\u672c\u8282\u8ba8\u8bba\u7684\u95ee\u9898\u5047\u8bbe\u4e24\u4e2a\u7ade\u4e89\u5bf9\u624b\u8f6e\u6d41\u884c\u52a8\uff0c\u56e0\u6b64\u7b2ci\u6b65\u884c\u52a8\u7684\u73a9\u5bb6\u662f\u786e\u5b9a\u7684\uff0c\u51fd\u6570player(s)\u7ed9\u51fa\u72b6\u6001s\u4e0b\u884c\u52a8\u7684\u667a\u80fd\u4f53</li> <li>\u52a8\u4f5c\uff1a\u7ed9\u5b9a\u72b6\u6001s,\u52a8\u4f5c\u6307\u7684\u662fplayer(s)\u5728\u5f53\u524d\u5c40\u9762\u4e0b\u53ef\u4ee5\u91c7\u53d6\u7684\u64cd\u4f5ca,\u8bb0\u52a8\u4f5c\u96c6\u5408\u4e3aactions(s)</li> <li>\u72b6\u6001\u8f6c\u79fb\uff1a\u7ed9\u5b9a\u72b6\u6001s\u548c\u52a8\u4f5ca\u2208actions(s),\u72b6\u6001\u8f6c\u79fb\u51fd\u6570result(s,a)\u51b3\u5b9a\u4e86s\u5728\u72b6\u6001\u91c7\u53d6a\u52a8\u4f5c\u540e\u6240\u5f97\u540e\u7ee7\u72b6\u6001</li> <li>\u7ec8\u5c40\u72b6\u6001\u68c0\u6d4b\uff1a\u7ec8\u6b62\u72b6\u6001\u68c0\u6d4b\u51fd\u6570terminal_test(s)\u7528\u4e8e\u6d4b\u8bd5\u6e38\u620f\u662f\u5426\u5728\u72b6\u6001s\u7ed3\u675f</li> <li>\u7ec8\u5c40\u5f97\u5206\uff1a\u7ec8\u5c40\u5f97\u5206utility(s,p)\u8868\u793a\u5728\u7ec8\u5c40\u72b6\u6001s\u65f6\u73a9\u5bb6p\u7684\u5f97\u5206\u3002\u5728\u4e8c\u4eba\u96f6\u548c\u535a\u5f08\u4e2d\uff0c\u4e24\u540d\u73a9\u5bb6\u7684\u7ec8\u5c40\u5f97\u5206\u4e4b\u548c\u5e94\u8be5\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u7b97\u6cd5\u53ea\u9700\u8bb0\u5f55\u5176\u4e2d\u4e00\u4eba\u7684\u7ec8\u5c40\u5f97\u5206\u4e3autility(s),\u5219\u53e6\u4e00\u4eba\u7684\u5f97\u5206\u53ef\u6309\u7167\u96f6\u548c\u539f\u5219\u76f8\u5e94\u7b97\u51fa</li> </ul> <p>\u51b3\u7b56\u65b9\u6cd5\uff1a</p> \\[ \\text{minimax}(s)=\\left\\{\\begin{array}{ll}\\text{utility}(s),&amp;\\text{if terminal_test}(s)\\\\\\max_{a\\in\\text{action}(s)}\\text{minimax}(\\text{result}(s,a)),&amp;\\text{if player}(s)=\\text{MAX}\\\\\\min_{a\\in\\text{action}(s)}\\text{minimax}(\\text{result}(s,a)),&amp;\\text{if player}(s)=\\text{MIN}\\end{array}\\right. \\] <pre><code>MinimaxDecision:(MAX\u884c\u52a8)\n    a* \u2190 argmax_{a\u2208actions(s)}MinValue(result(s,a))\n</code></pre> <pre><code>MaxValue:\n    if terminal_test(s) then return utility(s)\n    v \u2190 -\u221e\n    foreach a\u2208actions(s) do\n        v \u2190 max(v, MinValue(result(s,a)))\n    end\n</code></pre> <pre><code>MinValue:\n    if terminal_test(s) then return utility(s)\n    v \u2190 +\u221e\n    foreach a\u2208actions(s) do\n        v \u2190 min(v, MaxValue(result(s,a)))\n    end\n</code></pre>"},{"location":"course/aid/%E6%90%9C%E7%B4%A2%E6%8E%A2%E5%AF%BB%E4%B8%8E%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/alpha-beta%E6%90%9C%E7%B4%A2/","title":"alpha-beta\u641c\u7d22","text":"<p>\u526a\u679d\u65b9\u6cd5\uff1a\u5728\u6700\u5c0f\u6700\u5927\u641c\u7d22\u4e2d\u53ef\u51cf\u5c11\u88ab\u641c\u7d22\u7684\u7ed3\u70b9\u6570</p> <p>\u4f8b\uff1a </p> <p>\\(minimax(A)=\\max(\\min(3,9,10),\\min(2,x,y),\\min(10,5,1))=\\max(3,\\min(2,x,y),1)\\)</p> <p>\u800c\\(\\min(2,x,y)\\leqslant2\\)\uff0c\u53ef\u76f4\u63a5\u526a\u679d\u3002</p> <ul> <li> <p>\u57fa\u4e8eMIN\u8282\u70b9\u53cd\u9988\u6536\u76ca\u8fdb\u884c\u526a\u679d     </p> </li> <li> <p>\u57fa\u4e8eMAX\u8282\u70b9\u53cd\u9988\u6536\u76ca\u8fdb\u884c\u526a\u679d     </p> </li> </ul> <pre><code>AlphaBetaDecision: (MAX\u6700\u4f18\u52a8\u4f5ca*)\n    v,a* \u2190 MaxValue(s,-\u221e, +\u221e)\n</code></pre> <pre><code>MaxValue:\n    if terminal_test(s) then return utility(s), null\n    v \u2190 -\u221e\n    a* \u2190 null\n    foreach a\u2208actions(s) do\n        v', a' \u2190 MinValue(result(s,a), \u03b1, \u03b2)\n        if v' &gt; v then\n            v' \u2190 v\n            a* \u2190 a\n        end\n    \u03b1 \u2190 max(\u03b1, v)\n    if \u03b1 \u2265 \u03b2 then return v, a*\nend\n</code></pre> <pre><code>MinValue:\n    if terminal_test(s) then return utility(s), null\n    v \u2190 +\u221e\n    a* \u2190 null\n    foreach a\u2208actions(s) do\n        v', a' \u2190 MaxValue(result(s,a), \u03b1, \u03b2)\n        if v' &lt; v then\n            v' \u2190 v\n            a* \u2190 a\n        end\n    \u03b2 \u2190 min(\u03b2, v)\n    if \u03b1 \u2265 \u03b2 then return v, a*\nend\n</code></pre> <p>\u539f\u7406\uff1a </p> <p>\u4ee5\u5f53\u524d\u8282\u70b9\u4e3aMAX\u5c42\u4e3a\u4f8b\uff0c\u5219pa\u4e3aMIN\u5c42\uff0c\u5f53\u524d\u5c06\u9009\u62e9\u5c0f\u4e8e\\(\\beta\\)\u7684\u8282\u70b9\uff0cch\u4e3aMIN\u5c42\u3002</p> <p>\u6bcf\u6b21\u6839\u636e\u65b0\u8ba1\u7b97\u51fa\u7684ch\u8282\u70b9\u503c\u66f4\u65b0\u8be5\u5c42\u7684\\(\\alpha\\)\u503c\uff08\\(\\alpha\\)\u5728\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u4e0d\u51cf\uff09\uff0c\u66f4\u65b0\u5b8c\u6bd5\u540e\u7acb\u5373\u68c0\u67e5\u662f\u5426\u7b26\u5408\\(\\beta\\)\u503c\u7684\u8981\u6c42\uff0c\u5373\\(\\alpha&lt;\\beta\\)\uff0c\u5373\u8be5\u8282\u70b9\u4ecd\u5177\u6709\u4e3apa\u63d0\u4f9b\u66f4\u5c0f\u7b54\u6848\u7684\u6f5c\u529b\uff1b\u5426\u5219\uff0c\u82e5\\(\\alpha\\geqslant\\beta\\)\uff0c\u7531\u4e8e\\(\\alpha\\)\u4e0d\u51cf\uff0c\u5c06\u65e0\u6cd5\u63d0\u4f9b\u66f4\u5c0f\u7b54\u6848\uff0c\u5c06\u88ab\u7236\u8282\u70b9\u9057\u5f03\uff0c\u6b64\u65f6\u672a\u6269\u5c55\u5b8c\u7684\u5b50\u8282\u70b9\u5c06\u88ab\u526a\u679d\u3002</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u6bcf\u4e2a\u8282\u70b9\u4ece\u5b50\u8282\u70b9\u8fdb\u884c\u7b54\u6848\u7684\u66f4\u65b0\uff0c\u53c8\u53d7\u5230\u7236\u8282\u70b9\u7684\u76d1\u7763\uff1b\u5f53\u4e24\u79cd\u7b56\u7565\u53d1\u751f\u4ea4\u53e0\u65f6\u8fdb\u884c\u526a\u679d\u3002</p>"},{"location":"course/aid/%E6%90%9C%E7%B4%A2%E6%8E%A2%E5%AF%BB%E4%B8%8E%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/%E6%90%9C%E7%B4%A2%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"\u641c\u7d22\u57fa\u672c\u6982\u5ff5","text":"<p>\u72b6\u6001\uff1a\u5bf9\u641c\u7d22\u7b97\u6cd5\u548c\u641c\u7d22\u73af\u5883\u5f53\u524d\u6240\u5904\u60c5\u5f62\u7684\u63cf\u8ff0\u4fe1\u606f\uff1b\u641c\u7d22\u7b97\u6cd5\u521a\u5f00\u59cb\u6240\u5728\u72b6\u6001\u79f0\u4e3a\u521d\u59cb\u72b6\u6001\uff0c\u5b8c\u6210\u4efb\u52a1\u65f6\u6240\u5728\u72b6\u6001\u79f0\u4e3a\u7ec8\u6b62\u72b6\u6001\u3002</p> <p>\u52a8\u4f5c\uff1a\u7b97\u6cd5\u4ece\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u5230\u53e6\u5916\u4e00\u4e2a\u72b6\u6001\u6240\u91c7\u53d6\u7684\u884c\u4e3a\u79f0\u4e3a\u52a8\u4f5c</p> <p>\u72b6\u6001\u8f6c\u79fb\uff1a\u7b97\u6cd5\u9009\u62e9\u4e86\u4e00\u4e2a\u52a8\u4f5c\u4e4b\u540e\uff0c\u5176\u6240\u5904\u72b6\u6001\u4e5f\u4f1a\u53d1\u751f\u76f8 \u5e94\u53d8\u5316\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u72b6\u6001\u8f6c\u79fb</p> <p>\u8def\u5f84\u548c\u4ee3\u4ef7\uff1a\u5c06\u8fc7\u7a0b\u4e2d\u7ecf\u5386\u7684\u72b6\u6001\u8bb0\u5f55\u4e0b\u6765\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u72b6\u6001\u5e8f\u5217\uff0c\u8fd9\u4e2a\u72b6\u6001\u5e8f\u5217\u79f0\u4e3a\u4e00\u6761\u8def\u5f84\uff1b\u6761\u8def\u5f84\u5bf9\u5e94\u4e00\u4e2a\u4ee3\u4ef7</p> <p>\u76ee\u6807\u6d4b\u8bd5\uff1a\u5224\u65ad\u72b6\u6001\u662f\u5426\u4e3a\u76ee\u6807\u72b6\u6001</p> <p>\u641c\u7d22\u8fc7\u7a0b\u53ef\u89c6\u4e3a\u641c\u7d22\u6811\u7684\u6784\u5efa</p> <p>\u641c\u7d22\u6811\uff1a\u53ef\u4ee5\u7528\u4e00\u68f5\u6811\u6765\u8bb0\u5f55\u7b97\u6cd5\u6240\u641c\u7d22\u7684\u8def\u5f84</p> <p>\u8bc4\u4ef7\u6307\u6807\uff1a</p> <ul> <li>\u5b8c\u5907\u6027\uff1a\u5f53\u95ee\u9898\u5b58\u5728\u89e3\u65f6\uff0c\u7b97\u6cd5\u662f\u5426\u80fd\u4fdd\u8bc1\u627e\u5230\u4e00\u4e2a\u89e3\uff0c\u867d\u7136\u8fd9\u4e2a\u89e3\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u89e3</li> <li>\u6700\u4f18\u6027\uff1a\u641c\u7d22\u7b97\u6cd5\u662f\u5426\u80fd\u4fdd\u8bc1\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u89e3\u662f\u6700\u4f18\u89e3</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u627e\u5230\u4e00\u4e2a\u641c\u7d22\u8def\u5f84\u6240\u9700\u7684\u65f6\u95f4</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u7b97\u6cd5\u8fd0\u884c\u65f6\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4</li> </ul> <p>\u590d\u6742\u5ea6\u76f8\u5173\u53d8\u91cf\uff1a</p> <ul> <li>b\uff1a\u5206\u652f\u56e0\u5b50\uff0c\u5373\u641c\u7d22\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u6700\u5927\u7684\u5206\u652f\u6570\u76ee</li> <li>d\uff1a\u6839\u7ed3\u70b9\u5230\u6700\u6d45\u7684\u76ee\u6807\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6</li> <li>m\uff1a\u641c\u7d22\u6811\u4e2d\u8def\u5f84\u7684\u6700\u5927\u53ef\u80fd\u957f\u5ea6</li> <li>n\uff1a\u72b6\u6001\u7a7a\u95f4\u4e2d\u72b6\u6001\u7684\u6570\u91cf</li> </ul> <p>\u641c\u7d22\u6846\u67b6\uff1a</p> <pre><code>TreeSearch\n    F \u2190 {\u6839\u8282\u70b9}\n    while F \u2260 \u03a6 do\n    n \u2190 pick_from(F)\n    F \u2190 F - {n}\n    if goal_test(n) then\n        return n.path\n    end\n    F \u2190 F \u222a successor_nodes(n)\nend\n</code></pre>"},{"location":"course/aid/%E6%90%9C%E7%B4%A2%E6%8E%A2%E5%AF%BB%E4%B8%8E%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2/","title":"\u8499\u7279\u5361\u6d1b\u6811\u641c\u7d22","text":"<p>\u6982\u5ff5\uff1a</p> <ul> <li>\u72b6\u6001\uff1a\u6bcf\u4e2a\u88ab\u6447\u52a8\u7684\u6447\u81c2\u5373\u4e3a\u4e00\u4e2a\u72b6\u6001\uff0c\\(\\set{s_1,\\cdots,s_K}\\)</li> <li>\u52a8\u4f5c\uff1a\u52a8\u4f5c\u5bf9\u5e94\u7740\u6447\u52a8\u4e00\u4e2a\u8d4c\u535a\u673a\u7684\u6447\u81c2\uff0c\\(\\set{a_1,\\cdots,a_K}\\)</li> <li>\u72b6\u6001\u8f6c\u79fb\uff1a\u9009\u62e9\u52a8\u4f5c\\(a_i\\)\u540e\uff0c\u5c06\u72b6\u6001\u76f8\u5e94\u5730\u8f6c\u6362\u4e3a\\(s_i\\)</li> <li>\u5956\u52b1\uff1a\u8bbe\u4ece\u7b2c\\(i\\)\u4e2a\u8d4c\u535a\u673a\u83b7\u5f97\u6536\u76ca\u5206\u6570\u7684\u5206\u5e03\u4e3a\\(D_i\\)\uff0c\u5176\u5747\u503c\u4e3a\\(\\mu_i\\)\uff0c\u5982\u679c\u667a\u80fd\u4f53\u5728\u7b2c\\(t\\)\u6b21\u884c\u52a8\u4e2d\u9009\u62e9\u6447\u52a8\u7b2c\\(l_i\\)\u4e2a\u8d4c\u535a\u673a\u6447\u81c2\uff0c\u90a3\u4e48\u667a\u80fd\u4f53\u5728\u7b2c\\(t\\)\u6b21\u884c\u52a8\u4e2d\u6240\u5f97\u6536\u76ca\u5206\\(\\hat{r_i}\\)\u670d\u4ece\u5206\u5e03\\(D_{l_i}\\),\u79f0\u4e3a\u7b2c\\(t\\)\u6b21\u884c\u52a8\u7684\u5956\u52b1</li> <li>\u6094\u503c\u51fd\u6570\uff1a\\(\\rho_T=T\\mu^*-\\sum\\limits_{t=i}^T\\hat{r_t}\\)\uff0c\u5176\u4e2d\\(\\mu^*=\\max\\limits_{i=1,\\cdots,k}\\mu_i\\)\uff0c\u4e3a\u6700\u5927\u503c\u548c\u5b9e\u9645\u503c\u4e4b\u5dee</li> </ul> <p>\u8d2a\u5fc3\u7b56\u7565\uff1a\u667a\u80fd\u4f53\u8bb0\u5f55\u4e0b\u6bcf\u6b21\u6447\u52a8\u7684\u8d4c\u535a\u673a\u6447\u81c2\u548c\u83b7\u5f97\u7684\u76f8\u5e94\u6536\u76ca\u5206\u6570\u3002\u7ed9\u5b9a\u7b2c\\(i\\)\u4e2a\u8d4c\u535a\u673a\uff0c\u8bb0\u5728\u8fc7\u53bb\\(t-1\\)\u6b21\u6447\u52a8\u8d4c\u535a\u673a\u6447\u81c2\u7684\u884c\u52a8\u4e2d\uff0c\u6447\u52a8\u7b2ci\u4e2a\u8d4c\u535a\u673a\u6447\u81c2\u7684\u6b21\u6570\u4e3a\\(T_{(i,t-1)}\\)\u3002\u4e8e\u662f\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u7b2c\\(i\\)\u4e2a\u8d4c\u535a\u673a\u5728\u8fc7\u53bb\\(T_{(i,t-1)}\\)\u6b21\u88ab\u6447\u52a8\u8fc7\u7a0b\u4e2d\u7684\u6536\u76ca\u5206\u6570\u5e73\u5747\u503c\\(\\bar{x}_{i,T(i,t-1)}\\)\u3002\u8fd9\u6837\uff0c\u667a\u80fd\u4f53\u5728\u7b2c\\(t\\)\u6b65\uff0c\u53ea\u8981\u9009\u62e9\\(\\bar{x}_{i,T(i,t-1)}\\)\u503c\u6700\u5927\u7684\u8d4c\u535a\u673a\u6447\u81c2\u8fdb\u884c\u6447\u52a8\u5373\u53ef\u3002</p> <p>\u95ee\u9898\uff1a\u63a2\u7d22\u4e0e\u5229\u7528\u7684\u5bf9\u7acb</p> <p>\u89e3\u51b3\uff1a\\(\\epsilon-\\)\u8d2a\u5fc3\u7b97\u6cd5\uff1a</p> \\[ l_t=\\left\\{\\begin{array}{ll}\\arg\\max_i\\bar{x}_{i,T(i,t-1)},&amp;P=1-\\epsilon,\\\\i\\in\\set{1,\\cdots,K},&amp;P=\\epsilon\\end{array}\\right. \\] <p>\u95ee\u9898\uff1a\u6ca1\u6709\u5c06\u6bcf\u4e2a\u52a8\u4f5c\u88ab\u63a2\u7d22\u7684\u6b21\u6570\u7eb3\u5165\u8003\u8651</p> <p>\u89e3\u51b3\uff1aUCB1\u7b97\u6cd5\uff1a</p> <ul> <li>\u7b56\u7565\uff1a\u4e3a\u6bcf\u4e2a\u52a8\u4f5c\u7684\u5956\u52b1\u671f\u671b\u8ba1\u7b97\u4e00\u4e2a\u4f30\u8ba1\u8303\u56f4\uff0c\u4f18\u5148\u91c7\u7528\u4f30\u8ba1\u8303\u56f4\u4e0a\u9650\u8f83\u9ad8\u7684\u52a8\u4f5c</li> </ul> <p>\u5956\u52b1\u671f\u671b\u6700\u503c\u4f30\u8ba1\uff1a</p> <p>\u970d\u592b\u4e01\u4e0d\u7b49\u5f0f\uff1a\\(P(\\mu_i-\\bar{x}_{i,T(i,t-1)}&gt;\\delta)\\leqslant e^{-2T_{(i,t-1)}\\delta^2}\\)</p> <p>\u6545\\(P(\\mu_i&gt;\\bar{x}_{i,T(i,t-1)}+\\delta)\\leqslant e^{-2T_{(i,t-1)}\\delta^2}\\)\uff0c\\(\\delta\\to0\\)\u65f6\u5f97\u5230\u671f\u671b\u4e0a\u754c\u3002</p> <p>\u4ee4\\(e^{-2T_{(i,t-1)}\\delta^2}=t^{-4}\\Rightarrow\\mu_i\\)\u4e0a\u754c\\(=\\bar{x}_{i,T(i,t-1)}+\\sqrt{\\dfrac{2\\ln t}{T_{i,(t-1)}}}\\)</p> <p>\u6545UCB1\u7b56\u7565\uff1a</p> \\[ l_t=\\mathop{\\arg\\!\\max}_i\\bar{x}_{i,T(i,t-1)}+C\\sqrt{\\dfrac{2\\ln t}{T_{i,(t-1)}}} \\] <p>\u5176\u4e2d\\(C\\)\u4e3a\u53d6\u4e0d\u540c\u5e42\u51fd\u6570\u4f5c\u6536\u655b\u4ea7\u751f\u3002</p> <p>\u7ed3\u8bba\uff1a\u6094\u503c\u51fd\u6570\u671f\u671b\u4e0a\u754c\\(O\\left(\\dfrac{K\\ln T}{\\Delta}\\right),\\Delta=\\min_{i=1,\\cdots,K,\\mu_i&lt;\\mu}\\mu^*-\\mu_i\\)</p> <p>\u8499\u7279\u5361\u6d1b\u6811\u641c\u7d22\uff08\u57fa\u4e8eMinimax\u641c\u7d22\uff09\uff1a</p> <ol> <li>\u9009\u62e9\uff1a\u7b97\u6cd5\u4ece\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u5411\u4e0b\u9012\u5f52\u9009\u62e9\u5b50\u7ed3\u70b9\uff08\u7ed3\u5408\u5177\u4f53\u641c\u7d22\u6811\u7b56\u7565\u786e\u5b9aUCB1\uff09\uff0c\u76f4\u81f3\u5230\u8fbe\u53f6\u5b50\u7ed3\u70b9\u6216\u8005\u5230\u8fbe\u5c1a\u672a\u88ab\u5b8c\u5168\u6269\u5c55\u7684\u7ed3\u70b9\\(L\\)</li> <li>\u6269\u5c55\uff1a\u5982\u679c\u7ed3\u70b9L\u4e0d\u662f\u4e00\u4e2a\u7ec8\u6b62\u7ed3\u70b9(\u6216\u5bf9\u6297\u641c\u7d22\u7684\u7ec8\u5c40\u7ed3\u70b9),\u5219\u968f\u673a\u6269\u5c55\u5b83\u7684\u4e00\u4e2a\u672a\u88ab\u6269\u5c55\u8fc7\u7684\u540e\u7ee7\u7ed3\u70b9M</li> <li>\u6a21\u62df\uff1a\u4ece\u7ed3\u70b9M\u51fa\u53d1\uff0c\u6a21\u62df\u6269\u5c55\u641c\u7d22\u6811\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u7ec8\u6b62\u7ed3\u70b9\uff08\u968f\u673a\u6269\u5c55\uff09</li> <li>\u53cd\u5411\u4f20\u64ad\uff1a\u7528\u6a21\u62df\u6240\u5f97\u7ed3\u679c\uff08\u7ec8\u6b62\u7ed3\u70b9\u7684\u4ee3\u4ef7\u6216\u6e38\u620f\u7ec8\u5c40\u5206\u6570\uff09\u56de\u6eaf\u66f4\u65b0\u6a21\u62df\u8def\u5f84\u4e2dM\u4ee5\u4e0a(\u542bM)\u7ed3\u70b9\u7684\u5956\u52b1\u5747\u503c\u548c\u88ab\u8bbf\u95ee\u6b21\u6570\uff08\u4e0d\u540c\u5c42\u6b21\u66f4\u65b0\u7b56\u7565\u4e0d\u540c\uff09</li> </ol>"},{"location":"course/aid/%E6%90%9C%E7%B4%A2%E6%8E%A2%E5%AF%BB%E4%B8%8E%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/%E8%B4%AA%E5%A9%AA%E6%9C%80%E4%BD%B3%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","title":"\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22","text":"<p>\u542f\u53d1\u5f0f\u641c\u7d22\uff1a\u5229\u7528\u8f85\u52a9\u4fe1\u606f\u8fdb\u884c\u641c\u7d22</p> <p>\u8bc4\u4ef7\u51fd\u6570\\(f(n)\\)\uff1a\u4ece\u5f53\u524d\u8282\u70b9\\(n\\)\u51fa\u53d1\uff0c\u6839\u636e\u8bc4\u4ef7\u51fd\u6570\u6765 \u9009\u62e9\u540e\u7eed\u8282\u70b9</p> <p>\u542f\u53d1\u51fd\u6570\\(h(n)\\)\uff1a\u8ba1\u7b97\u4ece\u8282\u70b9\\(n\\)\u5230\u76ee\u6807\u8282\u70b9\u4e4b\u95f4\u6240\u5f62\u6210\u7684\u8def\u5f84\u7684\u6700\u5c0f\u4ee3\u4ef7\u503c</p> <p>\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22\uff1a\\(f(n)=h(n)\\)</p> <p>\u4f8b\uff1a </p> <p>\u6027\u8d28\uff1a</p> <ul> <li>\u5177\u6709\u5b8c\u5907\u6027\uff1a\u91c7\u53d6\u6392\u9664\u73af\u8def\u7684\u526a\u679d\u65b9\u6cd5</li> <li>\u4e0d\u5177\u6709\u6700\u4f18\u6027\uff1a\u6700\u5c0f\u4ee3\u4ef7\u4e0d\u7b49\u4e8e\u7d2f\u79ef\u4ee3\u4ef7\uff08\u6b32\u901f\u5219\u4e0d\u8fbe\uff09</li> <li>\u65f6\u7a7a\u590d\u6742\u5ea6\uff1a\\(O(b^m)\\)</li> </ul> <p>\u6539\u8fdb\uff1aA-star\u641c\u7d22</p>"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LDA/","title":"LDA","text":"<p>\u9ad8\u7ef4\u707e\u96be\uff1a\u6570\u636e\u5728\u9ad8\u7ef4\u7a7a\u95f4\u5931\u53bb\u533a\u5206\u6027\uff08\u8d85\u8fc730\u7ef4\u7684\u6b27\u5f0f\u8ddd\u79bb\u65e0\u533a\u522b\uff09</p> <p>\u601d\u60f3\uff1a\u7c7b\u5185\u65b9\u5dee\u5c0f\uff0c\u7c7b\u95f4\u65b9\u5dee\u5927</p> <p>\u65b9\u6cd5\uff1a\u7ebf\u6027\u5224\u522b\u5206\u6790(LDA) / Fisher\u5224\u522b\u5206\u6790(FDA)</p> <p>\u63a8\u5bfc\uff1a</p> <p>\u5047\u8bbe\u6837\u672c\u96c6\u5408\u4e3a\\(D=\\set{(x_i,y_i)}_{i=1}^n,x_i\\in\\mathbb R^d\\)\u6807\u7b7e\u4e3a\\(y_i\\in{C_1,\\cdots,C_K}\\)\u5171\\(K\\)\u7c7b\u6837\u672c</p> <p>\\(\\mathbf X\\)\u4e3a\u6240\u6709\u6837\u672c\u6784\u6210\u7684\u96c6\u5408\uff0c\\(N_i\\)\u4e3a\u7b2c\\(i\\)\u4e2a\u7c7b\u522b\u6240\u5305\u542b\u7684\u6837\u672c\u603b\u6570\uff0c\\(X_i\\)\u4e3a\u7b2c\\(i\\)\u7c7b\u6837\u672c\u7684\u96c6\u5408\uff0c\\(\\mathbf m\\)\u4e3a\u6240\u6709\u6837\u672c\u7684\u5747\u503c\u5411\u91cf\uff0c\\(\\mathbf m_i\\)\u4e3a\u7b2c\\(i\\)\u7c7b\u6837\u672c\u7684\u5747\u503c\u5411\u91cf\uff0c\\(\\Sigma_i\\)\u4e3a\u7b2c\\(i\\)\u7c7b\u6837\u672c\u7684\u534f\u65b9\u5dee\u77e9\u9635</p> \\[ \\Sigma_i=\\sum_{x\\in x_i}(x-m_i)(x-m_i)^\\mathsf T \\] <p>\u4e8c\u5206\u7c7b\uff1a\\(K=2\\)</p> <ul> <li>\u6295\u5f71\u51fd\u6570\uff1a\\(y(x)=w^\\mathsf Tx\\in\\mathbb R\\)</li> <li>\u6295\u5f71\u540e\\(C_1\\)\u7c7b\u522b\u7684\u534f\u65b9\u5dee\u77e9\u9635\\(s_1\\)\u4e3a $$ \\mathbf s_1=\\sum_{x\\in C_i}(w^\\mathsf Tx-w^\\mathsf Tm_i)^2=w^\\mathsf T[\\sum_{x\\in C_i}(x-m_i)(x-m_i)^\\mathsf T]w $$</li> <li>\u76ee\u6807\uff1a<ol> <li>\u7edf\u4e00\u7c7b\u522b\u534f\u65b9\u5dee\u6700\u5c0f\uff1a\\(\\mathbf s_1+\\mathbf s_2\\)</li> <li>\u4e0d\u540c\u7c7b\u522b\u5747\u503c\u8ddd\u79bb\u5dee\u8ddd\u6700\u5927\uff1a<ul> <li>\u6837\u672c\u6570\u636e\u4e2d\u5fc3\uff1a\\(\\mathbf m_1=w^\\mathsf Tm_1,\\mathbf m_2=w^\\mathsf Tm_2\\)</li> <li>\u8ddd\u79bb\u5b9a\u4e49\uff1a\\(\\Vert \\mathbf m_2-\\mathbf m_1\\Vert_2^2\\)</li> </ul> </li> </ol> </li> <li> <p>\u4f18\u5316\u76ee\u6807\uff1a\u6700\u5c0f\u5316\u76ee\u6807\u4f5c\u5206\u6bcd\uff0c\u6700\u5927\u5316\u76ee\u6807\u4f5c\u5206\u5b50 $$ \\max\\quad J(\\mathbf w)=\\dfrac{\\Vert \\mathbf m_2-\\mathbf m_1\\Vert_2^2}{\\mathbf s_1+\\mathbf s_2} $$ \u5316\u7b80\u4e3a\u5173\u4e8e\\(\\mathbf w\\)\u7684\u5f0f\u5b50\uff1a $$ J(\\mathbf w)=\\dfrac{\\Vert \\mathbf w^\\mathsf T(m_2-m_1)\\Vert_2^2}{\\mathbf w^\\mathsf T\\Sigma_1\\mathbf w+\\mathbf w^\\mathsf T\\Sigma_2\\mathbf w}=\\dfrac{\\mathbf w^\\mathsf T(m_2-m_1)(m_2-m_1)^\\mathsf T\\mathbf w}{\\mathbf w^\\mathsf T(\\Sigma_1+\\Sigma_2)\\mathbf w}\\equiv\\dfrac{\\mathbf w^\\mathsf TS_b\\mathbf w}{\\mathbf w^\\mathsf TS_w\\mathbf w} $$ \u5176\u4e2d\\(S_b\\)\u4e3a\u7c7b\u95f4\u6563\u5ea6\u77e9\u9635\uff0c\\(S_w\\)\u4e3a\u7c7b\u5185\u6563\u5ea6\u77e9\u9635 \u7531\u4e8e\u5206\u5b50\u5206\u6bcd\u90fd\u662f\u5173\u4e8e\\(\\mathbf w\\)\u7684\u4e8c\u6b21\u5f0f\uff0c\u6545\u4ec5\u4e0e\\(\\mathbf w\\)\u65b9\u5411\u6709\u5173\uff1b\u4ee4\\(\\mathbf w^\\mathsf TS_w\\mathbf w=1\\)\u8f6c\u5316\u4e3a\u7ea6\u675f\u6700\u503c</p> </li> <li> <p>\u4f18\u5316\u65b9\u6cd5\uff1aLagrange\u4e58\u5b50\u6cd5 $$ L(\\mathbf w)=\\mathbf w^\\mathsf TS_b\\mathbf w-\\lambda(\\mathbf w^\\mathsf TS_w\\mathbf w-1) $$ $$ \\dfrac{\\partial L}{\\partial \\mathbf w}=0\\Rightarrow S_w^{-1}S_b\\mathbf w=\\lambda\\mathbf  w $$ \u6545\\(\\lambda,\\mathbf w\\)\u4e3a\\(S_w^{-1}S_b\\)\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\uff0c\u4e0a\u5f0f\u79f0\u4e3aFisher\u7ebf\u6027\u5224\u522b\u3002</p> <p>\u6c42\u5bfc\u516c\u5f0f\uff1a\\(A=A^\\mathsf T\\Rightarrow\\dfrac{\\text{d}x^\\mathsf TAx}{x}=2Ax\\)</p> </li> <li> <p>\u6c42\u89e3\\(\\mathbf w\\)\uff1a\u5e26\u5165\\(S_b\\) \u7531\u4e8e\\((m_2-m_1)^\\mathsf T\\mathbf w\\in\\mathbb R\\)\uff0c\\(\\mathbf w\\)\u6570\u4e58\u53d8\u6362\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u6545\\(\\mathbf w=S_w^{-1}(m_2-m_1)\\)</p> </li> <li> <p>\u591a\u7ef4\u63a8\u5e7f\uff1a\u7ed9\u5b9a\u539f\u59cb\\(d\\)\u7ef4\u6570\u636e\u6837\u672c\\(x_i\\)\uff0c\u901a\u8fc7\\(x_iW\\)\u5c06\u5176\u4ece\\(d\\)\u7ef4\u7a7a\u95f4\u6620\u5c04\u5230\\(r\\)\u7ef4\u7a7a\u95f4\uff0c\u5b9e\u73b0\u539f\u59cb\u6570\u636e\u964d\u7ef4\uff0c\u5f97\u5230\u7d27\u51d1\u8868\u8fbe</p> <ul> <li>\u6b65\u9aa4\uff1a<ol> <li>\u8ba1\u7b97\u6570\u636e\u6837\u672c\u96c6\u4e2d\u6bcf\u4e2a\u7c7b\u522b\u6837\u672c\u7684\u5747\u503c</li> <li>\u8ba1\u7b97\u7c7b\u5185\u6563\u5ea6\u77e9\u9635\\(S_W\\)\u548c\u7c7b\u95f4\u6563\u5ea6\u77e9\u9635\\(S_b\\)</li> <li>\u6839\u636e\\(S_w^{-1}S_bW=\\lambda W\\)\uff0c\u6c42\u89e3\\(S_w^{-1}S_b\\)\u524d\\(r\\)\u4e2a==\u6700\u5927\u7279\u5f81\u503c==\u6240\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\\((\\mathbf w_1,\\cdots,\\mathbf w_r)\\)\uff0c\u6784\u6210\u77e9\u9635\\(W\\)</li> <li>\u901a\u8fc7\\(W\\)\u8fdb\u884c\u6620\u5c04\uff0c\u5b9e\u73b0\u7279\u5f81\u964d\u7ef4 <p>\u6295\u5f71\u540e\u7ef4\u5ea6\\(r\\)\u6700\u5927\u53d6\u503c\u4e3a\\(\\min(K-1,d)\\)</p> </li> </ol> </li> </ul> </li> </ul>"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/PCA/","title":"PCA","text":"<p>\u601d\u8def\uff1a\u901a\u8fc7\u5206\u6790\u627e\u5230\u6570\u636e\u7279\u5f81\u7684\u4e3b\u8981\u6210\u5206\uff0c\u4f7f\u7528\u8fd9\u4e9b\u4e3b\u8981\u6210\u5206\u6765\u4ee3\u66ff\u539f\u59cb\u6570\u636e\uff1b\u5c06\\(d\\)\u7ef4\u7279\u5f81\u6570\u636e\u6620\u5c04\u5230\\(l\\)\u7ef4\u7a7a\u95f4\uff0c\u53bb\u9664\u6570\u636e\u7684\u5197\u4f59\u6027\uff0c\u5c06\u539f\u59cb\u6570\u636e\u5411\u8fd9\u4e9b\u6570\u636e\u65b9\u5dee\u6700\u5927\u7684\u65b9\u5411\u8fdb\u884c\u6295\u5f71</p> <p>\u4e3b\u6210\u5206\u5206\u6790\u8981\u6c42\u201c\u964d\u7ef4\u540e\u7684\u7ed3\u679c\u8981\u4fdd\u6301\u539f\u59cb\u6570\u636e\u7684\u539f\u6709\u7ed3\u6784\u201d\uff08\u8981\u6c42\u65b9\u5dee\u7ed3\u6784\u4e0d\u53d8\uff09</p> <p>\u65b9\u5dee\uff1a\u6837\u672c\u6570\u636e\u7684\u6ce2\u52a8\u7a0b\u5ea6\uff0c\u6570\u503c\u4e0a\u7b49\u4e8e\u5404\u4e2a\u6570\u636e\u4e0e\u6837\u672c\u5747\u503c\u4e4b\u5dee\u7684\u5e73\u65b9\u548c\u4e4b\u5e73\u5747\u6570</p> \\[ \\text{var}(X)=\\dfrac{1}{n-1}\\sum_{i=1}^n(x_i-u)^2 \\] <p>\u534f\u65b9\u5dee\uff1a\u8861\u91cf\u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u5ea6</p> \\[ \\text{cov}(X,Y)=\\dfrac{1}{n-1}\\sum_{i=1}^n(x_i-E(X))(y_i-E(Y)) \\] <p>\\(\\text{cov}(X,Y)\\)\u4e3a\u6b63\uff1a\u6b63\u76f8\u5173\uff0c\u4e3a\u8d1f\uff1a\u8d1f\u76f8\u5173\uff0c\u4e3a0\uff1a\u4e0d\u76f8\u5173</p> <p>\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\uff1a</p> \\[ \\text{corr}(X,Y)=\\dfrac{\\text{cov}(X,Y)}{\\sqrt{\\text{var}(X)\\text{var}(Y)}}=\\dfrac{\\text{cov}(X,Y)}{\\sigma_x\\sigma_y} \\] <p>\u63a8\u5bfc\uff1a</p> <p>\u4fdd\u6301\u65b9\u5dee\uff1a\u5411\u6295\u5f71\u540e\u65b9\u5dee\u6700\u5927\u7684\u65b9\u5411\u6295\u5f71</p> <p>\u5047\u8bbe\u6709\\(n\\)\u4e2a\\(d\\)\u7ef4\u6837\u672c\u6570\u636e\u6240\u6784\u6210\u7684\u96c6\u5408\\(D=\\set{x_1,\\cdots,x_n}\\)\uff0c\u5176\u4e2d\\(x_i(1\\leqslant i\\leqslant n)\\in\\mathbb{R}^d\\)\uff0c\u8868\u793a\u4e3a\\(X_{n\\times d}\\)\uff1b\u6295\u5f71\u76ee\u6807\u4e3a\u964d\u7ef4\u6570\u636e\\(Y\\in \\mathbb R^{n\\times l}\\)\uff0c\u6c42\u6620\u5c04\u77e9\u9635\\(W\\in\\mathbb R^{d\\times l}\\ s.t.\\) $$ Y=XW $$ \u964d\u7ef4\u540e\\(Y\\)\u65b9\u5dee\u4e3a $$ \\text{var}(Y)=\\dfrac{1}{n-1}\\text{tr}(Y^\\mathsf TY)=\\text{tr}(W^\\mathsf T\\dfrac{1}{n-1}X^\\mathsf TXW) $$ \u8bb0\u964d\u7ef4\u524d\u6837\u672c\u6570\u636e\\(X\\)\u534f\u65b9\u5dee\u77e9\u9635\u4e3a $$ \\Sigma=\\dfrac{1}{n-1}X^\\mathsf TX $$ \u5219\u4f18\u5316\u76ee\u6807 $$ \\max\\limits_{W}\\text{tr}(W^\\mathsf T\\Sigma W) $$ \u7ea6\u675f\uff1a\u6807\u51c6\u5316\\(w_i^\\mathsf Tw_i=1\\quad i\\in\\set{1,\\cdots,l}\\)</p> <p>\u4f18\u5316\u65b9\u6cd5\uff1aLagrange\u4e58\u5b50\u6cd5 $$ L(W,\\lambda)=\\text{tr}(W^\\mathsf T\\Sigma W)-\\sum_{i=1}^l\\lambda_i(w_i^\\mathsf Tw_i-1) $$ $$ \\dfrac{\\partial L}{\\partial w_i}=0\\Rightarrow \\Sigma w_i=\\lambda_iw_i $$ \u5373\\(w_i\\)\u4e3a\\(\\Sigma\\)\u7279\u5f81\u5411\u91cf\uff0c\\(\\lambda_i\\)\u4e3a\u7279\u5f81\u503c.</p> <p>\u6b65\u9aa4\uff1a</p> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u6837\u672c\u6570\u636e\\(x_i\\)\u8fdb\u884c\u4e2d\u5fc3\u5316\u5904\u7406\uff1a\\(x_i=x_i-\\mu,\\mu=\\dfrac{1}{n}\\sum x_i\\)</li> <li>\u8ba1\u7b97\u539f\u59cb\u6837\u672c\u6570\u636e\u7684\u534f\u65b9\u5dee\u77e9\u9635\uff1a\\(\\Sigma=\\dfrac{1}{n-1}X^\\mathsf TX\\)</li> <li>\u5bf9\u534f\u65b9\u5dee\u77e9\u9635\\(\\Sigma\\)\u8fdb\u884c\u7279\u5f81\u503c\u5206\u89e3\uff0c\u5bf9\u6240\u5f97\u7279\u5f81\u6839\u8fdb\u884c\u6392\u5e8f\uff1a\\(\\lambda_1\\geqslant\\lambda_2\\geqslant\\lambda_l\\)</li> <li>\u53d6\u524d\\(l\\)\u4e2a\u6700\u5927\u7279\u5f81\u6839\u6240\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\\(w_1,\\cdots,w_l\\)\u7ec4\u6210\u6620\u5c04\u77e9\u9635</li> </ul> <p>\u5e94\u7528\uff1a\u7279\u5f81\u4eba\u8138\u6cd5</p>"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/k%E5%9D%87%E5%80%BC%E8%81%9A%E7%B1%BB/","title":"k\u5747\u503c\u805a\u7c7b","text":"<p>\u805a\u7c7b\u4efb\u52a1\uff1a\u5c06\u5927\u91cf\u6570\u636e\u6839\u636e\u5b83\u4eec\u7684\u6570\u636e\u7279\u5f81\u76f8\u4f3c\u6027\u5206\u6210\u5c11\u91cf\u7c07\u7684\u4efb\u52a1</p> <p>k-means\u7b97\u6cd5\u8981\u6c42\u7279\u5f81\u53d8\u91cf\u8fde\u7eed\uff0c\u6570\u636e\u6ca1\u6709\u5f02\u5e38\u503c</p> <p>\u76ee\u6807\uff1a\u5c06\\(n\\)\u4e2a\\(d\\)\u7ef4\u6570\u636e\\(\\set{x_i,i=1,\\cdots,n}\\)\u5212\u5206\u4e3a\\(K\\)\u4e2a\u805a\u7c07\uff0c\u4f7f\u5f97\u5185\u90e8\u65b9\u5dee\u6700\u5c0f\u5316</p> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u805a\u7c7b\u8d28\u5fc3\uff1a\u521d\u59cb\u5316\\(K\\)\u4e2a\u805a\u7c7b\u8d28\u5fc3\\(C=\\set{c_1,c_2,\\cdots,c_K},c_j\\in \\mathbb R^d\\ (1\\leqslant j\\leqslant K)\\) \u6bcf\u4e2a\u805a\u7c7b\u8d28\u5fc3\\(c_j\\)\u6240\u5728\u7684\u96c6\u5408\u8bb0\u4e3a\\(G_j\\)</li> <li>\u5bf9\u6570\u636e\u8fdb\u884c\u805a\u7c7b\uff1a\u5c06\u6bcf\u4e2a\u805a\u7c7b\u6570\u636e\u653e\u5165\u552f\u4e00\u4e00\u4e2a\u805a\u7c7b\u96c6\u5408\u4e2d $$ \\text{dist}(x_i,c_j)=\\sqrt{\\sum_{o=1}^d(x_{i,o}-c_j,o)^2} (1\\leqslant i\\leqslant n,1\\leqslant j\\leqslant K) $$ <p>\u5bf9\u5e94\u7ef4\u5ea6\u8ddd\u79bb\u5dee\u7684\u5e73\u65b9\u548c\u5f00\u6839\u53f7</p> </li> </ol> <p>\u5c06\u6bcf\u4e2a\\(x_i\\)\u653e\u5165\u4e0e\u4e4b\u8ddd\u79bb\u6700\u8fd1\u7684\u805a\u7c7b\u8d28\u5fc3\u6240\u5728\u7684\u805a\u7c7b\u96c6\u5408\u4e2d\uff0c\\(\\mathop{\\arg\\!\\min}\\limits_{c_j\\in C}\\ \\text{dist}(x_i,c_j)\\)</p> <ol> <li>\u66f4\u65b0\u805a\u7c7b\u8d28\u5fc3\uff1a\u6839\u636e\u6bcf\u4e2a\u805a\u7c7b\u96c6\u5408\u4e2d\u6240\u5305\u542b\u7684\u6570\u636e\uff0c\u6c42\u5747\u503c\u5f97\u5230\u8be5\u805a\u7c7b\u96c6\u5408\u65b0\u7684\u8d28\u5fc3 $$ c_j=\\dfrac{1}{|G_j|}\\sum_{x_i\\in G_j}x_i $$</li> <li>\u8fed\u4ee3\uff1a\u91cd\u590d2\uff0c 3<ul> <li>\u8fb9\u754c\uff1a\uff081\uff09\u5df2\u7ecf\u8fbe\u5230\u8fed\u4ee3\u6b21\u6570\u4e0a\u9650 \uff082\uff09\u524d\u540e\u4e24\u6b21\u8fed\u4ee3\u4e2d\uff0c\u805a\u7c7b\u8d28\u5fc3\u4fdd\u6301\u4e0d\u53d8</li> </ul> </li> </ol> <p>\u53e6\u4e00\u79cd\u7406\u89e3\uff1a\u6700\u5c0f\u5316\u7c7b\u7c07\u65b9\u5dee</p> \\[ \\mathop{\\arg\\!\\min}_G\\sum_{i=1}^K\\sum_{x\\in G_j}\\Vert x-c_i\\Vert^2=\\mathop{\\arg\\!\\min}_G\\sum_{i=1}^K|G_i|\\text{var}(G_i) \\]"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%86%B3%E7%AD%96%E6%A0%91/","title":"\u51b3\u7b56\u6811","text":"<p>\u6982\u5ff5\uff1a\u51b3\u7b56\u6811\u5c06\u5206\u7c7b\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u57fa\u4e8e\u5355\u4e2a\u4fe1\u606f\u7684\u63a8\u7406\u4efb\u52a1\uff0c\u91c7\u7528\u6811\u72b6\u7ed3\u6784\u9010\u6b65\u5b8c\u6210</p> <p>\u51b3\u7b56\u5224\u65ad</p> <ul> <li>\u975e\u53f6\u5b50\u8282\u70b9\uff1a\u5bf9\u5206\u7c7b\u76ee\u6807\u5728\u67d0\u4e2a\u5c5e\u6027\u4e0a\u7684\u4e00\u4e2a\u5224\u65ad</li> <li>\u5206\u652f\uff1a\u57fa\u4e8e\u8be5\u5c5e\u6027\u505a\u51fa\u7684\u4e00\u4e2a\u5224\u65ad</li> <li>\u53f6\u5b50\u8282\u70b9\uff1a\u5206\u7c7b\u7ed3\u679c <p>\u51b3\u7b56\u6811\u53ef\u4ee5\u770b\u4f5c\u4e00\u7cfb\u5217\u4ee5\u53f6\u5b50\u8282\u70b9\u4e3a\u8f93\u51fa\u7684\u51b3\u7b56\u89c4\u5219</p> </li> </ul> <p>\u6784\u5efa\uff1a\u51b3\u5b9a\u5212\u5206\u5c5e\u6027\u7684==\u987a\u5e8f==\u9009\u62e9\uff0c\u6027\u80fd\u597d\u7684\u51b3\u7b56\u6811\u968f\u7740\u5212\u5206\u4e0d\u65ad\u8fdb\u884c\uff0c\u51b3\u7b56\u6811\u5206\u652f\u7ed3\u70b9\u6837\u672c\u96c6\u7684\u201c\u7eaf\u5ea6\u201d\u4f1a\u8d8a\u6765\u8d8a\u9ad8</p> <ul> <li>\u4fe1\u606f\u71b5\uff1a\u201d\u7eaf\u5ea6\u201c\u8861\u91cf\u6307\u6807\uff0c\u4fe1\u606f\u71b5\u8d8a\u5927\uff0c\u8bf4\u660e\u96c6\u5408\u7684\u4e0d\u786e\u5b9a\u6027\u8d8a\u5927\uff0c\u201c\u7eaf\u5ea6\u201d\u8d8a\u4f4e<ul> <li>\u5b9a\u4e49\uff1a\\(K\\)\u4e2a\u4fe1\u606f\u7ec4\u6210\u6837\u672c\u96c6\u5408\\(D\\)\uff0c\u8bb0\u7b2c\\(k\\)\u4e2a\u4fe1\u606f\u53d1\u751f\u7684\u6982\u7387\u4e3a\\(p_k(1\\leqslant k\\leqslant K)\\) \\(\\sum p_k=1\\)</li> </ul> </li> </ul> \\[ E(D)=-\\sum_{k=1}^kp_k\\log_2p_k \\] <ul> <li>\u4fe1\u606f\u589e\u76ca\uff1a\u9009\u62e9\u5c5e\u6027\u5212\u5206\u6837\u672c\u96c6\u524d\u540e\u4fe1\u606f\u71b5\u7684\u51cf\u5c11\u91cf\u79f0\u4e3a\u4fe1\u606f\u589e\u76ca\uff08\u8861\u91cf\u6837\u672c\u96c6\u5408\u4e0d\u786e\u5b9a\u6027\u51cf\u5c11\u7684\u7a0b\u5ea6\uff09<ul> <li>\u5b9a\u4e49\uff1a\u5c5e\u6027\u53d6\u503c\\(a_i\\)\u5212\u5206\u51fa\u7684\u5b50\u6837\u672c\u8bb0\u4e3a\\(D_i\\)\uff0c\u6837\u672c\u5b50\u96c6\u5305\u542b\u7684\u6837\u672c\u6570\u8bb0\u4f5c\\(|D_i|\\)</li> </ul> </li> </ul> \\[ \\text{Gain}(D,A)=E(D)-\\sum_{i=1}^n\\dfrac{|D_i|}{|D|}E(D_i) \\] <p>\u8d8a\u9760\u8fd1\u6839\u8282\u70b9\uff0c\u533a\u5206\u5ea6\u8d8a\u5927</p> <ul> <li>\u95ee\u9898\uff1a\u4fe1\u606f\u589e\u76ca\u504f\u5411\u9009\u62e9\u5206\u652f\u591a\u7684\u5c5e\u6027\uff08\u5bfc\u81f4\u8fc7\u62df\u5408\uff09</li> <li>\u89e3\u51b3\uff1a\u5bf9\u5206\u652f\u8fc7\u591a\u8fdb\u884c\u60e9\u7f5a<ul> <li>\u4fe1\u606f\uff1a\u5206\u884c\u4e3a\u672c\u8eab\u5e26\u6765\u7684\u4fe1\u606f</li> </ul> </li> </ul> \\[ \\text{info}=-\\sum_{i=1}^n\\dfrac{|D_i|}{|D|}\\log_2\\dfrac{|D_i|}{|D|} \\] \\[ \\text{Gain-ratio}=\\text{Gain}(D,A)/\\text{info} \\]"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/","title":"\u56de\u5f52\u5206\u6790","text":"<p>\u8d77\u6e90\uff1a\u201d\u8870\u9000\u201c(regression)\u73b0\u8c61</p>"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/#_1","title":"\u4e00\u5143\u7ebf\u6027\u6a21\u578b","text":"<p>\u6a21\u578b\uff1a\\(y=ax+b\\)</p> <p>\u672c\u8d28\uff1a\u5bfb\u627e\u76f4\u7ebf\uff0c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u9760\u8fd1\u6570\u636e\u70b9\uff0c\u4ee5\u6700\u5c0f\u8bef\u5dee\u8fdb\u884c\u62df\u5408</p> <p>\u635f\u5931\uff1a\u6b8b\u5dee\u5e73\u65b9\u548c\\(\\dfrac{1}{N}\\sum(y-\\hat y)^2\\)\u6700\u5c0f</p> <p>\u53c2\u6570\u6c42\u89e3\uff1a\u6700\u5c0f\u4e8c\u4e58\u6cd5</p> <p>\u4f18\u5316\u76ee\u6807\uff1a</p> \\[ \\min_{a,b}L(a,b)=\\sum_{i=1}^n(y_i-ax_i-b)^2 \\] <p>\u6c42\u5bfc\uff1a</p> \\[ \\dfrac{\\partial L(a,b)}{\\partial b}=0\\Rightarrow\\sum_{i=1}^n(y_i-ax_i-b)=0 \\] \\[ \\therefore b=\\bar y-a\\bar x \\] \\[ \\dfrac{\\partial L(a,b)}{\\partial a}=0\\Rightarrow a=\\dfrac{\\sum\\limits_{i=1}^nx_iy_i-n\\bar x\\bar y}{\\sum\\limits_{i=1}^nx_i^2-n\\bar x^2}\\] <p>\u63a8\u5e7f\uff1a\u591a\u7ef4</p> \\[ \\begin{array}{l} L(\\mathbf X,\\mathbf y,\\mathbf a)=\\dfrac{1}{2n}\\left\\Vert\\mathbf y-\\mathbf {Xa}\\right\\Vert^2\\\\ \\dfrac{\\partial}{\\partial\\mathbf a}L(\\mathbf X,\\mathbf y,\\mathbf a)=-\\dfrac{1}{n}(\\mathbf{y-Xa})^{\\mathsf T}\\mathbf X\\\\ \\dfrac{\\partial}{\\partial\\mathbf a}L(\\mathbf X,\\mathbf y,\\mathbf a)=0\\Rightarrow \\mathbf a^*=(\\mathbf{X^{\\mathsf T}X})^{-1}\\mathbf{Xy} \\end{array} \\]"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u673a\u5668\u5b66\u4e60\uff1a</p> <ul> <li>\u6982\u5ff5\uff1a\u673a\u5668\u5b66\u4e60\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u4f18\u5316\u5b66\u4e60\uff0c\u5efa\u7acb\u80fd\u591f\u523b\u753b\u6570\u636e\u4e2d\u6240\u8574\u542b\u8bed\u4e49\u6982\u5ff5\u6216\u5206\u5e03\u7ed3\u6784\u7b49\u4fe1\u606f\u7684\u6a21\u578b</li> <li>\u6027\u8d28\uff1a\u6570\u636e\u9a71\u52a8\u5b66\u4e60</li> <li>\u5206\u7c7b\uff1a\u6309\u6570\u636e\u5229\u7528\u89d2\u5ea6<ul> <li>\u6709\u76d1\u7763\u5b66\u4e60\uff1a     \u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u4ece\u5047\u8bbe\u7a7a\u95f4 (hypothesis space) \u5b66\u4e60\u5f97\u5230\u4e00\u4e2a\u6700\u4f18\u6620\u5c04\u51fd\u6570\\(f\\)\uff08\u53c8\u79f0\u51b3\u7b56\u51fd\u6570\uff09\uff0c\u6620\u5c04\u51fd\u6570\\(f\\)\u5c06\u8f93\u5165\u6570\u636e\u6620\u5c04\u5230\u8bed\u4e49\u6807\u6ce8\u7a7a\u95f4\uff0c\u5b9e\u73b0\u6570\u636e\u7684\u5206\u7c7b\u548c\u8bc6\u522b<ul> <li>\u4f8b\uff1a[[\u56de\u5f52\u5206\u6790]]\uff0c [[\u51b3\u7b56\u6811]]</li> <li>\u7279\u5f81\u964d\u7ef4\uff1a[[LDA]]</li> </ul> </li> <li>\u65e0\u76d1\u7763\u5b66\u4e60\uff1a     \u65e0\u76d1\u7763\u5b66\u4e60\u662f\u76f4\u63a5\u4ece\u65e0\u6807\u7b7e\u6570\u636e\\(\\set{x,i=1,\u22ef,n}\\)\u51fa\u53d1\u5b66\u4e60\u6620\u5c04\u51fd\u6570<ul> <li>\u4f8b\uff1a[[k\u5747\u503c\u805a\u7c7b]]</li> <li>\u7279\u5f81\u964d\u7ef4\uff1a[[PCA]]</li> </ul> </li> <li>\u534a\u76d1\u7763\u5b66\u4e60\uff1a     \u534a\u76d1\u7763\u5b66\u4e60\u5728\u5b66\u4e60\u6620\u5c04\u51fd\u6570\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u4e00\u90e8\u5206\u6570\u636e\u6709\u6807\u7b7e\uff0c\u4e00\u90e8\u5206\u6570\u636e\u6ca1\u6709\u6807\u7b7e</li> </ul> </li> <li>\u6a21\u578b\u8bc4\u4f30\uff1a<ul> <li>\u6570\u636e\uff1a<ul> <li>\u8bad\u7ec3\u96c6\uff1a\u5728\u8bad\u7ec3\u96c6\u4e0a\u5b8c\u6210\u6a21\u578b\u53c2\u6570\u4f18\u5316</li> <li>\u9a8c\u8bc1\u96c6\uff1a\u5728\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3\u6a21\u578b\u7684\u540c\u65f6\u4f1a\u5728\u9a8c\u8bc1\u96c6\u4e0a\u5bf9\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u4ee5\u4fbf\u5f97\u5230\u6700\u4f73\u53c2\u6570</li> <li>\u6d4b\u8bd5\u96c6\uff1a\u6700\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5c06\u6d4b\u8bd5\u7ed3\u679c\u4f5c\u4e3a\u6a21\u578b\u6027\u80fd\u7684\u6700\u7ec8\u7ed3\u679c</li> </ul> </li> <li>\u95ee\u9898\uff1a\u201c\u6ca1\u6709\u514d\u8d39\u5348\u9910\u5b9a\u7406\u201d\uff1a\u4efb\u4f55\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5982\u679c\u5728\u4e00\u4e9b\u8bad\u7ec3\u96c6\u4ee5\u5916\u7684\u6837\u672c\u8bef\u5dee\u5c0f(off-training set error)\uff0c\u90a3\u4e48\u5fc5\u7136\u5728\u53e6\u5916\u4e00\u4e9b\u8bad\u7ec3\u96c6\u4ee5\u5916\u7684\u6837\u672c\u4e0a\u8868\u73b0\u6b20\u4f73\uff0c\u4efb\u4f55\u6a21\u578b\u5728\u5e73\u5747\u610f\u4e49\u4e0a\u800c\u8a00\u5176\u6027\u80fd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5373\u6ca1\u6709\u653e\u4e4b\u56db\u6d77\u800c\u7686\u51c6\u7684\u6700\u597d\u7b97\u6cd5</li> <li>\u91cf\u5316\u624b\u6bb5\uff1a\u635f\u5931\u51fd\u6570\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5e0c\u671b\u6620\u5c04\u51fd\u6570\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u7d2f\u52a0\u5dee\u5f02\u6700\u5c0f\uff0c\u5373\\(\\min\\sum\\limits_{i=1}^nLoss(f(x_i),y_i)\\)<ul> <li>0-1\u635f\u5931\u51fd\u6570\uff1a\\(Loss(y_i,f(x_i))=\\left\\{\\begin{array}{ll}1,&amp;f(x_i)\\not=y_i,\\\\0,&amp;f(x_i)=y_i.\\end{array}\\right.\\)</li> <li>\u5e73\u65b9\u635f\u5931\u51fd\u6570\uff1a\\(Loss(y_i,f(x_i))=(y_i-f(x_i))^2\\)</li> <li>\u7edd\u5bf9\u635f\u5931\u51fd\u6570\uff1a\\(Loss(y_i,f(x_i))=|y_i-f(x_i)|\\)</li> <li>\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\uff1a\\(Loss(y_i,P(y_i|x_i))=-\\log P(y_i|x_i)\\)</li> </ul> </li> <li>\u6027\u80fd\u5ea6\u91cf\uff1a\u6b63\u4f8bP\uff0c\u8d1f\u4f8bN\uff0c\u771f\u6b63\u4f8bTP\uff0c\u5047\u6b63\u4f8bFP\uff0c\u771f\u53cd\u4f8bTN\uff0c\u5047\u53cd\u4f8bFN<ul> <li>\u8861\u91cf\u6807\u51c6\uff1a<ul> <li>\u51c6\u53bb\u7387\uff1aACC = \\(\\dfrac{\\text{TP+TN}}{\\text{P+N}}\\)</li> <li>\u9519\u8bef\u7387\uff1aerrRate = 1 - ACC</li> <li>\u7cbe\u786e\u7387\uff08\u67e5\u51c6\u7387\uff09\uff1aprecision = \\(\\dfrac{\\text{TP}}{\\text{TP+FP}}\\)</li> <li>\u53ec\u56de\u7387\uff08\u67e5\u5168\u7387\uff09\uff1arecall = \\(\\dfrac{\\text{TP}}{\\text{TP+FN}}\\)</li> </ul> </li> <li>\u95ee\u9898\uff1a\u7cbe\u786e\u7387\u4e0e\u53ec\u56de\u7387\u77db\u76fe</li> <li>\u89e3\u51b3\uff1a\u7efc\u5408\u5206\u7c7b\u7387\uff1aF1-score = \\(\\dfrac{2}{\\dfrac{1}{\\text{precision}}+\\dfrac{1}{\\text{recall}}}\\)</li> </ul> </li> </ul> </li> <li>\u6cdb\u5316\u80fd\u529b\uff1a\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u9700\u8981\u4fdd\u8bc1\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u6240\u53d6\u5f97\u7684\u6027\u80fd\u4e0e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u6240\u53d6\u5f97\u7684\u6027\u80fd\u4fdd\u6301\u4e00\u81f4\uff0c\u5373\u6a21\u578b\u5177\u6709\u6cdb\u5316\u80fd\u529b     <ul> <li>\u7ecf\u9a8c\u98ce\u9669\uff1a\\(R_{\\text{emp}}=\\dfrac{1}{n}\\sum\\limits_{i=1}^nLoss(y_i,f(x_i))\\)</li> <li>\u671f\u671b\u98ce\u9669\uff1a\\(R=\\int\\limits_{x\\times y}Loss(y,f(x))P(x,y)\\text{d}x\\text{d}y\\)</li> <li>\u5173\u7cfb\uff1a\u671f\u671b\u98ce\u9669 \\(\\not=\\) \u7ecf\u9a8c\u98ce\u9669\uff0c\\(R\\leqslant R_{\\text{emp}}+\\text{err}\\)\uff0c\u5176\u4e2derr\u53d6\u503c\u4e0e\u6a21\u578b\u590d\u6742\u7a0b\u5ea6\u548c\u8bad\u7ec3\u96c6\u6837\u672c\u6570\u76ee\u6709\u5173</li> <li>\u4f18\u5316\u76ee\u6807\uff1a\u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316\uff08\u5e76\u975e\u6a21\u578b\u590d\u6742\u5ea6\u8d8a\u5927\u8d8a\u597d\uff09</li> <li>\u8fc7\u5b66\u4e60\uff1a\u5728\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4f7f\u7528\u540c\u4e00\u6279\u8bad\u7ec3\u6570\u636e\u53cd\u590d\u8bad\u7ec3\uff0c\u6a21\u578b\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u867d\u7136\u7ecf\u9a8c\u98ce\u9669\\(R_{\\text{emp}}\\)\u4f1a\u964d\u4f4e\uff0c\u4f46\u662ferr\u53d6\u503c\u4f1a\u8d8a\u5927\uff0c\u5bfc\u81f4\u671f\u671b\u98ce\u9669\\(R\\)\u589e\u52a0</li> <li>\u89e3\u51b3\uff1a\u964d\u4f4e\u590d\u6742\u5ea6\\(\\dfrac{1}{n}\\sum_{i=1}^nLoss(y_i,f(x_i))+\\lambda J(f)\\)\uff0c\\(J(f)\\)\u4e3a\u6b63\u5219\u5316\u56e0\u5b50\uff08\u60e9\u7f5a\u56e0\u5b50\uff09</li> </ul> </li> <li>\u53c2\u6570\u4f18\u5316\uff1a<ul> <li>\u9891\u7387\u5b66\u6d3e\uff1a\u6700\u5927\u4f3c\u7136\u4f30\u8ba1(MLE)\uff1a\u9891\u7387\u662f\u6982\u7387\u7684\u7ecf\u9a8c\u57fa\u7840\uff0c\u6982\u7387\u8868\u793a\u7684\u662f\u4e8b\u4ef6\u53d1\u751f\u9891\u7387\u7684\u6781\u9650\u503c\uff1b\u901a\u8fc7\u8c03\u6574\u6a21\u578b\u53c2\u6570\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u6700\u5927\u5316\u6837\u672c\u60c5\u51b5\u51fa\u73b0\u7684\u6982\u7387</li> <li>\u8d1d\u53f6\u65af\u5b66\u6d3e\uff1a\u6700\u5927\u540e\u9a8c\u4f30\u8ba1(MAP)\uff1a\u4e8b\u4ef6\u53d1\u751f\u7684\u9891\u7387\u65e2\u4e0e\u5f53\u524d\u89c2\u6d4b\u6570\u636e\u6709\u5173\uff0c\u53c8\u4e0e\u5bf9\u8be5\u4e8b\u4ef6\u5df2\u83b7\u5f97\u7684\u5386\u53f2\u5148\u9a8c\u77e5\u8bc6\u6709\u5173\uff1b\u5bf9\u6a21\u578b\u53c2\u6570\u4f18\u5316\u5b66\u4e60\u7684\u7ed3\u679c\u5c31\u662f\u4f3c\u7136\u6982\u7387\uff08\u6a21\u578b\u53c2\u6570\u4ea7\u751f\u6570\u636e\u7684\u6982\u7387\uff09\u4e0e\u5148\u9a8c\u6982\u7387\uff08\u6ca1\u6709\u4efb\u4f55\u5b9e\u9a8c\u6570\u636e\u65f6\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u7ecf\u9a8c\u5224\u65ad\uff09\u4e58\u79ef\u6700\u5927\uff0c\u6700\u5927\u5316\u5728\u7ed9\u5b9a\u6570\u636e\u6837\u672c\u7684\u60c5\u51b5\u4e0b\u6a21\u578b\u53c2\u6570\u7684\u540e\u9a8c\u6982\u7387</li> </ul> </li> </ul>"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E4%BA%BA%E8%84%B8%E6%B3%95/","title":"\u7279\u5f81\u4eba\u8138\u6cd5","text":"<p>\u5b9a\u4e49\uff1a\u7279\u5f81\u4eba\u8138\u662f\u57fa\u4e8e\u5916\u89c2\u7684\u4eba\u8138\u8bc6\u522b\u65b9\u6cd5\uff0c\u5176\u76ee\u7684\u662f\u6355\u6349\u4eba\u8138\u56fe\u50cf\u96c6\u5408\u4e2d\u7684\u7279\u5f81\u4fe1\u606f\uff0c\u5e76\u4f7f\u7528\u8be5\u4fe1\u606f\u5bf9\u5404\u4e2a\u4eba\u8138\u56fe\u50cf\u8fdb\u884c\u7f16\u7801\u548c\u6bd4\u8f83</p> <p>\u5947\u5f02\u503c\u5206\u89e3\uff1a</p> <p>\u95ee\u9898\uff1a\u5728\u7279\u5f81\u7ef4\u5ea6\u8f83\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3b\u6210\u5206\u5206\u6790\u7b97\u6cd5\u66b4\u529b\u6c42\u89e3\u7279\u5f81\u5411\u91cf\u662f\u4e00\u4e2a\u8017\u65f6\u64cd\u4f5c</p> <p>\u7ed3\u8bba\uff1a\\(A=UDV^\\mathsf T,UU^\\mathsf T=VV^\\mathsf T=I\\)\uff0c\\(U\\)\u4e3a\\(AA^\\mathsf T\\)\u6240\u6709\u7279\u5f81\u5411\u91cf\u6784\u6210\u7684\u77e9\u9635\uff0c\\(V\\)\u4e3a\\(A^\\mathsf TA\\)\u6240\u6709\u7279\u5f81\u5411\u91cf\u6784\u6210\u7684\u77e9\u9635</p> <p>\u6b65\u9aa4\uff1a</p> <ul> <li>\u53bb\u4e2d\u5fc3\u5316\uff1a\u8ba1\u7b97\u5747\u503c\u4eba\u8138\u5411\u91cf\\(\\Psi=\\dfrac{1}{n}\\sum_{i=1}^n\\Gamma_i\\)\uff0c\u8bb0\\(\\Phi_i=\\Gamma_i-\\Psi(1\\leqslant i\\leqslant n)\\)\uff0c\u5f97\u5230\u6240\u6709\u4eba\u8138\u5411\u91cf\\(\\Psi_{n\\times d^2}\\)</li> <li>\u8ba1\u7b97\u7279\u5f81\u503c\uff1a\u5229\u7528\u5947\u5f02\u503c\u5206\u89e3\u8ba1\u7b97\\(\\Phi\\Phi^\\mathsf T\\)\u7279\u5f81\u5411\u91cf\uff1b\u5f97\u5230\u7279\u5f81\u77e9\u9635\\(U_{d^2\\times n}\\)</li> <li>\u7279\u5f81\u6620\u5c04\uff1a\\(\\Omega_i=(U_{d^2\\times n})^\\mathsf T(\\Phi_i)_{d^2\\times1}\\)</li> </ul>"},{"location":"course/aid/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/","title":"\u9057\u4f20\u7b97\u6cd5","text":"<p>\u6f14\u5316\u7b97\u6cd5\uff1a\u53d7\u81ea\u7136\u6f14\u5316\u542f\u53d1\u7684\u542f\u53d1\u5f0f\u968f\u673a\u4f18\u5316\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u901a\u8fc7\u8003\u8651\u201c\u7a81\u53d8\u91cd\u7ec4\u201d\u548c\u201c\u81ea\u7136\u9009\u62e9\u201d\u8fd9\u4e24\u4e2a\u5173\u952e\u56e0\u7d20\u6765\u6a21\u62df\u81ea\u7136\u6f14\u5316\u8fc7\u7a0b</p> <p>\u6982\u5ff5\uff1a</p> <ul> <li>\u67d3\u8272\u4f53\uff1a\u5019\u9009\u89e3(\u79f0\u4e3a\u4e2a\u4f53)</li> <li>\u9002\u5e94\u5ea6</li> <li>\u81ea\u7136\u9009\u62e9</li> <li>\u7a81\u53d8</li> </ul> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u5177\u6709\u82e5\u5e72\u89c4\u6a21\u6570\u76ee\u7684\u7fa4\u4f53\u3002\u5f53\u524d\u8fdb\u5316\u4ee3\u6570Generation=0</li> <li>\u91c7\u7528\u8bc4\u4f30\u51fd\u6570\u5bf9\u7fa4\u4f53\u4e2d\u6240\u6709\u67d3\u8272\u4f53\u8fdb\u884c\u8bc4\u4ef7\uff0c\u5206\u522b\u8ba1\u7b97\u6bcf\u4e2a\u67d3\u8272\u4f53\u7684\u9002\u5e94\u503c\uff0c\u4fdd\u5b58\u9002\u5e94\u503c\u6700\u5927\u7684\u67d3\u8272\u4f53Best</li> <li>\u7528\u8f6e\u76d8\u8d4c\u9009\u62e9\u7b97\u6cd5\u5bf9\u7fa4\u4f53\u67d3\u8272\u4f53\u8fdb\u884c\u9009\u62e9\u64cd\u4f5c\uff0c\u4ea7\u751f\u89c4\u6a21\u540c\u6837\u7684\u79cd\u7fa4</li> <li>\u7167\u6982\u7387\u4ece\u79cd\u7fa4\u4e2d\u9009\u62e9\u67d3\u8272\u4f53\u8fdb\u884c\u4ea4\u914d\u3002\u65b0\u5b50\u4ee3\u67d3\u8272\u4f53\u8fdb\u5165\u65b0\u79cd\u7fa4\uff0c\u6ca1\u6709\u8fdb\u884c\u4ea4\u914d\u7684\u67d3\u8272\u4f53\u76f4\u63a5\u590d\u5236\u8fdb\u5165\u65b0\u79cd\u7fa4</li> <li>\u6309\u7167\u6982\u7387\u5bf9\u65b0\u79cd\u7fa4\u67d3\u8272\u4f53\u7684\u57fa\u56e0\u8fdb\u884c\u53d8\u5f02\u64cd\u4f5c\u3002\u53d8\u5f02\u540e\u7684\u67d3\u8272\u4f53\u53d6\u4ee3\u539f\u6709\u67d3\u8272\u4f53\u8fdb\u5165\u65b0\u79cd\u7fa4\uff0c\u672a\u53d1\u751f\u53d8\u5f02\u7684\u67d3\u8272\u4f53\u76f4\u63a5\u8fdb\u5165\u65b0\u7fa4\u4f53</li> <li>\u53d8\u5f02\u540e\u7684\u65b0\u7fa4\u4f53\u53d6\u4ee3\u539f\u6709\u7fa4\u4f53\uff0c\u91cd\u65b0\u8ba1\u7b97\u7fa4\u4f53\u4e2d\u5404\u4e2a\u67d3\u8272\u4f53\u7684\u9002\u5e94\u503c\u3002\u5018\u82e5\u7fa4\u4f53\u7684\u6700\u5927\u9002\u5e94\u503c\u5927\u4e8eBest\u7684\u9002\u5e94\u503c\uff0c\u5219\u53d6\u4ee3\u539f\u6709\u7684Best</li> <li>\u524d\u8fdb\u5316\u4ee3\u6570Generation\u52a01\u3002\u5982\u679cGeneration\u8d85\u8fc7\u89c4\u5b9a\u7684\u6700\u5927\u8fdb\u5316\u4ee3\u6570\u6216Best\u8fbe\u5230\u89c4\u5b9a\u7684\u8bef\u5dee\u8981\u6c42\uff0c\u7b97\u6cd5\u7ed3\u675f\uff1b\u5426\u5219\u8fd4\u56de\u6b65\u9aa43</li> </ol>"},{"location":"course/aid/%E7%9F%A5%E8%AF%86%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%8E%A8%E7%90%86/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/","title":"\u547d\u9898\u903b\u8f91","text":"<p>\u903b\u8f91\uff1a\u8fdb\u884c\u6b63\u786e\u63a8\u7406\u548c\u5145\u5206\u8bba\u8bc1\u7684\u7814\u7a76</p> <p>\u77e5\u8bc6\u8868\u8fbe\u65b9\u6cd5\uff1a\u547d\u9898\u903b\u8f91\uff0c\u8c13\u8bcd\u903b\u8f91\uff0c\u4ea7\u751f\u5f0f\u89c4\u5219\uff0c\u6846\u67b6\u8868\u793a\u6cd5\uff0c\u77e5\u8bc6\u56fe\u8c31\u63a8\u7406</p> <p>\u547d\u9898\uff1a\u786e\u5b9a\u4e3a\u771f\u6216\u4e3a\u5047\u7684\u79f0\u8ff0\u53e5</p> <p>\u539f\u5b50\u547d\u9898\uff1a\u4e0d\u5305\u542b\u5176\u4ed6\u547d\u9898\u4f5c\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u7684\u547d\u9898</p> <p>\u590d\u5408\u547d\u9898\uff1a\u5305\u542b\u5176\u4ed6\u547d\u9898\u4f5c\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u7684\u547d\u9898</p> <p>\u547d\u9898\u8054\u7ed3\u8bcd\uff1a\u4e0e(and  \\(p \\land q\\))\uff0c\u6216(or  \\(p \\lor q\\))\uff0c\u975e(not  \\(\\lnot p\\))\uff0c\u6761\u4ef6(conditional  \\(p\\to q\\))\uff0c\u53cc\u5411\u6761\u4ef6(biconditional  \\(p\\leftrightarrow q\\)) \u771f\u503c\u8868\uff1a</p> \\(p\\) \\(q\\) \\(\\lnot p\\) \\(p\\land q\\) \\(p\\lor q\\) \\(p\\to q\\) \\(p \\leftrightarrow q\\) F F T F F T T F T T F T T F T F F F T F F T T F T T T T <p>\u903b\u8f91\u7b49\u4ef7\uff1a\u5177\u6709\u76f8\u540c\u7684\u771f\u5047\u7ed3\u679c\uff0c\u4e00\u822c\u7528\\(\\equiv\\)\u6765\u8868\u793a</p> <ul> <li>\u4ea4\u6362\u5f8b\uff1a\\(\\alpha\\land \\beta\\equiv\\beta\\land\\alpha,\\alpha\\lor \\beta\\equiv\\beta\\lor\\alpha\\)</li> <li>\u7ed3\u5408\u5f8b\uff1a\\((\\alpha\\land\\beta)\\land\\gamma\\equiv\\alpha\\land(\\beta\\land\\gamma),(\\alpha\\lor\\beta)\\lor\\gamma\\equiv\\alpha\\lor(\\beta\\lor\\gamma)\\)</li> <li>\u5206\u914d\u7387\uff1a\\((\\alpha\\land(\\beta\\lor\\gamma))=(\\alpha\\land\\beta)\\lor(\\alpha\\land\\gamma),(\\alpha\\lor(\\beta\\land\\gamma))=(\\alpha\\lor\\beta)\\land(\\alpha\\lor\\gamma)\\)</li> <li>\u53cc\u91cd\u5426\u5b9a\uff1a\\(\\lnot(\\lnot\\alpha)\\equiv\\alpha\\)</li> <li>\u9006\u5426\u547d\u9898\uff1a\\((\\alpha\\to\\beta)\\equiv\\lnot\\beta\\to\\lnot\\alpha\\)</li> <li>\u8574\u542b\u6d88\u9664\uff1a\\(\\alpha\\to\\beta\\equiv\\lnot\\alpha\\lor\\beta\\)</li> <li>\u53cc\u5411\u6d88\u9664\uff1a\\((\\alpha\\leftrightarrow\\beta)\\equiv(\\alpha\\to\\beta)\\land(\\beta\\to\\alpha)\\)</li> <li>\u5fb7\u6469\u6839\u5b9a\u5f8b\uff1a\\(\\lnot(\\alpha\\land\\beta)\\equiv(\\lnot\\alpha\\lor\\lnot\\beta),\\lnot(\\alpha\\lor\\beta)\\equiv(\\lnot\\alpha\\land\\lnot\\beta)\\)</li> </ul> <p>\u63a8\u7406\u89c4\u5219\uff1a</p> <ul> <li>\u5047\u8a00\u63a8\u7406\uff1a\\(\\alpha\\to\\beta,\\alpha\\Rightarrow\\beta\\)</li> <li>\u4e0e\u6d88\u89e3\uff1a\\(\\alpha_1\\land\\cdots\\land\\alpha_n\\Rightarrow\\alpha_1,\\cdots,\\alpha_n\\)</li> <li>\u4e0e\u5bfc\u5165\uff1a\\(\\alpha_1,\\cdots,\\alpha_n\\Rightarrow\\alpha_1\\land\\cdots\\land\\alpha_n\\)</li> <li>\u53cc\u91cd\u5426\u5b9a\uff1a\\(\\lnot\\lnot\\alpha\\Rightarrow\\alpha\\)</li> <li>\u5355\u9879\u6d88\u89e3\u6216\u5355\u9879\u5f52\u7ed3\uff1a\\(\\alpha\\lor\\beta,\\lnot\\beta\\Rightarrow\\alpha\\)</li> <li>\u6d88\u89e3\u6216\u5f52\u7ed3\uff1a\\(\\alpha\\lor\\beta,\\lnot\\beta\\lor\\gamma\\Rightarrow\\alpha\\lor\\gamma\\)</li> </ul> <p>\u547d\u9898\u903b\u8f91\u53ea\u80fd\u628a\u590d\u5408\u547d\u9898\u5206\u89e3\u4e3a\u7b80\u5355\u547d\u9898\uff0c\u65e0\u6cd5\u5bf9\u539f\u5b50\u547d\u9898\u6240\u5305\u542b\u7684\u4e30\u5bcc\u8bed\u4e49\u8fdb\u884c\u523b\u753b\u3002\u547d\u9898\u903b\u8f91\u65e0\u6cd5\u8868\u8fbe\u5c40\u90e8\u4e0e\u6574\u4f53\u3001\u4e00\u822c\u4e0e\u4e2a\u522b\u7684\u5173\u7cfb\u3002</p>"},{"location":"course/aid/%E7%9F%A5%E8%AF%86%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%8E%A8%E7%90%86/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E7%90%86/","title":"\u56e0\u679c\u63a8\u7406","text":"<p>\u8f9b\u666e\u68ee\u6096\u8bba\uff1a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5ffd\u7565\u6f5c\u5728\u7684\u201c\u7b2c\u4e09\u4e2a\u53d8\u91cf\u201d\u53ef\u80fd\u4f1a\u6539\u53d8\u5df2\u6709\u7684\u7ed3\u8bba</p> <p>\u514b\u670d\u8f9b\u666e\u68ee\u6096\u8bba\uff1a\u5398\u6e05\u771f\u5047\u5173\u8054</p> <p>\u5173\u8054\uff1a     </p> <ul> <li>\u56e0\u679c\u5173\u8054\uff1a\u4e00\u4e2a\u53d8\u91cf\u662f\u53e6\u4e00\u4e2a\u53d8\u91cf\u7684\u539f\u56e0</li> <li>\u6df7\u6dc6\u5173\u8054\uff1a\u4e24\u4e2a\u53d8\u91cf\u5b58\u5728\u5171\u540c\u7684\u539f\u56e0\u53d8\u91cf</li> <li>\u9009\u62e9\u5173\u8054\uff1a\u4e24\u4e2a\u53d8\u91cf\u5b58\u5728\u5171\u540c\u7684\u7ed3\u679c\u53d8\u91cf</li> </ul> <p>\u8054\u5408\u6982\u7387\u5206\u5e03\uff1a\\(P(x_1,x_2,\\cdots,x_d)=\\prod\\limits_{j=1}^dP(x_j\\vert\\ x_{pa_{\\set j}})\\)</p> <p>\u5e72\u9884\uff1a\u6539\u53d8\u660e\u786e\u5b58\u5728\u5173\u8054\u5173\u7cfb\u7684\u67d0\u53d8\u91cf\u53d6\u503c\uff0c\u7814\u7a76\u53d8\u91cf\u53d6\u503c\u6539\u53d8\u5bf9\u7ed3\u679c\u53d8\u91cf\u7684\u5f71\u54cd</p> <p>\"do\"\u7b97\u5b50\uff1a\u8ba1\u7b97\u5f53\u7cfb\u7edf\u4e2d\u4e00\u4e2a\u53d8\u91cf\u53d6\u503c\u53d1\u751f\u53d8\u5316\u3001\u5176\u5b83\u53d8\u91cf\u4fdd\u6301\u4e0d\u53d8\u65f6\uff0c\u7cfb\u7edf\u8f93\u51fa\u7ed3\u679c\u662f\u5426\u53d8\u5316\u3002\\(P(Y=y\\vert do(X=x))\\)\u8868\u793a\u5bf9\\(X\\)\u8fdb\u884c\u5e72\u9884\uff0c\u56fa\u5b9a\u5176\u503c\u4e3a\\(x\\)\u65f6\uff0c\\(Y=y\\)\u7684\u6982\u7387</p> <p>\u56e0\u679c\u6548\u5e94\u5dee\uff1a\u4e3a\u8003\u8651\u7528\u836f(X)\u5bf9\u6062\u590d(Y)\u7684\u6548\u5e94\u67e5\uff0c\u5bf9X\u8fdb\u884c\u64cd\u63a7\u6709</p> <p> \\(P(Y=1|do(X=1))-P(Y=1|do(X=0))\\)</p> <p>\u8ba1\u7b97\\(P(Y=1|do(X=1))\\)\u65f6\uff0c\u5c06\u6307\u5411X\u7684\u8fb9\u79fb\u9664\u5f97\u5230\u64cd\u7eb5\u56fe\\(P_m\\)</p> <p> \u5219\\(P(Y=y|do(X=x))=P_m(Y=y|X=x)\\).</p> <p>\u6027\u8d28\uff1a</p> <ol> <li>\\(P(Z=z)=P_m(Z=z)\\)</li> <li>\\(P(Y=y|X=x,Z=z)=P_m(Y=y|X=x,Z=z)\\)</li> </ol> <p>\u5316\u7b80\uff1a</p> \\[ \\begin{array}{l} P(Y=y|do(X=x))=P_m(Y=y|X=x)\\\\ =\\sum\\limits_zP_m(Y=y|X=x,Z=z)P_m(Z=z|X=x)\\\\ =\\sum\\limits_zP_m(Y=y|X=x,Z=z)P_m(Z=z)\\\\ =\\sum\\limits_zP(Y=y|X=x,Z=z)P(Z=z) \\end{array} \\] <p>\u7ed3\u8bba\uff1a\u56e0\u679c\u6548\u5e94\uff1a\u7ed9\u5b9a\u56e0\u679c\u56feG\uff0cPA\u8868\u793aX\u7684\u7236\u8282\u70b9\u96c6\u5408\uff0c\u5219X\u5bf9Y\u7684\u56e0\u679c\u6548\u5e94\u4e3a\\(P(Y=y|do(X=x))=\\sum\\limits_{z}P(Y=y|X=x,PA=z)P(PA=z)\\)</p>"},{"location":"course/aid/%E7%9F%A5%E8%AF%86%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%8E%A8%E7%90%86/%E6%A6%82%E7%8E%87%E5%9B%BE%E6%8E%A8%E7%90%86/","title":"\u6982\u7387\u56fe\u63a8\u7406","text":"<p>\u6982\u7387\u63a8\u7406\uff1a\u57fa\u4e8e\u6982\u7387\u56fe\u8fdb\u884c\u7684\u63a8\u7406\u88ab\u79f0\u4e3a\u6982\u7387\u63a8\u7406</p> <p>\u5206\u7c7b\uff1a</p> <ul> <li>\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u7528\u6709\u5411\u8fb9\u6765\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u5355\u9879\u6982\u7387\u4f9d\u8d56</li> <li>\u9a6c\u5c14\u53ef\u592b\u7f51\u7edc\uff1a\u65e0\u5411\u56fe\uff0c\u7528\u65e0\u5411\u8fb9\u6765\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u76f8\u4e92\u6982\u7387\u4f9d\u8d56</li> </ul> <p>\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a</p> <ul> <li>\u6027\u8d28\uff1a<ul> <li>\u6ee1\u8db3\u9a6c\u5c14\u53ef\u592b\u6027\uff0c\u5373\u5728\u7ed9\u5b9a\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u7236\u8282\u70b9\u6709\u6761\u4ef6\u5730\u72ec\u7acb\u4e8e\u5b83\u7684\u975e\u540e\u4ee3\u8282\u70b9</li> <li>\u6240\u6709\u56e0\u7d20\u7684\u8054\u5408\u5206\u5e03\u7b49\u4e8e\u6240\u6709\u8282\u70b9\u7684\\(P(\\text{\u8282\u70b9}|\\text{\u7236\u8282\u70b9})\\)\u7684\u4e58\u79ef</li> </ul> </li> </ul> <p>\u9a6c\u5c14\u53ef\u592b\u7f51\u7edc\uff1a</p> <ul> <li>\u6982\u7387\u5206\u5e03\uff1a\\(P(X=x)=\\dfrac{1}{Z}\\exp\\left(\\sum\\limits_iw_in_i(x)\\right)=\\dfrac{1}{Z}\\prod\\limits_{i=1}\\phi_i(x_{\\set i})^{n_i(x)}\\)\uff0c\u5176\u4e2d\\(Z=\\sum\\limits_{x\\in x}\\exp\\left(\\sum\\limits_i(w_in_i(x))\\right)\\)</li> </ul>"},{"location":"course/aid/%E7%9F%A5%E8%AF%86%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%8E%A8%E7%90%86/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%8E%A8%E7%90%86/","title":"\u77e5\u8bc6\u56fe\u8c31\u63a8\u7406","text":"<p>\u77e5\u8bc6\u56fe\u8c31\uff1a\u7531\u6709\u5411\u56fe\u6784\u6210\uff0c\u88ab\u7528\u6765\u63cf\u8ff0\u73b0\u5b9e\u4e16\u754c\u4e2d\u5b9e\u4f53\u53ca\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff1b\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u5ba2\u89c2\u4e16\u754c\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\u8868\u793a\u8282\u70b9\u5177\u6709\u67d0\u4e00\u5173\u7cfb\u3002 \u77e5\u8bc6\u56fe\u8c31\u4e2d\u5b58\u5728\u8fde\u7ebf\u7684\u4e24\u4e2a\u5b9e\u4f53\u53ef\u4ee5\u8868\u8fbe\u4e3a\u884c\u5982<code>&lt;left_node, relation, right_node&gt;</code>\u7684\u4e09\u5143\u7ec4\u5f62\u5f0f\u3002 </p> <p>FOIL\u5f52\u7eb3\u63a8\u7406\uff1a</p> <p>\u5b66\u4e60\u5bf9\u8c61\uff1a\u89c4\u5219\uff1a\\(\\oplus\\leftarrow f_1\\land f_2\\land\\cdots\\land f_L\\) + \u89c4\u5219\u4f53\uff1a\\(f_1\\land f_2\\land\\cdots\\land f_L\\) + \u89c4\u5219\u5934\uff1a\\(\\oplus\\)</p> <p>\u5e8f\u8d2f\u8986\u76d6\uff1a</p> <ol> <li>\u76ee\u6807\u8c13\u8bcd\u4f5c\u4e3a\u6240\u5b66\u4e60\u63a8\u7406\u89c4\u5219\u7684\u7ed3\u8bba</li> <li>\u5176\u4ed6\u8c13\u8bcd\u9010\u4e00\u4f5c\u4e3a\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u52a0\u5165\u63a8\u7406\u89c4\u5219\uff0c\u8ba1\u7b97\u6240\u5f97\u5230\u63a8\u7406\u89c4\u5219\u7684FOIL\u4fe1\u606f\u589e\u76ca\u503c\uff0c\u9009\u53d6\u53ef\u5e26\u6765\u6700\u5927\u4fe1\u606f\u589e\u76ca\u503c\u7684\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u52a0\u5165\u539f\u6765\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5f97\u5230\u65b0\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5e76\u5c06\u8bad\u7ec3\u6837\u4f8b\u96c6\u5408\u4e2d\u4e0e\u8be5\u63a8\u7406\u89c4\u5219\u4e0d\u7b26\u7684\u6837\u4f8b\u53bb\u6389</li> <li>\u91cd\u590d\u8fc7\u7a0b2\uff0c\u76f4\u5230\u6240\u5f97\u5230\u7684\u63a8\u7406\u89c4\u5219\u4e0d\u8986\u76d6\u4efb\u4f55\u53cd\u4f8b</li> </ol> <p>FOIL\u4fe1\u606f\u589e\u76ca\u503c\uff1a</p> \\[ \\text{FOIL_Gain}=\\hat{m_+}\\cdot\\left(\\log_2\\dfrac{\\hat{m_+}}{\\hat{m_+}+\\hat{m_-}}-\\log_2\\dfrac{m_+}{m_++m_-}\\right) \\] <p>\u8def\u5f84\u6392\u5e8f\u63a8\u7406\uff1a</p> <ol> <li>\u7279\u5f81\u62bd\u53d6\uff1a\u751f\u6210\u5e76\u9009\u62e9\u8def\u5f84\u7279\u5f81\u96c6\u5408\uff08\u968f\u673a\u6e38\u8d70\u3001BFS/DFS\uff09</li> <li>\u7279\u5f81\u8ba1\u7b97\uff1a\\(P(s\\to t,\\pi_j)\\) \u8868\u793a\u4ece\u5b9e\u4f53\u7ed3\u70b9s\u51fa\u53d1\uff0c\u901a\u8fc7\u5173\u7cfb\u8def\u5f84\\(\\pi_j\\)\u5230\u8fbe\u5b9e\u4f53\u7ed3\u70b9t\u7684\u6982\u7387\uff1b\u6216\\(s\\to t\\)\u662f\u5426\u5b58\u5728\u8def\u5f84\\(\\pi_j\\)\uff1b\u6216\\(s\\to t\\)\u4e4b\u95f4\u8def\u5f84\u51fa\u73b0\u7684\u9891\u6b21</li> <li>\u5206\u7c7b\u5668\u8bad\u7ec3\uff1a\u6839\u636e\u8bad\u7ec3\u6837\u4f8b\u7684\u7279\u5f81\u503c\uff0c\u4e3a\u76ee\u6807\u5173\u7cfb\u8bad\u7ec3\u5206\u7c7b\u5668</li> </ol> <p>\u63a8\u7406\u65b9\u6cd5\uff1a\u6982\u7387\u56fe\u63a8\u7406\uff0c\u56e0\u679c\u63a8\u7406</p>"},{"location":"course/aid/%E7%9F%A5%E8%AF%86%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%8E%A8%E7%90%86/%E8%B0%93%E8%AF%8D%E9%80%BB%E8%BE%91/","title":"\u8c13\u8bcd\u903b\u8f91","text":"<p>\u8c13\u8bcd\u903b\u8f91\uff1a\u523b\u753b\u4e3b\u4f53\uff08\u4e2a\u4f53\u548c\u7fa4\u4f53\uff09\u4e4b\u95f4\u903b\u8f91\u5173\u7cfb\u7684\u65b9\u6cd5</p> <p>\u4e2a\u4f53\uff1a\u4e2a\u4f53\u662f\u6307\u6240\u7814\u7a76\u9886\u57df\u4e2d\u53ef\u4ee5\u72ec\u7acb\u5b58\u5728\u7684\u5177\u4f53\u6216\u62bd\u8c61\u7684\u6982\u5ff5</p> <p>\u8c13\u8bcd\uff1a\u8c13\u8bcd\u662f\u7528\u6765\u523b\u753b\u4e2a\u4f53\u5c5e\u6027\u6216\u8005\u63cf\u8ff0\u4e2a\u4f53\u4e4b\u95f4\u5173\u7cfb\u5b58\u5728\u6027\u7684\u5143\u7d20\uff0c\u5176\u503c\u4e3a\u771f\u6216\u4e3a\u5047</p> <p>\u5168\u79f0\u91cf\u8bcd(\\(\\forall\\))\uff1a\u8868\u793a\u4e00\u5207\u7684\uff0c\u6240\u6709\u7684\uff0c\u51e1\u662f\uff0c\u6bcf\u4e00\u4e2a\u7b49</p> <p>\u5b58\u5728\u91cf\u8bcd(\\(\\exists\\))\uff1a\u8868\u793a\u5b58\u5728\uff0c\u6709\u4e00\u4e2a\uff0c\u67d0\u4e9b\u7b49</p> <p>\u8c13\u8bcd\u903b\u8f91\u63a8\u7406\u624b\u6bb5\uff1a</p> <ul> <li>\u5168\u79f0\u91cf\u8bcd\u6d88\u53bb\uff1a\\((\\forall x)A(x)\\Rightarrow A(y)\\)</li> <li>\u5168\u79f0\u91cf\u8bcd\u5f15\u5165\uff1a\\(A(y)\\Rightarrow(\\forall x)A(x)\\)</li> <li>\u5b58\u5728\u91cf\u8bcd\u6d88\u53bb\uff1a\\((\\exists x)A(x)\\Rightarrow A(c)\\)</li> <li>\u5b58\u5728\u91cf\u8bcd\u5f15\u5165\uff1a\\(A(c)\\Rightarrow(\\exists x)A(x)\\)</li> </ul>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/","title":"\u5377\u79ef\u795e\u7ecf\u7f51\u7edc","text":"<p>\u95ee\u9898\uff1a\u5728\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u53c2\u6570\u6570\u91cf\u5de8\u5927\u65f6\uff0c\u5360\u7528\u5927\u91cf\u8ba1\u7b97\u673a\u5185\u5b58\uff0c\u4e14\u4f1a\u4f7f\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3\u53d8\u5f97\u96be\u4ee5\u6536\u655b\uff1b\u5bf9\u4e8e\u56fe\u50cf\u8fd9\u6837\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u76f4\u63a5\u5c06\u6240\u6784\u6210\u7684\u50cf\u7d20\u70b9\u5411\u91cf\u4e0e\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u76f8\u8fde</p> <p>\u5377\u79ef\uff1a\u9488\u5bf9\u50cf\u7d20\u70b9\u7684\u7a7a\u95f4\u4f9d\u8d56\u6027\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406\u7684\u4e00\u79cd\u6280\u672f</p> <ul> <li>\u5377\u79ef\u6838\uff1a\u4e8c\u7ef4\u77e9\u9635\uff0c\u6570\u503c\u4e3a\u56fe\u50cf\u4e2d\u4e0e\u5377\u79ef\u6838\u540c\u6837\u5927\u5c0f\u7684\u5b50\u5757\u50cf\u7d20\u70b9\u8fdb\u884c\u5377\u79ef\u8ba1\u7b97\u65f6\u6240\u91c7\u7528\u7684\u6743\u91cd</li> <li>\u64cd\u4f5c\uff1a\u4e0b\u91c7\u6837 \\(g=w_1\\times a+\\cdots+w_9\\times m\\) </li> <li>\u65b9\u6cd5\uff1a<ul> <li>\u586b\u5145\uff1a\u4e3a\u4e86\u4f7f\u8fb9\u7f18\u4f4d\u7f6e\u7684\u56fe\u50cf\u50cf\u7d20\u70b9\u4e5f\u53c2\u4e0e\u5377\u79ef\u6ee4\u6ce2\uff0c\u5728\u8fb9\u7f18\u50cf\u7d20\u70b9\u5468\u56f4\u586b\u5145\u201c0\u201d(\u53730\u586b\u5145)\uff0c\u4f7f\u5f97\u53ef\u4ee5\u4ee5\u8fb9\u7f18\u50cf\u7d20\u70b9\u4e3a\u4e2d\u5fc3\u5f62\u6210\u4e0e\u5377\u79ef\u6838\u540c\u6837\u5927\u5c0f\u7684\u56fe\u50cf\u5b50\u5757\u533a\u57df\uff08\u5728\u8fd9\u79cd\u586b\u5145\u673a\u5236\u4e0b\uff0c\u5377\u79ef\u540e\u7684\u56fe\u50cf\u5206\u8fa8\u7387\u5c06\u4e0e\u5377\u79ef\u524d\u7684\u56fe\u50cf\u5206\u8fa8\u7387\u4e00\u81f4\uff0c\u4e0d\u5b58\u5728\u4e0b\u91c7\u6837\uff09</li> <li>\u6b65\u957f\uff1a\u5e0c\u671b\u88ab\u5377\u79ef\u6240\u5f97\u7684\u56fe\u50cf\u88ab\u7ea6\u51cf\uff0c\u6539\u53d8\u5377\u79ef\u6838\u5728\u88ab\u5377\u79ef\u56fe\u50cf\u4e2d\u79fb\u52a8\u6b65\u957f\u7684\u5927\u5c0f\u6765\u8df3\u8fc7\u4e00\u4e9b\u50cf\u7d20\uff0c\u8fdb\u884c\u5377\u79ef\u6ee4\u6ce2\uff0cstride=k\u8868\u793a\u5377\u79ef\u6838\u79fb\u52a8\u8df3\u8fc7\u7684\u6b65\u957f\u662fk</li> </ul> </li> <li>\u7279\u70b9\uff1a<ul> <li>\u9009\u62e9\u6027\u611f\u53d7\u91ce</li> <li>\u5c40\u90e8\u611f\u77e5\uff0c\u53c2\u6570\u5171\u4eab</li> <li>\u4e0b\u91c7\u6837\u7ea6\u51cf\u62bd\u8c61\uff1a\u88ab\u5377\u56fe\u50cf\\(w\\times w\\)\uff0c\u5377\u79ef\u6838\\(F\\times F\\)\uff0c\u586b\u5145\\(P=\\lceil F/2\\rceil\\)\uff0c\u6b65\u957f\\(S\\)\uff0c\u5219\u7ed3\u679c\\(\\dfrac{W-F+2P}{S}+1\\)</li> </ul> </li> </ul> <p>\u5377\u79ef\u6838\u6743\u91cd\\(w_i\\)\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u662f\u901a\u8fc7\u6570\u636e\u9a71\u52a8\u65b9\u6cd5\u5b66\u4e60\u5f97\u5230\u7684</p> <p>\u6c60\u5316\uff1a\u7531\u4e8e\u56fe\u50cf\u4e2d\u5b58\u5728\u8f83\u591a\u5197\u4f59\uff0c\u53ef\u7528\u67d0\u4e00\u533a\u57df\u5b50\u5757\u7684\u7edf\u8ba1\u4fe1\u606f\u6765\u523b\u753b\u8be5\u533a\u57df\u6240\u6709\u50cf\u7d20\u70b9\u5448\u73b0\u7684\u7a7a\u95f4\u5206\u5e03\u6a21\u5f0f\uff0c\u4ee5\u66ff\u4ee3\u533a\u57df\u5b50\u5757\u4e2d\u6240\u6709\u50cf\u7d20\u70b9\u7684\u53d6\u503c\uff08\u4e0b\u91c7\u6837\uff09</p> <ul> <li>\u6700\u5927\u6c60\u5316\uff1a\u4ece\u8f93\u5165\u7279\u5f81\u56fe\u7684\u67d0\u4e2a\u533a\u57df\u5b50\u5757\u4e2d\u9009\u62e9\u503c\u6700\u5927\u7684\u50cf\u7d20\u70b9\u4f5c\u4e3a\u6700\u5927\u6c60\u5316\u7ed3\u679c</li> <li>\u5e73\u5747\u6c60\u5316\uff1a\u8ba1\u7b97\u533a\u57df\u5b50\u5757\u7684\u5e73\u5747\u503c</li> <li>k-max\u6c60\u5316\uff1a\u5bf9\u8f93\u5165\u7279\u5f81\u56fe\u533a\u57df\u5b50\u5757\u4e2d\u7684\u50cf\u7d20\u70b9\u53d6\u524dk\u4e2a\u6700\u5927\u503c</li> </ul> <p>\u5b8c\u6574\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff1a </p>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/","title":"\u5faa\u73af\u795e\u7ecf\u7f51\u7edc","text":"<p>\u5e94\u7528\uff1a\u5904\u7406\u5e8f\u5217\u6570\u636e\uff08\u6587\u672c\u53e5\u5b50\u3001\u89c6\u9891\u5e27\uff09\u65f6\u91c7\u7528\u7684\u7f51\u7edc\u7ed3\u6784</p> <p>\u672c\u8d28\uff1a\u5e0c\u671b\u6a21\u62df\u4eba\u6240\u5177\u6709\u7684\u8bb0\u5fc6\u80fd\u529b\uff0c\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u8bb0\u4f4f\u90e8\u5206\u5df2\u7ecf\u51fa\u73b0\u7684\u4fe1\u606f\uff0c\u5e76\u5229\u7528\u6240\u8bb0\u4f4f\u7684\u4fe1\u606f\u5f71\u54cd\u540e\u7eed\u8282\u70b9\u7684\u8f93\u51fa</p> <p>\u7f51\u7edc\u6a21\u578b\uff1a\u5728\u5904\u7406\u6570\u636e\u8fc7\u7a0b\u4e2d\u6784\u6210\u5faa\u73af\u4f53\uff0c\u5728\\(t\\)\u65f6\u523b\u8bfb\u53d6\u5f53\u524d\u8f93\u5165\u6570\u636e\\(x_i\\)\u548c\u524d\u4e00\u65f6\u523b\u8f93\u5165\u6570\u636e\\(x_{i-1}\\)\u6240\u5bf9\u5e94\u7684\u9690\u5f0f\u7f16\u7801\u7ed3\u679c\\(h_{i-1}\\)\uff0c\u4e00\u8d77\u751f\u6210\\(t\\)\u65f6\u523b\u7684\u7f16\u9690\u5f0f\u7801\u7ed3\u679c\\(h_i\\)</p> <p></p> <ul> <li>\u8868\u793a\uff1a\\(h_i=\\Phi(U\\times x_i+W\\times h_{i-1})\\)</li> <li>\u5c55\u5f00\uff1a\u6309\u7167\u65f6\u95f4\u5c55\u5f00\u5f97\u5230\u4e0e\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u76f8\u4f3c\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u6cbf\u65f6\u95f4\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 $$ h_i=\\Phi(U\\times x_i+W\\times h_{i-1})=\\Phi(U\\times x_i+W\\times\\Phi(U\\times x_{i-1}+W\\times \\Phi(U\\times x_{i-1}+\\cdots))) $$</li> <li>\u95ee\u9898\uff1a\u68af\u5ea6\u6d88\u5931\uff08\u53e0\u52a0\u6fc0\u6d3b\u51fd\u6570\u5bfc\u81f4\u68af\u5ea6\u8d8a\u6765\u8d8a\u5c0f\uff09 $$ \\dfrac{\\partial E_t}{\\partial W_x}=\\sum_{i=1}^t\\dfrac{\\partial E_t}{\\partial O_t}\\dfrac{\\partial O_t}{\\partial h_t}\\left(\\prod_{j=i+1}^t\\dfrac{\\partial h_j}{\\partial h_{j-1}}\\right)\\dfrac{\\partial h_j}{\\partial W_x} $$</li> <li>\u89e3\u51b3\uff1aLSTM</li> </ul> <p>\u957f\u77ed\u65f6\u8bb0\u5fc6\u7f51\u7edc\uff1a</p> <p> </p> <p>\u5bf9\\(c_t=f_t\\odot c_{t-1}+i_t\\cdot \\tanh(W_{xc}x_t+W_{hc}h_{t-1}+b_c)\\)\u6c42\u5bfc\uff0c\u7ed3\u679c\u4e3a \\(\\dfrac{\\partial c_t}{\\partial c_{t-1}}=f_t+\\dfrac{\\partial f_t}{\\partial c_{t-1}}\\times c_{t-1}+\\cdots\\) \u5373\u68af\u5ea6\u4e0d\u4f1a\u6d88\u5931</p>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%A6%82%E8%BF%B0/","title":"\u6982\u8ff0","text":"<p>\u5386\u53f2\uff1a</p> <ul> <li>\u795e\u7ecf\u7f51\u7edc\u57fa\u672c\u5355\u5143\uff1aMCP\u795e\u7ecf\u5143</li> <li>\u795e\u7ecf\u5143\u56e0\u4f55\u94fe\u63a5\uff1a\u8d6b\u5e03\u7406\u8bba</li> <li>\u795e\u7ecf\u5143\u94fe\u63a5\u6210\u201d\u7f51\u201c\uff1a\u611f\u77e5\u673a\u6a21\u578b</li> <li>\u795e\u7ecf\u5143\u4e4b\u95f4\u523a\u6fc0\u53ef\u5c42\u5c42\u9012\u8fdb\u5b66\u4e60\uff1a\u8bef\u5dee\u540e\u5411\u4f20\u64ad</li> <li>\u9010\u5c42\u62bd\u8c61\u3001\u5c42\u5c42\u9012\u8fdb\uff1a\u6df1\u5ea6\u5b66\u4e60</li> <li>\u5f15\u53d1AI\u7b2c\u4e09\u6b21\u5d1b\u8d77\uff1a\u8bed\u8a00\u5927\u6a21\u578b</li> </ul> <p>\u524d\u9988\u795e\u7ecf\u7f51\u7edc\uff1a</p> <ul> <li>\u795e\u7ecf\u5143\uff1aMCP\u6a21\u578b<ul> <li>\u6027\u8d28\uff1a\u5177\u6709\u5174\u594b\u4e0e\u6291\u5236\u4e24\u79cd\u72b6\u6001</li> <li>\u7ed3\u6784\uff1a\\(y=\\Phi(\\sum_{i=1}^nw_ix_i)\\) </li> </ul> </li> <li>\u6982\u5ff5\uff1a\u5168\u8fde\u63a5</li> <li>\u6027\u8d28\uff1a<ul> <li>\u5c42\u5c42\u9012\u8fdb\u3001\u9010\u5c42\u62bd\u8c61</li> <li>\u975e\u7ebf\u6620\u5c04</li> <li>\u8bef\u5dee\u53cd\u9988\u8c03\u4f18</li> </ul> </li> </ul> <p>\u611f\u77e5\u673a\uff1a</p> <ul> <li>\u52a0\u6743\u6c42\u548c\uff0c\u7d2f\u52a0\u504f\u7f6e\uff1a $$ z=w_1x_1+\\cdots+b $$</li> <li>\u4f20\u5165\u6fc0\u6d3b\u51fd\u6570\uff0c\u5f97\u5230\\(\\phi(z)\\)</li> </ul> <p>\u6fc0\u6d3b\u51fd\u6570\uff1a</p> <ul> <li>sigmoid\uff1a\\(f(x)=\\dfrac{1}{1+e^{-x}}\\quad f'(x)=f(x)(1-f(x))\\)<ul> <li>\u95ee\u9898\uff1a\u68af\u5ea6\u8fc7\u5c0f\uff0c\u6df1\u5ea6\u4e0a\u5347\u65f6\u5bfc\u81f4\u68af\u5ea6\u6d88\u5931</li> </ul> </li> <li>tanh\uff1a\\(f(x)=\\dfrac{1-e^{-2x}}{1+e^{-2x}}\\quad f'(x)=1-f(x)^2\\)</li> <li>ReLU\uff1a\\(f(x)=\\left\\{\\begin{array}{ll}0,&amp;x\\leqslant0,\\\\x,&amp;x&gt;0.\\end{array}\\right.\\)</li> <li>softmax\uff1a\\(y_i=\\text{softmax}(x_i)=\\dfrac{e^{x_i}}{\\sum_{j=1}^ke^{x_j}}\\)<ul> <li>\u5e94\u7528\uff1a\u7528\u4e8e\u5206\u7c7b\u95ee\u9898\uff0c\u8f93\u51fa\u503c\u8f6c\u6982\u7387</li> </ul> </li> </ul>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/","title":"\u6ce8\u610f\u529b\u673a\u5236","text":"<p>\u6982\u5ff5\uff1a\u6ce8\u610f\u6307\u610f\u8bc6\u5bf9\u4e00\u5b9a\u4fe1\u606f\u6216\u5bf9\u8c61\u7684\u6307\u5411\u4e0e\u96c6\u4e2d\u7684\u8fc7\u7a0b\uff0c\u5177\u6709\u9009\u62e9\u6027\u548c\u96c6\u4e2d\u6027\u7b49\u7279\u70b9\uff0c\u662f\u4e00\u5207\u5fc3\u7406\u8fc7\u7a0b\u5f97\u4ee5\u4ea7\u751f\u548c\u8fdb\u884c\u7684\u5fc5\u4e0d\u53ef\u5c11\u7684\u5fc3\u7406\u5c5e\u6027</p> <p>\u5206\u7c7b\uff1a</p> <ul> <li>\u81ea\u7136\u8bed\u8a00\uff1a\u53e5\u5b50\u7ea7\u6216\u7bc7\u7ae0\u7ea7\u4e2d\u5355\u8bcd\u548c\u5355\u8bcd\u4e4b\u95f4\u56e0\u4e3a\u4e0a\u4e0b\u6587\u800c\u5171\u540c\u51fa\u73b0\u7684\u6982\u7387</li> <li>\u56fe\u50cf\u5206\u6790\uff1a\u5728\u4e00\u5b9a\u89c6\u89c9\u533a\u57df\u4e2d\u89c6\u89c9\u5b50\u5757\u4e4b\u95f4\u7684\u7a7a\u95f4\u5206\u5e03\u6a21\u5f0f</li> <li>\u673a\u5668\u7ffb\u8bd1\uff1a\u8f93\u5165\u6e90\u8bed\u8a00\u5355\u8bcd\u548c\u8f93\u51fa\u76ee\u6807\u8bed\u8a00\u5355\u8bcd\u4e4b\u95f4\u7684\u5173\u8054</li> </ul> <p>Transformer\u6a21\u578b\uff1a</p> <p> \u5355\u8bcd\u5185\u5d4c\u5411\u91cf\\(w_i\\)</p> <p>\u67e5\u8be2\u5411\u91cf\\(q_i=W^q\\times w_i\\)</p> <p>\u952e\u5411\u91cf\\(k_i=W^k\\times w_i\\)</p> <p>\u503c\u5411\u91cf\\(v_i=W^v\\times w_i\\)</p> <p>\u76ee\u7684\uff1a\u6316\u6398\u5355\u8bcd\\(w_i\\)\u4e0e\u5176\u4ed6\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u56e0\u4e3a\u4e0a\u4e0b\u6587(context)\u5173\u8054\u800c\u5177\u6709\u7684\u81ea\u6ce8\u610f\u529b\u53d6\u503c\u5927\u5c0f</p> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u8ba1\u7b97\\(w_3\\)\u6240\u5bf9\u5e94\u7684\u67e5\u8be2\u5411\u91cf\u4e0e\u5176\u5b83\u5411\u91cf\u952e\u5411\u91cf\u7684\u70b9\u79ef\\(a_{3i}=q_3\\cdot k_i\\)</li> <li>\u5bf9\\(a_3\\)\u901a\u8fc7softmax\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u5f97\u5230\\(a'_{3i}\\)</li> <li>\\(a_{3i}'\\)\u4e58\u4ee5\u6bcf\u4e2a\u5355\u8bcd\\(w_i\\)\u6240\u5bf9\u5e94\u7684\u503c\u5411\u91cf\\(v_i\\)</li> <li>\u5bf93\u6240\u5f97\u7684\u7ed3\u679c\u6c42\u548c</li> </ol> <p>\u591a\u5934\u6ce8\u610f\u529b\uff1a\u4ece\u66f4\u591a\u89d2\u5ea6\u6765\u6316\u6398\u67d0\u4e2a\u5355\u8bcd\u4e0e\u5176\u4ed6\u5355\u8bcd\u4e4b\u95f4\u7684\u6982\u7387\u5173\u8054</p>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/","title":"\u795e\u7ecf\u7f51\u7edc\u53c2\u6570\u4f18\u5316","text":"<p>\u76ee\u7684\uff1a\u4f7f\u5f97\u795e\u7ecf\u7f51\u7edc\u80fd\u591f\u5c06\u7ed9\u5b9a\u8f93\u5165\u6570\u636e\u6620\u5c04\u5230\u6240\u671f\u671b\u7684\u8f93\u51fa\u8bed\u4e49\u7a7a\u95f4\uff0c\u5b8c\u6210\u5206\u7c7b\u8bc6\u522b\u7b49\u4efb\u52a1</p> <p>\u672c\u8d28\uff1a\u795e\u7ecf\u7f51\u7edc\u53c2\u6570\u4f18\u5316\u662f\u4e00\u4e2a\u76d1\u7763\u5b66\u4e60\u7684\u8fc7\u7a0b</p> <p>\u64cd\u4f5c\uff1a\u6a21\u578b\u5229\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u5c06\u635f\u5931\u51fd\u6570\u8ba1\u7b97\u6240\u5f97\u8bef\u5dee\u4ece\u8f93\u51fa\u7aef\u51fa\u53d1\uff0c\u7531\u540e\u5411\u524d\u4f20\u9012\u7ed9\u795e\u7ecf\u7f51\u7edc\u4e2d\u6bcf\u4e2a\u5355\u5143\uff0c\u7136\u540e\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u5bf9\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u53c2\u6570\u8fdb\u884c\u66f4\u65b0\uff1b\u5f53\u8fed\u4ee3\u8fbe\u5230\u4e00\u5b9a\u8f6e\u6b21\u6216\u51c6\u786e\u7387\u8fbe\u5230\u4e00\u5b9a\u6c34\u5e73\u65f6\uff0c\u5219\u53ef\u8ba4\u4e3a\u6a21\u578b\u53c2\u6570\u5df2\u88ab\u4f18\u5316\u5b8c\u6bd5</p> <p>\u635f\u5931\u51fd\u6570\uff1a\u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u503c\u4e0e\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8bef\u5dee</p> <ul> <li>\u5747\u65b9\u8bef\u5dee\u635f\u5931\u51fd\u6570\uff1a\\(\\text{MSE}=\\dfrac{1}{n}\\sum_{i=1}^n(y_i-\\hat y_i)^2\\)</li> <li>\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff1a\\(H(y_i,\\hat y_i)=-y_i\\times\\log_2\\hat y_i\\)</li> </ul> <p>\u68af\u5ea6\u4e0b\u964d\uff1a\u4f7f\u635f\u5931\u51fd\u6570\u6700\u5c0f\u5316\u7684\u65b9\u6cd5</p> <ul> <li>\u68af\u5ea6\uff1a\\(\\dfrac{\\text{d}f(x)}{\\text{d}x}=\\lim\\limits_{h\\to0}\\dfrac{f(x+h)-f(x)}{h}\\quad f(x+\\Delta x)-f(x)\\approx(\\nabla f(x))^\\mathsf T\\Delta x\\)</li> <li>\u64cd\u4f5c\uff1a\\(x\\leftarrow x-\\eta\\nabla f(x)\\)</li> <li>\u65b9\u6cd5\uff1a<ul> <li>\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\uff1a\u5728\u6574\u4e2a\u8bad\u7ec3\u96c6\u4e0a\u8ba1\u7b97\u635f\u5931\u8bef\u5dee\uff08\u6570\u636e\u96c6\u8f83\u5927\u5bfc\u81f4\u5185\u5b58\u4e0d\u8db3\uff09</li> <li>\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff1a\u4f7f\u7528\u6bcf\u4e2a\u6570\u636e\u8ba1\u7b97\u635f\u5931\u8bef\u5dee\uff08\u6ce2\u52a8\u5927\u96be\u6536\u655b\uff1b\u53ef\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\uff09</li> <li>\u5c0f\u6279\u91cf\u68af\u5ea6\u4e0b\u964d</li> </ul> </li> </ul> <p>\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\uff1a\u5229\u7528\u635f\u5931\u51fd\u6570\u6765\u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u4e4b\u95f4\u7684\u8bef\u5dee\u4ee5\u4f18\u5316\u8c03\u6574\u6a21\u578b\u53c2\u6570</p> <p> $$ \\dfrac{\\partial\\mathcal L}{\\partial w_1}=\\dfrac{\\partial\\mathcal L}{\\partial o}\\dfrac{\\partial o}{\\partial x}\\dfrac{\\partial x}{\\partial w_1}\\quad w_1^\\text{new}=w_1-\\eta\\times\\dfrac{\\partial\\mathcal L}{\\partial w_1} $$</p>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%88%99%E5%8C%96/","title":"\u795e\u7ecf\u7f51\u7edc\u6b63\u5219\u5316","text":"<p>\u76ee\u7684\uff1a</p> <ul> <li>\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u590d\u6742\u3001\u53c2\u6570\u4f17\u591a\uff0c\u5f88\u5bb9\u6613\u9020\u6210\u8fc7\u62df\u5408</li> <li>\u4e3a\u4e86\u7f13\u89e3\u795e\u7ecf\u7f51\u7edc\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8fc7\u62df\u5408\u73b0\u8c61\uff0c\u9700\u8981\u91c7\u53d6\u4e00\u4e9b\u6b63\u5219\u5316\u6280\u672f\u6765\u63d0\u5347\u795e\u7ecf\u7f51\u7edc\u7684\u6cdb\u5316\u80fd\u529b</li> </ul>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%88%99%E5%8C%96/#dropout","title":"Dropout","text":"<p>\u6982\u5ff5\uff1a\u5728\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u7684\u8fc7\u7a0b\u4e2d\u968f\u673a\u4e22\u6389\u4e00\u90e8\u5206\u795e\u7ecf\u5143\u6765\u964d\u4f4e\u795e\u7ecf\u7f51\u7edc\u7684\u590d\u6742\u5ea6\uff0c\u4ece\u800c\u9632\u6b62\u8fc7\u62df\u5408</p> <p>\u64cd\u4f5c\uff1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u8bad\u7ec3\u4e2d\uff0c\u4ee5\u4e00\u5b9a\u6982\u7387\u968f\u673a\u5c4f\u853d\u6bcf\u4e00\u5c42\u4e2d\u7684\u82e5\u5e72\u795e\u7ecf\u5143\uff0c\u7528\u4f59\u4e0b\u795e\u7ecf\u5143\u6784\u6210\u7684\u7f51\u7edc\u7ee7\u7eed\u8bad\u7ec3</p> <p></p>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%88%99%E5%8C%96/#_1","title":"\u6279\u5f52\u4e00\u5316","text":"<p>\u95ee\u9898\uff1a\u968f\u7740\u795e\u7ecf\u7f51\u7edc\u6df1\u5ea6\u7684\u589e\u52a0\uff0c\u8f93\u5165\u6570\u636e\u7ecf\u8fc7\u6fc0\u6d3b\u51fd\u6570\u82e5\u5e72\u6b21\u975e\u7ebf\u6027\u53d8\u6362\u540e\uff0c\u5176\u6574\u4f53\u5206\u5e03\u9010\u6e10\u5411\u975e\u7ebf\u6027\u51fd\u6570\u7684\u503c\u57df\u4e0a\u4e0b\u9650\u4e24\u7aef\u504f\u79fb</p> <p>\u4f5c\u7528\uff1a\u901a\u8fc7\u89c4\u8303\u5316\u624b\u6bb5\uff0c\u628a\u795e\u7ecf\u7f51\u7edc\u6bcf\u5c42\u4e2d\u4efb\u610f\u795e\u7ecf\u5143\u7684\u8f93\u5165\u503c\u5206\u5e03\u6539\u53d8\u6210\u5747\u503c\u4e3a0\u3001\u65b9\u5dee\u4e3a1\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u628a\u504f\u79fb\u8f83\u5927\u7684\u5206\u5e03\u5f3a\u5236\u6620\u5c04\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03</p>"},{"location":"course/aid/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%88%99%E5%8C%96/#_2","title":"\u6b63\u5219\u5316","text":"<p>\u635f\u5931\u51fd\u6570 + \u6b63\u5219\u5316\u9879\uff1a</p> \\[ \\min\\dfrac{1}{n}\\sum_{i=1}^n\\text{Loss}(y_o,f(W,x_i))+\\lambda\\times\\Phi(W) \\] <p>\u6b63\u5219\u5316\u9879\\(\\Phi(W)\\)\u7528\u53c2\u6570\\(W\\)\u8303\u6570\u8868\u793a</p> <ul> <li>\\(L_0\\)\u8303\u6570\uff1a\\(\\Vert W\\Vert_0=\\sum \\text{II}[w_i\\not=0]\\)</li> <li>\\(L_1\\)\u8303\u6570\uff1a\\(\\Vert W\\Vert_1=\\sum|w_i|\\)</li> <li>\\(L_2\\)\u8303\u6570\uff1a\\(\\Vert W\\Vert_2=\\sum w_i^2\\)</li> </ul>"},{"location":"course/calculus/","title":"\u6570\u5b66\u5206\u6790 \u7532 (H)","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u5b66\u5206\u6790 \u7532 I/II (H)\u201d \u8bfe\u7a0b\u624b\u5199\u7b14\u8bb0</p> <p>\u4e3b\u8981\u53c2\u8003\u9648\u9526\u8f89\u8001\u5e08\u7684PPT\uff0c\u52a0\u5165\u4e86\u4e00\u4e9b\u81ea\u5df1\u7684\u601d\u8003\u3002</p> <p>\u5e76\u4e0d\u5168\uff0c\u7f3a\u591a\u5143\u51fd\u6570\u79ef\u5206\u5b66\uff0c\u573a\u8bba\u521d\u6b65\uff0c\u542b\u53c2\u79ef\u5206\u3002</p> \u6570\u5b66\u5206\u6790\u7532 H \u7b14\u8bb0 by Jerry 19.0 MB / 325 P / 2023-10-3 <p> \u4e0b\u8f7d</p>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/","title":"\u4e00. Digital Systems and Information","text":"<p>abstraction\uff1a</p> <ol> <li> <p>\u6570\u5b57\u7cfb\u7edf\uff1a\u6570\u5b57\u4fe1\u53f7\uff0c\u5178\u578b\u6570\u5b57\u7cfb\u7edf\u3002 Digital Systems: Digital signal, typical digital systems</p> </li> <li> <p>\u8ba1\u7b97\u673a\u5185\u4fe1\u606f\u8868\u793a\u6cd5 Information Representation</p> </li> <li> <p>\u6570\u5236 Number systems</p> </li> </ol> <ul> <li> <p>\u8fdb\u4f4d\u8ba1\u6570\u5236\u7684\u6982\u5ff5\u548c\u5341\u3001\u4e8c\u3001\u5341\u516d\u3001\u516b\u5236\u6570\u7684\u8868\u793a Positive radix, positional number systems, decimal, binary, octal and hexadecimal</p> </li> <li> <p>\u4e0d\u540c\u8fdb\u4f4d\u6570\u5236\u4e4b\u95f4\u7684\u8f6c\u6362</p> <p>##### Conversion Between Bases</p> </li> </ul> <ol> <li>\u7f16\u7801\u7684\u6982\u5ff5\u53ca\u5e26\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u3002 Representation for unsigned and signed binary numbers</li> </ol> <ul> <li>\u771f\u503c\u3001\u6307\u5b9a\u957f\u5ea6\u7684\u673a\u5668\u6570\uff1a\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801\u3002 Magnitude, Signed-Magnitude, Signed-1\u2019s Complement, Signed-2\u2019s Complement</li> <li>\u5341\u8fdb\u5236\u6570\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\uff1aBCD \u7801 Binary coded decimal (BCD)</li> <li>\u5b57\u7b26\u7f16\u7801\uff1aASCII ASCII Character Codes</li> </ul> <ol> <li>\u5404\u79cd\u4fe1\u606f\u7684\u7f16\u7801 Non-numeric Binary Codes</li> </ol>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#11-digital-systems","title":"1.1 Digital Systems","text":"<p><code>Takes a set of discrete information inputs and discrete internal information(system state) and generates a set of discrete information outputs.</code></p> <p>\u91c7\u7528\u4e00\u7ec4\u79bb\u6563\u4fe1\u606f\u8f93\u5165\u548c\u79bb\u6563\u4fe1\u606f\u5185\u90e8\u4fe1\u606f\uff08\u7cfb\u7edf\u72b6\u6001\uff09\u5e76\u751f\u6210\u4e00\u7ec4\u79bb\u6563\u4fe1\u606f\u8f93\u51fa\u3002</p> <p></p>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#111-types-of-digital-systems","title":"1.1.1 Types of Digital Systems","text":"<ul> <li>no state present: Combinational Logic System.<code>Output = Function(Input)</code></li> <li>state present: Sequential System</li> <li>state updated at discrete time<ul> <li><code>Synchronous Sequential System</code>\u540c\u6b65\u987a\u5e8f\u7cfb\u7edf</li> </ul> </li> <li>state updated at any time<ul> <li><code>Asynchronous Sequential System</code>\u5f02\u6b65\u987a\u5e8f\u7cfb\u7edf</li> </ul> </li> <li><code>state = Function(Input,State)</code></li> <li><code>Output = Function(State) or FUnction(State,Input)</code></li> </ul> <p>\u6ce8\u610f\u70b9\uff1aState \u65e2\u4e0e input \u6709\u5173\uff0c\u8fd8\u4e0eState\uff08\u5148\u524d\uff09\u6709\u5173</p> <p>\u6bcf\u6b21\u7684 state \u53ea\u662f\u4f5c\u4e3a\u4e86 input \u5230 output \u7684\u4e2d\u95f4\u91cf</p> <p></p>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#112-embedded-systems","title":"1.1.2 Embedded Systems \u5d4c\u5165\u5f0f\u7cfb\u7edf","text":"<p><code>analog input\uff1a</code></p> <ul> <li>A-to-D\uff1a\u628a\u6a21\u62df\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6570\u5b57\u4fe1\u53f7\uff08\u5904\u7406\u5668\u4e0d\u80fd\u5904\u7406\u6a21\u62df\u4fe1\u53f7\uff09</li> <li>D-to-A\uff1a\u628a\u5904\u7406\u540e\u7684\u6570\u5b57\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6a21\u62df\u4fe1\u53f7</li> </ul> <p><code>example: \u5bf9\u7a7a\u8c03\u800c\u8a00\uff0cinput\u662f\u6e29\u5ea6\u4f20\u611f\u5668\uff0c\u8f93\u5165\u7684\u662f\u4e00\u4e2a\u7535\u538b\u503c\uff0c\u7a7a\u8c03\u5982\u4f55\u7406\u89e3\u7535\u538b\u7684\u53d8\u5316</code></p> <p></p>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#12-information-representation","title":"1.2 Information Representation","text":"<p>Binary values are represented abstractly by:</p> <ul> <li>digits 0 and 1</li> <li>words(symbols) False(F) and True(T)</li> <li>words(symbols) Low(L) and High(H)</li> <li>and words On and Off</li> </ul> <p></p> <ul> <li>\u6a21\u62df\u4fe1\u53f7\uff1a\u5728\u503c\u548c\u65f6\u95f4\u4e0a\u8fde\u7eed</li> <li>\u5f02\u6b65\uff1a\u5728\u65f6\u95f4\u4e0a\u8fde\u7eed\uff0c\u5728\u503c\u4e0a\u79bb\u6563</li> <li>\u540c\u6b65\uff1a\u5728\u503c\u548c\u65f6\u95f4\u4e0a\u8fde\u7eed</li> </ul>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#13-number-systems-representation","title":"1.3 Number Systems - Representation","text":"\\[ \\begin{aligned} &amp; A \\ number \\ with \\ radix(\u57fa\u6570) \\ is \\ represented \\ by \\ a \\ string \\ of \\ digits: \\\\ &amp; A_{n-1}A_{n-2}\\dots A_{1}A_{0}.A_{-1}A_{-2}\\dots A_{-m}\\\\ &amp; Number = (\\sum_{i = 0}^{i = n-1}A_i \\times r^i)+(\\sum_{j = -m}^{j= -1}A_j \\times r^j)\\\\ \\end{aligned} \\]"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#14-arithmetic-operations","title":"1.4 Arithmetic Operations","text":""},{"location":"course/cldf/Digital%20Systems%20and%20Information/#141-single-bit-binary-substraction-with-carry","title":"1.4.1 Single Bit Binary Substraction with Carry","text":"<p><code>\u6309\u7167\u4e8c\u8fdb\u5236\u8865\u7801\u7406\u89e3\u5373\u53ef\uff0cborrow 1 \u76f8\u5f53\u4e8e-1 \uff0c11\u8868\u793a-1</code></p>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#142-binary-multiplication","title":"1.4.2 Binary Multiplication","text":""},{"location":"course/cldf/Digital%20Systems%20and%20Information/#143-base-conversion","title":"1.4.3  Base Conversion","text":""},{"location":"course/cldf/Digital%20Systems%20and%20Information/#15-binary-coding","title":"1.5 Binary Coding \u4e8c\u8fdb\u5236\u7f16\u7801","text":"<ul> <li>number of bits required</li> </ul>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#151-binary-codes-for-decimal-digits","title":"1.5.1 Binary Codes for Decimal Digits \u5341\u8fdb\u5236\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801","text":"<ul> <li>8421: Binary Code Decimal(BCD \u7801)   \u6bcf\u4e2a\u7801\u90fd\u6709\u4f4d\u6743</li> <li>Excess3(\u4f593\u7801): 8421 + 3 \u5f97\u5230 Excess3 \u7684\u503c.   \u7f16\u7801\u6210\u5bf9\u51fa\u73b0, i \u548c 9 - i \u4e92\u53cd. \u5728\u901a\u4fe1\u65f6\u5f88\u6709\u7528\u5904.</li> <li>84-2-1: \u6709\u6743\u7f16\u7801, \u7c7b\u4f3c 8421 \u7801, \u4e5f\u662f\u6210\u5bf9\u51fa\u73b0.</li> <li>Gray \u683c\u96f7\u7801: \u76f8\u90bb\u4e24\u4e2a\u7801\u4e4b\u95f4\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c.</li> </ul>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#152-binary-coded-decimalbcd","title":"1.5.2 Binary Coded Decimal\uff08BCD\u7801\uff09","text":"<ul> <li>The BCD code is the 8,4,2,1 code</li> <li><code>This code is the simplest, most intuitive binary code for decimal digits and uses the same powers of 2 as a binary number, but only encodes the first ten values from 0 to 9.</code></li> <li>\u6b64\u4ee3\u7801\u662f\u6700\u7b80\u5355\u3001\u6700\u76f4\u89c2\u7684\u5341\u8fdb\u5236\u6570\u5b57\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u4f7f\u7528\u4e0e\u4e8c\u8fdb\u5236\u6570\u76f8\u540c\u7684 2 \u7684\u5e42\uff0c\u4f46\u4ec5\u7f16\u7801\u4ece 0 \u5230 9 \u7684\u524d\u5341\u4e2a\u503c\u3002 </li> </ul> <p>\u4e0d\u8981\u5c06\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff08conversion of  a decimal number to a binary number\uff09\u4e0e\u7528\u4e8c\u8fdb\u5236\u4ee3\u7801\u5bf9\u5341\u8fdb\u5236\u6570\u8fdb\u884c\u7f16\u7801\uff08coding a decimal number with a Binary code\uff09\u76f8\u6df7\u6dc6</p> <ul> <li>\\(13_{10} = 1101_{2}\\) <code>`This is conversion</code></li> <li>\\(13 \\Leftrightarrow 0001 | 0011\\) <code>This is coding</code></li> </ul> <p>$$ (185) {10}  =(0001  1000  0101)  </p> <p>=(10111001)  _2 $$</p> <p></p> <ul> <li>BCD\u7801\u53ef\u4ee5\u8868\u793a0\u52309\u6570\u5b57\uff0c\u4e00\u65e6\u5927\u4e8e9\uff0c\u5c31\u9700\u8981\u5206\u522b\u8868\u793a\u4e24\u4f4d\u6570\u5b57</li> <li>\u53ef\u4ee5\u8ba1\u7b97\uff0c\u4f46\u8981\u4fee\u6b63\u3002\uff08\u8d85\u8fc7 9 \u8981\u52a0 6\uff09</li> </ul>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#153-ascii-character-codes","title":"1.5.3 ASCII Character Codes","text":"<p>\u5e38\u7528\u7684 ASCII Code:</p> <ul> <li><code>0</code> &lt;-&gt; \\(30_{16}\\)</li> <li><code>A</code> &lt;-&gt; \\(41_{16}\\)</li> <li><code>a</code> &lt;-&gt; \\(61_{16}\\)</li> <li>Delete (DEL) is all bits set.</li> </ul>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#154-parity-bit-error-detection-codes","title":"1.5.4 Parity Bit Error-Detection Codes","text":"<p><code>\u5728\u4fe1\u53f7\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u7531\u4e8e\u73af\u5883\u5e72\u6270\u7b49\u539f\u56e0\uff0c\u51fa\u73b0\u5404\u79cd\u4fe1\u53f7\u6296\u52a8\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u53ef\u4fe1\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u9519\u8bef\u68c0\u6d4b\u673a\u5236\u3002</code></p> <ul> <li>Redundancy (e.g. extra information), in the form of extra bits, can be incorporated into binary code words to detect and correct errors.</li> </ul> <p>\u5197\u4f59\uff08\u4f8b\u5982\u989d\u5916\u4fe1\u606f\uff09\u4ee5\u989d\u5916\u4f4d\u7684\u5f62\u5f0f\u53ef\u4ee5\u5408\u5e76\u5230\u4e8c\u8fdb\u5236\u7801\u5b57\u4e2d\u4ee5\u68c0\u6d4b\u548c\u7ea0\u6b63\u9519\u8bef\u3002</p> <ul> <li>A simple form of redundancy is parity, an extra bit appended onto the code word to make the number of 1\u2019s odd or even. Parity can detect all single-bit errors and some multiple-bit errors.</li> </ul> <p>\u5197\u4f59\u7684\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u662f\u5947\u5076\u6821\u9a8c\uff0c\u5373\u5728\u7801\u5b57\u4e0a\u9644\u52a0\u4e00\u4e2a\u989d\u5916\u4f4d\uff0c\u4ee5\u51b3\u5b9a 1 \u7684\u6570\u91cf\u4e3a\u5947\u6570\u6216\u5076\u6570\u3002\u5947\u5076\u6821\u9a8c\u53ef\u4ee5\u68c0\u6d4b\u6240\u6709\u5355\u4f4d\u9519\u8bef\u548c\u4e00\u4e9b\u591a\u4f4d\u9519\u8bef\u3002</p> <ul> <li>A code word has even parity if the number of 1\u2019s in the code word is even.</li> </ul> <p>\u5982\u679c\u7801\u5b57\u4e2d 1 \u7684\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u5219\u8be5\u7801\u5b57\u5177\u6709\u5076\u5947\u5076\u6821\u9a8c\u3002</p> <ul> <li>A code word has odd parity if the number of 1\u2019s in the code word is odd.</li> </ul> <p>\u5982\u679c\u7801\u5b57\u4e2d 1 \u7684\u6570\u91cf\u662f\u5947\u6570\uff0c\u5219\u8be5\u7801\u5b57\u5177\u6709\u5947\u5947\u5076\u6821\u9a8c\u3002</p> <p><code>The codeword \"1111\" has even parity and the codeword \"1110\" has odd parity.</code></p>"},{"location":"course/cldf/Digital%20Systems%20and%20Information/#16-gray-code","title":"1.6  Gray Code\u683c\u96f7\u7801","text":"<p><code>Gray \uff1a \u76f8\u90bb\u4e24\u4f4d\u53d8\u5316\u7684\u4ec5\u67091bit</code></p> <ul> <li>\u7f16\u7801\u5668\u76d8\u5305\u542b\u4e0d\u900f\u660e\u533a\u57df\u548c\u900f\u660e\u533a\u57df\u3002</li> <li>Opaque\u8868\u793a0 ,clear\u8868\u793a1\u3002\u5149\u901a\u8fc7\u7f16\u7801\u5668\u7684\u6bcf\u4e00\u4e2a\u73af\uff0c\u4e0e\u7f16\u7801\u7684\u4e00\u4e2a\u4f4d\u76f8\u5bf9\u5e94\uff0c\u7167\u5c04\u5728\u4f20\u611f\u5668\u4e0a\uff0c\u4ea7\u751f\u4e00\u4e2a0\u62161</li> </ul> <p></p> <ul> <li>\u65cb\u8f6c\u7f16\u7801\u5668, \u6d4b\u91cf\u8f6c\u8f74\u8f6c\u5411\u7684\u89d2\u5ea6.</li> <li>\u4e09\u4e2a\u4f20\u611f\u5668\u4e0d\u4f1a\u5728\u540c\u4e00\u6761\u76f4\u7ebf(\u5b89\u88c5\u8bef\u5dee), \u5b58\u5728\u4e2d\u95f4\u72b6\u51b5.</li> <li>\u4f46\u683c\u96f7\u7f16\u7801\u76d8, \u76f8\u90bb\u7f16\u7801\u53ea\u5dee\u4e00\u4f4d, \u5bf9\u7ed3\u679c\u4e0d\u4f1a\u5e26\u6765\u5f71\u54cd.</li> <li></li> </ul> <p><code>\u5982\u56fe\uff0c\u6709\u4e09\u4e2a\u4f20\u611f\u5668\u3002\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u4e2d\u95f4\u4f1a\u51fa\u73b0100-&gt;110-&gt;111\u7684\u4e2d\u95f4\u72b6\u6001\u3002\u800c\u5bf9\u4e8eGray\u7f16\u7801\uff0c\u4efb\u4f55\u65f6\u5019\u90fd\u53ea\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u4fe1\u53f7\u3002</code></p> <p>\u56e0\u4e3a\uff0cGray\u7f16\u7801\u76f8\u90bb\u53d8\u5316\u7684\u53ea\u67091bit\uff0c\u8bf4\u660e\u4e2d\u95f4\u7684\u53d8\u5316\u8fc7\u7a0b\u5df2\u7ecf\u786e\u5b9a\uff0c\u4ec5\u67091bit\u53d1\u751f\u6539\u53d8\u3002</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Additional%20Gates%20and%20Circuits/","title":"Integrated Circuits","text":"<p>\u6982\u5ff5\uff1aIntegrated circuit (informally, a \u201cchip\u201d) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip.</p> <p>\u5206\u7c7b\uff1a</p> <ul> <li>SSI (small-scale integrated) - fewer than 10 gates</li> <li>MSI (medium-scale integrated) - 10 to 100 gates</li> <li>LSI (large-scale  integrated) - 100 to  thousands of gates</li> <li>VLSI (very large-scale integrated) - thousands to 100s of millions of gates</li> </ul> <p>\u751f\u4ea7\u6d41\u7a0b\uff1a</p> <p></p> <p>\u57fa\u672c\u53c2\u6570\uff1a</p> <ol> <li>\u6247\u5165\u7cfb\u6570\uff1a\u95e8\u9a71\u52a8\u529b\u5927\u5c0f\uff0c\u5373\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u6570\u91cf</li> <li>\u6247\u51fa\u7cfb\u6570\uff1a\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u80fd\u5e26\u52a8\u591a\u5c11\u95e8\u7684\u8f93\u5165</li> <li>\u903b\u8f91\u7535\u5e73\uff1a</li> <li>\u566a\u58f0\u5bb9\u9650\uff1a</li> <li>\u4f20\u8f93\u5ef6\u8fdf\uff1a\u8f93\u5165\u6539\u53d8\u5230\u8f93\u51fa\u6539\u53d8\u6240\u9700\u7684\u65f6\u95f4<ul> <li>\u8861\u91cf\uff1a\u53d8\u5316\u81f3H,L\u95f450%\u7684\u8f93\u5165\u8f93\u51fa\u65f6\u523b\u7684\u8ddd\u79bb</li> <li>\\(t_{PHL}\\)\uff1a\u8f93\u51fa\\(H\\to L\\)\uff0c\\(t_{PLH}\\)\uff1a\u8f93\u51fa\\(L\\to H\\) </li> <li>\\(t_{pd}:=\\max\\set{t_{PHL},t_{PLH}}\\) or \\(t_{pd}:=\\dfrac{t_{PHL}+t_{PLH}}{2}\\)</li> <li>\u6a21\u578b\uff1a<ul> <li>\u4f20\u8f93\u5ef6\u8fdf\uff1aa change in the output in response to a change on the inputs occurs after a fixed specified delay</li> <li>\u60ef\u6027\u5ef6\u8fdf\uff1arejects narrow \u201cpulses\u201d on the outputs (a time interval less than the  rejection time)</li> </ul> </li> <li>\u7ade\u4e89\u5192\u9669\uff1a\u7531\u4e8e\u4f20\u8f93\u5ef6\u8fdf\u9020\u6210\u7684\u5f62\u5982\\(^{^{^{\\_\\_}}}\\!\\vert\\!_{\\_\\_}\\!\\vert\\!^{^{^{\\_\\_}}}\\)\u7684\u8df3\u53d8\uff08\u7531\u4e8e\u60ef\u6027\u5ef6\u8fdf\u7684\u5b58\u5728\uff0c\u5b9e\u9645\u4e0d\u4f1a\u51fa\u73b0\uff09     </li> <li>\u6247\u51fa\u8d1f\u8f7d\u5bf9\u4f20\u8f93\u5ef6\u8fdf\u5177\u6709\u5f71\u54cd\uff1a\u5982\\(t_{pd}=0.07+0.021SL\\)</li> </ul> </li> </ol>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Additional%20Gates%20and%20Circuits/#other-gate-types","title":"Other Gate Types","text":"<p>Buffer\u95e8\uff1a</p> <ul> <li>\u5b9a\u4e49\uff1a\\(F=X\\)</li> <li>\u4f5c\u7528\uff1a\u4fe1\u53f7\u653e\u5927\u5668\uff0c\u63d0\u9ad8\u6247\u51fa\u80fd\u529b\u4e0e\u64cd\u4f5c\u901f\u5ea6</li> </ul> <p>NAND\u95e8\uff1a</p> <ul> <li>\u5b9a\u4e49\uff1a\\(F(X,Y,Z)=\\overline{XYZ}\\)</li> <li>\u6027\u8d28\uff1a\\(\\overline{XYZ}=\\overline{X}+\\overline{Y}+\\overline{Z}\\)\uff0cAND-Invert and Invert-OR both represent the NAND gate</li> <li>\u4f5c\u7528\uff1a\u901a\u7528\u903b\u8f91\u95e8\uff0c\u53ef\u5b9e\u73b0\u4efb\u610f\u7535\u8def <p>NAND\u65e0\u7ed3\u5408\u5f8b\uff0c\u8fd0\u7b97\u590d\u6742\uff0c\u4e00\u822c\u5148\u8bbe\u8ba1\u666e\u901a\u95e8\u7535\u8def\u518d\u6620\u5c04\u81f3NAND\u7528\u4e8e\u751f\u4ea7</p> </li> </ul> <p>NOR\u95e8\uff1a</p> <ul> <li>\u5b9a\u4e49\uff1a\\(F(X,Y,Z)=\\overline{X+Y+Z}\\) <p>NOR\u95e8\u5373\u4e3aNAND\u95e8\u5bf9\u5076\u95e8</p> </li> </ul> <p>\u5f02\u6216 / \u540c\u6216\u95e8\uff1a</p> <ul> <li>\u5b9a\u4e49\uff1a\\(X\\oplus Y=X\\overline{Y}+\\overline{X}Y,\\overline{X\\oplus Y}=XY+\\overline{X}\\overline{Y}\\)</li> </ul> X Y X\\(\\oplus\\)Y 0 0 0 0 1 1 1 0 1 1 1 0 X Y Z = \\(\\overline{X\\oplus Y}\\) 0 0 1 0 1 0 1 0 0 1 1 1 <ul> <li>\u6027\u8d28\uff1a\\(X\\oplus Y\\oplus Z=\\overline{X}\\overline{Y}Z+\\overline{X}Y\\overline{Z}+X\\overline{Y}\\overline{Z}+XYZ\\)</li> <li>\u6052\u7b49\u5f0f\uff1a<ul> <li>\\(X\\oplus0=X\\qquad X\\oplus1=\\overline{X}\\)\uff1a\u5229\u7528\u8be5\u539f\u7406\u63a7\u5236\u662f\u5426\u4e3a\u975e\u95e8</li> <li>\\(X\\oplus X=0\\qquad X\\oplus\\overline{X}=1\\)</li> <li>\\(X\\oplus Y=Y\\oplus X\\qquad (X\\oplus Y)\\oplus Z=X\\oplus(Y\\oplus Z)=X\\oplus Y\\oplus Z\\)</li> <li>\\(X\\oplus\\overline{Y}=\\overline{X\\oplus Y}\\)</li> </ul> </li> </ul> <p>\u5947\u5076\u51fd\u6570\uff1a</p> <ul> <li>\u5b9a\u4e49\uff1aThe 1s of an odd function correspond to minterms having an index with an odd number of 1s.\uff08\u5361\u8bfa\u56fe\u4ea4\u9519\u6392\u5e03\uff09</li> <li>\u5b9e\u73b0\uff1a\u5f02\u6216\u95e8 \\(F=X\\oplus Y\\oplus Z=(X\\oplus Y)\\oplus Z\\)</li> <li>\u5e94\u7528\uff1a\u751f\u6210\u7ea0\u9519\u7801\uff08\u7ea0\u9519\u7801\u4e0e\u539f\u78011\u603b\u548c\u4e2a\u6570\u5947\u5076\u6027\u786e\u5b9a\uff0c\u6545\u5e26\u5165\u5947\u51fd\u6570\u8f93\u51fa\u786e\u5b9a\uff09</li> </ul> <p>\u9ad8\u963b\u6001\uff1a</p> <ul> <li>\u4e09\u6001\u95e8\uff1a0, 1, \u9ad8\u963b\uff08Hi-Z\uff09     </li> <li>\u539f\u7406\uff1a\u672a\u63a5\u5165\u7535\u8def\uff08\u63a5\u9ad8\u4f4e\u7535\u5e73\u7684CMOS\u5747\u65ad\u5f00\uff09</li> <li>\u4f5c\u7528\uff1a\u53ef\u4e32\u8054\u8f93\u51fa\uff08\u603b\u7ebf\u4e0a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u95e8\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5176\u4f59\u5904\u4e8e\u9ad8\u963b\u6001\u4ee5\u4fdd\u62a4\u7535\u8def\uff09     </li> <li>\u5e94\u7528\uff1a\u591a\u8def\u9009\u62e9\u5668 \u63a7\u5236\u4f7f\u80fd\u63a7\u5236\u9009\u62e9</li> </ul> <p>AOI\u7535\u8def\uff1a</p> <ul> <li>\u8bb0\u6cd5\uff1a\u8f93\u5165\u4e2a\u6570-\u95e8\u4e2a\u6570-...-</li> <li>\u4f8b\uff1a2-2-1AO \u4e24\u8f93\u51652\u4e0e\u95e81\u6216\u95e8\u7535\u8def</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Canonical%20Forms/","title":"Canonical Forms","text":""},{"location":"course/cldf/Combinational%20Logic%20Circuits/Canonical%20Forms/#22-canonical-forms","title":"2.2 Canonical Forms \u6807\u51c6\u5f62\u5f0f","text":"<p>Canonical Forms in common usage:</p> <p>\u2022Sum of Minterms (SOM)</p> <p>\u2022Product of Maxterms (POM)</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Canonical%20Forms/#221-minterm-and-maxterm","title":"2.2.1 Minterm and Maxterm","text":"<ul> <li><code>Minterms are AND terms with every variable present in either true or co/mplemented form.</code></li> </ul> <p>\u6240\u6709\u7684\u53d8\u91cf\u90fd\u9700\u8981\u51fa\u73b0\u5728Minterm\uff0c\u5e76\u4e14\u53d8\u91cf\u4e4b\u95f4\u7528AND\u8fde\u63a5\uff0c\u53d8\u91cf\u7684\u6392\u5217\u987a\u5e8f\u9700\u56fa\u5b9a\uff08\u6309\u7167\u5b57\u6bcd\u8868\u987a\u5e8f\uff09</p> <ul> <li>Given that each binary variable may appear normal (e.g., x) or complemented (e.g., ), there are \\(2^n\\) minterms for n variables.</li> </ul> <p>\u6700\u5c0f\u9879\u4e00\u5171\u6709\\(2^n\\)\u79cd</p> <ul> <li> <p><code>Maxterms are OR terms with every variable in true or complemented form.</code></p> </li> <li> <p>Given that each binary variable may appear normal (e.g., x) or complemented (e.g., x), there are \\(2^n\\) maxterms for nvariables.</p> </li> </ul> <p></p> <p></p> <p><code>index\u5148\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0cindex\u5bf9\u5e94\u7684\u503c\uff0c\u4f7fMinterm\u4e3a1\uff0cMaxterm\u4e3a0</code></p> <p>The index is important for describing which variables in the terms are true and which are complemented.</p> <p>index \u5c31\u662f\u5bf9\u5e94\u4f7f\u5f97 minterm = 1 \u7684\u552f\u4e00\u7684\u53d6\u503c. </p> <p>e.g. index = 1 means only when x = 0, y = 1 then \\(\\bar xy\\)=1</p> <p>maxterm \u4e0e minterm   \u4e92\u4e3a\u53cd\u51fd\u6570(\u5e38\u6570\u98791\u53d8\u4e3a0\uff0c0\u53d8\u4e3a1), \u6240\u4ee5 index \u662f\u4f7f\u5f97 maxterm = 0 \u7684\u552f\u4e00\u7684\u53d6\u503c.</p> <p>\u5982 index = 1, \u5219 minterm \u91cc\u5bf9\u5e94\u7684\u5b57\u6bcd\u5e94\u4e3a\u539f\u53d8\u91cf, maxterm \u91cc\u7684\u5b57\u6bcd\u5e94\u4e3a\u53cd\u53d8\u91cf.</p> <p>Note that the Standard Order of variables: usually alphabetically.\uff08\u6807\u51c6\u987a\u5e8f\uff0c\u4e5f\u5c31\u662f\u6309\u7167\u5b57\u6bcd\u8868\u987a\u5e8f\uff09</p> <p>The index for the minterm or maxterm, expressed as a binary number, is used to determine whether the variable is shown in the true form or complemented form.</p> <ul> <li>For Minterms:</li> <li>\u201c1\u201d means the variable is \u201cNot Complemented\u201d and</li> <li>\u201c0\u201d means the variable is \u201cComplemented\u201d.</li> <li>For Maxterms:</li> <li>\u201c0\u201d means the variable is \u201cNot Complemented\u201d and</li> <li>\u201c1\u201d means the variable is \u201cComplemented\u201d.</li> </ul> \\[ \\begin{aligned} &amp;Minterm 0, called \\ m_0 \\ is \\ \\bar X \\bar Y \\bar Z\\\\ &amp;Maxterm 0, called \\ M_0 \\ is \\ (X + Y + Z)\\\\ &amp;Minterm 6, called \\ m_6 \\ is \\ XY\\bar Z\\\\ &amp;Maxterm 6, called \\ M_6 \\ is \\ (\\bar X + \\bar Y + Z)\\\\ \\end{aligned} \\] <p><code>$ m_i = \\overline{M_i}$</code></p> <p>$ m_i = \\overline{M_i}$</p> <p>\u6bcf\u4e00\u4e2a\u6700\u5927\u9879\uff0c\u662f\u4e0e\u4e4b\u7d22\u5f15\u76f8\u540c\u7684\u6700\u5c0f\u9879 \u7684\u53cd\u51fd\u6570</p> \\[ \u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u5bb9\u6613\u5f97\u5230\\\\ F = \\sum m_i = \\overline{\\prod M_i}, i = 0,1,2,3,\\cdots \\] <ul> <li><code>We can implement any function by \"ORing\" the minterms corresponding to \"1\" entries in the function table. These are called the **minterms of the function**.</code></li> </ul> <p>\u5bf9\u4e8e\u4efb\u610f\u51fd\u6570\uff0c\u90fd\u53ef\u4ee5 sum of minterms \u8868\u793a\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u5f0f\u7684\u6216\uff0c\u5c06\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u903b\u8f911\u5217\u51fa\uff0c\u53ea\u8981\u6709\u5176\u4e00\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f1</p> <ul> <li><code>\u5229\u7528\u7684\u662f OR\u8fd0\u7b97\u4e2d\uff0c1\u7684\u4e3b\u5bfc\u6027</code></li> </ul> <p></p> <p>\\(F_1 = m_1 + m_4 + m_7 = \\sum m(1,4,7) = \\sum(1,4,7)\\)</p> <ul> <li><code>We can implement any function by \"ANDing\" the maxterms corresponding to \"0\" entries in the function table. These are called the **maxterms of the function**.</code></li> <li>\u540c\u7406\u4efb\u610f\u51fd\u6570\uff0c\u90fd\u53ef\u4ee5\u7528 product of maxterms \u8868\u793a\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u5f0f\u7684AND\uff0c\u5c06\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u903b\u8f910\u5217\u51fa\uff0c\u53ea\u6709\u6709\u5176\u4e00\uff08\u5373\u67d0\u4e00\u4e2amaxterm = 0\uff09\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u4e3a0</li> <li><code>\u5229\u7528\u7684\u662f AND\u8fd0\u7b97\u4e0b\uff0c0\u7684\u4e3b\u5bfc\u6027</code></li> </ul> <p></p> <p>\\(F_1 = M_0 \\cdot M_2 \\cdot M_3 \\cdot M_5 \\cdot M_6 = \\prod M(0,2,3,5,7) = \\prod(0,2,3,5,7)\\)</p> <p>Canonical Sum of Minterms</p> <p>Boolean function -&gt; Sum of Minterms: expand all terms first to explicitly list all minterms. Do this by \"ANDing\" any term missing a variable v with a term (\\(A + \\bar A\\)).</p> <p>\u5982\u4f55\u83b7\u5f97sum of Minterms\u5462\uff1f\u53ea\u9700\u5c06\u6bcf\u4e00\u9879\u90fd\u8fdb\u884c\u6269\u5145\uff0c\u6269\u5145\u65b9\u6cd5\u4e3a\uff0c\u4e58\u4ee5\uff08A + \\(\\bar A\\)\uff09 $$ \\begin{aligned} F &amp;= A + \\bar BC \\ &amp;= A(B + \\bar B)(C + \\bar C) + (A + \\bar A) \\bar BC \\ &amp;= ABC + AB\\bar C + A\\bar B C+ A\\bar B \\bar C + A\\bar BC + \\bar A\\bar BC \\ &amp;= m_7 + m_6 + m_5 + m_4 + m_1 \\ &amp;= m_1 + m_4 + m_5 + m_6 + m_7 \\ \\end{aligned} $$</p> <p>Canonical Product of Maxterms</p> <p>The method for Maxterms is similar, just \"ORing\" terms missing variables A with a term equal \\(A \\cdot \\bar A\\)then applying the distributive law.</p> <p>\u5982\u4f55\u5f97\u5230 product of Maxterms \u5462\uff1f \u8fd0\u7528A + BC = \uff08A+B\uff09\uff08A+C\uff09\uff0c\u5982\u6b64\u4fbf\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e58\u7684\u5f62\u5f0f $$ \\begin{aligned} f(A,B,C) &amp;= A\\bar C + BC + \\bar A \\bar B\\ use x + yz &amp;= (x + y)(x + z),\u5c06 x \u770b\u4f5c (A \\bar C + BC), y\u770b\u4f5c \\bar A, z\u770b\u4f5c \\bar B\\ f(A,B,C) &amp;= (A\\bar C + BC + \\bar A)(A\\bar C + BC + \\bar B)\\ &amp;= (\\bar A + \\bar C + BC)(A\\bar C + C + \\bar B)\\ &amp;= (\\bar A + B + \\bar C)(A + \\bar B + C)\\ &amp;= M_5 \\cdot M_2 \\end{aligned} $$</p> <p>Function Complements \u53cd\u51fd\u6570</p> <p>The complement of a function expressed as a sum of minterms is constructed by selecting the minterms missing in the sum-of-minterms canonical forms.</p> <p>\u6c42\u51fd\u6570\u7684\u53cd\u51fd\u6570, \u53ea\u9700\u8981\u6240\u6709minterms \u53bb\u6389\u539f\u51fd\u6570\u4e2d\u5b58\u5728\u7684 minterms \u5373\u53ef. $$ F(x,y,z) = \\sum m(1,3,5,7)\\ \\bar F(x,y,z) = \\sum m(0,2,4,6) \\ \\bar F(x,y,z) = \\bar m_1 \\cdot \\bar m_3 \\cdot \\bar m_5 \\cdot \\bar m_7 = M_1 \\cdot M_3 \\cdot M_5 \\cdot M_7 = \\prod M(1,3,5,7) $$ Conversion between Forms</p> <p>Idea: \\(F = \\sum m_i\\) while \\(\\bar F = \\sum M_i\\) Maxterms \u7684\u6c42\u6cd5\u4e0d\u662f\u5f88\u81ea\u7136, \u4e00\u822c\u5148\u6c42\u53cd\u51fd\u6570\u7684 Minterms \u518d\u5c06\u4ed6\u4eec\u53d6\u53cd\u8f6c\u4e3a Minterms.</p> <ul> <li>Find the function complement by swapping terms in the list with terms not in the list.</li> <li>Change from products to sums, or vice versa.</li> </ul> <p>\u5982\u4e0a\u6587\u7684\u4f8b\u5b50\u4e2d \\(F(x,y,z) = \\sum m(1,3,5,7), \\bar F = \\sum m(0,2,4,6)\u3002F= \\prod M(0,2,4,6)\\)</p> <p>Standard Forms</p> <ul> <li>Standard Sum-of-Products (SOP) form: equations are written as an OR of AND terms.</li> </ul> <p>\u6790\u53d6\u8303\u5f0f</p> <ul> <li>Standard Product-of-Sums (POS) form: equations are written as an AND of OR terms</li> </ul> <p>\u5408\u53d6\u8303\u5f0f</p> <p>SOP and POS are two-level network of gates.</p> <p>\u5982 SOP: \\(ABD + \\bar A\\bar BC + B\\), POS: \\((A + B)\\cdot (A + \\bar B + \\bar C) \\cdot C\\)\u4ed6\u4eec\u8def\u5f84\u4e0a\u6700\u591a\u53ea\u9700\u8981\u7ecf\u8fc7\u4e24\u4e2a\u7535\u8def\u95e8, \u8fd9\u79f0\u4e3a\u4e8c\u7ea7\u7535\u8def. \u53cd\u89c2 \\((AB + C)(A+C),AB\\bar C +AC(A+B)\\) \u6700\u591a\u5c31\u9700\u8981\u7ecf\u8fc7\u4e09\u4e2a\u7535\u8def\u95e8.</p> <ul> <li>\u4e3a\u4ec0\u4e48\u9700\u8981\u964d\u4f4e\u7535\u8def\u95e8\u7684\u7ea7\u6570?   \u7535\u8def\u95e8\u6709\u5ef6\u8fdf, \u7ecf\u8fc7\u7684\u7535\u8def\u95e8\u8d8a\u591a\u5ef6\u8fdf\u8d8a\u5927, \u610f\u5473\u7740\u6700\u540e\u7535\u8def\u505a\u51fa\u6765\u7684\u8ba1\u7b97\u673a\u4e0d\u6613\u63d0\u9ad8\u529f\u7387.</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/","title":"Circuit Optimization","text":""},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#23-circuit-optimization","title":"2.3 Circuit Optimization \u7535\u8def\u4f18\u5316","text":"<p>\u76ee\u6807\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u51fd\u6570\uff0c\u83b7\u5f97\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f</p> <p>Distinct cost criteria we will use:\uff08\u5224\u65ad\u6807\u51c6\uff09</p> <ul> <li>Literal cost (L)\u6587\u5b57\u6210\u672c </li> <li>Gate input cost (G) \u95e8\u8f93\u5165\u6210\u672c</li> <li>Gate input cost with NOTs (GN) \u5e26NOT\u7684\u95e8\u8f93\u5165\u6210\u672c</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#231-literal-costl","title":"2.3.1 Literal Cost\uff08L\uff09","text":"<p>literal is a variable or its complement  \u5b57\u9762\u91cf\u2014\u2014\u53d8\u91cf\u6216\u8005\u5b83\u7684\u8865\u96c6</p> <p>literal cost is the number of literal appearances in a Boolean expression corresponding to the logic circuit diagram.</p> <p><code>\u6570\u4e00\u6570\uff0c\u5e03\u5c14\u8868\u8fbe\u5f0f\u4e2d\u7684\u53d8\u91cf\u6570\u5373\u53ef\uff08\u53ef\u91cd\u590d\u8ba1\u7b97\uff09</code></p> <ul> <li>\\(F = BD + A\\bar BC + A\\bar C \\bar D\\)</li> </ul> <p>L = 8</p> <ul> <li>\\(F = BD + A\\bar B C + A\\bar B \\bar D + ABC\\)</li> </ul> <p>L = 11</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#232-gate-input-costg","title":"2.3.2 Gate Input Cost\uff08G\uff09","text":"<p>Gate input costs is the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. (G - inverters not counted, GN - inverters counted)</p> <p>\u4e0e\u7ed9\u5b9a\u65b9\u7a0b\u5b8c\u5168\u5bf9\u5e94\u7684\u7535\u8def\u5b9e\u73b0\u4e2d\uff0c\u95e8\u7684\u8f93\u5165\u6570\u91cf</p> <p><code>\u5728L\u7684\u57fa\u7840\u4e0a\uff0c\u5728\u52a0\u4e0a\u9879\u7684\u6570\u91cf\uff08\u4f46\u662f\u4e0d\u5305\u62ec\u5355\u53d8\u91cf\u9879\uff0c\u5426\u5219\u4f1a\u4e0eL\u91cd\u590d\u8ba1\u7b97\uff09</code></p> <p>\u4ec0\u4e48\u662f\u9879\uff1a\u5f62\u5982A AND B / A OR B\u7684\u5f0f\u5b50\uff0cA\uff0cB\u79f0\u4e4b\u4e3a\u9879</p> <ul> <li>all literal appearances(L)</li> <li>the number of terms excluding single literal terms, (G).   e.g. for A+BC its L=3 while G=1</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#233-gate-input-cost-with-nots-gn","title":"2.3.3 Gate input cost with NOTs (GN)","text":"<p><code>\u5728G\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u4e0a\u975e\u95e8\u7684\u6570\u91cf(\u6839\u636e\u53d8\u91cf\u6765\uff0c\u4e0d\u91cd\u590d\u8ba1\u7b97\u76f8\u540c\u53d8\u91cf\u7684\u975e\u95e8)</code></p> <ul> <li>\\(F = BD + A\\bar BC + A\\bar C \\bar D\\)</li> </ul> <p>L = 8 ,   G= 8 + 3 =11 ,    GN = 11 + 3 = 14</p> <ul> <li>\\(F = BD + A\\bar B C + A\\bar B \\bar D + ABC\\)</li> </ul> <p>L = 11   G = 11 + 4 = 15 ,    GN = 15 + 2 = 17\uff08\u4ec5\u8ba1\u7b97BD\u7684\u975e\u95e8\uff09</p> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#234-map-manipulation","title":"2.3.4 Map Manipulation","text":""},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2341-karnaugh-mapsk-map","title":"2.3.4.1 Karnaugh maps(K-map) \u5361\u8bfa\u56fe","text":"<p>The K-map can be viewed as</p> <ul> <li>A reorganized version of the truth table \u771f\u503c\u8868\u7684\u91cd\u7ec4\u7248\u672c</li> <li>A topologically-warped Venn diagram as used to visualize sets in algebra of sets \u7528\u4e8e\u53ef\u89c6\u5316\u96c6\u5408\u4ee3\u6570\u4e2d\u7684\u96c6\u5408\u7684\u62d3\u6251\u626d\u66f2\u7ef4\u6069\u56fe\u3002</li> </ul> <p>\u7b80\u5355\u6765\u8bf4\uff0cK-map\u662f\u5c0f\u65b9\u5757\u7684\u96c6\u5408\uff0c\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u4ee3\u8868\u4e00\u4e2a\u6700\u5c0f\u9879\uff0c\u76f8\u90bb\u7684\u65b9\u5757\u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\u4e0d\u540c</p> <p><code>`Adjacent squares differ in the value of one variable</code></p> <p></p> <ul> <li>m0 \u548c m1 \u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e \u53d8\u91cfy</li> <li>m0 \u548c m2 \u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e \u53d8\u91cfx</li> </ul> <p></p> <p></p> <p>\u6ce8\u610f\u5217, **<code>`\u8981\u6309\u7167Gray codes\u7684\u987a\u5e8f\u6392\u5217, \u5373\u76f8\u90bb\u4e24\u5217\u53ea\u76f8\u5dee\u4e00\u4f4d.** \u56e0\u6b64\u5217\u6807\u53f7\u4e3a 00 01 11 10</code>.</p> <p>\u76f8\u90bb\u4e24\u4e2a\u5c0f\u65b9\u683c\u90fd\u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\u4e0d\u540c.</p> <p>\u53ef\u4ee5\u5377\u8d77\u6765, \u5373\u6700\u5de6\u8fb9\u4e00\u5217\u548c\u6700\u53f3\u8fb9\u4e00\u5217,(\u8fd9\u4e24\u5217\u4e5f\u662f\u76f8\u90bb)</p> <p></p> <p>Alternative Map Labeling</p> <p></p> <p>Combining Squares</p> <p>\u53ef\u4ee5\u753b 2^n^ \u5927\u5c0f\u7684\u65b9\u5f62\u683c(\u5373\u4e00\u6b21\u8981\u5305\u62ec 2^n^ \u4e2a\u5c0f\u65b9\u683c) For 3-variable K-Map:</p> <ul> <li>One square represents a minterm with three variables</li> <li>Two adjacent squares represent a product term with two variables</li> <li>Four \u201cadjacent\u201d terms represent a product term with one variable</li> <li>Eight \u201cadjacent\u201d terms is the function of all ones (no variables) = 1.</li> </ul> <p></p> <p>\u5316\u7b80\u601d\u8def: \u7528\u6700\u5927\u7684\u6700\u5c11\u7684\u5708\u628a\u6240\u6709\u7684 1 \u5708\u5b8c.(\u5708\u4e0e\u5708\u4e4b\u95f4\u53ef\u4ee5\u6709\u4ea4\u53c9)</p> <p></p> <p></p> <p>\u6ce8\u610f\u56db\u4e2a\u89d2\u4e5f\u53ef\u4ee5\u5377(0 2 8 10 -&gt; \\(\\overline{XZ}\\))</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2342-dont-cares-in-k-maps","title":"2.3.4.2 Don\u2019t Cares(\u65e0\u5173\u9879) in K-Maps","text":"<p>By placing \u201cdon't cares\u201d (an \u201cx\u201d entry) in the function table or map, the cost of the logic circuit may be lowered. \u5982\u6211\u4eec\u628a BCD \u7801\u4f5c\u4e3a\u8f93\u5165, \u6709\u6548\u6570\u5b57 0 - 9, \u5982\u679c\u90a3\u4e48 9 \u4ee5\u4e0a\u7684\u8f93\u5165\u7ec4\u5408\u6211\u4eec\u4e0d\u5728\u4e4e\u8f93\u51fa\u7ed3\u679c, \u79f0\u4e3a\u65e0\u5173\u9879, \u5728\u5361\u8bfa\u56fe\u4e0a\u753b x.</p> <p></p> <p>\u7528 \\(d\uff08\\cdots\uff09\\) \u8868\u793a\u65e0\u5173\u9879\uff0c\u65e0\u5173\u9879\u7684\u503c\u65e2\u53ef\u4ee5\u662f0\uff0c\u4e5f\u53ef\u4ee5\u662f1\uff0c\u6839\u636e\u9898\u76ee\u800c\u5b9a</p> <p>Find the optimum POS solution: </p> <p>\\(F(A,B,C,D) = \\sum m(3,9,11,12,13,14,15) + \\sum d(1,4,6)\\)</p> <p>Hint: Use \\(\\bar F\\) and complement it to get the result. ans: F' = B' D' + A' B (\u6c42 F' \u65f6\u5728\u5361\u8bfa\u56fe\u4e2d\u5708\u7a7a\u683c\uff0c\u800c\u4e0d\u662f 1) F = (B + D)(A + B')</p> <p>\u5229\u7528\u5361\u8bfa\u56fe\u5316\u7b80\u4ee5\u4e0b\u8868\u8fbe\u5f0f $$ F = AB + \\bar BC + CD + \\bar AC $$ </p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2343-systematic-simplification","title":"2.3.4.3 Systematic Simplification \u7cfb\u7edf\u5316\u7b80\u5316","text":"<ul> <li>A Prime Implicant(\u8d28\u8574\u542b\u9879) is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2. </li> </ul> <p>\u7d20\u8574\u542b\u9879\u662f\u901a\u8fc7\u5c06\u56fe\u4e2d\u6700\u5927\u53ef\u80fd\u6570\u91cf\u7684\u76f8\u90bb\u6b63\u65b9\u5f62\u7ec4\u5408\u6210\u4e00\u4e2a\u77e9\u5f62\u800c\u83b7\u5f97\u7684\u4e58\u79ef\u9879\uff0c\u5176\u4e2d\u6b63\u65b9\u5f62\u7684\u6570\u91cf\u4e3a 2 \u7684\u5e42\u3002</p> <p>\u5982\u679c\u5df2\u7ecf\u5efa\u6210\u4e00\u4e2a\u5927\u7684\u77e9\u5f62\uff0c\u5927\u77e9\u5f62\u91cc\u9762\u7684\u5c0f\u77e9\u5f62\u5c31\u4e0d\u505a\u8003\u8651\u4e86</p> <ul> <li>A prime implicant is called an Essential Prime Implicant(\u5fc5\u8981\u8d28\u8574\u6db5\u9879) if it is the only prime implicant that covers (includes) one or more minterms.</li> </ul> <p>\u8be5\u8d28\u8574\u542b\u9879\u662f\u552f\u4e00\u8986\u76d6\u67d0\u5c0f\u6b63\u65b9\u5f62\u7684\u8d28\u8574\u542b\u9879\uff0c\u5219\u79f0\u4e3a\u5fc5\u8981\u8d28\u8574\u542b\u9879</p> <p>\u4e5f\u5c31\u662f\uff0c\u5982\u679c\u6ca1\u6709 \u5fc5\u8981\u8d28\u8574\u542b\u9879\uff0c\u5c31\u65e0\u6cd5\u5b9e\u73b0\u5168\u8986\u76d6</p> <p>\u8d28\u8574\u6db5\u9879\u662f\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5305\u62ec\u5b83\u7684\u6700\u5927\u65b9\u5f62\u3002\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5982\u679c\u5b83\u7684\u8d28\u8574\u6db5\u9879\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u662f\u5fc5\u8981\u7684\u3002</p> <ol> <li>Find All Prime Implicants</li> <li>Find Essential ones</li> <li>\u5904\u7406\u5269\u4e0b\u7684 1</li> </ol> <p></p> <p></p> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#235-multi-level-circuit-optimization","title":"2.3.5 Multi-Level Circuit Optimization","text":"<p>\u4e24\u7ea7\u95e8\u7684\u5ef6\u8fdf\u4f4e\uff0c\u4f46 cost \u9ad8\u3002 $$ \\begin{aligned} F &amp;= \\bar A \\bar C \\bar D + \\bar A B \\bar C + ABC + AC\\bar D      G = 16\\ F &amp;= \\bar A (\\bar C \\bar D + B\\bar C) + A(BC + C\\bar D)       G = 18\\ F &amp;= \\bar A \\bar C(B + \\bar D) + AC(B + \\bar D)            G = 12\\ F &amp;= (\\bar A \\bar C + AC)(B + \\bar D)       G = 10 \\end{aligned} $$</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2351-integrated-circuits","title":"2.3.5.1 Integrated Circuits \u96c6\u6210\u7535\u8def","text":"<ul> <li> <p>Integrated circuit (informally, a \u201cchip\u201d) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip.</p> </li> <li> <p>Terminology - Levels of chip integration</p> </li> <li> <p>SSI (small-scale integrated) - fewer than 10 gates</p> </li> <li>MSI (medium-scale integrated) - 10 to 100 gates</li> <li>LSI (large-scale integrated) - 100 to thousands of gates</li> <li> <p>VLSI (very large-scale integrated) - thousands to 100s of millions of gates</p> </li> <li> <p>Technology Parameters\u6280\u672f\u53c2\u6570</p> </li> <li> <p>Fan-in \u6247\u5165\u7cfb\u6570 \u2013 the number of inputs available on a gate     \u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u7684\u4e0a\u9650     \u7406\u60f3\u60c5\u51b5\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u53ef\u4ee5\u63a5\u65e0\u6570\u4e2a\u95e8\u7684\u8f93\u5165\uff0c\u4f46\u5b9e\u9645\u4e0a\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u90fd\u4f1a\u82b1\u8d39\u4e00\u4e9b\u7535\u6d41\uff0c\u800c\u95e8\u8f93\u51fa\u7684\u7535\u6d41\u662f\u6709\u9650\u7684\uff0c\u4ece\u96c6\u6210\u7535\u8def\u672c\u8eab\u4f1a\u8981\u6c42\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u6700\u591a\u80fd\u62c9\u591a\u5c11\u95e8\u7684\u8f93\u5165\u3002</p> </li> <li> <p>Fan-out \u6247\u51fa\u7cfb\u6570 \u2013 the number of standard loads driven by a gate output     \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u5e26\u4e86\u5f88\u591a\u95e8\u7684\u8f93\u5165\uff1f\uff08\u50cf\u706b\u8f66\u5934\u5e26\u4e86\u5f88\u591a\u8f66\u53a2\uff09     \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u4e0d\u80fd\u63a5\u5230\u592a\u591a\u95e8\u7684\u8f93\u5165\u4e0a\u53bb\uff0c\u4e00\u822c\u4f1a\u7528 buffer \u505a\u7f13\u51b2</p> <ul> <li>eg: 1 standard load equals the load contributed by the input of 1 inverter.</li> </ul> <p>\u4e00\u4e2a\u6807\u51c6\u8d1f\u8f7d\u7b49\u4e8e\u4e00\u4e2a\u975e\u95e8\u8f93\u5165\u6240\u8d21\u732e\u7684\u8d1f\u8f7d</p> <ul> <li>Transition time \u8f6c\u6362\u65f6\u95f4- the time required for the gate output to change , \\(from \\ H \\ to \\ L,t_{HL},or \\ from L \\ to \\ H , t_{LH}\\)</li> </ul> <p>\u5e26\u7684\u95e8\u8d8a\u591a\uff0c\u4e0a\u5347\u65f6\u95f4\u5c31\u8d8a\u591a\u3002 \u6211\u4eec\u4f1a\u9650\u5236\u8fc7\u6e21\u65f6\u95f4\uff0c\u8bbe\u7f6e maximum fan-out</p> <ul> <li>The maximum fan-out that can be driven by a gate is the number of standard loads the gate can drive without exceeding its specified  maximum transition time</li> </ul> <p>\u6700\u5927\u6247\u51fa\u7cfb\u6570\uff0c\u662f\u6307\u4e0d\u8d85\u8fc7\u5176\u6307\u5b9a\u6700\u5927\u8f6c\u6362\u65f6\u95f4\u7684\u6807\u51c6\u8d1f\u8f7d\u6570</p> <ul> <li> <p>Logic Levels \u2013 the signal value ranges for 1 and 0 on the inputs and 1 and 0 on the outputs (see Figure 1-1)</p> </li> <li> <p>Noise Margin \u2013 the maximum external noise voltage superimposed on a normal input value that will not cause an undesirable change in the circuit output</p> <p>\u53e0\u52a0\u5728\u6b63\u5e38\u8f93\u5165\u503c\u4e0a\u7684\u6700\u5927\u5916\u90e8\u566a\u58f0\u7535\u538b\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u7535\u8def\u8f93\u51fa\u53d1\u751f\u4e0d\u826f\u53d8\u5316</p> </li> <li> <p>Cost for a gate - a measure of the contribution by the gate to the cost of the integrated circuit     Ignoring the wiring area, the gate area is roughly proportional to the gate input count.</p> </li> <li> <p>Propagation Delay(\u4f20\u8f93\u5ef6\u8fdf) \u2013 The time required for a change in the value of a signal to propagate from an input to an output</p> <p>\u4fe1\u53f7\u503c\u7684\u53d8\u5316\u4ece\u8f93\u5165\u4f20\u64ad\u5230\u8f93\u51fa\u6240\u9700\u7684\u65f6\u95f4</p> </li> <li> <p>Power Dissipation\u529f\u8017 \u2013 the amount of power drawn from the power supply and consumed by the gate</p> </li> </ul> </li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2352-propagation-delay","title":"2.3.5.2 Propagation Delay","text":"<p>Delay is usually measured at the 50% point with respect to the H and L output voltage levels. High-to-low (\\(t_{PHL}\\)) and low-to-high (\\(t_{PLH}\\)) output signal changes may have different propagation delays.</p> <p></p> <p></p> <p>\u8ba1\u7b97\u4e2d\u70b9\u7684\u65f6\u95f4\u5dee\uff0c\u5ef6\u8fdf\u901a\u5e38\u662f\u5728\u76f8\u5bf9\u4e8eH\u548cL\u8f93\u51fa\u7535\u538b\u7535\u5e73\u768450%\u70b9\u6d4b\u91cf\u7684</p> <p></p> <p>\u6b64\u5904\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e2d\u95f4\u7684\u662f\u4ece\u4f4e\u5230\u9ad8\uff0c\\(t_{PLH}\\)</p> <p>Delay Mode</p> <ol> <li>Propagation Delay\u4f20\u8f93\u5ef6\u8fdf</li> </ol> <ul> <li> <p>Transport delay - a change in the output in response to a change on the inputs occurs after a fixed specified delay   \u8f93\u51fa\u6574\u4f53\u5f80\u540e\u79fb\uff08\u56fa\u5b9a\u7684\u6307\u5b9a\u5ef6\u8fdf\uff09</p> </li> <li> <p>Inertial delay\uff08\u60ef\u6027\u5ef6\u8fdf\uff09 - similar to transport delay, except that if the input changes such that the output is to change twice in a time interval less than the rejection time, the output changes do not occur. Models typical electronic circuit behavior, namely, rejects narrow \u201cpulses\u201d on the outputs </p> </li> </ul> <p>\u5982\u679c\u8f93\u5165\u53d1\u751f\u53d8\u5316\uff0c\u4f7f\u5f97\u8f93\u51fa\u5728\u5c0f\u4e8e\u62d2\u7edd\u65f6\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u5185\u53d1\u751f\u4e24\u6b21\u53d8\u5316\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u8f93\u51fa\u53d8\u5316\u3002</p> <p>\u9664\u4e86\u8f93\u51fa\u5f80\u540e\u79fb\uff0c\u5728\u60ef\u6027\u5ef6\u8fdf\u4e0b\uff0c\u5f88\u7a84\u7684\u8109\u51b2\uff08\u5c0f\u4e8e rejection time\uff09\u4f1a\u88ab\u6d88\u9664\u6389\u3002</p> <p><code>\u4e5f\u5c31\u662f\u8bf4\uff0cInertial Delay\u4e0d\u4ec5\u8981\u8003\u8651\u4f20\u8f93\u5ef6\u8fdf\uff08transport delay\uff09\uff0c\u8fd8\u8981\u8003\u8651\u6d88\u9664\u7a84\u8109\u51b2</code></p> <p></p> <ol> <li>circuit delay \u7535\u8def\u5ef6\u8fdf</li> </ol> <p></p> <ul> <li> <p>\u6700\u5f00\u59cb S \u7531$ 0-&gt;1 $\u540e \\(0.9s Y \u4ece 0-&gt;1\\)\uff08\u53ea\u9700\u8981\u8003\u8651 \u7b2c\u4e8c\u4e2aAND\u95e8 \u548c \u6700\u540e\u7684OR\u95e8\uff0c\u7b2c\u4e00\u4e2aAND\u95e8\u4e0d\u505a\u53d8\u5316\uff09</p> </li> <li> <p>S \u4ece 1 \u53d8\u4e3a 0\u540e\uff0c\u7ecf\u8fc7 0.4s \u540e\uff0c\u7b2c\u4e8c\u4e2aAND\u95e8\u53d8\u4e3a0\uff0c\u7ecf\u8fc70.9s\u540e\uff0cY\u503c\u4ece1\u53d8\u4e3a0</p> </li> <li>\u975e\u95e8\u9700\u8981\u57280.2s\u540e\uff0c\u624d\u80fd\u505a\u51fa\u76f8\u5e94\uff0c\u4ece0\u53d8\u4e3a1\uff0c\u7ecf\u8fc70.6s\u540e\uff0c\u7b2c\u4e00\u4e2aAND\u95e8\u53d8\u4e3a1\uff0c\u7ecf\u8fc71.1s\u540e\uff0cY\u503c\u53d8\u4e3a1\uff1b</li> <li>\u6240\u4ee5\u57280.9s \u5230 1.1s \u8fd9\u6bb5\u65f6\u95f4\uff0cY\u503c\u4e3a0\uff0c\u51fa\u73b0\u4e00\u4e2a\u5c0f\u51f9\u69fd\uff0c1.1s\u4e4b\u540e\uff0cY\u503c\u53d8\u4e3a1</li> <li>\u8fd9\u91cc Y \u51fa\u73b0\u4e86\u4e00\u4e2a\u5c0f\u5c16\u5cf0\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4ea7\u751f\u7684\u5192\u9669\u3002   S \u7684\u4e24\u6761\u8def\u5f84\u6211\u4eec\u53d1\u73b0\u5ef6\u8fdf\u4e0d\u540c\uff0c\u8fd9\u79cd\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4e2d\u7684\u7ade\u4e89\u3002</li> </ul> <ol> <li>Fan-out and Delay    The fan-out loading a gate\u2019s output affects the gate\u2019s propagation delay\u3002    SL(Standard Load)\u6807\u51c6\u8d1f\u8f7d: \u4ee5\u975e\u95e8\u4e3a\u6807\u51c6\u3002\u5e26\u4e00\u4e2a\u975e\u95e8\u9700\u8981...\u7684\u8d1f\u8f7d</li> </ol> <p>One realistic equation for tpd for a NAND gate with 4 inputs is: $t_{pd} =0.07+0.021SL $ .</p> <p>ns SL is the number of standard loads the gate is driving, i. e., its fan-out in standard loads For SL = 4.5, tpd = 0.165 ns \u7531\u5de5\u827a\u7a0b\u5ea6+\u8d1f\u8f7d\u60c5\u51b5\u51b3\u5b9a</p> <p>\u4f8b\u9898\uff1a</p> <p>NAND gate G with 20 standard loads on its output has a delay of 0.45 ns and has a normalized cost of 2.0.</p> <p>\u4e0e\u975e\u95e8G \u8f93\u51fa\u4e0a\u670920\u4e2a\u6807\u51c6\u8d1f\u8f7d\uff0c\u4e14\u4f20\u8f93\u5ef6\u8fdf\u4e3a0.45ns\uff0c\u6807\u51c6\u6210\u672c\u4e3a2.0</p> <p>A buffer H has a normalized cost of 1.5. The NAND gate driving the buffer with 20 standard loads gives a total delay of 0.33 ns</p> <p>\u7f13\u51b2\u533aH\u7684\u6807\u51c6\u6210\u672c\u662f1.5\uff0c\u603b\u5ef6\u8fdf\u662f0.33ns</p> <ol> <li>The cost of this portion of the circuit cannot be more than 2.5 </li> <li>The delay of this portion of the circuit cannot be more than 0.40 ns </li> <li>The delay of this portion of the circuit must be less than 0.40 ns and the cost less than 3.0</li> </ol> <p>ans: </p> <ol> <li> <p>No buffer</p> </li> <li> <p>Use buffer</p> </li> <li> <p>Irrelevant - buffer needed to satisfy delay constraint, but cannot satisfy cost constraint.</p> </li> </ol> <p>\u65e0\u5173\u7d27\u8981 - \u9700\u8981\u7f13\u51b2\u6765\u6ee1\u8db3\u5ef6\u8fdf\u7ea6\u675f\uff0c\u4f46\u4e0d\u80fd\u6ee1\u8db3\u6210\u672c\u7ea6\u675f\u3002</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#236-additional-gates-and-circuits","title":"2.3.6 Additional Gates and Circuits","text":""},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2361-buffer","title":"2.3.6.1 Buffer","text":"<p>\u6ca1\u6709\u903b\u8f91\u529f\u80fd\uff08\u76f8\u5f53\u4e8e\u5bfc\u7ebf\uff09\uff0c\u4f46\u6709\u5f88\u5f3a\u7684\u5e26\u8d1f\u8f7d\u7684\u80fd\u529b\uff0c\u80fd\u591f\u62c9\u9ad8\u7535\u5e73\uff0c\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf\u3002</p> <p><code>A buffer is an electronic amplifier used to improve circuit voltage levels and increase the speed of circuit operation.\u7f13\u51b2\u5668\u662f\u4e00\u79cd\u7535\u5b50\u653e\u5927\u5668\uff0c\u7528\u4e8e\u63d0\u9ad8\u7535\u8def\u7535\u538b\u7535\u5e73\u5e76\u63d0\u9ad8\u7535\u8def\u8fd0\u884c\u901f\u5ea6\u3002</code></p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2362-nand","title":"2.3.6.2 NAND","text":"<p>\u4e0e\u975e\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5148\u975e\u540e\u6216 \\(F= \\bar X + \\bar Y + \\bar Z\\)</p> <p>A NAND gate with one input degenerates to an inverter.</p> <p>Universal gate\uff08\u901a\u7528\u95e8\uff09 - a gate type that can implement any Boolean function. \u6700\u9ad8\u6548</p> <p>\u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0e\u975e\u95e8\u505a\u903b\u8f91\u8fd0\u7b97\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u6ee1\u8db3\u4ea4\u6362\u3001\u7ed3\u5408\u5f8b\u3002\u4e00\u822c\u5728\u6700\u540e\u628a\u4e0e\u6216\u975e(AND OR NOT)\u8f6c\u4e3a\u7528\u4e0e\u975e(NAND)\u5b9e\u73b0\u3002</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2363-nor","title":"2.3.6.3 NOR","text":"<p>\u4e5f\u53ef\u4ee5\u5229\u7528 De Morgan \u53d8\u4e3a \u5148\u975e\u540e\u4e0e\uff0c\u5176\u4ed6\u540c\u4e0e\u975e\u3002</p> <p>\\(F= \\bar X \\bar Y \\bar Z\\)</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2364-exclusive-or-exclusive-nor","title":"2.3.6.4 Exclusive OR / Exclusive NOR","text":"<p>definition</p> <p> $$ \\begin{aligned} &amp;\u5f02\u6216\u7684\u4f5c\u7528\u76f8\u5f53\u4e8e\u52a0\u6cd5\uff0c\u5f53\u4e14\u4ec5\u5f53X\u548cY\u4e0d\u76f8\u7b49\u65f6\uff0cX \\oplus Y = 1\\ &amp;\u56e0\u4e3a\u5728\u6b64\u65f6\uff0cX\\overline Y,\\overline XY\u624d\u6709\u53ef\u80fd\u7b49\u4e8e1\\ &amp;\u5bf9\u4e8eXNOR\uff0c\u5f53\u4e14\u4ec5\u5f53X\u548cY\u76f8\u7b49\u65f6\uff0c \\overline{X\\oplus Y} = 1\\ &amp;\u56e0\u4e3a\uff0c\u5728\u6b64\u65f6\uff0cXY\u6216\u8005\\overline{X}  \\overline Y \u624d\u6709\u53ef\u80fd\u7b49\u4e8e1 &amp;XNOR\u7684\u63a8\u5bfc\u8fc7\u7a0b\uff1a\\ &amp;\\overline{X \\oplus Y} = \\overline{X\\overline Y  + \\overline XY} = \\overline{X\\overline Y}  \\overline{\\overline XY} = (\\overline X + Y)(X + \\overline Y) = XY + \\overline{X}  \\overline Y \\end{aligned} $$</p> <p></p> <p></p> <p>$$ X \\oplus Y = X\\bar Y + \\bar X Y\\ \\overline{X \\oplus Y} = XY + \\bar X \\bar Y\\ X \\oplus \\bar Y = X\\bar{\\bar Y} + \\bar X \\bar Y = XY + \\bar X \\bar Y = \\overline{X \\oplus Y}\\ $$ \u4e25\u683c\u6765\u8bf4\uff0c\u53ea\u6709\u4e24\u53d8\u91cf\u7684\u5f02\u6216\u3002\u5bf9\u4e8e\u591a\u4e8e\u4e24\u4e2a\u8f93\u5165\u7684\uff0c\u6211\u4eec\u7528\u5947\u51fd\u6570/\u5076\u51fd\u6570\u4ee3\u66ff\u3002 \u5bf9\u4e8e\u4e09\u53d8\u91cf\u7684\u5f02\u6216 \\(X\\oplus Y = \\bar X \\bar Y Z + \\bar X Y \\bar Z + X\\bar Y \\bar Z + XYZ\\) \u5361\u8bfa\u56fe\u65e0\u6cd5\u518d\u5316\u7b80</p> 1 1 1 1 <p>\u6211\u4eec\u79f0\u5b83\u4e3a\u5947\u51fd\u6570\uff0c\u56e0\u4e3a minterm \u91cc 1 \u7684\u4e2a\u6570(=$=\\sum m(1(001),2(010),4(100),7(111))) $\u4e3a\u5947\u6570\u3002\u5176\u53cd\u51fd\u6570\u4e3a\u5076\u51fd\u6570\u3002</p> <ul> <li>The 1s of an odd function correspond to minterms having an index with an odd number of 1s.</li> <li>The 1s of an even function correspond to minterms having an index with an even number of 1s.</li> </ul> \\[ \\begin{aligned} &amp;\u5bf9\u4e8e\u5947\u51fd\u6570\u548c\u5076\u51fd\u6570\u7684\u8bba\u65ad\uff0c\u5bf9\u4e8e\u4e09\u53d8\u91cf\u7684\u5f02\u6216\uff0c\u8981\u6c42\u5177\u6709\u5947\u6570\u4e2a1\uff0c\u624d\u80fd\u5f97\u5230X\\oplus Y \\oplus Z = 1\\\\ &amp;\u79f0\u4e3a\u5947\u51fd\u6570\u7684\u539f\u56e0\u662f\uff0c minterm\u91cc1\u7684\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u5176\u53cd\u51fd\u6570\u79f0\u4e3a\u5076\u51fd\u6570\uff08minterm\u91cc1\u7684\u4e2a\u6570\u4e3a\u5076\u6570\uff09\\\\ &amp; X \\oplus Y \\oplus Z = \\sum m_1(001) + m_2(010) + m_4(100) + m_7(111) \\end{aligned} \\] <p>The symbols for XOR and XNOR</p> <p></p> <p> $$ \\begin{aligned} &amp;\u81f3\u4e8e\u5982\u4f55\u5b9e\u73b0\u590d\u6742\u95e8\u7535\u8def\u5f02\u6216\u95e8\\ &amp;X \\oplus Y = X\\overline Y + \\overline X Y\\ &amp;\u9700\u8981\u4e24\u4e2aAND\u95e8\uff0c\u6bcf\u4e2aAND\u95e8\u5206\u522b\u5bf9\u5e94\u4e00\u4e2aNOT\u95e8\uff0c\u6700\u540e\u8fde\u63a5\u5230OR\u95e8\\  \\end{aligned} $$</p> <p>Parity Generators and Checkers \u5947\u5076\u6821\u9a8c\uff1a\u4f20\u8f93\u82e5\u5e72\u4e2a\u6570\u636e\u4f4d\uff0c\u589e\u52a0\u4e00\u4e2a\u6570\u636e\u4f4d\uff0c\u7528\u6765\u8868\u793a\u6570\u636e\u4f4d\u7684\u5947\u5076\u6027\u3002\u8f93\u5165\u548c\u8f93\u51fa\u7aef\u7684\u5947\u5076\u4f4d\u5e94\u8be5\u76f8\u540c\u3002</p> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Circuit%20Optimization/#2365-hi-impedance-outputs","title":"2.3.6.5 Hi-Impedance Outputs \u9ad8\u963b\u8f93\u51fa","text":"<p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5141\u8bb8\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77</p> <p>\u9ad8\u963b\u610f\u5473\u7740\uff0c\u56de\u987e\u7535\u8def\uff0c\u8f93\u51fa\u4f3c\u4e4e\u5df2\u65ad\u5f00\u3002</p> <p>\u5c31\u597d\u50cf\u5185\u90e8\u7535\u8def\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u5f00\u5173\u5df2\u6253\u5f00\u3002</p> <p></p> <p>\u5bf9\u4e8e\u7b26\u53f7\u548c\u771f\u503c\u8868\uff0cIN \u662f\u6570\u636e\u8f93\u5165\uff0cEN \u662f\u63a7\u5236\u8f93\u5165\u3002</p> <p>\u5f53 EN = 0 \u65f6\uff0c\u65e0\u8bba IN \u4e0a\u7684\u503c\uff08\u7528 X \u8868\u793a\uff09\u5982\u4f55\uff0c\u8f93\u51fa\u503c\u90fd\u662f Hi-Z\u3002</p> <p>\u5f53 EN = 1 \u65f6\uff0c\u8f93\u51fa\u503c\u8ddf\u968f\u8f93\u5165\u503c</p> <p></p> <p>Data Selection Function: If s = 0, OL = IN0, else OL = IN1</p> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Gate%20Circuits%20and%20Boolean%20Equations/","title":"Gate Circuits and Boolean Equations","text":""},{"location":"course/cldf/Combinational%20Logic%20Circuits/Gate%20Circuits%20and%20Boolean%20Equations/#21-gate-circuits-and-boolen-equations","title":"2.1 Gate Circuits and Boolen Equations","text":""},{"location":"course/cldf/Combinational%20Logic%20Circuits/Gate%20Circuits%20and%20Boolean%20Equations/#211-binary-logic-and-gates","title":"2.1.1 Binary Logic and Gates","text":"<p>Logical variables operate on binary variables and binary values.</p> <ul> <li><code>AND</code> denoted by a dot(\u22c5 or \u2229)  \u5f00\u5173\u4e32\u8054</li> <li><code>OR</code> denoted by a plus(+ or \u222a) \u5f00\u5173\u5e76\u8054</li> <li><code>NOT</code> denoted by \\(\\bar{a}\\) or ~</li> <li>\\(Y = A \\times B\\) \u6216\u8005 \\(Y = A\\cdot B\\) \u6216\u8005 \\(Y = AB\\) \u8868\u793a \\(Y = A \\ AND \\ B\\)</li> <li>A NOR B \u53ef\u5199\u4f5c \\(\\overline{A + B}\\)</li> <li>A NAND B \u53ef\u5199\u4f5c \\(\\overline {A \\cdot B}\\)</li> <li>\\(z = x + y\\) \u8868\u793a z = x OR y</li> <li>\\(X = \\bar{A}\\) \u8868\u793a X is equal to NOT A</li> </ul> <p></p> <p>\u3001</p> <p>CMOS \u6676\u4f53\u7ba1</p> <ul> <li>N\u578b \u9ad8\u7535\u538b\u8fde\u901a\uff0c\u4f4e\u7535\u538b\u65ad\u5f00</li> <li>P\u578b \u9ad8\u7535\u538b\u65ad\u5f00\uff0c\u4f4e\u7535\u538b\u8fde\u901a</li> <li>P\u578b\u5728\u4e0a\uff0cN\u578b\u5728\u4e0b</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Gate%20Circuits%20and%20Boolean%20Equations/#212-boolen-algebra","title":"2.1.2 Boolen Algebra","text":"<p> $$ \\begin{aligned} comsensus  law:\\ (A + B)(\\bar A + C)(B + C) &amp;= (A + B)(\\bar A + C)\\ (A + B)(\\bar A + C)(B + C) &amp;= (AC + \\bar AB + BC)(B + C)\\ &amp;= ABC + \\bar AB + BC + AC + \\bar ABC + BC\\ &amp;= (ABC + \\bar ABC) + BC  + AC + \\bar AB\\ &amp;= BC + AC + \\bar AB\\ &amp;= C(A + B) + \\bar A (A + B)\\ &amp;= (A + B)(\\bar A +C)\\ \\ \\ prove : AB + \\bar A C + BC &amp;= AB + \\bar A C\\ AB + \\bar A C + BC &amp;= AB + \\bar AC + 1 \\cdot BC\\ &amp;= AB + \\bar AC + (A + \\bar A)BC\\ &amp;= AB + \\bar AC + ABC + \\bar ABC\\ &amp;= AB(1 + C) + \\bar AC(1+ B)\\ &amp;= AB + \\bar AC\\ \\end{aligned} $$</p> <ul> <li>\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7\uff1aprecedence \uff1a parentheses\uff08\u62ec\u53f7\uff09&gt; NOT &gt; AND &gt; OR</li> <li></li> <li>\u4e24\u4fa7\u7684\u5f0f\u5b50\u662f\u5bf9\u5076\u7684\u3002OR \u53d8\u6210 AND\uff0c AND \u53d8\u6210OR,\u5e38\u65700\u53d8\u62101\uff0c1\u53d8\u62100</li> <li><code>\u5bf9\u5076\u53d8\u6362\u4e4b\u540e\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u8fd0\u7b97\u987a\u5e8f\u4e0d\u53d8\uff0c\u4e5f\u5c31\u662f\u8981\u6dfb\u52a0\u62ec\u53f7</code></li> </ul> <p>\u9664\u975e\u53d1\u751f\u81ea\u5bf9\u5076\uff0c\u5426\u5219\u5bf9\u5076\u5f97\u5230\u7684\u5f0f\u5b50\u4e0d\u7b49\u4e8e\u672c\u8eab</p> \\[ \\begin{aligned} F &amp;= (A + \\bar C)\\cdot B + 0\\\\ dual \\ F &amp;= (A \\cdot \\bar C + B) \\cdot 1 = A \\cdot \\bar C + B\\\\ \\end{aligned} \\] \\[ \\begin{aligned} prove : A + A \\cdot B &amp;= A\\\\ A + A \\cdot B &amp;= A \\cdot 1 + A \\cdot B\\\\ &amp; = A \\cdot (1 + B)\\\\ &amp; = A \\cdot 1\\\\ &amp; = A \\\\ \\\\ prove : AB + \\bar A C + BC &amp;= AB + \\bar A C\\\\ AB + \\bar A C + BC &amp;= AB + \\bar AC + 1 \\cdot BC\\\\ &amp;= AB + \\bar AC + (A + \\bar A)BC\\\\ &amp;= AB + \\bar AC + ABC + \\bar ABC\\\\ &amp;= AB(1 + C) + \\bar AC(1+ B)\\\\ &amp;= AB + \\bar AC\\\\ \\\\ \\\\ prove : (\\overline  {X + Y}) Z + X\\bar Y &amp;= \\bar Y(X + Z)\\\\ (\\overline  {X + Y}) Z + X\\bar Y &amp;=(\\bar X \\cdot \\bar Y)Z + X\\bar Y\\\\ &amp;= \\bar Y (\\bar XZ + X)\\\\ &amp;= \\bar Y (X + \\bar X)(X + Z) \\\\ &amp;= \\bar Y (X + Z)\\\\ \\end{aligned} \\] <p></p> <p>\u5bf9\u6bd4\u524d\u4e09\u4e2a\u548c\u540e\u4e09\u4e2a\uff0c\u6211\u4eec\u518d\u6b21\u53d1\u73b0\uff0c\u4e0e \u548c \u6216 \u5728\u903b\u8f91\u4e0a\u662f\u5bf9\u79f0\u7684\u3002</p>"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Gate%20Circuits%20and%20Boolean%20Equations/#213-expression-simplification","title":"2.1.3 Expression Simplification","text":"\\[ \\begin{aligned} &amp;\\ \\ \\ \\ \\ AB + \\bar ACD + \\bar ABD + \\bar AC \\bar D + ABCD\\\\ &amp;= AB + ABCD + \\bar ACD + \\bar AC \\bar D + \\bar ABD\\\\ &amp;= AB + \\bar AC + \\bar ABD\\\\ &amp;= B(A + \\bar AD) + \\bar AC\\\\ &amp;= B(A + D) + \\bar AC  \\\\\\\\\\\\\\\\ L &amp;= AB + A\\bar C + \\bar BC + \\bar CB + \\bar BD + \\bar DB + ADE(F + G)\\\\ &amp;= A(B + \\bar C) + \\bar BC + \\bar CB + \\bar BD + \\bar DB + ADE(F + G)\\\\ &amp;= A\\overline{\\bar BC} + \\bar BC + \\bar CB + \\bar BD + \\bar DB + ADE(F + G)\\\\ &amp;= A + \\bar BC + \\bar CB + \\bar BD + \\bar DB + ADE(F + G)\\\\ &amp;= A + \\bar BC + \\bar CB + \\bar BD + \\bar DB\\\\ &amp;= A + \\bar BC(D + \\bar D) + \\bar CB + \\bar BD + \\bar DB(C + \\bar C)\\\\ &amp;= A + \\bar BCD + \\bar BC \\bar D + \\bar CB + \\bar BD + BC\\bar D + B\\bar C\\bar D\\\\ &amp;= A + (\\bar BCD + \\bar B D) +  (\\bar B C \\bar D + BC\\bar D) + (B \\bar C + B\\bar C \\bar D)\\\\ &amp;= A + \\bar BD + C \\bar D + B \\bar C \\end{aligned} \\]"},{"location":"course/cldf/Combinational%20Logic%20Circuits/Gate%20Circuits%20and%20Boolean%20Equations/#214-complementing-functions","title":"2.1.4 Complementing Functions(\u6c42\u53cd\u51fd\u6570)","text":"<p><code>use Demorgan Theorem to complement a function:</code></p> <ul> <li>Interchange AND and OR operators \u5c06AND\u53d8\u4e3aOR\uff0cOR\u53d8\u4e3aAND</li> <li>Complement each constant value and literal \u5c06\u5404\u4e2a\u53d8\u91cf\u53d6\u53cd\uff0c\u5e38\u65700\u53d8\u4e3a1\uff0c1\u53d8\u4e3a0</li> </ul> \\[ F = \\bar x y \\bar z + x \\bar y \\bar z\\\\ \\bar F = (x + \\bar y + z)(\\bar x + y + z)\\\\ \\] <p><code>\u6ce8\u610f\uff1a\u533a\u5206\u6c42\u53cd\u51fd\u6570\u548c\u6c42\u5bf9\u5076\u3002</code></p> <p><code>\u5728\u6c42\u5bf9\u5076\u4e2d\uff0c\u53d8\u91cfliteral \u4e0d\u53d6\u53cd\uff0c\u4f46\u662f\u5e38\u6570\u53d6\u53cd</code></p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Arithmetic%20Functions/","title":"Arithmetic Functions","text":""},{"location":"course/cldf/Combinational%20Logic%20Design/Arithmetic%20Functions/#33-arithmetic-functions","title":"3.3 Arithmetic Functions","text":""},{"location":"course/cldf/Combinational%20Logic%20Design/Arithmetic%20Functions/#iterative-combination-circuits","title":"Iterative combination circuits \u8fed\u4ee3\u7ec4\u5408\u7535\u8def","text":"<p>\u2022 Half-Adder (HA), a 2-input bit-wise addition functional block\uff08\u4e8c\u8f93\u5165\u6309\u4f4d\u52a0\u6cd5\uff09</p> <p>\u2022 Full-Adder (FA), a 3-input bit-wise addition functional block,\uff08\u4e09\u8f93\u5165\u6309\u4f4d\u52a0\u6cd5\uff09</p> <p>\u2022 Ripple Carry Adder, an iterative array to perform binary addition, and \u6267\u884c\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7684\u8fed\u4ee3\u6570\u7ec4</p> <p>\u2022 Carry-Look-Ahead Adder (CLA), a hierarchical structure to improve performance.\u5206\u5c42\u7ed3\u6784\u63d0\u9ad8\u6027\u80fd</p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Arithmetic%20Functions/#331-half-adder","title":"3.3.1 Half-Adder","text":"<p>\\(S =X \\oplus Y, C = XY\\)</p> <p></p> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Arithmetic%20Functions/#332-full-adder","title":"3.3.2 Full-Adder","text":"<p>\u5168\u52a0\u5668\u7c7b\u4f3c\u4e8e\u534a\u52a0\u5668\uff0c\u4f46\u5305\u62ec\u6765\u81ea\u8f83\u4f4e\u7ea7\u7684\u8fdb\u4f4d\u4f4d\u3002\u4e0e\u534a\u52a0\u5668\u4e00\u6837\uff0c\u5b83\u8ba1\u7b97\u548c\u4f4d S \u548c\u8fdb\u4f4d\u4f4d C\u3002</p> <p></p> <p></p> <p></p> <p>The term \\(XY\\) is carry generate.(\\(XY\\)=1 \u65f6\u4e00\u5b9a\u4f1a\u6709\u8fdb\u4f4d)</p> <p>The term \\(X \\oplus Y\\) is carry propagate.(\\(X\\oplus Y = 1\\)\u65f6 X,Y\u6709\u4e00\u4e2a\u662f 0, \u4e00\u5b9a\u4f1a\u628a\u8fdb\u4f4d\u4f20\u4e0b\u53bb\uff0c\u5373 C = Z ) $$ \\begin{aligned} &amp;\u4e3a\u4ec0\u4e48\u6b64\u5904\uff0c C = XY + XZ + YZ = XY + (X \\oplus Y)Z\\ &amp; \u5bf9\u4e8eX = 1\uff0c Y = 1\uff0c \u4e0d\u7ba1Z\u4e3a\u4f55\u503c\uff0c\u6700\u7ec8\u7ed3\u679cC = 1\\ &amp; \u5bf9\u4e8eX = 1\uff0c Y = 0\uff0c \u524d\u8005 C = Z\uff0c\u540e\u8005C = Z\\ &amp; \u540c\u7406\u5bf9\u4e8e X = 0\uff0c Y = 1\\ &amp; \u5bf9\u4e8eX = 0\uff0c Y = 0\uff0c \u524d\u8005C = 0\uff0c \u540e\u8005 C = 0\\ &amp; \u6240\u4ee5\u5728\u4e0a\u8ff0\u60c5\u666f\u4e4b\u4e0b\uff0cX + Y = X \\oplus Y \\end{aligned} $$</p> <p>\u6ce8\u610f C \u7684\u6539\u5199\uff0c\u8fd9\u91cc\u6539\u4e3a\u5f02\u6216\u4e0d\u6539\u53d8\u7ed3\u679c\uff0c\u540c\u65f6\u56e0\u4e3a\u5df2\u7ecf\u6709 XOR \u4e86\uff0c\u53ef\u4ee5\u8282\u7ea6\u4e00\u4e2a\u95e8</p> <p>\u601d\u8003\u4e00\u4e0b\uff1a\u4e3a\u4ec0\u4e48 \u6539\u4e3a\u5f02\u6216\u4e0d\u6539\u53d8\u7ed3\u679c\uff1f</p> <p></p> \\[ \u6b64\u5904\u5bf9\u5e94\u7684\u662f\\\\ S = X \\oplus Y \\oplus Z = (A \\oplus B) \\oplus C_i\\\\ C_0 = AB + (A \\oplus B)C_i\\\\ \u4e24\u8005\u5171\u7528\u4e86\u4e00\u4e2a\u5f02\u6216\u95e8 \\]"},{"location":"course/cldf/Combinational%20Logic%20Design/Arithmetic%20Functions/#333-binary-adder","title":"3.3.3 Binary adder \u4e8c\u8fdb\u5236\u52a0\u6cd5","text":"<p>\u5b9e\u73b0\u4e8c\u8fdb\u5236\u591a\u4f4d\u52a0\u6cd5</p> <p>4 - bit Ripple-Carry Binary Adder</p> <p><code>ripple carry \u6ce2\u7eb9\u8fdb\u4f4d\uff0c\u4e5f\u5c31\u662f\u4e00\u5c42\u4e00\u5c42\u5730\u5411\u4e0b\u4f20\u9012\uff0c\u524d\u4e00\u5c42\u4e0d\u8ba1\u7b97\u6210\u529f\uff0c\u540e\u4e00\u5c42\u7ed3\u679c\u5c31\u65e0\u6548</code></p> <p></p> <p>\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u968f\u7740\u52a0\u6cd5\u5668\u4f4d\u6570\u7684\u589e\u52a0\uff0c\u5ef6\u8fdf\u4f1a\u8d8a\u6765\u8d8a\u5927</p> <p>\u95e8\u7535\u8def\u56fe</p> <p></p> <p><code>\u5982\u4f55\u63d0\u9ad8\u52a0\u6cd5\u5668\u7684\u8fd0\u7b97\u901f\u7387\u5462\uff1f\u9488\u5bf9\u5c42\u7ea7\u8fc7\u591a\uff0c\u5ef6\u8fdf\u8fc7\u957f\u95ee\u9898</code></p> <p><code>carry Lookahead</code></p> \\[ \u5bf9\u4e8e\u72b6\u6001 i, \u6211\u4eec\u79f0P_i\u4e3a generate, C_i\u4e3a propagate.\\\\ P_i = A_i \\oplus B_i, C_i = A_i B_i\\\\ S_i = P_i \\oplus C_i, C_{i+1} = C_i + P_i C_i\\\\ \\] <p></p> <p>\u8fd9\u65f6\u4f60\u4f1a\u53d1\u73b0\uff0c \\(C_i\\) \u4e0d\u518d\u4f9d\u8d56\u4e8e \\(C_{i-1}\\),\u4ec5\u4ec5\u4f9d\u8d56\u4e8e\\(C_0\\)</p> <p>\u8fd9\u6837\u7684\u8d85\u524d\u8fdb\u4f4d\u5168\u52a0\u5668\uff0c\u907f\u514d\u4e86\u56e0\u4e3a\u4f4d\u8fc7\u591a\u800c\u9020\u6210\u5ef6\u8fdf\u8fc7\u5927\u3002\u9ad8\u4f4d\u7684\u7ed3\u679c\u76f4\u63a5\u7531\u4f4e\u4f4d\u7684\u7ed3\u679c\u5f97\u5230\u3002\u4f46\u5927\u5e45\u5ea6\u63d0\u9ad8\u4e86\u95e8\u7535\u8def\u6210\u672c</p> <p></p> <p><code>\u5f97\u5230$G_{0-3},P_{0-3}$,</code></p> <p>This could be extended to more than four bits; in practice, due to limited gate fan-in, such extension is not feasible. \u8fd9\u53ef\u4ee5\u6269\u5c55\u5230\u56db\u4f4d\u4ee5\u4e0a\uff1b\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e\u95e8\u6247\u5165\u6709\u9650\uff0c\u8fd9\u79cd\u6269\u5c55\u662f\u4e0d\u53ef\u884c\u7684\u3002</p> <p>\u90a3\u8be5\u5982\u4f55\u5236\u4f5c16\u4f4d\u7684\u52a0\u6cd5\u5668\u5462\uff1f</p> <p>\u5c06\u56db\u4e2a4\u4f4d\u52a0\u6cd5\u5668\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u7b2c\u4e00\u4e2a\u52a0\u6cd5\u5668\uff0c\u4e3a\u7b2c\u4e8c\u4e2a\u52a0\u6cd5\u5668\u63d0\u4f9b\\(C_4\\)\uff0c\u9010\u7ea7\u63d0\u4f9b</p> <p> $$ group   generate  G_{0-3}  = G_3 + P_3 G_2 + P_3 P_2 G_1 + P_3P_2P_1G_0\\ group  propagate  P_{0-3} = P_3P_2P_1P_0\\ C_4 = G_{0-3} + P_{0-3}C_0 $$ </p> <p>\u6700\u957f\u8def\u5f84 \uff1a\\(A_0,B_0 \\(\u8fdb\u5165\uff0c\u5148\u5f97\u5230\\)G_0,P_0\\),\u518d\u5230\u5f97\u5230\\(G_{0-3},P_{0-3}\\),</p> <p>\u8fdb\u5165\u4e0b\u65b9\u7684CLA\uff0c\u8fdb\u5165\u65b0\u7684\\(G_0, P_0\\), \u5f97\u5230\\(C_{12}\\),</p> <p>\u518d\u8fdb\u5165\u4e0a\u65b9\u6700\u540e\u4e00\u4e2aCLA\u7684\\(C_0\\),\u7ee7\u800c\u5f97\u5230\\(C_{15}\\),</p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Binary%20substraction/","title":"Binary Substraction","text":""},{"location":"course/cldf/Combinational%20Logic%20Design/Binary%20substraction/#34-binary-substraction","title":"3.4 Binary substraction \u4e8c\u8fdb\u5236\u51cf\u6cd5","text":""},{"location":"course/cldf/Combinational%20Logic%20Design/Binary%20substraction/#341-unsigned-subtraction","title":"3.4.1 Unsigned Subtraction","text":"<ul> <li>Subtract the subtrahend(\u51cf\u6570) N from the minuend(\u88ab\u51cf\u6570) M</li> <li>If no end borrow occurs, then M &gt;= N, and the result is a non-negative number and correct.</li> <li>If an end borrow occurs, the \\(N &gt;= M\\) and the difference $M - N + 2 ^n $ is subtracted from \\(2 ^ n\\), and a minus sign is appended to the result.</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Design/Binary%20substraction/#3411-complement","title":"3.4.1.1 complement","text":"<ul> <li> <p>Diminished Radix Complement of N \u53cd\u7801(\u6309\u4f4d\u53d6\u53cd)</p> </li> <li> <p>defined as \\(r^n - 1 - N(r^n - 1)\\)\u662f bits[n-1:0] \u5168\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u7528\u5b83\u51cf\u53bb N \u5373\u53ef\u5f97\u5230 N \u6309\u4f4d\u53d6\u53cd\u7684\u7ed3\u679c\uff0c\u5373\u53cd\u7801)</p> <p><code>\u56e0\u4e3a\u53cd\u7801\u52a0\u4e0a\u672c\u8eab\u5f97\u5230\u7684\u662f\u5168\u662f1\u7684\u4e8c\u8fdb\u5236\u6570</code></p> </li> <li> <p>Radix Complement 2\u2018s complement \u8865\u7801\uff08\u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00\uff09</p> </li> <li> <p>\u4e5f\u53ef\u4ee5\u8fd9\u6837\u6c42\u8865\u7801\uff1a\u4ece\u53f3\u5f80\u5de6\u7b2c\u4e00\u4e2a 1 \u4e4b\u524d\u4e0d\u53d8\uff0c\u6b64\u540e\u5176\u4ed6\u4f4d\u5168\u90e8\u6c42\u53cd</p> </li> <li> <p>defined as \\(r^n - N\\)</p> </li> <li> <p>\u8865\u7801 = \u53cd\u7801  + 1</p> </li> </ul> <p></p> <p>Subtraction is done by adding the complement of the subtrahend.\u51cf\u6cd5\u901a\u8fc7\u52a0\u4e0a\u51cf\u6570\u7684\u8865\u7801\u5b9e\u73b0</p> <ul> <li>Add the 2\u2019s complement of the subtrahend N to the minuend M: \\(M +  (2^n - N)\\)</li> <li>if \\(M &gt; N\\), the sum produces end carry \\(2^n\\),which is discarded. \\(M - N  \\ remains\\)</li> <li>if \\(M &lt; N\\), the sum does not produce an end carry. The result is \\(2^n - (N - M)\\),which is the 2\u2019s complement of \\(N - M\\)</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Design/Binary%20substraction/#342-signed-integer","title":"3.4.2 Signed integer","text":"<ul> <li>Signed Integer Representations: \u7b2c n-1 \u4f4d\u8868\u793a\u6b63\u8d1f\uff0c\u540e\u9762 bits[n-2:0] \u8868\u793a\u7edd\u5bf9\u503c\u5927\u5c0f</li> <li>Signed-Complement</li> <li>Signed 1's Complement</li> <li>Signed 2's Complement</li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Design/Binary%20substraction/#3421-signed-magnitude-arithmetic","title":"3.4.2.1 Signed-Magnitude Arithmetic \u6709\u7b26\u53f7\u6570\u503c\u7b97\u672f","text":"<ul> <li>\u68c0\u67e5\u4e09\u4e2a\u7b26\u53f7\u4f4d\u7684\u5947\u5076\u6027\uff08\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u4f4d\u548c\u52a0\u51cf\u6cd5\u7684\u7b26\u53f7\u4f4d\uff0c\u6211\u4eec\u4e00\u822c\u8ba4\u4e3a\u52a0\u6cd5\u662f 0, \u51cf\u6cd5\u662f 1\uff09\u7528\u4e8e\u5224\u65ad\u6ea2\u51fa   \u53ef\u80fd\u6ea2\u51fa\u7684\u60c5\u51b5\uff1a\u6b63\u52a0\u6b63(000), \u6b63\u51cf\u8d1f(011), \u8d1f\u51cf\u6b63(101), \u8d1f\u52a0\u8d1f(110).</li> </ul> <p><code>\u524d\u4e24\u4f4d\u662f\u6b63\u8d1f\u5224\u65ad\uff0c\u6700\u540e\u4e00\u4f4d\u662f\u52a0\u51cf\u5224\u65ad</code></p> <ul> <li> <p>If the parity of the three signs is 0:(overflow may happen)</p> </li> <li> <p>Add the magnitudes.</p> </li> <li>Check for overflow (a carry out of the MSB)</li> <li>The sign of the result is the same as the sign of the first operand.</li> </ul> <p>\u5982\u679c\u4e09\u4e2a\u7b26\u53f7\u7684\u5947\u5076\u6027\u4e3a0\uff08\u4e5f\u5c31\u662f\u52a0\u6cd5\uff09\uff1a\uff08\u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\uff09\u5c06\u5927\u5c0f\u76f8\u52a0\u3002\u68c0\u67e5\u662f\u5426\u6ea2\u51fa\uff08MSB \u8fdb\u4f4d\uff09 \u7ed3\u679c\u7684\u7b26\u53f7\u4e0e\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u76f8\u540c\u3002</p> <ul> <li> <p>If the parity of the three signs is 1:</p> </li> <li> <p>Subtract the second magnitude from the first.</p> </li> <li>If a borrow occurs: \u5982\u679c\u53d1\u751f\u501f\u7528\uff1a     take the two\u2019s complement of result and make the result sign the complement of the sign of the first operand.     \u53d6\u7ed3\u679c\u7684\u8865\u7801\uff0c\u5e76\u4f7f\u7ed3\u679c\u7684\u7b26\u53f7\u4e3a\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u7684\u8865\u7801\u3002</li> <li>Overflow will never occur.</li> </ul> <p></p> <ol> <li> <p>\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7b2c\u4e00\u4f4d\u7b26\u53f7\u4f4d\uff0c\u786e\u5b9a\u6b63\u8d1f\uff0c\u540e\u9762\u5c31\u662f\u7b80\u5355\u7684\u8ba1\u7b97</p> </li> <li> <p>1\u7684\u8865\u7801\uff0c\u5982\u679c\u662f\u5927\u4e8e0\u7684\u6570\uff0c\u90a3\u4e48\u4e0e\u6709\u7b26\u53f7\u6574\u6570\u76f8\u540c</p> </li> </ol> <p>\u5982\u679c\u662f\u5c0f\u4e8e0\u7684\u6570\uff0c\u5c31\u628a\u76f8\u53cd\u6570\u9010\u4f4d\u53d6\u53cd</p> <ol> <li>2\u7684\u8865\u7801\uff0c\u8ba1\u7b97\u65b9\u6cd5\u4f60\u61c2\u7684\uff0c\u4e0d\u591a\u505a\u89e3\u91ca</li> </ol>"},{"location":"course/cldf/Combinational%20Logic%20Design/Binary%20substraction/#3422-signed-complement-arithmetic","title":"3.4.2.2 Signed-Complement Arithmetic\u6709\u7b26\u53f7\u8865\u7801\u7b97\u672f","text":"<ul> <li> <p>Addition:</p> </li> <li> <p>Add the numbers including the sign bits, discarding a carry out of the sign bits (2's Complement), or using an end-around carry (1's Complement).</p> <p>\u5c06\u5305\u542b\u7b26\u53f7\u4f4d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u4e22\u5f03\u7b26\u53f7\u4f4d\u7684\u8fdb\u4f4d\uff082 \u7684\u8865\u7801\uff09</p> </li> <li> <p>If the sign bits were the same for both numbers and the sign of the result is different, an overflow has occurred.</p> <p>\u5982\u679c\u4e24\u4e2a\u6570\u5b57\u7684\u7b26\u53f7\u4f4d\u76f8\u540c\u5e76\u4e14\u7ed3\u679c\u7684\u7b26\u53f7\u4e0d\u540c\uff0c\u5219\u53d1\u751f\u6ea2\u51fa\u3002</p> </li> <li> <p>The sign of the result is computed in step 1.</p> </li> <li> <p>Subtraction:   Form the complement of the number you are subtracting and follow the rules for addition.</p> </li> </ul> <p>2\u2019s Complement Adder/Subtractor </p> <p></p> <p>\u5229\u7528\u5f02\u6216\u95e8\uff0c\u5f53 S=0 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u4fdd\u6301\u53e6\u4e00\u4e2a\u4fe1\u53f7\uff0c\u5f53 S=1 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u5bf9\u53e6\u4e00\u4e2a\u4fe1\u53f7\u53d6\u53cd\u3002</p> <p><code>\u5bf9\u4e8e\u5f02\u6216\u95e8\uff0cA XOR 0  = \u672c\u8eabA\uff0cA XOR 1 = \\bar A(A\u53d6\u53cd)</code></p> <p>\u5f53\\(S = 1 \\(\u65f6\uff0c\u6b64\u65f6\u6267\u884c\u51cf\u6cd5\uff0c\\)A-B = A + \\bar B + 1\\)\uff0c\u6b64\u65f6\\(C_0 = 1\\)</p> <p>\u5f53\\(S = 0\\)\u65f6\uff0c\u6b64\u65f6\u6267\u884c\u52a0\u6cd5\uff0c\\(A + B  = A + B\\)</p> <p>Overflow Detection</p> <p>\u6ea2\u51fa\u53ef\u80fd\u53d1\u751f\u5728\uff1a\u4e24\u4e2a\u7b26\u53f7\u76f8\u540c\u7684\u64cd\u4f5c\u6570\u76f8\u52a0\u6216\u8005\u4e0d\u540c\u7b26\u53f7\u64cd\u4f5c\u6570\u7684\u51cf\u6cd5</p> <p></p> <p>Simplest way to implement overflow \\(V = C_n \\oplus C_{n-1}, C_n\\) \u662f\u6ea2\u51fa\u53bb\u7684\u4f4d\uff0c\\(C_{n-1}\\) \u662f\u8fd0\u7b97\u540e\u7684\u7b26\u53f7\u4f4d\u3002 </p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Combinational%20Logic/","title":"Combinational Logic","text":"<ul> <li> <ul> <li> <ul> <li> </li> </ul> <p>functional block: \u504f\u9ad8\u5c42\u903b\u8f91\u5e94\u7528\uff0c\u5982\u8bd1\u7801\u5668\uff0c\u9009\u62e9\u5668\u3002</p> <p>### 3.2.1 Rudimentary Logic Functions \u57fa\u672c\u903b\u8f91\u51fd\u6570</p> <p></p> <p>b \u4e2d\u8868\u793a\u63a5\u5730\u548c\u63a5\u7535\u6e90\u3002</p> <p>####  3.2.1.1 Multiple-bit Rudimentary Functions</p> <p></p> <p>A wide line is used to represent a bus which is a vector signal.</p> <p>b \u4e2d 4 \u8868\u793a\u4f4d\u5bbd\uff0c4 \u4f4d\u4fe1\u53f7\u3002</p> <ul> <li> <p>Sets of bits can be split from the bus as shown in \u00a9 for bits 2 and 1 of F.</p> <p>\u4f4d\u7ec4\u53ef\u4ee5\u4ece\u603b\u7ebf\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u5982 F \u7684\u4f4d 2 \u548c 1 \u7684 \u00a9 \u6240\u793a\u3002</p> </li> <li> <p>The sets of bits need not be continuous as shown in (d) for bits 3, 1, and 0 of F.</p> <p>\u4f4d\u7ec4\u4e0d\u9700\u8981\u8fde\u7eed\uff0c\u5982 F \u7684\u4f4d 3\u30011 \u548c 0 \u7684 (d) \u6240\u793a</p> </li> </ul> <p>####  3.2.1.2 Enabling Function\u4f7f\u80fd\u51fd\u6570</p> <ul> <li>Enabling permits an input signal to pass through to an output</li> <li>Disabling blocks an input signal from passing through to an output, replacing it with a fixed value</li> </ul> <p>The value on the output when it is disable can be Hi-Z (as for three-state buffers and transmission gates), 0 , or 1</p> <p>\u7981\u7528\u65f6\u8f93\u51fa\u4e0a\u7684\u503c\u53ef\u4ee5\u662f Hi-Z\uff08\u5bf9\u4e8e\u4e09\u6001\u7f13\u51b2\u5668\u548c\u4f20\u8f93\u95e8\uff09\u30010 \u6216 1</p> <p>Example</p> <p></p> <p>(a) when disabled, 0 output</p> <p>(b) when disabled, 1 output. \u5176\u4e2d\u4e5f\u53ef\u4ee5\u5199\\(\\overline{EN}\\)\u7136\u540e\u76f4\u63a5\u63a5\u6216\u95e8\uff0c\u4e0d\u7528\u6807 inverter.</p> <p>### 3.2.2 Decoding \u8bd1\u7801</p> <ul> <li> <p>Decoding - the conversion of an n-bit input code to an m-bit output code with \\(n&lt;=m&lt;=2^n\\) such that each valid code word produces a unique output code.</p> <p>n bit input \uff0c m bit output</p> </li> <li> <p>Circuits that perform decoding are called decoders.</p> <p>\u6267\u884c\u89e3\u7801\uff08\u8bd1\u7801\uff09\u7684\u7535\u8def\u79f0\u4e4b\u4e3a\u8bd1\u7801\u5668</p> </li> </ul> <p></p> <p>3-8 \u8bd1\u7801\u5668</p> <p></p> <p></p> <p><code>\u6734\u7d20\u5b9e\u73b0n-m\u7684\u8bd1\u7801\u5668\uff0c\u9700\u8981n * m \u95e8\u8f93\u5165\u6210\u672c</code></p> <p>#### 3.2.2.1 decode expansion</p> <p></p> <p>3-to-8-line decoder</p> <p>\u2022 Number of output ANDs = 8 \u8f93\u51fa\u7ed3\u679c8</p> <p>\u2022 Number of inputs to decoders driving output ANDs = 3 \u8f93\u51653</p> <p>\u2022 Closest possible split to equal</p> <ul> <li> <p>2-to-4-line decoder</p> </li> <li> <p>1-to-2-line decoder</p> <p><code>\u5c063-8\u8bd1\u7801\u5668\uff0c\u5206\u89e3\u62101-2\u8bd1\u7801\u5668\u548c2-4\u8bd1\u7801\u5668</code></p> </li> </ul> <p>2-to-4-line decoder</p> <ul> <li> <p>Number of output ANDs = 4</p> </li> <li> <p>Number of inputs to decoders driving output ANDs = 2</p> </li> <li> <p>Closest possible split to equal     \u2022 Two 1-to-2-line decoders</p> <p><code>2-4\u8bd1\u7801\u5668\uff0c\u53c8\u53ef\u4ee5\u5206\u89e3\u6210\u4e24\u4e2a1-2\u8bd1\u7801\u5668</code></p> </li> </ul> <p>\u62bd\u8c61\u4e3a\u884c\u5217\u8bd1\u7801\uff1a\u4e00\u7ec4\u662f\u884c\u8bd1\u7801\uff0c\u4e00\u7ec4\u662f\u5217\u8bd1\u7801\u3002 \u5bf9\u4e8e \\(n - 2^n\\)\u8bbe\u8ba1\u4e24\u4e2a\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\frac{n}{2}\\)\u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u7684\u884c\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\frac{n}{2}\\)\u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u7684\u5217\u8bd1\u7801\u5668</p> <p>\u8fd9\u6837\u518d\u628a\u884c\u5217\u7684\u8f93\u51fa\u7528 2-AND \u8fde\u63a5\uff0c\u6211\u4eec\u53ea\u9700\u8981 \\(2^{\\frac{n}{2}}\\times 2^{\\frac{n}{2}} = 2^n\\)\u4e2a AND \u95e8, \u4e2d\u95f4\u4e0e\u95e8\u9635\u5217\u7684\u6210\u672c\u662f \\(2 \\times 2^n = 2^{n+1}\\)</p> <p></p> <p>\u8bd1\u7801\u5ef6\u8fdf\u52a0\u5927\uff0c\u4f46\u964d\u4f4e\u6210\u672c\u3002</p> <p>#### 3.2.2.2 decoder with enable</p> <p></p> <p>#### 3.2.2.3 Combinational Logic Implementation Decoder and OR Gates</p> <p>Implement m functions of n variables with:</p> <ul> <li>Sum-of-minterms expressions</li> <li>One n-to-2n-line decoder</li> <li>m OR gates, one for each output</li> </ul> <p>\u628a\u6700\u5c0f\u9879\u6216\u8d77\u6765\uff0c\u5f97\u5230\u4efb\u610f\u7684\u903b\u8f91\u51fd\u6570</p> <ul> <li>\u67e5\u627e\u51fd\u6570\u7684\u771f\u503c\u8868</li> <li>\u53ea\u8981\u771f\u503c\u8868\u4e2d\u51fa\u73b0 1\uff0c\u5c31\u4ece\u76f8\u5e94\u7684\u89e3\u7801\u5668\u8f93\u51fa\u8fde\u63a5\u5230\u76f8\u5e94\u7684 OR</li> </ul> <p>eg : Decoder and OR Gates Example</p> <p></p> <p>\u53ea\u8981\u771f\u503c\u8868\u4e2d\u51fa\u73b0 1\uff0c\u5c31\u4ece\u76f8\u5e94\u7684\u89e3\u7801\u5668\u8f93\u51fa\u8fde\u63a5\u5230\u76f8\u5e94\u7684 OR\uff0c\u4e5f\u5c31\u662f\u628a\u6700\u5c0f\u9879\u6216\u8d77\u6765</p> <p>BCD-to-Segment Decoder</p> <p>Seven-Segment Displayer</p> <p></p> <p>\u4e0a\u4e3a\u5171\u9633\u6781\uff08\u8f93\u51fa 0 \u624d\u80fd\u4eae\uff0c\u9634\u6781\u76f8\u53cd\uff09\uff0ccom\u63a5Vcc\uff0c\u4e0b\u65b9\u63a5\u7535\u963b\u548c\u63a5\u5730</p> <p>\u4e0b\u4e3a\u5171\u9634\u6781\uff0c\u4e0a\u65b9\u7684com\u63a5\u5730\uff0c\u4e0b\u65b9\u63a5\u7535\u963b</p> <p>\u8f93\u5165\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u4eae\u5bf9\u5e94\u7684\u6570\u7801\u7ba1\uff0c\u4f7f\u5176\u53ef\u4ee5\u663e\u793a\u5728\u6570\u7801\u7ba1\u4e0a</p> <p></p> <p>### 3.2.3 Encoding \u7f16\u7801</p> <p>Encoding - the opposite of decoding - the conversion of an m-bit input code to a n-bit output code with\\(n &lt;= m &lt;= 2^n\\)such that each valid code word produces a unique output code   <code>\u4e00\u4e2a\u8bd1\u7801\u5668 $2^n$\u8f93\u5165\uff0cn \u4e2a\u8f93\u51fa</code>\u3002\u5e38\u7528\u4e8e\u4e2d\u65ad\u4fe1\u53f7\uff0c\u8ba1\u7b97\u673a\u54cd\u5e94\uff0c\u544a\u8bc9 CPU \u54ea\u4e00\u53f7\u7684\u4e2d\u65ad\u53d1\u751f\u4e86\uff08\u8fd9\u91cc\u5c31\u8981\u8fdb\u884c\u7f16\u7801\uff09</p> <p></p> <p>Encoder Example</p> <p></p> <ul> <li>Inputs: 10 bits corresponding to decimal digits 0 through 9, (D0, \u2026, D9)</li> <li>Outputs: 4 bits with BCD codes</li> <li>Function: If input bit Di is a 1, then the output (A3, A2, A1, A0) is the BCD code for i.     A3 = D8 + D9;     A2 = D4 + D5 + D6 + D7;     A1 = D2 + D3 + D6 + D7;     A0 = D1 + D3 + D5 + D7 + D9</li> </ul> <p>\u4ee5A3 = D8 + D9\u4e3a\u4f8b\uff0cD8\u548cD9 \u5206\u522b\u8868\u793a8\u548c9\uff0c\u6b64\u65f6\u9700\u8981BCD\u7801\u7684\u7b2c\u4e09\u4f4d\u53d1\u6325\u4f5c\u7528\uff0c\u5206\u522b\u5f97\u5230\uff081000\uff09\u548c\uff081001\uff09</p> <p>#### 3.2.3.1Priority Encoder</p> <p>\u5982\u679c\u8fd9\u91cc\u6709\u591a\u4e2a\u8f93\u5165\u4e3a 1, encoder \u4f1a\u5c06\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u503c\u7f16\u7801\u3002</p> <p></p> <ul> <li>V \u8868\u793a\u662f\u5426\u6709\u6709\u6548\u4fe1\u53f7\u8fdb\u5165 \\(V = D_4 + D_3 + D_2 + D_1 + D_0\\)</li> <li>\\(A_0 = \\bar{D_4}D_3 + \\overline{D_4D_3D_2}D_1 = \\bar {D_4}(D_3 + \\bar D_2D1)\\)</li> <li>\\(A_1 = \\bar{D_4}D_3 + \\bar {D_4} \\bar {D_3} D_2 = \\bar D_4(D_3 + D_2)\\)</li> <li>\\(A_2 = D_4\\)</li> </ul> <p>### 3.2.4 Multiplexers \u591a\u8def\u590d\u7528\u5668</p> <p>Circuits that perform selecting have:</p> <ul> <li>A set of information inputs from which the selection is made</li> <li>A single output</li> <li>A set of control lines for making the selection</li> </ul> <p>Logic circuits that perform selecting are called multiplexers.</p> <p>A typical multiplexer has n control inputs (\\(S_n-1,\\cdots S_0\\)) called selection inputs, \\(2^n\\) information inputs (\\(I_{2^n - 1},\\cdots ,I_0\\)), and one output Y.   \u5982\u679c\u8f93\u5165\\(m &lt; 2^n\\) \u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u4e3a n select lines \u7684 multiplexers.</p> <p></p> <p></p> <p></p> <p>\u4efb\u4f55\u65f6\u523b\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u662f 1, \u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a\u4e0e\u95e8\u88ab enable, \u5176\u4f59\u90fd disable. \u8fd9\u6837\u5c31\u80fd\u9009\u62e9\u51fa enable \u7684\u4fe1\u53f7\u3002</p> <p><code>In general\uff0c 2^n - to - 1 - line multiplexers:\u7531\u4ee5\u4e0b\u90e8\u5206\u7ec4\u5408\u6784\u6210</code></p> <ul> <li>n-to-\\(2^n\\)-line decoder \u5148\u8981\u5f97\u5230\\(2^n\\)\u4e2aoutput</li> <li>\\(2^n \\times 2 \\ AND-OR\\) </li> <li>\u524d\\(2^n\\)\u4e2aAND\u95e8\uff0c\u7528\u4e8edecoder\uff0c\u521b\u9020\u751f\u6210\u7ed3\u679c\u4f7f\u7528</li> <li>\u540e\\(2^n\\)\u4e2aAND\u95e8\uff0c\u6bcf\u4e2aAND\u95e8\u90fd\u5c06\u4e00\u4e2a\u8bd1\u7801\u5668\u8f93\u51fa\u548c\u4e00\u4e2a\u8f93\u5165\u7ebf\u8def\u8fde\u63a5\u8d77\u6765\uff0c\u800cOR\u95e8\u5c06\u6240\u6709AND\u95e8\u7684\u8f93\u51fa\u8fde\u63a5\u8d77\u6765\uff0c\u751f\u6210\u6700\u7ec8\u7684\u8f93\u51fa\u3002</li> </ul> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u4e0e\u6216\u7ed3\u6784\uff0c\u4f7f\u7528\u4e09\u6001\u95e8\u5b9e\u73b0 mux.</p> <p></p> <p>\u591a\u8def\u590d\u7528\u5668\u5f97\u5230\u7684\u662fenable\uff0c \u5982\u679c\u4e3a1\uff0c\u5219\u80fd\u591f\u5c06I\u8f93\u51fa\u3002\u540c\u65f6\u8fd9\u8fb9\u4fdd\u8bc1\u4e86\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a1\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u6709\u6709\u6548\u8f93\u51fa\uff0c</p> <p>\u6539\u8fdb\u7248</p> <p></p> <p>\\(S_0\\) \u533a\u5206\u5947\u6570\u5076\u6570</p> <p>\\(S_1\\) \u518d\u505a\u8fdb\u4e00\u6b65\u7684\u5212\u5206</p> <p>\u8fd9\u91cc\u6211\u4eec\u662f\u4e24\u5c42\u9009\u62e9\u7684\u903b\u8f91\uff0cS0 = 0 \u65f6\u5148\u9009\u51fa I0(00) \u548c I2(10), S1 \u518d\u8fdb\u884c\u7b2c\u4e8c\u5c42\u7684\u9009\u62e9\uff0c\u9009\u62e9I0\u548cI1\u4e2d\u7684\u4e00\u4e2a\u3002</p> <p>#### 3.2.4.1 Combinational Logic Implementation - Multiplexer Approach 1</p> <p>Implement m functions of n variables with:</p> <p>\u2022 Sum-of-minterms expressions SOM</p> <p>\u2022 An m-wide 2n-to-1-line multiplexer \u591a\u8def\u590d\u7528\u5668</p> <p><code>\u8981\u4e48\u5c06\u6240\u6709\u7684\u6700\u5c0f\u9879OR\u5728\u4e00\u8d77\uff0c\u8981\u4e48\u4f7f\u7528m\u4e2a\u591a\u8def\u590d\u7528\u5668\uff0c\u5f97\u5230m\u4e2a\u7ed3\u679c</code></p> <p></p> <p>x\u5217\u4e0ec\u5217\u76f8\u540c\uff0c\u4e0d\u5728\u7814\u7a76</p> <p>\u5982\u679cABC\u5206\u522b\u662f011\uff0c\u5219\u5c06D03\u8f93\u51fa\u5230Y\uff0c\u6b64\u65f6Y\u7684\u503c\u662f0\uff0c\u7b26\u5408\u8868\u683c</p> <p>\u6211\u4eec\u53ef\u4ee5\u505a\u8fdb\u4e00\u6b65\u6539\u8fdb\uff0cn+1 \u53d8\u91cf\u7528 \\(2^n\u22121\\) mux</p> <p>\u5bf9\u4e8e F(A,B,C) \u5f53 A B \u786e\u5b9a\u65f6\uff0c\u6700\u540e\u53ef\u80fd\u8f93\u51fa\u53ea\u53ef\u80fd\u4e3a 1,0,C,\\(\\bar C\\)   \u5229\u7528\u8fd9\u70b9\u6211\u4eec\u53ef\u4ee5\u6539\u9020\u771f\u503c\u8868\uff0c</p> <p></p> <p></p> <p>example:</p> <p></p> <p>\u56fa\u5b9aABC\uff0c\u89c2\u5bdf\u6bd4\u8f83X\u4e0eD\u7684\u5173\u7cfb\uff0c0\uff0c1\uff0cD\uff0c\\(\\bar D\\)</p> </li> </ul> </li> </ul>"},{"location":"course/cldf/Combinational%20Logic%20Design/Combinational%20Logic/#32-combinational-logic","title":"3.2 Combinational Logic","text":""},{"location":"course/cldf/Combinational%20Logic%20Design/Design%20Procedure/","title":"Design Procedure","text":""},{"location":"course/cldf/Combinational%20Logic%20Design/Design%20Procedure/#3-1-design-procedure","title":"3. 1 Design  Procedure","text":""},{"location":"course/cldf/Combinational%20Logic%20Design/Design%20Procedure/#311-hierarchical-design","title":"3.1.1 Hierarchical Design \u5c42\u6b21\u5316\u8bbe\u8ba1","text":"<ul> <li>Decompose the function into smaller pieces called blocks</li> </ul> <p>\u5c06\u51fd\u6570\u5206\u89e3\u4e3a\u66f4\u5c0f\u7684\u5757\uff0c\u79f0\u4e3a\u5757 </p> <ul> <li>Decompose each block\u2019s function into smaller blocks, repeating as necessary until all blocks are small enough</li> </ul> <p>\u5c06\u6bcf\u4e2a\u5757\u7684\u529f\u80fd\u5206\u89e3\u4e3a\u66f4\u5c0f\u7684\u5757\uff0c\u6839\u636e\u9700\u8981\u91cd\u590d\uff0c\u76f4\u5230\u6240\u6709\u5757\u90fd\u8db3\u591f\u5c0f </p> <ul> <li>Any block not decomposed is called a primitive block</li> </ul> <p>\u4efb\u4f55\u672a\u5206\u89e3\u7684\u5757\u79f0\u4e3a\u539f\u59cb\u5757</p> <ul> <li>The collection of all blocks including the decomposed ones is a hierarchy</li> </ul> <p>\u6240\u6709\u5757\uff08\u5305\u62ec\u5206\u89e3\u5757\uff09\u7684\u96c6\u5408\u662f\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784</p> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Design%20Procedure/#312-chip-design-styles","title":"3.1.2 Chip Design Styles","text":"<ul> <li>Full custom: \u5168\u90e8\u81ea\u5df1\u5b9a\u5236\u5316\uff0c\u4e0d\u7528\u5148\u5b9a\u4e49\u597d\u7684\u6a21\u578b\u3002\uff08\u56e0\u4e3a\u5e93\u4f1a\u8003\u8651\u901a\u7528\u6027\uff0c\u5b8c\u6574\uff0c\u5e26\u6765\u6210\u672c\u5f00\u9500\u6bd4\u8f83\u9ad8\uff0c\u5ef6\u8fdf\u4e5f\u76f8\u5bf9\u5927\uff09   \u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u7814\u53d1\u6210\u672c\u9ad8\uff0c\u4f46\u751f\u4ea7\u6210\u672c\u6700\u4f4e\u3002</li> </ul> <p>Justifiable only for dense, fast chips with high sales volume.</p> <p>\u4ec5\u9002\u7528\u4e8e\u9ad8\u9500\u91cf\u3001\u5bc6\u96c6\u3001\u5feb\u901f\u7684\u82af\u7247</p> <ul> <li>Standard cell: \u4f7f\u7528\u9884\u5148\u89c4\u5b9a\u597d\u7684\u6807\u51c6\u5e93(\u5982\u51e0\u8f93\u5165\u7684\u4e0e\u95e8)</li> </ul> <p>\u4e0e\u5b8c\u5168\u5b9a\u5236\u76f8\u6bd4\uff0c\u5bc6\u5ea6\u548c\u901f\u5ea6\u66f4\u4f4e</p> <ul> <li>Gate array: \u7814\u53d1\u6210\u672c\u4f4e\u3002\u4e70\u73b0\u6210\u7684\u82af\u7247\uff0c\u5199\u8fdb\u4ee3\u7801\u5373\u53ef\u6267\u884c\u3002\u6210\u672c\u6700\u4f4e\uff08\u4e0d\u7528\u6d41\u7247\uff09</li> </ul> <p>Cell Libraries \u5355\u5143\u5e93</p> <ul> <li>Cell - a pre-designed primitive block \u9884\u5148\u8bbe\u8ba1\u7684\u539f\u59cb\u5757</li> <li>Cell library - a collection of cells available for design using a particular implementation technology \u53ef\u7528\u4e8e\u4f7f\u7528\u7279\u5b9a\u5b9e\u73b0\u6280\u672f\u8fdb\u884c\u8bbe\u8ba1\u7684\u5355\u5143\u96c6\u5408</li> <li>Cell characterization - a detailed specification of a cell for use by a designer - often based on actual cell design and fabrication and measured values   \u5305\u62ec\u539f\u7406\u56fe\uff0c\u82af\u7247\u9762\u79ef\uff0c\u8f93\u5165\u8d1f\u8f7d\uff0c\u5ef6\u8fdf\uff0c\u5de5\u827a\u6620\u5c04\u7684\u6a21\u677f\u5e93\uff0c\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u5982\u4f55\u5b9e\u73b0\u3002</li> </ul> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Design%20Procedure/#313-mappig-to-nand-gates","title":"3.1.3 Mappig to NAND gates","text":"<p>The mapping is accomplished by:</p> <p>\u2022 Replacing AND and OR symbols,</p> <p> $$ \u5982\u4f55\u7528NAND \u8868\u793aAND\u548cOR\u95e8\\ A  AND  B = NOT(A   NAND  B)\\ A  OR  B = (NOT  A )   NAND  (NOT  B) $$</p> <p>\u2022 Pushing inverters through circuit fan-out points</p> <p></p> <p>\u5bf9\u4e8e\u8fde\u7eed\u7684\u4e24\u4e2aNOT\u95e8\uff0c\u76f8\u5f53\u4e8e\u6ca1\u6709\u4f5c\u7528\u3002</p> <p>\u5bf9\u4e8e\u5206\u652f\u524d\u4e3b\u5e72\u4e0a\u7684NOT\u95e8\uff0c\u53ef\u4ee5\u5c06NOT\u95e8\u540e\u79fb\u81f3\u5206\u652f\u4e0a\u3002</p> <p>\u2022 Canceling inverter pairs</p> <p></p> <p>\u5982\u679c\u662f\u8f6c\u5316\u4e3aNOR\u5462\uff1f</p> <ul> <li>Replace ANDs and ORs:</li> </ul> <p> $$ \u5982\u4f55\u7528NOR \u8868\u793aAND\u548cOR\u95e8\\ A  OR  B = NOT(A   NOR  B)\\ A  AND  B = (NOT  A )   NOR  (NOT  B) $$</p> <ul> <li></li> </ul> <p>example</p> <p></p>"},{"location":"course/cldf/Combinational%20Logic%20Design/Design%20Procedure/#314-verification","title":"3.1.4 Verification","text":"<ul> <li>Manual Logic Analysis \u624b\u52a8\u903b\u8f91\u5206\u6790</li> <li>Find the truth table or Boolean equations for the final circuit \u627e\u5230\u6700\u7ec8\u7535\u8def\u7684\u771f\u503c\u8868\u6216\u5e03\u5c14\u65b9\u7a0b</li> <li>Compare the final circuit truth table with the specified truth     table, or \u5c06\u6700\u7ec8\u7535\u8def\u771f\u503c\u8868\u4e0e\u6307\u5b9a\u771f\u503c\u8868\u8fdb\u884c\u6bd4\u8f83</li> <li>Show that the Boolean equations for the final circuit are equal     to the specified Boolean equations</li> <li>Simulation \u6a21\u62df</li> <li>Simulate the final circuit (or its netlist, possibly written as an     HDL) and the specified truth table, equations, or HDL     description using test input values that fully validate     correctness.</li> <li>The obvious test for a combinational circuit is application of all     possible \u201ccare\u201d input combinations from the specification</li> <li>\u4f7f\u7528\u539f\u7406\u56fe\u7f16\u8f91\u5668\u6216\u6587\u672c\u7f16\u8f91\u5668\u8f93\u5165\u6700\u7ec8\u7535\u8def\u7684\u95e8\u7ea7\u8868\u793a\uff0c\u4f7f\u7528\u6ce2\u5f62\u7f16\u8f91\u5668\u6216\u6587\u672c\u7f16\u8f91\u5668\u8f93\u5165\u7531\u8981\u5e94\u7528\u4e8e\u7535\u8def\u7684\u8f93\u5165\u7ec4\u5408\u5e8f\u5217\u7ec4\u6210\u7684\u6d4b\u8bd5</li> </ul>"},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/","title":"Programmable Implementation Technologies","text":""},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#51-why-programmable-logic","title":"5.1 Why Programmable Logic\uff1f","text":"<ul> <li> <p>Facts:</p> </li> <li> <p>It is most economical to produce an IC in large volumes\u7ecf\u6d4e\u5b9e\u60e0</p> </li> <li> <p>Many designs required only small volumes of ICs</p> </li> <li> <p>Need an IC that can be:</p> </li> <li> <p>Produced in large volumes\u5927\u6279\u91cf\u751f\u4ea7</p> </li> <li> <p>Handle many designs required in small volumes\u5904\u7406\u5c0f\u6279\u91cf\u6240\u9700\u7684\u591a\u79cd\u8bbe\u8ba1</p> </li> <li> <p>A programmable logic part can be:</p> </li> <li> <p>made in large volumes</p> </li> <li> <p>programmed to implement large numbers of different low-volume designs \u7f16\u7a0b\u4ee5\u5b9e\u73b0\u5927\u91cf\u4e0d\u540c\u7684\u5c0f\u6279\u91cf\u8bbe\u8ba1</p> </li> <li> <p>Many programmable logic devices are field-programmable, i. e., can be programmed outside of the manufacturing environment</p> </li> </ul> <p>\u8bb8\u591a\u53ef\u7f16\u7a0b\u903b\u8f91\u5668\u4ef6\u662f\u73b0\u573a\u53ef\u7f16\u7a0b\u7684\uff0c\u5373\u3002\u5373\uff0c\u53ef\u4ee5\u5728\u5236\u9020\u73af\u5883\u4e4b\u5916\u8fdb\u884c\u7f16\u7a0b</p> <ul> <li>Most programmable logic devices are erasable and reprogrammable.</li> </ul> <p>\u5927\u591a\u6570\u53ef\u7f16\u7a0b\u903b\u8f91\u5668\u4ef6\u90fd\u662f\u53ef\u64e6\u9664\u548c\u53ef\u91cd\u65b0\u7f16\u7a0b\u7684\u3002</p> <ul> <li> <p>Allows \u201cupdating\u201d a device or correction of errors</p> <p>\u5141\u8bb8\u201c\u66f4\u65b0\u201d\u8bbe\u5907\u6216\u7ea0\u6b63\u9519\u8bef</p> </li> <li> <p>Allows reuse the device for a different design - the ultimate in re-usability!</p> </li> <li> <p>Ideal for course laboratories</p> </li> <li> <p>Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs.</p> </li> <li> <p>Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices!</p> </li> </ul>"},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#52-programming-technologies","title":"5.2 Programming Technologies","text":""},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#521-classification","title":"5.2.1 Classification","text":"<p>Programming Technologies are used to</p> <ul> <li>Control connections</li> </ul> <p>\u628a\u4e24\u4e2a\u811a\u8fde\u63a5\u8d77\u6765\uff0c\u5e38\u89c1\u7684\u8fde\u63a5\u65b9\u6cd5\u6709\uff1a</p> <ul> <li>Mask programming     \u4e00\u6b21\u6027\u7f16\u7a0b\uff0c\u5de5\u5382\u91cc\u82af\u7247\u5236\u9020\u65f6\u4f7f\u7528\uff0c\u5382\u5bb6\u5728\u751f\u4ea7\u65f6\u7f16\u7a0b\u5230\u82af\u7247\u5185</li> <li>Fuse(\u7194\u4e1d)     \u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse.</li> <li>Antifuse     \u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d</li> <li> <p>Single-bit storage element     \u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00</p> </li> <li> <p>Build lookup tables(LUT)   \u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570</p> </li> <li> <p>Control transistor switching</p> </li> </ul> <p>\u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236</p> <p>\u6d6e\u52a8\u6805\u6781</p> <ul> <li>Stored charge on a floating transistor gate<ul> <li>Erasable \u53ef\u64e6\u9664</li> <li>Electrically erasable</li> <li>Flash (as in Flash Memory)</li> </ul> </li> <li>Storage elements</li> </ul>"},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#522-character","title":"5.2.2 Character","text":"<ul> <li>Permanent - Cannot be erased and reprogrammed </li> </ul> <p>\u6c38\u6052\u6027\uff1a \u65e0\u6cd5\u64e6\u9664\u548c\u91cd\u65b0\u7f16\u7a0b</p> <ul> <li>Mask programming \u4e00\u6b21\u6027\u7f16\u7a0b\u987e\u540d\u601d\u4e49</li> <li>Fuse \u7194\u4e1d</li> <li> <p>Antifuse \u53cd\u7194\u4e1d\u90fd\u53ea\u80fd\u5b9e\u73b0\u4e00\u6b21</p> </li> <li> <p>Reprogrammable</p> </li> <li> <p>Volatile(\u6613\u5931\u7684) - Programming lost if chip power lost</p> <ul> <li>Single-bit storage element</li> </ul> </li> <li>Non-Volatile<ul> <li>Erasable</li> <li>Electrically erasable</li> <li>Flash (as in Flash Memory)</li> </ul> </li> </ul>"},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#53-configuration","title":"5.3 Configuration \u914d\u7f6e","text":"<ul> <li><code>Read only Memory(ROM)</code> \u2014\u2014a fixed array of AND gates and a programmable array of OR gates</li> </ul> <p>\u53ea\u8bfb\u5b58\u50a8\u5668 (ROM) - \u56fa\u5b9a\u7684\u4e0e\u95e8\u9635\u5217\u548c\u53ef\u7f16\u7a0b\u7684\u6216\u95e8\u9635\u5217</p> <ul> <li> <p>Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates.   \u53ef\u7f16\u7a0b\u9635\u5217\u903b\u8f91 (PAL) - \u4e00\u4e2a\u53ef\u7f16\u7a0b\u7684 AND \u95e8\u9635\u5217\uff0c\u4e3a\u56fa\u5b9a\u7684 OR \u95e8\u9635\u5217\u63d0\u4f9b\u6570\u636e\u3002</p> </li> <li> <p>Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates.   \u53ef\u7f16\u7a0b\u903b\u8f91\u9635\u5217 (PLA) - \u4e3a\u53ef\u7f16\u7a0b\u6216\u95e8\u9635\u5217\u63d0\u4f9b\u4fe1\u53f7\u7684\u53ef\u7f16\u7a0b\u4e0e\u95e8\u9635\u5217\u3002</p> </li> </ul> <p><code>AND\u95e8\u9635\u5217\u548cOR\u95e8\u9635\u5217\u90fd\u662f\u53ef\u7f16\u7a0b\u7684</code></p> <ul> <li>Complex Programmable Logic Device (CPLD) /Field- Programmable Gate Array (FPGA) - complex enough to be called \u201carchitectures\u201d - See VLSI Programmable Logic Devices reading supplement   \u590d\u6742\u53ef\u7f16\u7a0b\u903b\u8f91\u5668\u4ef6 (CPLD)/\u73b0\u573a\u53ef\u7f16\u7a0b\u95e8\u9635\u5217 (FPGA) - \u590d\u6742\u5230\u8db3\u4ee5\u88ab\u79f0\u4e3a\u201c\u67b6\u6784\u201d - \u8bf7\u53c2\u9605 VLSI \u53ef\u7f16\u7a0b\u903b\u8f91\u5668\u4ef6\u9605\u8bfb\u8865\u5145</li> </ul> <p></p>"},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#531-read-only-memory","title":"5.3.1 Read Only Memory","text":"<p>Read Only Memories (ROM) or Programmable Read Only Memories (PROM) have:  N input lines,  M output lines, and \\(2^N\\) decoded minterms.</p> <p>\u53ea\u8bfb\u5b58\u50a8\u5668\uff08ROM\uff09\u6216\u53ef\u7f16\u7a0b\u53ea\u8bfb\u5b58\u50a8\u5668\uff08PROM\uff09\u5177\u6709\uff1a  N \u4e2a\u8f93\u5165\u7ebf\uff0c  M \u4e2a\u8f93\u51fa\u7ebf\uff0c\u4ee5\u53ca \\(2^N\\) \u89e3\u7801\uff08decoder\uff09\u7684\u6700\u5c0f\u9879</p> <p>\u5229\u7528\u8bd1\u7801\u5668decoder + or\u95e8\uff0c\u5b9e\u73b0\u4efb\u610f\u7684\u903b\u8f91\u51fd\u6570\u3002</p> <p>\u53ef\u4ee5\u5229\u7528decoder\u751f\u6210Minterm\u6700\u5c0f\u9879\uff0c\u518d\u7528OR\u95e8\u8fde\u63a5\u8d77\u6765</p> <ul> <li> <p>Fixed AND array with \\(2^N\\) outputs implementing all N-literal minterms.</p> </li> <li> <p>Programmable OR Array with M outputs lines to form up to \\(2^N\\) sum of minterm expressions.</p> </li> </ul> <p>\u5177\u6709 M \u6761\u8f93\u51fa\u7ebf\u7684\u53ef\u7f16\u7a0b OR \u6570\u7ec4\uff0c\u53ef\u5f62\u6210\u6700\u591a M \u4e2a\u6700\u5c0f\u9879\u8868\u8fbe\u5f0f\u4e4b\u548c\u3002</p> <p>\u4e8c\u7ef4\u9635\u5217\uff1aAND \u9635\u5217\u4ea7\u751f \\(2^N\\) minterms, OR \u9635\u5217\u6709 M \u4e2a\u8f93\u51fa\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5bf9\u5e94\u6700\u591a \\(2^N\\) minterms.</p> <p></p> <p>\u6b64\u5904\u662f\u4e00\u4e2a\\(8 \\times 4 \\  ROM (N \\ = \\ 3  \\ input \\  lines, M \\ =  \\ 4  \\ output \\ lines)\\)</p> <p>\u56fa\u5b9a\u7684AND\u95e8\u6570\u91cf\uff0c\u5177\u67093\u6761\u8f93\u5165\u7ebf\uff0c\u5b9e\u73b08\u4e2a\u6700\u5c0f\u9879\u8f93\u51fa</p> <p></p> <p></p> <p>\u6ce8\u610f\u9ad8\u4f4e\u4f4d\u7684\u8fde\u63a5</p>"},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#532-programming-array-logicpal","title":"5.3.2 Programming Array Logic\uff08PAL\uff09","text":"<p>The PAL is the opposite of the ROM, having a programmable set of ANDs combined with fixed ORs.</p> <p><code>PAL \u4e0e ROM \u76f8\u53cd\uff0c\u5177\u6709\u4e00\u7ec4\u53ef\u7f16\u7a0b\u7684 AND \u4e0e\u56fa\u5b9a\u7684 OR \u7ec4\u5408\u3002</code></p> <ul> <li>Disadvantage   ROM guaranteed to implement any M functions of N inputs. PAL may have too few inputs to the OR gates.   ROM\u4fdd\u8bc1\u5b9e\u73b0N\u4e2a\u8f93\u5165\u7684\u4efb\u610fM\u4e2a\u529f\u80fd\u3002 PAL \u7684\u201c\u6216\u201d\u95e8\u8f93\u5165\u53ef\u80fd\u592a\u5c11\u3002\uff08\u6bcf\u4e00\u4e2aOR\u95e8\u53ea\u80fd\u63a5\u53d7\u6307\u5b9a\u6570\u91cf\u7684\u8f93\u5165\uff09</li> <li>Advantages </li> <li>For given internal complexity, a PAL can have larger N and M     \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5185\u90e8\u590d\u6742\u6027\uff0cPAL \u53ef\u4ee5\u5177\u6709\u66f4\u5927\u7684 N \u548c M</li> <li>Some PALs have outputs that can be complemented, adding POS functions     \u4e00\u4e9b PAL \u5177\u6709\u53ef\u8865\u5145\u7684\u8f93\u51fa\uff08\u4e0b\u56fe\u7684\u7ebf8\uff0c9\uff09\uff0c\u6dfb\u52a0 POS \u529f\u80fd</li> <li>No multilevel circuit implementations in ROM (without external connections from output to input). PAL has outputs from OR terms as internal inputs to all AND terms, making implementation of multi-level circuits easier.     ROM \u4e2d\u6ca1\u6709\u591a\u7ea7\u7535\u8def\u5b9e\u73b0\uff08\u6ca1\u6709\u4ece\u8f93\u51fa\u5230\u8f93\u5165\u7684\u5916\u90e8\u8fde\u63a5\uff09\u3002 PAL \u5c06 OR \u9879\u7684\u8f93\u51fa\u4f5c\u4e3a\u6240\u6709 AND \u9879\u7684\u5185\u90e8\u8f93\u5165\uff0c\u4f7f\u591a\u7ea7\u7535\u8def\u7684\u5b9e\u73b0\u66f4\u52a0\u5bb9\u6613\u3002</li> </ul> <p></p> <p>AND\u95e8\u53ef\u7f16\u7a0b\uff08\u4e5f\u5c31\u662f\u53ef\u4ee5\u63a7\u5236\u8f93\u5165\u7684\u4e2a\u6570\uff09</p> <p>OR\u95e8\u56fa\u5b9a\uff08\u4e5f\u5c31\u662f\u8f93\u5165\u4e2a\u6570\u786e\u5b9a\uff0c\u4e0d\u8db3\u7684\u8bdd\u8865\u51451\uff0c\u8fc7\u591a\u7684\u8bdd\u5c06OR\u9879\u7684\u8f93\u51fa\u91cd\u65b0\u4f5c\u4e3aAND\u9879\u7684\u5185\u90e8\u8f93\u5165\uff09</p> <p><code>\u6bcf\u4e00\u4e2aAND\u95e8\uff0c\u53ef\u4ee5\u63a5\u4efb\u610f\u4e2a\u8f93\u5165\uff0c\u6bcf\u4e00\u4e2aOR\u95e8\uff0c\u53ea\u80fd\u63a53\u4e2a\u8f93\u5165\u3002</code></p> <p><code>\u5bf9\u4e8e\u591a\u8f93\u5165\u7684OR\u95e8\u9700\u6c42\uff0c\u53ef\u4ee5\u5c06F1\u91cd\u65b0\u63a5\u5165\u5230\u7ebf8\uff0c9\uff0c\u901a\u8fc7F2\uff0cF3\uff0cF4\u8fdb\u884c\u8f93\u51fa</code></p> <p>\u4e0a\u56fe\u4e2d\uff0c \\(F1 = \\overline A \\ \\overline B + \\overline C\\)</p> <p>\\(F2 = \\overline A B \\overline C + AC + A \\overline B\\)</p> <p>\\(F3 = AD + BD + \\overline A \\ \\overline B + \\overline C\\)</p> <p>\\(F4 = AB + CD + AC + BC(\\overline{F1})\\)</p> <p></p> <ul> <li>1 \u8868\u793a \u63a5\u5165\u539f\u9879</li> <li>0 \u8868\u793a \u63a5\u5165\u53d6\u53cd\u9879</li> <li>\u2014\u2014\u8868\u793a\u4e0d\u63a5\u5165</li> </ul> <p></p> <p>\u89c2\u5bdf\u5230\uff0cW\u91cd\u65b0\u4f5c\u4e3aAND\u9879\u7684\u8f93\u5165\uff0c\u4e3a\u4e86\u5f97\u5230F1</p>"},{"location":"course/cldf/Digital%20Hardware%20Implementation/Programmable%20Implementation%20Technologies/#533-programming-logic-array","title":"5.3.3 Programming Logic Array","text":"<p>Compared to a ROM and a PAL, a PLA is the most flexible having a programmable set of ANDs combined with a programmable set of ORs. \u4e0e ROM \u548c PAL \u76f8\u6bd4\uff0cPLA \u6700\u4e3a\u7075\u6d3b\uff0c\u5177\u6709\u4e00\u7ec4\u53ef\u7f16\u7a0b\u7684 AND \u4e0e\u4e00\u7ec4\u53ef\u7f16\u7a0b\u7684 OR\u3002</p> <ul> <li>Advantages</li> <li>A PLA can have large N and M permitting implementation of equations that are impractical for a ROM (because of the number of inputs, N, required)     PLA \u53ef\u4ee5\u5177\u6709\u8f83\u5927\u7684 N \u548c M\uff0c\u4ece\u800c\u5141\u8bb8\u5b9e\u73b0\u5bf9\u4e8e ROM \u6765\u8bf4\u4e0d\u5207\u5b9e\u9645\u7684\u65b9\u7a0b\uff08\u56e0\u4e3a\u9700\u8981\u8f93\u5165\u7684\u6570\u91cf N\uff09</li> <li>A PLA has all of its product terms connectable to all outputs, overcoming the problem of the limited inputs to the PAL Ors     PLA \u7684\u6240\u6709\u4e58\u79ef\u9879\u90fd\u53ef\u8fde\u63a5\u5230\u6240\u6709\u8f93\u51fa\uff0c\u514b\u670d\u4e86 PAL Ors \u8f93\u5165\u6709\u9650\u7684\u95ee\u9898</li> <li>Some PLAs have outputs that can be complemented, adding POS functions     \u4e00\u4e9b PLA \u5177\u6709\u53ef\u8865\u5145\u7684\u8f93\u51fa\uff0c\u6dfb\u52a0 POS \u529f\u80fd</li> <li>Disadvantages</li> <li>Often, the product term count limits the application of a PLA.     \u901a\u5e38\uff0c\u4ea7\u54c1\u672f\u8bed\u8ba1\u6570\u9650\u5236\u4e86 PLA \u7684\u5e94\u7528\u3002</li> <li>Two-level multiple-output optimization is required to reduce the number of product terms in an implementation, helping to fit it into a PLA.     \u9700\u8981\u8fdb\u884c\u4e24\u7ea7\u591a\u8f93\u51fa\u4f18\u5316\u6765\u51cf\u5c11\u5b9e\u73b0\u4e2d\u7684\u4e58\u79ef\u9879\u6570\u91cf\uff0c\u4ece\u800c\u6709\u52a9\u4e8e\u5c06\u5176\u878d\u5165 PLA \u4e2d\u3002</li> <li>Multi-level circuit capability available in PAL not available in PLA. PLA requires external connections to do multi-level circuits.     PAL \u4e2d\u63d0\u4f9b\u7684\u591a\u7ea7\u7535\u8def\u529f\u80fd\u5728 PLA \u4e2d\u4e0d\u53ef\u7528\u3002 PLA\u9700\u8981\u5916\u90e8\u8fde\u63a5\u6765\u5b9e\u73b0\u591a\u7ea7\u7535\u8def\u3002</li> </ul> <p></p> <p><code>\u4ee5\u6b64\u4e3a\u4f8b\uff1a\u4f60\u4f1a\u53d1\u73b0\uff0c\u524d\u9762\u7684AND\u95e8\u53ef\u4ee5\u63a7\u5236\u8f93\u5165\u7684\u4e2a\u6570\uff0c\u540c\u65f6\u540e\u9762\u7684OR\u95e8\u4e5f\u80fd\u63a7\u5236AND\u8f93\u51fa\u9879\u4f5c\u4e3a\u8f93\u5165\u7684\u4e2a\u6570\u3002\u4e5f\u5c31\u662f\u540c\u65f6\u5b9e\u73b0AND \u548c OR\u540c\u65f6\u53ef\u7f16\u7a0b</code></p> <p>\u6b64\u5904\u6700\u540e\u7684\u5f02\u6216\u95e8\uff0c\u80fd\u591f\u7f13\u51cfAND\u95e8\u6570\u91cf\u4e0d\u591f\u7684\u7f3a\u70b9\u3002\u5047\u5982\u6ca1\u6709\u5f02\u6216\u95e8\uff0c\u9700\u8981\u5b9e\u73b0AB\uff0cBC\uff0cAC\uff0cA\\(\\overline B\\), \\(\\overline AB\\),\u4f46\u662fAND\u95e8\u7684\u6570\u91cf\u4e0d\u591f</p> <p>\\(G1 = AB + BC + AC\\)</p> <p>\\(G2 = AB + \\overline A \\ \\overline B\\)</p> <p>\\(F1 = 0 \\oplus G1 = G1 = AB + BC + AC\\)</p> <p>\\(F2 = 1 \\oplus G2 = \\overline {G2} = (A + B)(\\overline A + \\overline B) = A\\overline B + \\overline AB\\)</p> <p></p> <p>\u6b64\u5904\u5bf9F1\u8fdb\u884c\u6c42\u53cd\uff0c\\(\\overline{F1}\\)\u9700\u8981\u56db\u9879\uff0cF2\u6240\u9700\u76843\u9879\u90fd\u5728\\(\\overline{F1}\\)\u4e2d\u51fa\u73b0\uff0c\u7b26\u5408\u9650\u5b9a4\u4e2aOR\u95e8\u7684\u8981\u6c42</p> <p></p> <p>\u6b64\u5904F1\u6c42\u53cd\uff0c\u548cF2\u6c42\u53cd\uff0c\u5728\u6b64\u5904\u5747\u9002\u7528\u4e8e\u56db\u4e2a\u4e0e\u95e8\u7684PLA</p> <p>\u901a\u8fc7\u6c42\u53cd\uff0c\u5b9e\u73b0\u5171\u7528AND\u4e0e\u9879</p>"},{"location":"course/cldf/Memory%20Basis/Dynamic%20RAM/","title":"Dynamic RAM(DRAM)","text":""},{"location":"course/cldf/Memory%20Basis/Dynamic%20RAM/#73-dynamic-ram-dram","title":"7.3 Dynamic RAM \uff08DRAM\uff09","text":"<p>Basic Principle: Storage of information on capacitors.</p> <p>\u57fa\u672c\u539f\u7406\uff1a\u7535\u5bb9\u5668\u4fe1\u606f\u7684\u5b58\u50a8\u3002</p> <p>Charge and discharge of capacitor to change stored value</p> <p>\u7535\u5bb9\u5668\u7684\u5145\u7535\u548c\u653e\u7535\u4ee5\u6539\u53d8\u5b58\u50a8\u503c</p> <p>Use of transistor as \u201cswitch\u201d to:</p> <p>\u4f7f\u7528\u6676\u4f53\u7ba1\u4f5c\u4e3a\u201c\u5f00\u5173\u201d\u6765\uff1a</p> <p></p> <p>\u6210\u672c\u4f4e\uff0c\u56e0\u6b64\u82af\u7247\u91cc\u53ef\u4ee5\u9ad8\u5bc6\u5ea6\u4f7f\u7528\u3002</p> <p>\u5199\u6570\u636e\u65f6\u76f4\u63a5\u5145\u653e\u7535\u5373\u53ef\uff1b\u8bfb\u53d6\u65f6\uff0c\u9700\u8981\u6709\u7535\u8def\u5224\u65ad\u7535\u538b\u9ad8\u4f4e\uff0c</p> <p>\u8fd9\u65f6\u4f1a\u6d88\u8017\u7535\u8377,\u8981\u5c06\u7834\u574f\u6027\u8bfb\u8f6c\u4e3a\u975e\u7834\u574f\u6027\uff08\u5c06\u503c\u5199\u56de\u53bb\uff09</p> <p></p> <p></p> <p>\u7834\u574f\u6027\u8bfb\u53d6\uff0c\u6bcf\u6b21\u8bfb\u53d6\u4e4b\u540e\u7535\u6d41\u4f1a\u53d1\u751f\u53d8\u5316\u3002</p> <p></p> <p>\u5c06\u6240\u6709\u7684 DRAM \u8f93\u51fa\u63a5\u5230 <code>Sense Amplifier \u7075\u654f\u653e\u5927\u5668</code>\u4e0a\uff0c\u53ef\u4ee5\u8ba9\u7834\u574f\u6027\u8bfb\u5165\u53d8\u4e3a\u975e\u7834\u574f\u6027\u8bfb\u5165\u3002</p> <p>DAM\u5206\u4e24\u6b21\u4f20\u8f93\u5730\u5740\uff0c\u5148\u9001\u884c\u5730\u5740\uff08\\(\\overline{RAS}\\)\uff09\uff0c\u518d\u9001\u5217\u5730\u5740(\\(\\overline {CAS}\\))</p> <p>\u884c\u5730\u5740\u9001\u5230\u5bc4\u5b58\u5668\uff0c\u5217\u5730\u5740\u9001\u5230\u8ba1\u6570\u5668</p> <p></p> <p>DRAM\u662f\u540c\u6b65\u7684\uff0c\u4f9d\u8d56\u65f6\u949f\uff0c\u800cSRAM\u662f\u5f02\u6b65\u7684</p> <p></p> <p></p> <p>\u6240\u4ee51G\u7684DRAM\u53ea\u9700\u898115\u4e2a\u5730\u5740\u5f15\u811a</p> <p>\\(1G = 2 ^ {30}bit\\),\u5206\u4e24\u6b21\u4f20\u9001\u884c\u5730\u5740\u548c\u5217\u5730\u5740\uff0c\u4e00\u6b21\u4f20\u900115bits</p> <p>DRAM \u5b58\u50a8\u91cf\u5927\uff0c\u4f46\u76f8\u5bf9 SRAM \u64cd\u4f5c\u4f1a\u6162\u5f88\u591a\uff08\u8fd8\u8981\u5206\u4e24\u4e2a\u5468\u671f\u5206\u522b\u63d0\u4f9b\u884c\u5730\u5740\u548c\u5217\u5730\u5740\uff09</p> <p>DRAM Types</p> <ul> <li>Synchronous DRAM (SDRAM)   \u540c\u6b65\u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668 (SDRAM)</li> </ul> <p>Column address counter</p> <ul> <li>for addressing internal data to be transferred on each clock cycle     \u7528\u4e8e\u5bfb\u5740\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u8981\u4f20\u8f93\u7684\u5185\u90e8\u6570\u636e</li> <li>beginning with the column address counts up to column address + burst size \u2013 1      \u4ece\u5217\u5730\u5740\u5f00\u59cb\u8ba1\u6570\u5230\u5217\u5730\u5740 + \u7a81\u53d1\u5927\u5c0f \u2013 1 \u6b21\u53ef\u4ee5\u5199\u5165\u591a\u4e2a\u6570\u636e</li> <li></li> </ul> <p>$$   \\begin{aligned}   &amp;Example: Memory  data  path  width : 1  word = 4  bytes\\   &amp;Burst  size = 8  words =  32  bytes\\   &amp;Memory  clock  frequency = 5ns\\   &amp;Latency  time(from  application  of  row  address  until  first  word  available )  = 4  clock  cycles\\   &amp;Read  cycle  time = (4 + 8) \\times 5ns = 60ns\\   &amp;Memory  Bandwidth(\u5185\u5b58\u5e26\u5bbd) : 32 / (60 \\times 10 ^{-9}) = 533Mbytes/sec   \\end{aligned}   $$</p> <ul> <li>Double Data Rate SDRAM (DDR SDRAM)   \u53cc\u500d\u6570\u636e\u901f\u7387 SDRAM (DDR SDRAM)</li> </ul> <p>ransfers data on both edges of the clock   \u5728\u65f6\u949f\u7684\u4e24\u4e2a\u8fb9\u6cbf\u4f20\u8f93\u6570\u636e   Provides a transfer rate of 2 data words per clock cycle   \u63d0\u4f9b\u6bcf\u4e2a\u65f6\u949f\u5468\u671f 2 \u4e2a\u6570\u636e\u5b57\u7684\u4f20\u8f93\u901f\u7387</p> <p>\u9488\u5bf9\u4e0a\u9898\u7684example \uff1a</p> <p>\\(Memory \\ Bandwidth = 2 \\times 533MBytes/sec = 1.066G/sec\\)</p> <ul> <li>RAMBUS\u00ae DRAM (RDRAM)</li> </ul>"},{"location":"course/cldf/Memory%20Basis/Memory%20Definition/","title":"Memory Definition","text":""},{"location":"course/cldf/Memory%20Basis/Memory%20Definition/#71-memory-definition","title":"7.1 Memory Definition","text":"<ol> <li>Memory Concepts</li> </ol> <ul> <li> <p>Memory \u2500 A collection of storage cells together with the necessary circuits to transfer information to and from them.      \u5b58\u50a8\u5668 \u2014 \u5b58\u50a8\u5355\u5143\u4ee5\u53ca\u4e0e\u5b58\u50a8\u5355\u5143\u4e4b\u95f4\u4f20\u8f93\u4fe1\u606f\u6240\u9700\u7684\u7535\u8def\u7684\u96c6\u5408\u3002</p> </li> <li> <p>Memory Organization \u2500 the basic architectural structure of a memory in terms of how data is accessed</p> <p>\u5185\u5b58\u7684\u67b6\u6784\uff0c\u5185\u5b58\u80fd\u5b58\u653e\u591a\u5c11\u6570\u636e\uff0c\u4e00\u4e2a\u5b57\u591a\u5c11\u4f4d\uff0c\u5982\u4f55\u8bbf\u95ee\u5185\u5b58</p> </li> <li> <p>Random Access Memory (RAM) \u2500 a memory organized such that data can be transferred to or from any cell (or collection of cells) in a time that is not dependent upon the particular cell selected.      \u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668 (RAM) \u2014 \u4e00\u79cd\u5b58\u50a8\u5668\uff0c\u5176\u7ec4\u7ec7\u65b9\u5f0f\u4f7f\u5f97\u53ef\u4ee5\u5728\u4e0d\u4f9d\u8d56\u4e8e\u6240\u9009\u7279\u5b9a\u5355\u5143\u7684\u65f6\u95f4\u5185\u5c06\u6570\u636e\u4f20\u8f93\u5230\u4efb\u4f55\u5355\u5143\uff08\u6216\u5355\u5143\u96c6\u5408\uff09\u6216\u4ece\u4efb\u4f55\u5355\u5143\uff08\u6216\u5355\u5143\u96c6\u5408\uff09\u4f20\u8f93\u6570\u636e\u3002</p> </li> <li> <p>Memory Address \u2500 A vector of bits that identifies a particular memory element (or collection of elements).      \u5185\u5b58\u5730\u5740 \u2014 \u6807\u8bc6\u7279\u5b9a\u5185\u5b58\u5143\u7d20\uff08\u6216\u5143\u7d20\u96c6\u5408\uff09\u7684\u4f4d\u5411\u91cf\u3002</p> </li> </ul> <ol> <li>Typical data elements</li> </ol> <ul> <li>bit</li> <li>byte\u2500 8 bits \u5b57\u8282 \u2500 8 \u4f4d</li> <li>word\u2014\u2014-a collection of binary bits whose size is a typical unit of access for the memory. It is typically a power of two multiple of bytes (1 byte, 2 bytes, 4 bytes, 8 bytes, )      \u5b57 \u2014\u2014 \u4e8c\u8fdb\u5236\u4f4d\u7684\u96c6\u5408\uff0c\u5176\u5927\u5c0f\u662f\u5b58\u50a8\u5668\u8bbf\u95ee\u7684\u5178\u578b\u5355\u4f4d\u3002\u5b83\u901a\u5e38\u662f2\u7684\u5e42</li> <li>Memory Data \u2500 a bit or a collection of bits to be stored into or accessed from memory cells.      \u5185\u5b58\u6570\u636e \u2500 \u5b58\u50a8\u5230\u5185\u5b58\u5355\u5143\u6216\u4ece\u5185\u5b58\u5355\u5143\u8bbf\u95ee\u7684\u4e00\u4f4d\u6216\u4e00\u7ec4\u4f4d\u3002</li> </ul>"},{"location":"course/cldf/Memory%20Basis/Memory%20Definition/#711-memory-organization","title":"7.1.1 Memory Organization","text":"<p>2</p> <ul> <li>k address line \u7528\u4e8e \u5bfb\u5740\\(\\(2^k\\)\\) words of memory</li> <li>Read and Write are single control lines by 1 bit.</li> </ul> <p></p>"},{"location":"course/cldf/Memory%20Basis/Memory%20Definition/#712-basic-memory-operations","title":"7.1.2 Basic Memory Operations","text":"<ul> <li>Read Memory\u2500 an operation that reads a data value stored in memory:</li> </ul> <p>Read Memory \u2500 \u8bfb\u53d6\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u503c\u7684\u64cd\u4f5c\uff1a</p> <ul> <li>Place a valid address on the address lines.     \u5728\u5730\u5740\u884c\u4e0a\u653e\u7f6e\u6709\u6548\u5730\u5740\u3002</li> <li>Toggle(\u5207\u6362) the memory read control line.     \u5207\u6362\uff08\u5207\u6362\uff09\u5185\u5b58\u8bfb\u53d6\u63a7\u5236\u7ebf\u3002</li> <li> <p>Wait for the read data to become stable.     \u7b49\u5f85\u8bfb\u53d6\u6570\u636e\u7a33\u5b9a\u3002</p> </li> <li> <p>Write Memory\u2500 an operation that writes a data value to memory:</p> </li> </ul> <p>\u5199\u5165\u5185\u5b58 \u2500 \u5c06\u6570\u636e\u503c\u5199\u5165\u5185\u5b58\u7684\u64cd\u4f5c\uff1a</p> <ul> <li>Place a valid address on the address lines and valid data on the data lines.     \u5728\u5730\u5740\u7ebf\u4e0a\u653e\u7f6e\u6709\u6548\u5730\u5740\uff0c\u5728\u6570\u636e\u7ebf\u4e0a\u653e\u7f6e\u6709\u6548\u6570\u636e\u3002</li> <li>Toggle the memory write control line.     \u5207\u6362\u5185\u5b58\u5199\u63a7\u5236\u7ebf\u3002</li> </ul>"},{"location":"course/cldf/Memory%20Basis/Memory%20Definition/#713-memory-operation-timing","title":"7.1.3 Memory Operation Timing","text":"<p>\u5185\u5b58\u64cd\u4f5c\u65f6\u5e8f</p> <ul> <li> <p>\u5927\u591a\u6570\u57fa\u672c\u5185\u5b58\u90fd\u662f\u5f02\u6b65\u7684</p> </li> <li> <p>\u9501\u5b58\u5668\u7684\u5b58\u50a8/\u7535\u8377\u7684\u5b58\u50a8</p> </li> <li> <p>\u6ca1\u6709\u65f6\u949f\u4fe1\u53f7</p> </li> <li> <p>\u7531\u63a7\u5236\u8f93\u5165\uff08Control Input\uff09\u548c\u5730\u5740\uff08Address\uff09\u63a7\u5236</p> </li> <li> <p>Read timing</p> </li> </ul> <p></p> <p>\u4ece\u8f93\u5165\u5730\u5740\u4fe1\u53f7\uff0c\u5230\u6570\u636e\u8f93\u51fa\u82b1\u8d3965ns</p> <ul> <li>Write Timing</li> </ul> <p></p> <p>\u5730\u5740\u4fe1\u53f7address \u9700\u8981\u5728 \\(R/\\overline W\\)\u4fe1\u53f7\u4e0b\u964d\u524d\u51c6\u5907\u5b8c\u6bd5\uff0c\u4fdd\u6301\u4e00\u5b9a\u7684\u65f6\u95f4\uff0c\u4ee5\u907f\u514d\u5e72\u6270\u5176\u4ed6\u5730\u5740\u7684\u5b58\u50a8\u5185\u5bb9</p> <p>Data Input\u9700\u8981\u5728RW\u4fe1\u53f7\u4e0a\u5347\u6cbf\u4e4b\u524d\u5efa\u7acb\uff0c\u5728\u4e0a\u5347\u6cbf\u540e\u4fdd\u6301\u4e00\u5b9a\u65f6\u95f4</p>"},{"location":"course/cldf/Memory%20Basis/Random%20Access%20Memory/","title":"Random Access Memory(RAM)","text":""},{"location":"course/cldf/Memory%20Basis/Random%20Access%20Memory/#72-random-access-memory-ram","title":"7.2 Random Access Memory \uff08RAM\uff09","text":"<p>Types of random access memory \u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\u7684\u7c7b\u578b</p> <ul> <li>Static \u2013 information stored in latches   \u9759\u6001\u2014\u2014\u5b58\u50a8\u5728\u9501\u5b58\u5668\u4e2d\u7684\u4fe1\u606f</li> <li>Dynamic \u2013 information stored as electrical charges on capacitors   \u52a8\u6001\u2014\u2014\u4fe1\u606f\u4ee5\u7535\u8377\u5f62\u5f0f\u5b58\u50a8\u5728\u7535\u5bb9\u5668\u4e0a</li> </ul> <p>Dependence on Power Supply \u5bf9\u7535\u6e90\u7684\u4f9d\u8d56</p> <ul> <li>Volatile \u2013 loses stored information when power turned off   \u6613\u5931\u6027 \u2013 \u65ad\u7535\u65f6\u4f1a\u4e22\u5931\u5b58\u50a8\u7684\u4fe1\u606f</li> <li>Non-volatile \u2013 retains information when power turned off   \u975e\u6613\u5931\u6027 \u2013 \u65ad\u7535\u65f6\u4fdd\u7559\u4fe1\u606f</li> </ul>"},{"location":"course/cldf/Memory%20Basis/Random%20Access%20Memory/#721-static-ram-integrated-circuit","title":"7.2.1 Static RAM integrated circuit","text":""},{"location":"course/cldf/Memory%20Basis/Random%20Access%20Memory/#cell-and-slices","title":"Cell and Slices","text":"<ul> <li>\u5f53Select = 0\u65f6\uff0c\\(\\(S\uff0cR\uff0cC\uff0c\\overline C\\)\\) \u5168\u90e8\u4e3a0</li> <li>\u5f53Select = 1\u65f6\uff0c\\(B,\\overline B = (0,1)\u6216\u8005(1,0)\\),\u4ece\u800c\u6539\u53d8\\(C,\\overline C\\)</li> </ul> <p>Represent all circuitry that is required for 2^n 1-bit words</p> <p></p> <p>\u8fd9\u91cc Bit Select \u7684\u4fe1\u53f7\uff08\u6bcf\u4e00\u4e2a Cell \u90fd\u6709\uff09\uff0c\u4e3a 0 \u65f6\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u88ab Disable \u4e86\uff0c\u4e3a 1 \u65f6\u624d\u53ef\u4ee5\u5199\u5165\u8bfb\u51fa\uff08\u53d6\u51b3\u4e8e$$ Read/\\overline{Write}$$ \u4fe1\u53f7\uff09</p> <ul> <li> <p>\u4efb\u610f\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u6761Word select\u4fe1\u53f7\u7ebf\u4e3a1\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u80fd\u5bf9\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u64cd\u4f5c</p> </li> <li> <p>Read\u64cd\u4f5c\uff0cWrite\u4fe1\u53f7\u4e3a1\uff0c\\(Read/\\overline{Write} = 0\\),\u6b64\u65f6\u5de6\u4fa7\u7684Write Logic\u7684\u8f93\u51fa\u7ed3\u679c\u5168\u90e8\u4e3a0\uff0c\u6b64\u65f6\u5bf9\u4e8e\u9009\u4e2d\u7684RAM cell\uff0c\u8f93\u5165\u4e3a00\uff0c\u4fdd\u6301\u539f\u6765\u7684\u72b6\u6001\uff0c\u8f93\u51fa\u4e4b\u524d\u7684\u7ed3\u679c\uff0c\u5bf9\u5e94\u8bfb\u53d6\u7684\u64cd\u4f5c</p> </li> <li> <p>Write\u64cd\u4f5c\uff0cWrite\u4fe1\u53f7\u4e3a0\uff0c\\(Read/\\overline{Write} = 0\\)\uff0c\u6b64\u65f6\u5de6\u4fa7\u7684Write Logic\u7684\u8f93\u51fa\u7ed3\u679c\u4e3a\\(\\(Data \\ in\\)\\)\u548c \\(\\overline{Data \\ in}\\),\u5982\u679cData in = 1\uff0c \u5373S = 1\uff0c R = 0\uff0cReset\u8d77\u4f5c\u7528\uff0cQ = 0 </p> </li> </ul> <p>\u7528decoder \u8bd1\u7801\u5668\u751f\u6210word select\u4fe1\u53f7</p> <p></p> <ul> <li>decoder\u8bd1\u7801\u5668\uff0c\u5c06n\u6761\u5730\u5740\u7ebf\u89e3\u7801\u6210\\(2^n\\) word select lines</li> <li><code>\u5c06\u5bf9\u5e94\u5730\u5740\u4e0a\u7684 Cells \u7684 Bit Select \u4fe1\u53f7\u7f6e\u4e3a 1 \u5176\u4f59\u4e3a 0.</code></li> <li>Chip Select \u4fe1\u53f7\u4f5c\u4e3a\u8f93\u51fa\u4e09\u6001\u95e8\u7684enable\u4fe1\u53f7</li> </ul>"},{"location":"course/cldf/Memory%20Basis/Random%20Access%20Memory/#cell-arrays-and-coincident-selection","title":"Cell Arrays and Coincident Selection","text":"<p>\u884c\u5217\u8bd1\u7801</p> <ul> <li>Word select becomes Row select</li> <li>Bit select becomes Column select</li> </ul> <p></p> <p>\u770b\u8bd1\u7801\u5668\u8f93\u5165\u7684A\u7684\u987a\u5e8f\uff0c\u8bf4\u660e\u5148\u884c\u540e\u5217\uff0c\u524d\u4e24\u4f4d\u63a7\u5236\u884c\uff0c\u540e\u4e24\u4f4d\u63a7\u5236\u5217</p> <p>\\(16 \\times 1 \\ RAM\\),16\u4e2a\u5b57\uff0c\u6bcf\u4e00\u4e2a\u5b571bit</p> <p>\u95ee\u9898\uff1a\u5982\u4f55\u8bbe\u8ba1\\(8 \\times 2 \\ RAM\\)?</p> <p></p> <p>\u5217\u7684\u8bd1\u7801\u4fe1\u53f7\u540c\u65f6\u63a7\u5236\u4e24\u4e2a\u4f4d\u7247\uff0c0\u5bf9\u5e94\u7b2c\u4e00\u5217\u548c\u7b2c\u4e8c\u5217\uff0c1\u5bf9\u5e94\u7b2c\u4e09\u5217\u548c\u7b2c\u56db\u5217</p>"},{"location":"course/cldf/Memory%20Basis/Random%20Access%20Memory/#making-larger-memories","title":"Making Larger Memories","text":"<p>\u5229\u7528 CS\uff08chip select\uff09 \u5f15\u811a\uff0c\u53ef\u4ee5\u5c06 RAM \u82af\u7247\u62fc\u8d77\u6765\u3002\uff08\u81ea\u6269\u5c55\uff0c\u5373\u8f93\u51fa\u7684\u5b57\u5bbd\u6ca1\u53d8\uff09</p> <p></p> <p>eg: 1001, D2\u4fe1\u53f7\u4f7f\u80fd\uff0c01\u8868\u660e\u8be5\u82af\u7247\u7684\u7b2c\u4e8c\u4f4d\u4f5c\u4e3a\u8f93\u51fa\u7ed3\u679c</p> <p>\u4e3a\u4ec0\u4e48D-out\u80fd\u63a5\u5728\u4e00\u6761\u7ebf\u4e0a\uff0c\u56e0\u4e3a\u4e09\u6001\u95e8\uff0c\u4e00\u65e6\u8be5\u82af\u7247\u88abdisable\uff08chip select\uff09\uff0c\u5c31\u65e0\u6cd5\u8f93\u51fa</p> <p></p> <p>\\(64K = 2 ^ 6 * 2 ^ {10} = 2 ^ {16}\\),\u5bf9\u5e94\u7684\u662f\u8f93\u5165\u5730\u5740\u7684\u4f4d\u6570</p> <p></p> <p>\u589e\u52a0\u4e24\u4f4d\u5730\u574017\uff0c16\u4f5c\u4e3adecoder\u7684\u8f93\u5165\uff0c\u4ea7\u751f4\u4e2a\u9009\u62e9\u4fe1\u53f7\u8fde\u63a5\u5230\\(64K \\times 8 RAM\\)\u7684CS\uff08chip select\uff09\uff0c\u63a7\u5236\u9009\u62e9\u54ea\u4e2aRAM\u4f5c\u4e3a\u8f93\u51fa</p>"},{"location":"course/cldf/Memory%20Basis/Random%20Access%20Memory/#making-wider-memories","title":"Making Wider Memories","text":"<p>\u4f4d\u6269\u5c55\uff0c\u589e\u52a0\u4f4d\u5bbd\uff0c\u6bcf\u5757 RAM \u82af\u7247\u5c31\u4ee3\u8868\u6700\u540e\u8f93\u51fa\u7684\u67d0\u4e00\u4f4d\u3002</p> <p></p> <p>\u6b64\u5904\u6bcf\u4e00\u4e2aRAM\u82af\u7247\u90fd\u88ab\u4f7f\u80fd\uff08CS\u540c\u65f6\u4f5c\u7528\u4e8e\u6240\u6709\u7684RAM\u82af\u7247\uff09\uff0cA1\uff0cA0\u6311\u9009RAM\u82af\u7247\u7684\u54ea\u4e00\u4f4d\u4f5c\u4e3a\u8f93\u51fa\uff0c\u6bcf\u4e00\u4e2aRAM\u82af\u7247\u7684\u8f93\u51fa\u90fd\u5bf9\u5e94Data Out\u7684\u4e00\u4f4d</p> <p></p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Counters%2C%20register%20cells%2C%20buses%2C%20%26%20serial%20operations/","title":"Counters, register cells, buses, & serial operations","text":""},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Counters%2C%20register%20cells%2C%20buses%2C%20%26%20serial%20operations/#63-counter","title":"6.3 Counter","text":""},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Counters%2C%20register%20cells%2C%20buses%2C%20%26%20serial%20operations/#631-ripple-counter","title":"6.3.1 Ripple Counter","text":"<p>\u6bcf\u4e2a\u89e6\u53d1\u5668\u7684\u65f6\u949f\uff0c\u6ca1\u6709\u63a5\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u65f6\u949f\u4e0a\uff0c\u662f\u4e00\u4e2a\u5f02\u6b65\u65f6\u5e8f\u7535\u8def\u3002</p> <p>\\(\\overline Q\\)\u91cd\u65b0\u63a5\u56de\u5230\u8f93\u5165\uff0c\u5b9e\u73b0\u6bcf\u4e00\u4e2a\u5468\u671f\u90fd\u53d6\u53cd\u4e00\u6b21</p> <p>\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\uff0cA \u8ba1\u6570\u5668\u7ffb\u8f6c\u4e00\u6b21\u3002\u5f53 A \u5904\u4e8e\u4e0b\u964d\u6cbf\u7684\u65f6\u5019 B \u4f1a\u8fdb\u884c\u4e00\u6b21\u6c42\u53cd\u3002</p> <p>\\(CP \\rightarrow A \\rightarrow B\\)\u5468\u671f\u4e00\u6b21\u589e\u52a0\u4e00\u500d</p> <p>\\(\\overline A\\) \u63a5\u5230B\u7684\u65f6\u949f\u5904\uff0c\u4e5f\u5c31\u8bf4\uff0c\u5f53A\u53d1\u751f\u4e0b\u964d\u6cbf\u7684\u65f6\u5019\uff0cB\u7684\u503c\u53d1\u751f\u4e00\u6b21\u53d8\u5316</p> <p></p> <p>\u6bcf\u4e2a\u9644\u52a0\u4f4d C\u3001D\u2026\u2026\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u4f4d B\uff0c\u5176\u66f4\u6539\u9891\u7387\u662f\u5176\u4e4b\u524d\u4f4d\u7684\u4e00\u534a\u3002</p> <p></p> <p>\u8003\u8651 3 \u4f4d\u89e6\u53d1\u5668\uff0c\u7406\u60f3\u4e0a C=B=A=1 \u540e\u4ece\u5168 1 \u7acb\u5373\u53d8\u6210\u5168 0. \u4f46\u56e0\u4e3a\u95e8\u5ef6\u8fdf\uff0c\u5b9e\u9645\u53d8\u5316\u8fc7\u7a0b\u4e3a111\u2212110\u2212100\u2212000\uff08<code>\u4eceleast significant bit \u5230 most significant bit</code>\uff09</p> <p>\u6b64\u5916\u5bf9\u4e8e n bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f \\(n \\cdot t_{PHL}\\), \u901f\u5ea6\u4f1a\u975e\u5e38\u6162</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Counters%2C%20register%20cells%2C%20buses%2C%20%26%20serial%20operations/#632-synchronous-counter","title":"6.3.2 Synchronous Counter","text":"<p>up-counter: incrementer \\(S = A + 1\\)</p> <p>\u4f7f\u7528\u516c\u5171\u65f6\u949f\u5e76\u4f7f\u7528\u7ec4\u5408\u7535\u8def\u6765\u751f\u6210\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002</p> <p></p> <p>\u4f4e\u4f4d\u5168\u662f1\uff0c\u9ad8\u4f4d\u5c31\u5f97\u6c42\u53cd</p> <p>\u4f7f\u7528\u516c\u5171\u65f6\u949f\u5e76\u4f7f\u7528\u7ec4\u5408\u7535\u8def\u6765\u751f\u6210\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002</p> <p></p> <p>\u8fd9\u91cc\u7684\u63a7\u5236\u4fe1\u53f7\u662f\u4e00\u4e2a\u4e0e\u95e8\u94fe\uff0c<code>Count Enable</code> \u662f\u4e0e\u95e8\u94fe\u7684\u4f7f\u80fd\u3002</p> <p>\u5f53Count enable EN = 0\uff0c\u4e0e\u95e8\u4fe1\u53f7\u94fe\u5168\u90e8\u4e3a0\uff0c\u89e6\u53d1\u7ed3\u679c\u5747\u4e3a0</p> <p>\u5f53Count enable EN = 1\uff0c\u4e0e\u95e8\u4fe1\u53f7\u94fe\u88ab\u4f7f\u80fd\uff0c\u5f53\u4f4e\u4f4d\u5168\u90e8\u4e3a1\u65f6\uff0c\u4fe1\u53f7\u94fe\u6240\u5f97\u7ed3\u679c\u4e3a1\uff0c\u7ecf\u8fc7\u5f02\u6216\u4f5c\u7528\u8fdb\u884c\u53d6\u53cd\u64cd\u4f5c</p> <p><code>\u5b58\u5728\u95ee\u9898\uff1a\u4e0e\u95e8\u94fe\u662f\u4e32\u63a5\u7684\uff0c\u5f53\u8ba1\u6570\u5668\u4f4d\u6570\u5927\u65f6\uff0c\u4e0e\u95e8\u94fe\u7684\u4f20\u8f93\u5ef6\u8fdf\u53ef\u80fd\u4f1a\u5f71\u54cd\u8ba1\u6570\u5668\u3002</code></p> <p>series of AND gates through which the carry \u201cripples\u201d</p> <p>Yields long path delays \u4ea7\u751f\u957f\u8def\u5f84\u5ef6\u8fdf</p> <p>Called serial gating \u79f0\u4e3a\u4e32\u884c\u95e8\u63a7</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1aReplace AND carry chain with ANDs =&gt; in parallel</p> <p> $$ CO \u662f \u8fdb\u4f4dcarry\u2014 out $$</p> <p>Reduces path delays \u51cf\u5c11\u8def\u5f84\u5ef6\u8fdf</p> <p>Called parallel gating \u79f0\u4e3a\u5e76\u884c\u95e8\u63a7</p> <p>Like carry lookahead</p> <p>Lookahead can be used on COs and ENs to prevent long paths in large countersLookahead </p> <p>\u53ef\u7528\u4e8e CO \u548c EN\uff0c\u4ee5\u9632\u6b62\u5927\u578b\u8ba1\u6570\u5668\u4e2d\u7684\u957f\u8def\u5f84</p> <p></p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Counters%2C%20register%20cells%2C%20buses%2C%20%26%20serial%20operations/#633-other-countercounter-with-parallel-load","title":"6.3.3 Other Counter\u2014\u2014Counter with Parallel Load","text":"<p>\u5728 D \u8f93\u5165\u89e6\u53d1\u5668\u524d\u52a0\u4e0a 2-1 Mux(<code>Load</code> \u662f\u9009\u62e9\u4fe1\u53f7), \u9009\u62e9\u4e0e\u95e8\u94fe\u7684\u7ed3\u679c(<code>Load=0</code>) or \u5916\u90e8\u8f93\u5165(<code>Load=1</code>)\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5e76\u884c\u52a0\u8f7d\u548c\u8ba1\u6570\u7684\u9009\u62e9\u63a7\u5236</p> <p></p> <p></p> <p>\u5982\u4f55\u5b9e\u73b08\u4f4d\u7684\u8ba1\u6570\u5668\u5462\uff1f</p> <p>\u5c06CO\u4f5c\u4e3aENable\u4fe1\u53f7\u63a5\u5165\u5230\u7b2c\u4e8c\u4e2a\u56db\u4f4d\u8ba1\u6570\u5668\uff0c\u5f97\u5230Q[4:7]</p> <p>Includes modulo 10 which is the BCD counter</p> <ul> <li> <p>\u72b6\u6001\u8868\u5982\u4e0b:(1010-1111 don't cares)</p> </li> <li> <p>\u57fa\u4e8e\u4e0a\u9762\u7684\u72b6\u6001\u8868\uff0c\u5206\u522b\u5bf9 Q8,Q4,Q2,Q1 \u753b\u5361\u8bfa\u56fe   \u5229\u7528\u5361\u8bfa\u56fe\u4e24\u7ea7\u4f18\u5316</p> </li> </ul> <p></p> <ul> <li>\u753b\u51fa\u65e0\u5173\u6001\u7684\u6b21\u6001</li> </ul> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u4e0d\u4f1a\u8df3\u5230\u5f02\u5e38\u72b6\u6001\u540e\u8fdb\u5165\u6b7b\u9501\uff0c\u753b\u51fa\u72b6\u6001\u56fe\u5982\u4e0b</p> <p></p> <p>\u5f53\u7136\u4e5f\u53ef\u4ee5\uff0c\u76f4\u63a5\u5c0610\uff0c11\uff0c12\uff0c13\uff0c14\uff0c15\u7684\u6b21\u6001\u5168\u90e8\u8bbe\u7f6e\u4e3a0\uff0c\u4e0d\u518d\u662f\u65e0\u5173\u9879\uff0c\u91cd\u65b0\u5229\u7528\u5361\u8bfa\u56fe\u6c42\u65b9\u7a0b</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Counters%2C%20register%20cells%2C%20buses%2C%20%26%20serial%20operations/#634-other-counters-counting-modulo-n","title":"6.3.4 Other Counters - Counting Modulo N","text":"<p>BCD \u7801\u8ba1\u6570\u5668\u5c31\u662f\u6a21 10 \u8ba1\u6570\u5668\u3002 \u5e38\u7528\u505a\u6cd5\u662f\u5c06\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u8fdb\u884c\u529f\u80fd\u8f6c\u6362\uff0c\u5229\u7528\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6\uff0c\u52a0\u8f7d\u529f\u80fd\uff0c\u8fbe\u5230 N \u65f6\u4e2d\u6b62\u8ba1\u6570\u7ed3\u679c\u3002</p> <p>\u5f02\u6b65\u6e05\u96f6\u505a\u6cd5\uff1aReset\u4fe1\u53f7\uff0c\u8fdb\u884cdirect input\uff0c\u4e0e\u65f6\u949f\u4fe1\u53f7\u65e0\u5173</p> <p>\u540c\u6b65\u6e05\u96f6\u505a\u6cd5\uff1a</p> <p></p> <p>\u5728D\u524d\u9762\u7684\u4e24\u4e2a\u4e0e\u95e8\u5904\u589e\u52a0\u4e24\u4e2a\u8f93\u5165\uff0c\u7531clear\u63d0\u4f9b\u3002\u5f53clear\u4e3a0\u65f6\uff0c\u5bc4\u5b58\u5668\u5e76\u4e0d\u4f1a\u9a6c\u4e0a\u53d8\u4e3a0.\u800c\u662f\u7b49\u5230\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u5230\u6765\u65f6\uff0c\u5bc4\u5b58\u5668\u6e05\u96f6</p> <p>Counting Modulo 7: Detect 7 and Asynchronously Clear</p> <p>\u8ba1\u6570\u6a21 7\uff1a\u68c0\u6d4b 7 \u5e76\u5f02\u6b65\u6e05\u9664</p> <p></p> <p>\u4f4e\u7535\u5e73\u6709\u6548\u7684CLEAR\u4fe1\u53f7\uff0c</p> <p>\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u505a\u6cd5</p> <p>Counting Modulo 7: Synchronously Load on Terminal Count of 6</p> <p>\u8ba1\u6570\u6a21 7\uff1a\u540c\u6b65\u52a0\u8f7d\u7ec8\u7aef\u8ba1\u6570 6</p> <p></p> <p>0-5 \u4e0e\u95e8\u8f93\u51fa\u5168\u4e3a0\uff0c\u5f53\u4e3a6\u7684\u65f6\u5019\uff0c\u4e0e\u95e8\u4e3a1\uff0cLoad\u4e3a1\uff0c\u5f53\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u51fa\u73b0\u65f6\uff0c\u52a0\u8f7d0000</p> <ul> <li>A synchronous 4-bit binary counter with a synchronous load and an asynchronous Clear is used to make a Modulo 7 counter   \u4f7f\u7528\u5177\u6709\u540c\u6b65\u8d1f\u8f7d\u548c\u5f02\u6b65 Clear \u7684\u540c\u6b654\u4f4d\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u6765\u5236\u4f5c\u6a217\u8ba1\u6570\u5668</li> <li>Use the Load feature to detect the count \"6\" and load in \"zero\". This gives a count of 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, ...   \u4f7f\u7528\u52a0\u8f7d\u529f\u80fd\u68c0\u6d4b\u8ba1\u6570\u201c6\u201d\u5e76\u52a0\u8f7d\u201c\u96f6\u201d\u3002\u8fd9\u7ed9\u51fa\u4e86 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, ...   \u4e0d\u4f1a\u76f4\u63a5\u6e05\u96f6\uff0c\u800c\u662f\u5728\u5230\u8fbe N\u22121 \u7684\u65f6\u5019\uff0c\u5728\u4e0b\u4e2a\u65f6\u949f\u4e0a\u5347\u6cbf\u5c06\u5176\u6e05\u96f6</li> </ul> <p></p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Counters%2C%20register%20cells%2C%20buses%2C%20%26%20serial%20operations/#64-serial-transfer-and-microoperation","title":"6.4 Serial Transfer and Microoperation","text":"<p>\u4e32\u884c\u8f93\u5165\u548c\u5fae\u64cd\u4f5c</p> <ul> <li>\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u79fb\u4f4d\u5bc4\u5b58\u5668\u4f5c\u4e3a\u64cd\u4f5c\u6570\u3001\u4e00\u4e2a\u5168\u52a0\u5668\u548c\u4e00\u4e2a\u89e6\u53d1\u5668\uff08\u7528\u4e8e\u8fdb\u4f4d\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5f00\u59cb\u8fde\u7eed\u6dfb\u52a0\u4e24\u4e2a\u6570\u5b57\u3002</li> <li>\u5c06\u4e8c\u8fdb\u5236\u6570\u5de6\u79fb\u76f8\u5f53\u4e8e\u4e58\u4ee5 2\u3002</li> <li>\u5c06\u4e8c\u8fdb\u5236\u6570\u53f3\u79fb\u76f8\u5f53\u4e8e\u9664\u4ee5 2\u3002</li> </ul> <p>\u4e0b\u56fe\u4e3a\u4e32\u884c\u52a0\u6cd5\u5668</p> <ul> <li>\u6240\u793a\u7535\u8def\u5bf9\u64cd\u4f5c\u6570 A(3:0) \u548c B(3:0) \u4f7f\u7528\u4e24\u4e2a\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002</li> <li>\u4e00\u4e2a\u5168\u52a0\u5668\u548c\u4e00\u4e2a\u89e6\u53d1\u5668\uff08\u7528\u4e8e\u8fdb\u4f4d\uff09\u7528\u4e8e\u8ba1\u7b97\u603b\u548c\u3002</li> </ul> <p></p> <p>\u6240\u793a\u7535\u8def\u5bf9\u64cd\u4f5c\u6570 A(3:0) \u548c B(3:0) \u4f7f\u7528\u4e24\u4e2a\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/","title":"Registers, Microoperations and Implementations","text":""},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#61-register","title":"6.1 Register","text":"<p>Register \u2013 a collection of binary storage elements </p> <p>\u5bc4\u5b58\u5668\u2014\u2014\u4e8c\u8fdb\u5236\u5b58\u50a8\u5143\u7d20\u7684\u96c6\u5408</p> <p></p> <p>\u4e0a\u56fe\u6240\u793a\u4e3a2\u4f4d\u5bc4\u5b58\u5668</p> <p>\u4e00\u5171\u6709 \\(2^2 = 4\\)\u4e2d\u72b6\u6001</p> <p>\u8f93\u51fa\u51fd\u6570\\(Y1 = A1(t), Y0 = A0(t)\\)\uff0c\u8f93\u5165\u7ec4\u5408\u56db\u79cd</p> <p>\u8f93\u51fa\u65b9\u7a0b \\(Y1 = A1\uff0c Y0 = A0\\)\uff0c<code>\u8f93\u51fa\u7ed3\u679c\u4e0e\u8f93\u5165In0\uff0cIn1\u65e0\u5173\uff0c\u8f93\u5165\u6539\u53d8\u7684\u4ec5\u662f\u4e0b\u4e00\u65f6\u523b\u72b6\u6001\uff0c\u7ee7\u800c\u5f71\u54cd\u8f93\u51fa\u7ed3\u679c</code>\u5c5e\u4e8eMoore\u6a21\u578b</p> <p>\u5982\u679c\u6309\u7167\u8fd9\u79cd\u65b9\u6cd5\uff0c\u8bbe\u8ba1\u5bc4\u5b58\u5668\uff0c\u4f1a\u53d1\u73b0\u72b6\u6001\u6570\u548c\u8f93\u5165\u7ec4\u5408\u6570\u5448\u73b0\u6307\u6570\u578b\u589e\u957f\uff0c\u968f\u7740n\u53d8\u5927\uff0c\u4e0d\u582a\u91cd\u8d1f</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <ol> <li>Add predefined combinational circuits to registers(e.g. To count up, connect the register flip-flops to an incrementer) \u5c06\u9884\u5b9a\u4e49\u7684\u7ec4\u5408\u7535\u8def\u6dfb\u52a0\u5230\u5bc4\u5b58\u5668\uff08\u4f8b\u5982\uff0c\u8981\u5411\u4e0a\u8ba1\u6570\uff0c\u8bf7\u5c06\u5bc4\u5b58\u5668\u89e6\u53d1\u5668\u8fde\u63a5\u5230\u589e\u91cf\u5668\uff09</li> <li>Design individual cells using the state diagram/state table model and combine them into a register \u4f7f\u7528\u72b6\u6001\u56fe/\u72b6\u6001\u8868\u6a21\u578b\u8bbe\u8ba1\u5355\u4e2a\u5355\u5143\u5e76\u5c06\u5b83\u4eec\u7ec4\u5408\u5230\u5bc4\u5b58\u5668\u4e2d \u628a\u5bc4\u5b58\u5668\u62c6\u6210\u5355\u4f4d\u7684\u6765\u8bbe\u8ba1\uff0c\u518d\u8003\u8651\u591a\u4f4d\u7684\u62fc\u63a5\uff0c\u6700\u540e\u7ec4\u6210\u591a\u4f4d\u5bc4\u5b58\u5668\u3002</li> </ol>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#611-register-storage-and-load-enable","title":"6.1.1 Register Storage and Load Enable","text":"<p>Expectations: \u671f\u671b\uff1a</p> <ul> <li>A register can store information for multiple clock cycles   \u4e00\u4e2a\u5bc4\u5b58\u5668\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u65f6\u949f\u5468\u671f\u7684\u4fe1\u606f</li> <li>To \u201cstore\u201d or \u201cload\u201d information should be controlled by a signal   \u201c\u5b58\u50a8\u201d\u6216\u201c\u52a0\u8f7d\u201d\u4fe1\u606f\u5e94\u7531\u4fe1\u53f7\u63a7\u5236</li> </ul> <p>\u4f46\u5728\u521a\u521a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u5468\u671f\u90fd\u4f1a\u4fdd\u5b58\u65b0\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u505a\u5230\u5728\u591a\u4e2a\u5468\u671f\u4fdd\u7559\u6570\u636e\uff0c\u56e0\u6b64\u662f\u4e0d\u884c\u7684\u3002</p> <p>Realizing expectations: \u5b9e\u73b0\u671f\u671b\uff1a</p> <ul> <li>Use a signal to block the clock to the register   \u4f7f\u7528\u4fe1\u53f7\u963b\u6b62\u5bc4\u5b58\u5668\u7684\u65f6\u949f</li> <li>Use a signal to control feedback of the output of the register back to its inputs   \u4f7f\u7528\u4fe1\u53f7\u63a7\u5236\u5bc4\u5b58\u5668\u8f93\u51fa\u5230\u5176\u8f93\u5165\u7684\u53cd\u9988</li> <li>Use other SR or JK flip-flops, that for (0,0) applied, store their state   \u4f7f\u7528\u5176\u4ed6 SR \u6216 JK \u89e6\u53d1\u5668\uff0c\u5bf9\u4e8e\u5e94\u7528\u7684 (0,0)\uff0c\u5b58\u50a8\u5b83\u4eec\u7684\u72b6\u6001</li> </ul> <p>Load is a frequent name for the signal that controls register storage and loading</p> <p>Load \u662f\u63a7\u5236\u5bc4\u5b58\u5668\u5b58\u50a8\u548c\u52a0\u8f7d\u7684\u4fe1\u53f7\u7684\u5e38\u7528\u540d\u79f0</p> <ul> <li><code>Load = 1</code>: Load the values on the data inputs   <code>Load = 1</code> \uff1a\u52a0\u8f7d\u6570\u636e\u8f93\u5165\u4e0a\u7684\u503c\uff08\u52a0\u8f7d\u5916\u90e8\u65b0\u6570\u636e\uff09</li> <li><code>Load = 0</code>: Store the values in the register   <code>Load = 0</code> \uff1a\u5c06\u503c\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff08\u4fdd\u7559\u539f\u6709\u7684\u6570\u636e\uff09</li> </ul> <ol> <li>\u4f7f\u7528\u4fe1\u53f7\u963b\u65ad\u65f6\u949f\uff0c\u6b64\u65f6\u65f6\u949f\u4fe1\u53f7\u4e0d\u4ea7\u751f\u4e0a\u5347\u6cbf\uff0cD\u89e6\u53d1\u5668\u4e5f\u5c31\u4e0d\u4f1a\u6539\u53d8</li> <li>\u6dfb\u52a0\u4fdd\u6301\u529f\u80fd\uff0c\u4eceD\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u7ed3\u679c\u5f15\u51fa\u4e00\u6761\u7ebf\u8fde\u63a5\u5230\u8f93\u5165\u9009\u62e9\u90e8\u5206</li> <li>\u6dfb\u52a0\u63a7\u5236\u4fdd\u6301\u8fd8\u662f\u52a0\u8f7d\u7684\u4fe1\u53f7Load</li> </ol> <p>Solution \u89e3\u51b3\u65b9\u6cd5</p> <ul> <li>Registers with Clock Gating   \u5e26\u65f6\u949f\u95e8\u63a7\u7684\u5bc4\u5b58\u5668,\u76f8\u5f53\u4e8eblock clock</li> </ul> <p>The \\(\\overline {Load}\\)(bar \u8868\u793a\u4f4e\u7535\u5e73\u6709\u6548) signal enables the clock signal to pass through if 0 and prevents the clock signal from passing through if 1. (\u4e0e Load \u76f8\u53cd)</p> <p>\\(\\overline {Load}\\)\uff08bar\u8868\u793a\u4f4e\u7535\u5e73\u6709\u6548\uff09\u4fe1\u53f7\u5982\u679c\u4e3a0\u5219\u5141\u8bb8\u65f6\u949f\u4fe1\u53f7\u901a\u8fc7\uff0c\u5982\u679c\u4e3a1\u5219\u963b\u6b62\u65f6\u949f\u4fe1\u53f7\u901a\u8fc7\u3002\uff08\u4e0e Load \u76f8\u53cd\uff09</p> <p>For Positive Edge-Triggered or Negative Pulse Master-Slave Flip-flop: \u5bf9\u4e8e\u6b63\u8fb9\u6cbf\u89e6\u53d1\u6216\u8d1f\u8109\u51b2\u4e3b\u4ece\u89e6\u53d1\u5668\uff1a </p> <p></p> <p>\\(Gated \\ Clock  = Clock + \\overline{Load}, \u5f53\\overline{Load}\u4fe1\u53f7\u4e3a1\u65f6\uff0c\u65f6\u949f\u4fe1\u53f7\u4e0d\u968f\u5916\u90e8\u65f6\u949f\u6539\u53d8\uff0c\u8fd9\u65f6\u4fdd\u6301\u539f\u6709\u7684\u6570\u636e\\)</p> <p>\u200b           Clock Skew \u59cb\u7ec8\u504f\u5dee</p> <p>\u200b           \u95ee\u9898\u5728\u4e8e\u6211\u4eec\u662f\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u5b9e\u73b0\uff0c\u8981\u6c42\u65f6\u949f\u7edf\u4e00\u63d0\u4f9b\uff0c\u8fd9\u6837\u6240\u6709\u7684\u89e6\u53d1\u5668\u4f1a\u5728\u540c\u4e00\u65f6\u95f4                  \u5b8c\u6210\u64cd\u4f5c\u3002\u4f7f\u7528\u95e8\u63a7\u65f6\u949f\u7684\u65b9\u5f0f\u4f1a\u5e26\u6765\u66f4\u591a\u7684\u89e6\u53d1\u65f6\u95f4\uff0c\u65f6\u5e8f\u7535\u8def\u4ece\u540c\u6b65\u53d8\u4e3a\u4e86\u5f02\u6b65\u7684\u65f6                     \u5e8f\u7535\u8def\uff08\u89e6\u53d1\u6709\u524d\u6709\u540e\uff09</p> <ul> <li>Registers with Load-Controlled Feedback   \u5177\u6709\u8d1f\u8f7d\u63a7\u5236\u53cd\u9988\u7684\u5bc4\u5b58\u5668</li> </ul> <p><code>\u6dfb\u52a0load\u4fe1\u53f7\uff0c\u63a7\u5236\u9009\u62e9\u7684\u8f93\u5165\u662fIn\uff0c\u8fd8\u662f\u8f93\u51fa\u7ed3\u679cY\u3002\u5206\u522b\u5bf9\u5e94\u52a0\u8f7d\u548c\u4fdd\u6301</code></p> <p>Run the clock continuously, and Selectively use a load control to change the register contents.</p> <p>\u8fde\u7eed\u8fd0\u884c\u65f6\u949f\uff0c\u5e76\u6709\u9009\u62e9\u5730\u4f7f\u7528\u8d1f\u8f7d\u63a7\u5236\u6765\u66f4\u6539\u5bc4\u5b58\u5668\u5185\u5bb9\u3002</p> <p></p> <ol> <li>\u5f15\u5165\u4e00\u4e2a2to1Mux\uff0cLoad\u4f5c\u4e3a\u9009\u62e9\u4fe1\u53f7</li> <li>\u5f53Load = 0\u65f6\uff0c\u52a0\u8f7d\u5bc4\u5b58\u5668\u5f53\u524d\u7684\u503c</li> <li>\u5f53Load = 1\u65f6\uff0c\u52a0\u8f7d\u8f93\u5165\u503c\uff0cY1\u5bf9\u5e94In1\uff0cY0\u5bf9\u5e94I0</li> </ol>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#612-register-transfer-operations","title":"6.1.2 Register Transfer Operations","text":"<ul> <li>Register Transfer Operations \u2013 The movement and processing of data stored in registers   \u5bc4\u5b58\u5668\u4f20\u8f93\u64cd\u4f5c \u2013 \u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u636e\u7684\u79fb\u52a8\u548c\u5904\u7406</li> <li>Three basic components: \u4e09\u4e2a\u57fa\u672c\u7ec4\u6210\u90e8\u5206\uff1a</li> <li>set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668)</li> <li>operations \u8fd0\u8425</li> <li>control of operations \u64cd\u4f5c\u63a7\u5236</li> <li>Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc.   \u57fa\u672c\u8fd0\u7b97\u2014\u2014\u52a0\u8f7d\u3001\u8ba1\u6570\u3001\u79fb\u4f4d\u3001\u52a0\u6cd5\u3001\u6309\u4f4d\u201c\u6216\u201d\u7b49\u3002</li> </ul> <p>Register Notation \u5bc4\u5b58\u5668\u7b26\u53f7</p> <ul> <li>Letters and numbers \u2013 denotes a register \uff08R2\uff0cPC\uff0cIR\uff09   \u5b57\u6bcd\u548c\u6570\u5b57 \u2013 \u8868\u793a\u5bc4\u5b58\u5668</li> <li>Parentheses ( ) \u2013 denotes a range of register bits \\((R1(1),PC(7 : 0),PC(L))\\)   \u62ec\u53f7 ( ) \u2013 \u8868\u793a\u5bc4\u5b58\u5668\u4f4d\u7684\u8303\u56f4</li> <li>Arrow (\u2190) \u2013 denotes data transfer (*e.g.* \\(R1\u2190R2,PC(L)\u2190R0)\\) H \u4ee3\u8868\u9ad8\u4f4d, L \u4ee3\u8868\u4f4e\u4f4d(\u5982 PC(L),PC(H) \u5206\u522b\u4ee3\u8868 PC \u7684\u9ad8\u516b\u4f4d\u548c\u4f4e\u516b\u4f4d)</li> <li>Comma \u2013 separates parallel operations   \u9017\u53f7 \u2013 \u5206\u9694\u5e76\u884c\u64cd\u4f5c</li> <li>Brackets [ ] \u2013 Specifies a memory address \\((e.g. R0\u2190M[AR],R3\u2190M[PC])\\) \u5bfb\u5740   \u62ec\u53f7 [ ] \u2013 \u6307\u5b9a\u5185\u5b58\u5730\u5740</li> </ul> <p></p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#6121-conditional-transfer","title":"6.1.2.1 Conditional Transfer \u6709\u6761\u4ef6\u4f20\u8f93","text":"<p>\\(If \uff08K1 = 1\uff09then \\ R2 \\leftarrow R1 \\ is \\ shortened \\ to \\ K1:(R2 \\leftarrow K2)\\)</p> <p>\u5982\u679c K1=1 \u90a3\u4e48\u5c06 R1 \u7684\u4fe1\u53f7\u4f20\u7ed9 R2, \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a K1:(R2\u2190R1), \u5176\u4e2d K1 \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002</p> <p>R2\u7b49\u5f85\u4e0a\u5347\u6cbf\u3001\u4e0b\u964d\u6cbf\u5230\u6765\uff0c\u624d\u4f1a\u63a5\u53d7\u65b0\u7684\u6570\u636e</p> <p></p> <p>Control Expression \u63a7\u5236\u8868\u8fbe\u5f0f</p> <ul> <li>\u63a7\u5236\u8868\u8fbe\u5f0f\u51fa\u73b0\u5728\u5de6\u8fb9\uff0c\u7528\u5192\u53f7\u5206\u9694</li> <li>\u903b\u8f91\u4e3a1\u8868\u793a\u8fd0\u7b97\u53d1\u751f\uff0c\u903b\u8f91\u4e3a0\u8868\u793a\u8fd0\u7b97\u4e0d\u53d1\u751f</li> </ul>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#6122-micro-operation","title":"6.1.2.2 Micro operation\u5fae\u64cd\u4f5c","text":"<ul> <li>\u5fae\u64cd\u4f5c\u51fa\u73b0\u5728\u5192\u53f7\u7684\u53f3\u4fa7\uff0c\u5305\u62ec\u4f20\u8f93\uff0c\u7b97\u672f\uff0c\u903b\u8f91\uff0c\u79fb\u4f4d</li> </ul> <p>\u8fd9\u8fb9\u7279\u522b\u6ce8\u610f\u4e00\u4e0b: \u5de6\u8fb9\u7684\u662f\u903b\u8f91\u8fd0\u7b97\uff0c+\u8868\u793a\u6216\uff0c\u53f3\u8fb9\u7684\u5fae\u64cd\u4f5c\uff0c\u903b\u8f91\u64cd\u4f5c\u6216\u4f1a\u7528V\u8868\u793a</p> <p></p> <p>\u7b97\u672f\u64cd\u4f5c</p> <p></p> <p>\u903b\u8f91\u64cd\u4f5c</p> <p></p> <p>\u79fb\u4f4d\u64cd\u4f5c</p> <p></p> <p>\u4e0d\u8db3\u4f4d\u6570\u91c7\u75280\u586b\u5145</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#613-register-transfer-structures","title":"6.1.3 Register Transfer Structures","text":"<ul> <li>Multiplexer-Based Transfers  \u7531\u591a\u8def\u9009\u62e9\u5668\u9009\u62e9\u8f93\u5165</li> <li>Bus-Based Transfers \u603b\u7ebf\u4f20\u8f93\u8f93\u5165\u548c\u8f93\u51fa\u7ed3\u679c</li> <li>Three-State Bus  \u4e09\u6001\u95e8\u4f7f\u80fd\u4e0e\u5426\u63a7\u5236\u662f\u5426\u4f5c\u4e3a\u8f93\u5165</li> <li>Other Transfer Structures</li> </ul>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#6131-multiplexer-based-transfer","title":"6.1.3.1 Multiplexer-Based Transfer \u57fa\u4e8e\u591a\u8def\u590d\u7528\u5668\u7684\u4f20\u8f93","text":"<p>Multiple inputs are selected by a multiplexer dedicated to the register</p> <p>\u57fa\u4e8e\u591a\u8def\u590d\u7528\u5668\u7684\u4f20\u8f93 - \u7531\u4e13\u7528\u4e8e\u5bc4\u5b58\u5668\u7684\u591a\u8def\u590d\u7528\u5668\u9009\u62e9\u591a\u4e2a\u8f93\u5165</p> <p></p> <p>\u63a7\u5236\u52a0\u8f7d\u7684\u4fe1\u53f7\uff0c\\(K1 + K2 \\overline K1 = K1 + K2\\),\u80fd\u591f\u7b80\u5316\u7535\u8def</p> <p></p> <p>n\u4f4d\u76842\u90091\u591a\u8def\u590d\u7528\u5668\uff0c\u8f93\u5165\u5230R0.\u5f53K1\u7b49\u4e8e1\u65f6\uff0c\u9009\u62e9\u8f93\u5165\u5230\u591a\u8def\u590d\u7528\u56681\u7684R1.</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#6132-multiplexer-and-bus-based-transfers-for-multiple-registers","title":"6.1.3.2 Multiplexer and Bus-Based Transfers for Multiple Registers","text":"<p>Multiple inputs are selected by a shared multiplexer driving a bus that feeds inputs to multiple registers</p> <p>\u57fa\u4e8e\u603b\u7ebf\u7684\u4f20\u8f93 - \u7531\u9a71\u52a8\u603b\u7ebf\u7684\u5171\u4eab\u591a\u8def\u590d\u7528\u5668\u9009\u62e9\u591a\u4e2a\u8f93\u5165\uff0c\u8be5\u603b\u7ebf\u5c06\u8f93\u5165\u9988\u9001\u5230\u591a\u4e2a\u5bc4\u5b58\u5668</p> <p></p> <p><code>\u6b64\u5904\uff0c\u4e00\u5171\u6709\u4e09\u6761Bus\u603b\u7ebf\uff0c\u4e92\u4e0d\u5e72\u6270</code></p> <p>\u5982\u4f55\u5b9e\u73b0R0\u548cR1\u7684\u4e92\u6362\uff1f</p> <ul> <li> <p>\u5148\u4ee4S0\u548cS1\u5206\u522b\u4e3a0\uff0c\u6b64\u65f6R0\u5904\u7684\u603b\u7ebf\u901a\u8fc7S1\u7684MUX\uff0cR1\u5904\u7684\u603b\u7ebf\u901a\u8fc7S0\u7684MUX\uff0c</p> </li> <li> <p>L0\u548cL1\u540c\u65f6\u53d8\u4e3a1\u7684\u65f6\u5019\uff0cR0\u548cR1\u7684\u503c\u4f1a\u53d1\u751f\u4e92\u6362</p> </li> </ul> <p>\u8fd8\u53ef\u4ee5\u5b9e\u73b0R0\u7684\u503c\u4f20\u8f93\u5230R1\uff0cR1\u7684\u503c\u4f20\u8f93\u5230R2\uff1f</p> <ul> <li>\u4ee4S1 = 0\uff0c S2 = 0</li> <li>\u518d\u4ee4L1 = L2 = 1</li> </ul> <p></p> <p><code>A single bus driven by a multiplexer lowers cost, but limits the available transfers</code></p> <p>\u7531\u4e00\u4e2a\u5355\u603b\u7ebf\u9a71\u52a8\uff0c\u591a\u8def\u590d\u7528\u5668\u964d\u4f4e\u4e86\u6210\u672c\uff0c\u4f46\u9650\u5236\u4e86\u53ef\u7528\u7684\u4f20\u8f93</p> <p><code>\u4e0d\u80fd\u540c\u65f6 R0\u2190R1 R1\u2190R0(\u7c7b\u6bd4\uff1a\u4ea4\u6362\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u53d8\u91cf)</code></p> <p>\u5982\u4f55\u5b9e\u73b0\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u4f20\u8f93\uff1f</p> <ul> <li>\u786e\u5b9a\u8c01\u662f\u88ab\u4f20\u8f93\u7684\u6570\u636e\uff0c\u5229\u7528S1\uff0cS0\u6240\u5728\u7684Mux\u8fdb\u884c\u9009\u62e9\u540e\u4f20\u8f93\u5230\u603b\u7ebf</li> <li>\u5728\u5229\u7528Load\u6307\u4ee4\uff0c\u52a0\u8f7d\u5230\u76ee\u6807\u5bc4\u5b58\u5668</li> </ul>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#6133-three-state-bus","title":"6.1.3.3 Three State Bus","text":"<p>Multiple inputs are selected by 3-state drivers with outputs connected to a bus that feeds multiple registers</p> <p>\u4e09\u6001\u603b\u7ebf - \u7531\u4e09\u6001\u9a71\u52a8\u5668\u9009\u62e9\u591a\u4e2a\u8f93\u5165\uff0c\u8f93\u51fa\u8fde\u63a5\u5230\u4e3a\u591a\u4e2a\u5bc4\u5b58\u5668\u4f9b\u7535\u7684\u603b\u7ebf</p> <p></p> <p><code>\u4e09\u6001\u95e8\u5b58\u5728\u4e09\u4e2a\u72b6\u6001\uff0c0\uff0c1\uff0c\u9ad8\u963b\u6001\uff0c\u5176\u4e2d0\uff0c1\u9700\u8981\u4f7f\u80fd\uff08E = 1\uff09</code></p> <p>\u5bc4\u5b58\u5668\u7684\u8f93\u51fa\u7ed3\u679c\u901a\u8fc7\u4e09\u6001\u95e8\u8fde\u63a5\u5230\u603b\u7ebf\uff0c\u63a7\u5236\u76ee\u524d\u662f\u54ea\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u5728\u603b\u7ebf\u4e0a</p> <p>\u5982\u4f55\u5b9e\u73b0R0\u4f20\u8f93\u5230R1</p> <ul> <li>E0 = 1\uff0c \u5c06\u5bc4\u5b58\u5668R0\u7684\u503c\u4f20\u8f93\u5230\u603b\u7ebf</li> <li>L1 = 1\uff0c Load\u4fe1\u53f7\u542f\u52a8\uff0c\u52a0\u8f7d\u8f93\u51fa\u7684\u6570\u636e</li> </ul> <p>\u540c\u6837\u65e0\u6cd5\u5b9e\u73b0\u5bc4\u5b58\u5668\u6570\u636e\u7684\u540c\u65f6\u4ea4\u6362</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#6134-other-transfer-structure","title":"6.1.3.4 Other Transfer Structure","text":"<p>Use multiple multiplexers, multiple buses, and combinations of all the above \u5176\u4ed6\u4f20\u8f93\u7ed3\u6784 - \u4f7f\u7528\u591a\u4e2a\u591a\u8def\u590d\u7528\u5668\u3001\u591a\u4e2a\u603b\u7ebf\u4ee5\u53ca\u4e0a\u8ff0\u6240\u6709\u7ed3\u6784\u7684\u7ec4\u5408</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#614-register-cell-design","title":"6.1.4 Register Cell Design","text":"<ol> <li>Register Cell Design</li> </ol> <p>Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c)</p> <p>\u5047\u8bbe\u5bc4\u5b58\u5668\u7531\u76f8\u540c\u7684\u5355\u5143\u7ec4\u6210\u3002\uff08\u6bcf\u4e2a\u6267\u884c\u4f4d\u64cd\u4f5c\u76f8\u540c\uff09</p> <ul> <li>Design representative cell for the register   \u8bbe\u8ba1\u5bc4\u5b58\u5668\u7684\u4ee3\u8868\u5355\u5143</li> <li>Connect copies of the cell together to form the register   \u5c06\u5355\u5143\u683c\u7684\u526f\u672c\u8fde\u63a5\u5728\u4e00\u8d77\u4ee5\u5f62\u6210\u5bc4\u5b58\u5668</li> <li>Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate   \u5bf9\u9700\u8981\u4e0d\u540c\u5e76\u5728\u9002\u5f53\u65f6\u6536\u7f29\u7684\u5355\u5143\u5e94\u7528\u9002\u5f53\u7684\u201c\u8fb9\u754c\u6761\u4ef6\u201d</li> </ul> <ol> <li>Register Cell specification \u5bc4\u5b58\u5668\u5355\u5143\u89c4\u683c</li> </ol> <p>\u63a7\u5236\u5bc4\u5b58\u5668\u7684\u8f93\u5165\u7ec4\u5408\u3002\u5bf9\u4e8e\u65e0\u7f16\u7801\u5668encoder\uff0c\u6267\u884c\u7684\u64cd\u4f5c\u65e0\u975e\u662fLoad\uff0cshift\uff0cAdd\u79cd\u5176\u4e00\u3002\u5bf9\u4e8e\u6709\u7f16\u7801\u5668enable\uff0c\u6ce8\u610fenable\u8f93\u51fa\u7ec4\u5408\u4f5c\u4e3a\u63a7\u5236Mux\u7684\u8f93\u5165\u3002</p> <p>\u5bc4\u5b58\u5668\u7684function\uff0cLoad\uff0cShift\uff0cAdd\u529f\u80fd\u8bbe\u8ba1</p> <p>eg: </p> <p> <p>\u200b   \u200b    </p> <p></p> <p> </p> <p></p> <p><code>\u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528Mux\u8fdb\u884c\u9009\u62e9\uff0c\u4e00\u4e2a3to1Mux\uff0c\u4e00\u4e2aXOR\uff0c\u4e00\u4e2aOR</code></p> <p><code>\u65b9\u6cd5\u4e8c\uff1a \u4f7f\u7528\u5361\u8bfa\u56fe\u8fdb\u884c\u5316\u7b80\uff0c\u7b80\u5316\u5b9e\u9a8c\u7535\u8def\uff0c\u8ba1\u7b97\u6bd4\u8f83\u590d\u6742</code></p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#62-shift-register","title":"6.2 Shift Register","text":"<p>\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u79fb\u4f4d\u5bc4\u5b58\u5668\u53ea\u662f\u4e00\u7ec4\u6309\u884c\u8fde\u63a5\u7684 D \u89e6\u53d1\u5668</p> <p>Data input, In, is called a serial input or the shift right input.</p> <p>Data output, Out, is often called the serial output(\u4e32\u884c\u8f93\u51fa).</p> <p>\u6b64\u5904\u4f7f\u7528D\u89e6\u53d1\u5668\uff0c\u80fd\u591f\u4fdd\u8bc1\u6267\u884c\u4e00\u8f6e\u79fb\u4f4d\u540e\u505c\u6b62\uff08\u4e0a\u5347\u6cbf\u505c\u6b62\uff09</p> <p></p> <p>T0 is the register state just before the first clock pulse occurs</p> <p>T1 is after the first pulse and before the second</p>"},{"location":"course/cldf/Registers%20and%20Register%20Transfers/Registers%2C%20Microoperations%20and%20Implementations/#621-parallel-load-shift-registers","title":"6.2.1 Parallel Load Shift Registers \u5e76\u884c\u52a0\u8f7d\u79fb\u4f4d\u5bc4\u5b58\u5668****","text":"<p>By adding a mux between each shift register stage, data can be shifted or loaded</p> <p>\u901a\u8fc7\u5728\u6bcf\u4e2a\u79fb\u4f4d\u5bc4\u5b58\u5668\u7ea7\u4e4b\u95f4\u6dfb\u52a0\u591a\u8def\u590d\u7528\u5668\uff0c\u53ef\u4ee5\u79fb\u4f4d\u6216\u52a0\u8f7d\u6570\u636e</p> <p>If SHIFT is low,\\(D_A\\) and \\(D_B\\) are replaced by the data on DA and DB lines, else data shifts right on each clock.</p> <p>\u5982\u679c SHIFT \u4e3a\u4f4e\u7535\u5e73\uff0c(\\(D_A\\)\\) \u548c \\(D_B\\)\u5c06\u88ab DA \u548c DB \u7ebf\u4e0a\u7684\u6570\u636e\u66ff\u6362\uff08<code>\u5e76\u884c\u52a0\u8f7d</code>\uff09\uff0c\u5426\u5219\u6570\u636e\u5728\u6bcf\u4e2a\u65f6\u949f\u4e0a\u53f3\u79fb\u3002</p> <p>\u7f3a\u70b9: \u6ca1\u6709\u6570\u636e\u4fdd\u6301\u64cd\u4f5c\uff0c\u9700\u8981\u591a\u6dfb\u52a0\u4e00\u4e2a\u9009\u62e9\u9879(3-1 \u9009\u62e9)</p> <p></p> <p>\u5f53shifit\u4e3a1\u7684\u65f6\u5019\uff0c\u8fdb\u884c\u79fb\u4f4d\u64cd\u4f5c</p> <p>\u5f53shift = 0\uff0c load = 0\uff0c\u8fdb\u884c\u6570\u636e\u4fdd\u6301\u64cd\u4f5c</p> <p>\u5f53shift = 0\uff0c Load = 1\u65f6\uff0c\u8fdb\u884c\u52a0\u8f7d\u64cd\u4f5c\uff0cQ = D</p> <p></p> <p>\u76f8\u5f53\u4e8e\u6b64\u5904\u5728\\(Q_i\\)\u524d\u9762\u52a0\u4e00\u4e2a\u591a\u8def\u9009\u62e9\u5668\uff0c\u9009\u62e9\u662f\\(Q_{i-1},Q_{i+1},Q_{i},D_i\\),\u5206\u522b\u5bf9\u5e94\u53f3\u79fb\uff0c\u5de6\u79fb\uff0c\u4fdd\u6301\uff0c\u52a0\u8f7d</p>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/","title":"Sequential Circuit Design","text":""},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#42-sequential-circuit-design","title":"4.2 Sequential Circuit Design","text":"<p>The Design procedure</p> <ul> <li> <p>Specification \u9700\u6c42\u548c\u529f\u80fd\u7684\u63cf\u8ff0\uff0c\u4e00\u822c\u4ee5\u6587\u5b57\u5f62\u5f0f</p> </li> <li> <p>Formulation - Obtain a state diagram or state table</p> </li> <li> <p>State Assignment - Assign binary codes to the states</p> </li> <li> <p>Flip-Flop Input Equation Determination - Select flip-flop types and derive flip-flop equations from next state entries in the table</p> </li> </ul> <p>\u9009\u62e9\u89e6\u53d1\u5668\u7c7b\u578b\u5e76\u5bfc\u51fa\u89e6\u53d1\u5668\u65b9\u7a0b\u4ece\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u6761\u76ee</p> <ul> <li>Output Equation Determination - Derive output equations from output entries in the table</li> </ul> <p>\u4ece\u8868\u4e2d\u7684\u8f93\u51fa\u6761\u76ee\u5bfc\u51fa\u8f93\u51fa\u65b9\u7a0b</p> <ul> <li> <p>Optimization - Optimize the equations</p> </li> <li> <p>Technology Mapping - Find circuit from equations and map to flip-flops and gate technology</p> </li> <li> <p>Verification - Verify correctness of final design</p> </li> </ul>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#421-formulation-obtain-a-state-diagram-or-state-table","title":"4.2.1 Formulation - Obtain a state diagram or state table","text":"<p>A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset).</p> <p>\u72b6\u6001\u7684\u62bd\u8c61\u5316\u3002\u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09</p> <ul> <li>state assignment</li> </ul> <p>\u6839\u636estate\u7684\u6570\u91cf\uff0c\u786e\u5b9a\u89e6\u53d1\u5668\u7684\u6570\u91cf\uff0ceach of the m states must be assigned a unique code</p> <p>minimum number of bits required is \\(n &gt;= [log_2 n]\\)</p> <ul> <li>sequence recognizer procedure \u5e8f\u5217\u8bc6\u522b\u5668</li> </ul> <p>To develop a sequence recognizer state diagram:</p> <ol> <li>Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state).</li> </ol> <p>\u4ece\u521d\u59cb\u72b6\u6001\u5f00\u59cb\uff0c\u5176\u4e2d\u5e8f\u5217\u7684\u521d\u59cb\u90e8\u5206\u5747\u672a\u53d1\u751f\uff08\u901a\u5e38\u4e3a\u201c\u91cd\u7f6e\u201d\u72b6\u6001\uff09\u3002</p> <ol> <li>Add a state that recognizes that the first symbol has occurred.</li> </ol> <p>\u6dfb\u52a0\u4e00\u4e2a\u72b6\u6001\u6765\u8bc6\u522b\u7b2c\u4e00\u4e2a\u7b26\u53f7\u5df2\u51fa\u73b0\u3002</p> <ol> <li>Add states that recognize each successive symbol occurring.</li> </ol> <p>\u6dfb\u52a0\u53ef\u8bc6\u522b\u51fa\u73b0\u7684\u6bcf\u4e2a\u8fde\u7eed\u7b26\u53f7\u7684\u72b6\u6001\u3002</p> <ol> <li> <p>The final state represents the input sequence (possibly less the final input value) occurence.</p> </li> <li> <p>Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred.</p> </li> </ol> <p>\u6dfb\u52a0\u72b6\u6001\u8f6c\u6362\u5f27\uff0c\u6307\u5b9a\u5f53\u51fa\u73b0\u4e0d\u6b63\u786e\u5e8f\u5217\u7684\u7b26\u53f7\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</p> <ol> <li>Add other arcs on non-sequence inputs which transition to    states that represent the input subsequence that has occurred.</li> </ol> <p>\u5728\u975e\u5e8f\u5217\u8f93\u5165\u4e0a\u6dfb\u52a0\u5176\u4ed6\u5f27\uff0c\u8fd9\u4e9b\u5f27\u8f6c\u6362\u5230\u8868\u793a\u5df2\u53d1\u751f\u7684\u8f93\u5165\u5b50\u5e8f\u5217\u7684\u72b6\u6001\u3002</p> <ol> <li>The last step is required because the circuit must recognize the input sequence regardless of where it occurs within the overall sequence applied since \u201creset.\u201d.</li> </ol> <p>\u8fd9\u91cc\u6211\u4eec\u4ee5\u8bc6\u522b 1101 \u4e3a\u4f8b.(Mealy \u6a21\u578b) after 110 and a 1, we have:</p> <p></p> <p>\u6ce8\u610f\u5728 D \u72b6\u6001\u4e4b\u540e\uff0c\u5e94\u8be5\u4e0e B \u72b6\u6001\u76f8\u8fde(\u56e0\u4e3a 1101101)\u4e2d\u7684\u7b2c\u4e09\u4e2a 1 \u65e2\u53ef\u4ee5\u662f\u524d\u4e00\u4e2a\u5e8f\u5217\u7684\u672b\u5c3e 1, \u4e5f\u53ef\u4ee5\u662f\u4e0b\u4e00\u4e2a\u5e8f\u5217\u7684\u8d77\u59cb 1. \u6211\u4eec\u8865\u8db3\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb:</p> <p></p> <p></p> <p>\u5982\u679c\u5c06\u521a\u521a\u7684\u72b6\u6001\u56fe \u8f6c\u4e3aMoore \u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u518d\u52a0\u4e00\u4e2a\u72b6\u6001 E, \u5f53\u5230\u8fbe E \u72b6\u6001\u65f6\u8868\u660e\u6211\u4eec\u5f97\u5230\u4e86\u5e8f\u5217 1101.</p> <p></p> <p></p>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#422-simplification-for-state-table","title":"4.2.2 Simplification for state Table","text":"<p>\u6240\u8c13\u72b6\u6001\u7b80\u5316\uff0c\u5c31\u662f\u8981\u83b7\u5f97\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u72b6\u6001\u8868\u3002\u8fd9\u4e2a\u8868\u4e0d\u4ec5\u80fd\u6b63\u786e\u5730\u53cd\u6620\u8bbe\u8ba1\u7684\u5168\u90e8\u8981\u6c42\uff0c\u800c\u4e14\u72b6\u6001\u7684\u6570\u76ee\u6700\u5c11</p> <p>\u72b6\u6001\u7b49\u6548\u7684\u5b9a\u4e49\uff1a</p> <p>\u4ec0\u4e48\u662f\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\uff1f\u72b6\u6001\u8868\u4e2d\u7684\u6b21\u6001\u548c\u8f93\u51fa\u90fd\u6709\u786e\u5b9a\u7684\u72b6\u6001\u548c\u786e\u5b9a\u7684\u8f93\u51fa\u503c</p> <p>\u7b49\u6548\u72b6\u6001\uff1a\u8bbe\u72b6\u6001S1\u548cS2\u662f\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\u4e2d\u7684\u4e24\u4e2a\u72b6\u6001\uff0c\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u5206\u522b\u4ece\u72b6\u6001S1\u548c\u72b6\u6001S2\u51fa\u53d1\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u54cd\u5e94\u5e8f\u5217\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u79f0S1\u548cS2\u662f\u7b49\u6548\u7684\uff0c\u8bb0\u4f5c\uff08S1\uff0cS2\uff09</p>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#4221","title":"4.2.2.1 \u72b6\u6001\u7b49\u6548","text":"<p>\u72b6\u6001\u7b49\u6548\u7684\u4e09\u79cd\u60c5\u51b5</p> <ol> <li>\u8f93\u51fa\u76f8\u540c</li> <li>\u6b21\u6001\u76f8\u540c\u6216\u8005\u6b21\u6001\u4ea4\u9519\u6216\u8005\u6b21\u6001\u5faa\u73af</li> </ol> <p></p> <p></p> <p>\\(S_i\u548cS_k\\)\u4e92\u4e3a\u6b21\u6001</p> <p></p> <p>\\(S_i \u548c S_j\\)\u7684\u7b49\u6548\u4f9d\u8d56\u4e8e\\(S_k \u548c S_l\\)\u7684\u7b49\u6548</p> <p></p> <p>\\(S_i \u548c S_j\\)\u7684\u7b49\u6548\u4f9d\u8d56\u4e8e\\(S_k \u548c S_l\\)\u7684\u7b49\u6548\uff0c\u540c\u65f6\\(S_k \u548c S_l\\)\u7684\u7b49\u6548\u4f9d\u8d56\u4e8e\\(S_i \u548c S_j\\)\u7684\u7b49\u6548</p>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#4222","title":"4.2.2.2 \u89c2\u5bdf\u6cd5","text":"<ul> <li>A\u548cB\uff0cC\u548cD\u7684\u8f93\u51fa\u5b8c\u5168\u76f8\u7b49\uff1b</li> <li>C\u548cD\u5728\u8f93\u5165\u7684\u5404\u79cd\u53d6\u503c\u7ec4\u5408\u4e0b\uff0c\u6b21\u6001\u76f8\u540c\uff0c\u56e0\u6b64C\u548cD\u7b49\u6548\uff1b</li> <li>A\u548cB\u5728X=1\u65f6\u7684\u6b21\u6001\u4e0d\u6ee1\u8db3\u56db\u6761\u4ef6\u4e4b\u4e00\uff0c\u56e0\u6b64A\u548cB\u4e0d\u7b49\u6548;</li> <li>\u6700\u5927\u7b49\u6548\u7c7b\u4e3a \uff0c{A}\uff0c{B}\uff0c{C,D},\u5206\u522b\u7528 A\u2032,B\u2032,C\u2032 \u8868\u793a\uff1b</li> </ul>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#4223","title":"4.2.2.3 \u9690\u542b\u8868\u6cd5\u5316\u7b80","text":"<ul> <li> <p>AB\u7684\u7b49\u6548\uff0c\u4f9d\u8d56\u4e8eCF\uff0c\u7531\u4e8eCF\u7b49\u6548\uff0c\u6240\u4ee5AB\u7b49\u6548</p> </li> <li> <p>AE\u7684\u7b49\u6548\u4f9d\u8d56\u4e8eBE\uff0cBE\u7684\u7b49\u6548\u4f9d\u8d56\u4e8eAE\uff0c\u5faa\u73af\u4f9d\u8d56\uff0c\u5747\u7b49\u6548</p> </li> <li> <p>DG\u65e0\u6cd5\u5b9e\u73b0\u7b49\u6548</p> </li> <li> <p>\u6700\u7ec8\u56db\u4e2a\u7b49\u6548\u5bf9\uff08A\uff0cB\uff09\uff0c\uff08A\uff0cE\uff09\uff0c\uff08B\uff0cE\uff09\uff0c\uff08C\uff0cF\uff09</p> </li> <li> <p>\u6700\u5927\u7b49\u6548\u7c7b\uff08A\uff0cB\uff0cE\uff09</p> </li> <li> <p>\u56db\u4e2a\u72b6\u6001\uff08A\uff0cB\uff0cE\uff09\uff08C\uff0cF\uff09\uff08D\uff09\uff08G\uff09</p> </li> </ul>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#423-state-assignment","title":"4.2.3 State Assignment","text":"<p>\u8fd0\u7528\u5206\u914d\u89c4\u5219\uff1a</p> <ol> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 </li> </ol> <p>AB\uff0cAD\uff0cBD\uff0cBC\u76f8\u90bb</p> <ol> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> </ol> <p>AB\uff0cAC\uff0cCD\u76f8\u90bb</p> <ol> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> </ol> <p>A\uff0cB\uff0cC\u4e09\u8005\u76f8\u90bb</p> <ol> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f91 0 \u3002 A\u5206\u914d\u4e3a0</li> </ol> A B D C <p>Counting Order Assignment: A = 00\uff0c B = 01\uff0cC = 10\uff0c D = 11</p> <p></p> <p>D1\u7684\u903b\u8f91\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5361\u8bfa\u56fe\u5b9e\u73b0\uff0c\u53d6\u51faY1\uff0cY2\uff0cX\uff0c\u7ed8\u5236\u5361\u8bfa\u56fe\u8fdb\u884c\u5316\u7b80</p> <p>\u540c\u7406D2\uff0c Output\u7684\u903b\u8f91\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5361\u8bfa\u56fe\u5b9e\u73b0</p> <p></p> <p>D1\u7684\u95e8\u8f93\u5165\u6210\u672c 5 + 2 = 7</p> <p>D2\uff1a 9 + 3 = 12</p> <p>Z \uff1a 3</p> <p>Gray Code Assignment:  A = 00\uff0c B = 01\uff0c C = 11\uff0c D = 10</p> <p></p> <p></p> <p>D1\u7684\u95e8\u8f93\u5165\u6210\u672c\u4e3a6\uff0cD2\u95e8\u8f93\u5165\u6210\u672c\u4e3a0\uff0cZ\u95e8\u8f93\u5165\u6210\u672c\u4e3a3</p> <p>\u5206\u914d\u7684\u57fa\u672c\u539f\u5219:</p> <ul> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f91 0</li> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002</li> </ul> <p>example\uff1a</p> <p></p> <ul> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aA\u548cB\uff0cA\u548cC\u5e94\u76f8\u90bb\u3002<code>\u4f18\u5148\u7ea7\u6700\u9ad8</code></li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aC\u548cD\uff0cC\u548cA\uff0cB\u548cD\uff0cA\u548cB\u5e94\u76f8\u90bb\uff1b</li> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1a A\uff0cB\uff0cC \u4e09\u8005\u5e94\u76f8\u90bb\uff0c\u5373A\u548cB\uff0cA\u548cC\uff0cB\u548cC\u5e94\u76f8\u90bb\uff1b</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910\uff1aA\u5206\u914d\u4e3a\u903b\u8f910\uff08\u56db\u8005\u6570\u91cf\u76f8\u540c\uff09</li> </ul> <p></p> <p>BC\u7684\u53d6\u503c\u53ef\u4ee5\u4ea4\u6362</p> <p></p> <p></p> <p>\u5148\u5c06\u4e0e\u95e8\u6216\u95e8\u7b49\u95e8\u8f6c\u5316\u4e3a NAND, \u968f\u540e\u5c06 inverter \u63a8\u51fa\u6563\u51fa\u70b9\u3002</p> <p></p>"},{"location":"course/cldf/Sequential%20Circuit/Sequential%20Circuit%20Design/#43-other-flip-flop-types","title":"4.3 Other Flip-Flop Types","text":"<ol> <li>J-K Flip-Flop</li> </ol> <ul> <li> <p>Behavior</p> </li> <li> <p>\u7c7b\u4f3c CSR \u89e6\u53d1\u5668, J \u76f8\u5f53\u4e8e S , K \u76f8\u5f53\u4e8e R.</p> </li> <li>\u4f46 J = K =1 \u65f6\uff0c\u89e6\u53d1\u5668\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6c42\u53cd\u7684\u529f\u80fd</li> <li> <p>\u4e5f\u6709\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898</p> </li> <li> <p>Implementation</p> </li> </ul> <p></p> <p></p> <ul> <li> <p>J = 0\uff0c K = 0 , \u4e0a\u65b9\u6216\u95e8\u4e00\u4e2a\u8f93\u5165\u4e3a0\uff0c\u6216\u95e8\u7ed3\u679c\u53d6\u51b3\u4e8e\u4e0b\u65b9\u7684AND\u95e8\uff0c\u800c\u4e0b\u65b9\u7684AND\u8f93\u51fa\u7ed3\u679c\u7b49\u4e8eQ\uff0c\u6240\u4ee5D\u7684\u8f93\u5165\u4ecd\u7136\u4e3aQ\uff0c\u4fdd\u6301\u539f\u72b6\u6001</p> </li> <li> <p>J = 0\uff0c K = 1\uff0c Q = 0\uff0c Reset</p> </li> <li> <p>J = 1\uff0c K = 0\uff0c Q = 1\uff0c Set </p> </li> <li> <p>J = 1\uff0c K = 1\uff0c Q\u53d8\u4e3a\\(\\overline Q\\)\u6c42\u53cd</p> </li> </ul> <ol> <li>T Flip-Flop</li> </ol> <ul> <li>Behavior</li> <li>\u7c7b\u4f3c JK \u89e6\u53d1\u5668, \u76f8\u5f53\u4e8e J = K = T. \u5f53 T=0, \u72b6\u6001\u4e0d\u53d8; \u5f53 T=1, \u72b6\u6001\u6c42\u53cd</li> <li>\u5b58\u5728\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898</li> <li> <p>\u65e0\u6cd5\u9884\u7f6e\u72b6\u6001\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a Reset \u4fe1\u53f7(\u59cb\u7ec8\u4f9d\u8d56\u524d\u4e00\u72b6\u6001)</p> </li> <li> <p>Implementation</p> </li> <li></li> <li></li> <li>T = 0\uff0c\u5728\u5f02\u6216\u95e8\u4e2d\uff0c\u4fdd\u6301Q\u4e0d\u53d8</li> <li>T = 1\uff0c \u5728\u5f02\u6216\u95e8\u4e2d\uff0c\u5c06Q\u53d6\u53cd</li> </ul> <ol> <li>Basic Flip-Flop Descriptors</li> </ol> <ul> <li>Used in analysis</li> </ul> <p>\u5df2\u77e5\u89e6\u53d1\u5668\u7684\u8f93\u5165\u548c\u73b0\u6001\uff0c\u9884\u6d4b\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u548c\u6b21\u6001</p> <ul> <li> <p>Characteristic table - defines the next state of the flip-flop in terms of flip-flop inputs and current state</p> <p>\u6839\u636e\u89e6\u53d1\u5668\u8f93\u5165\u548c\u5f53\u524d\u72b6\u6001\u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001</p> </li> <li> <p>Characteristic equation - defines the next state of the flip-flop as a Boolean function of the flip-flop inputs and the current state</p> <p>\u89e6\u53d1\u5668\u7684\u72b6\u6001\u4f5c\u4e3a\u89e6\u53d1\u5668\u8f93\u5165\u548c\u5f53\u524d\u72b6\u6001\u7684\u5e03\u5c14\u51fd\u6570</p> </li> <li> <p>Used in design</p> </li> </ul> <p>\u5df2\u77e5\u73b0\u6001\u548c\u6b21\u6001\uff0c\u9884\u6d4b\u6211\u4eec\u8981\u63d0\u4f9b\u600e\u6837\u7684\u8f93\u5165</p> <ul> <li> <p>Excitation table(\u6fc0\u52b1\u8868) - defines the flip-flop input variable values as function of the current state and next state</p> <p>\u5c06\u89e6\u53d1\u5668\u8f93\u5165\u53d8\u91cf\u503c\u5b9a\u4e49\u4e3a\u5f53\u524d\u72b6\u6001\u548c\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u51fd\u6570</p> <p><code>\u5df2\u77e5\u7ed3\u679c\uff0c\u6c42\u8f93\u5165</code></p> </li> </ul> <p>D Flip-Flop Descriptors</p> <p></p> <p>T Flip-Flop Descriptors</p> <p></p> <p>SR Flip-Flop Descriptors</p> <p>\u4e3b\u4ece\u89e6\u53d1\u5668\u4f7f\u7528\u7684\u662fCSR\u9501\u5b58\u5668</p> <p></p> <p>Q = 0\uff0c Q\u2018 = 0\uff0c\u65e2\u53ef\u80fd\u662freset\uff0c\u4e5f\u53ef\u80fd\u662fno change</p> <p>SR = 0, \u4e3a\u5408\u6cd5\u6027\u6761\u4ef6\uff0cSR\u4e0d\u80fd\u540c\u65f6\u4e3a1</p> <p>J-K Flip-Flop Descriptors</p> <p></p> <p>Q = 0\uff0c Q\u2019 = 1\uff0c\u53ef\u80fd\u662f\u56e0\u4e3aJ =1\uff0c K = 1\uff0c\u6c42\u53cd\uff1b\u4e5f\u53ef\u80fd\u662f\u56e0\u4e3aJ = 1\uff0c K = 0\uff0c Set</p> <p></p> <p></p> <p>C\u5904\u7684\u5706\u5708\u8868\u660e\u662f\u4e0b\u964d\u6cbf\u89e6\u53d1\uff0c\u4e09\u89d2\u5f62\u8868\u660e\u662f\u4e0a\u5347\u6cbf</p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/","title":"Storage Elements and Sequential Circuit Analysis","text":""},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#41-storage-element-and-analysis","title":"4.1 Storage Element and Analysis","text":"<p>\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5305\u62ec\uff1a\u7ec4\u5408\u903b\u8f91\u7535\u8def + \u5b58\u50a8\u5143\u4ef6</p> <p>Other inputs, State or Present State, are signals from storage elements.</p> <p>\u5176\u4ed6\u8f93\u5165\uff08\u72b6\u6001\u6216\u8005\u5f53\u524d\u72b6\u6001\uff09\uff0c\u662f\u6765\u81ea\u5b58\u50a8\u5143\u4ef6\u7684\u4fe1\u53f7</p> <p>The remaining outputs, Next State are inputs to storage elements</p> <p>\u5269\u4f59\u7684\u8f93\u51fa\u3001\u4e0b\u4e00\u72b6\u6001\u662f\u5b58\u50a8\u5143\u4ef6\u7684\u8f93\u5165</p> <ol> <li>Combinatorial Logic</li> </ol> <ul> <li>Next state function </li> <li>Next State = f(Inputs, State) \u6b21\u6001\u65b9\u7a0b\uff0c\u8f93\u5165\u548c\u5f53\u524d\u72b6\u6001\u5171\u540c\u51b3\u5b9a\u4e0b\u4e00\u72b6\u6001</li> <li>Output function (Mealy) Mealy\u6a21\u578b</li> <li>Outputs = g(Inputs, State)</li> <li>Output function (Moore) Moore\u6a21\u578b</li> <li>Outputs = h(State) \u8f93\u5165\u4e0d\u4f1a\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\uff0c\u800c\u662f<code>\u901a\u8fc7\u72b6\u6001\u6765\u95f4\u63a5\u6539\u53d8\u8f93\u51fa</code></li> </ul> <p>Mealy \u6a21\u578b\u548c Moore \u6a21\u578b</p> <p></p> <ol> <li>Types of Sequential Circuits \u65f6\u5e8f\u7535\u8def\u7684\u7c7b\u578b</li> </ol> <ul> <li> <p>Depends on the times at which:</p> </li> <li> <p>storage elements observe their inputs, and</p> </li> <li> <p>storage elements change their state</p> <p>\u5b58\u50a8\u5143\u4ef6\u89c2\u5bdf\u8f93\u5165\u5e76\u6539\u53d8\u5176\u72b6\u6001</p> </li> <li> <p>Synchronous \u540c\u6b65</p> </li> </ul> <p>\u6240\u6709\u7684\u5b58\u50a8\u5143\u4ef6\u66f4\u65b0\u4e00\u5b9a\u53d1\u751f\u5728\u65f6\u949f\u5468\u671f\u7684\u6574\u5468\u671f\u4e0a</p> <ul> <li>Asynchronous \u5f02\u6b65   \u5b58\u50a8\u5143\u4ef6\u66f4\u65b0\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u53d1\u751f   \u5982\u679c\u65f6\u949f\u4e5f\u88ab\u770b\u505a\u4e00\u4e2a\u8f93\u5165\uff0c\u90a3\u4e48\u6240\u6709\u7535\u8def\u90fd\u662f Asynchronous   Asynchronous \u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u6709\u9700\u8981\u7684\u65f6\u5019\u66f4\u65b0\u7535\u8def\uff0c\u964d\u4f4e\u7535\u8def\u7684\u529f\u8017</li> </ul> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u5f02\u6b65\u7535\u8def\u7684\u8bbe\u8ba1\u76f8\u5bf9\u56f0\u96be\uff08\u884c\u4e3a\u4e0e\u95e8\u7684\u4f20\u64ad\u5ef6\u8fdf\u548c\u8f93\u5165\u4fe1\u53f7\u53d8\u5316\u7684\u65f6\u95f4\u5e8f\u5217\u5bc6\u5207\u76f8\u5173\uff09</p> <p></p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#411-latch","title":"4.1.1 Latch","text":"<p>\u5f00\u542f\u9707\u8361\u6a21\u5f0f\uff0c\u6bcf1.1ns\u53d8\u5316\u4e00\u6b21\uff0c\u524d\u63d0\u662fS = 0</p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4111-basic-nandoverline-s-overline-r-latch","title":"4.1.1.1 Basic \uff08NAND\uff09\\(\\overline S - \\overline R\\) Latch","text":"R S Q \\(\\overline Q\\) Comment 1 1 ? ? Stored state unknown 1 0 1 0 Set Q = 1 1 1 1 0 now Q remembers 1 0 1 0 1 Reset Q = 0 1 1 0 1 now Q remembers 0 0 0 1 1 Both go high 1 1 \uff1f \uff1f unstable <ul> <li>$S = 0 , R = 0 $ is forbidden as input pattern</li> </ul> <p><code>\u56e0\u4e3aQ\u548c\\bar Q\u4e0d\u518d\u6ee1\u8db3\u53d6\u53cd\u7684\u6761\u4ef6\uff0c\u5f53R\uff0cS\u540c\u65f6\u53d8\u4e3a1\u65f6\uff0c\u8fdb\u5165\u5b58\u50a8\u72b6\u6001\u65f6\uff0cQ\u548c \\bar Q\u7684\u503c\u9700\u8981\u6539\u53d8\u4e14\u65e0\u6cd5\u786e\u5b9a</code></p> <ul> <li>\u7b2c\u4e00\u6b65\u548c\u6700\u540e\u4e00\u6b65\uff0cunstable\u662f\u56e0\u4e3a\uff0c\u65e0\u6cd5\u786e\u5b9aQ\u8fd8\u662f\\(\\bar Q\\)\u53d8\u62101\uff0c\u90fd\u6709\u53ef\u80fd\uff0c\u6700\u540e\u7531\u4f20\u8f93\u5ef6\u8fdf\u51b3\u5b9a</li> </ul>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4112-basicnors-r-latch","title":"4.1.1.2 Basic\uff08NOR\uff09S-R Latch","text":""},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4113-clocked-s-r-latch","title":"4.1.1.3 Clocked S-R Latch","text":"<p>\u95e8\u63a7SR \u9501\u5b58\u5668\u662f\u4e00\u79cd\u57fa\u4e8eSR \u9501\u5b58\u5668\u7684\u6539\u8fdb\u7248\u672c\uff0c\u5b83\u5f15\u5165\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u63a7\u5236\u4fe1\u53f7\uff08\u901a\u5e38\u79f0\u4e3a\u4f7f\u80fd\u4fe1\u53f7\u6216\u65f6\u949f\u4fe1\u53f7\uff09\u6765\u63a7\u5236SR \u9501\u5b58\u5668\u7684\u64cd\u4f5c\u3002\u95e8\u63a7SR \u9501\u5b58\u5668\u5728\u65f6\u949f\u4fe1\u53f7\u7684\u4f5c\u7528\u4e0b\uff0c\u53ea\u5728\u7279\u5b9a\u65f6\u523b\u624d\u5141\u8bb8\u8f93\u5165\u4fe1\u53f7\u5bf9\u9501\u5b58\u5668\u8fdb\u884c\u8bbe\u7f6e\u6216\u91cd\u7f6e\u64cd\u4f5c\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u53ef\u63a7\u7684\u5b58\u50a8\u529f\u80fd\u3002</p> <p></p> <ul> <li> <p>\u5177\u6709\u4e0e\u57fa\u672c S-R \u9501\u5b58\u5668\u7c7b\u4f3c\u7684\u65f6\u5e8f\u884c\u4e3a\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u4ec5\u5f53\u7ebf\u8def C \u4e3a\u9ad8\u7535\u5e73\u65f6\u624d\u89c2\u5bdf\u5230 S \u548c R \u8f93\u5165\u3002</p> </li> <li> <p>C \u8868\u793a\u201c\u63a7\u5236\u201d\u6216\u201c\u65f6\u949f\u201d\u3002</p> </li> <li> <p>\u4f5c\u4e3a\u4e00\u4e2a ENABLE \u7684\u529f\u80fd\u3002\u5f53$ C=0$ \u65f6\uff0c\\(Q\\) \u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u5f53 \\(C\\)=1 \u65f6\uff0c\u4e0a\u9762\u76f8\u5f53\u4e8e \\(\\bar S\\), \u4e0b\u9762\u76f8\u5f53\u4e8e \\(\\bar R\\), \u53d8\u6210\u4e00\u4e2a\u949f\u63a7\u7684 SR \u9501\u5b58\u5668\u3002</p> </li> </ul> <p>\u5f53S\u548cR\u90fd\u4e3a1\uff0c\u4e14C= 1\u65f6\uff0c\u662f\u8fdd\u6cd5\u72b6\u6001\uff0c\u76f8\u5f53\u4e8eS-R Latch\u7684\\(S=0,R=0\\)\u72b6\u6001</p> C S R Q(t+1) 0 X X no change(\u5b58\u50a8\u72b6\u6001) 1 0 0 no change\uff0811\uff0c\u5b58\u50a8\u72b6\u6001\uff09 1 0 1 0\uff1aClear Q 1 1 0 1\uff1a Set Q 1 1 1 \uff0800\uff09\u975e\u6cd5\u72b6\u6001 <p>\u6b64\u5904\u4f60\u4f1a\u53d1\u73b0\uff0cS\u548cR\u7684\u53d6\u503c\u7ec4\u5408\u6240\u5f97\u7ed3\u679c\u4e0eSR\u9501\u5b58\u5668\u76f8\u53cd\u3002</p> <p>\u539f\u56e0\u5728\u4e8e\uff0c\u5f53C = 1\u65f6\uff0c S AND C = S\uff0c\u7ecf\u8fc7\u975e\u95e8\u4f5c\u7528\u540e\uff0c\u8f93\u51fa\u7ed3\u679c\u4e3a\\(\\overline S, \\overline R\\)</p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4114-d-latch","title":"4.1.1.4 D Latch","text":"<p>\u4e3a\u4e86\u6d88\u9664\u975e\u6cd5\u72b6\u6001\u7684\u5f71\u54cd\uff0c\u9632\u6b6211\u7684\u51fa\u73b0</p> <p></p> C D Q\uff08t+1\uff09 0 X no change 1 0 0 : clear Q 1 1 1 : Set Q <p><code>\u5f53C = 1\u65f6, Q = D</code></p> <p>S \u548c R \u8f93\u5165\u59cb\u7ec8\u4fdd\u6301\u76f8\u53cd\uff0c\u5bfc\u81f4 0 \u548c 0\u7684\u8f93\u5165\u4e5f\u6d88\u5931\uff0c\u4e5f\u5c31\u662f\u5b58\u50a8\u529f\u80fd\u6d88\u5931\u4e86</p> <p>\u4f46\u662f\u5f53C = 0\u65f6\uff0c\u4e5f\u80fd\u8fbe\u5230\u5b58\u50a8\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u6ca1\u6709\u5f71\u54cd\u3002</p> <p>\u9501\u5b58\u5668\u7684\u7a7a\u7ffb\u73b0\u8c61:</p> <p>D \u9501\u5b58\u5668\u4e5f\u5b58\u5728\u95ee\u9898\u3002\u5982\u679c\u6211\u95e8\u5c06 \\(\\overline Q\\) \u63a5\u5230 D \u4e0a\uff0c\u5c31\u4f1a\u53d1\u73b0 D \u9501\u5b58\u5668\u5c06\u4e0d\u505c\u7684\u53d8\u5316\u5176\u4e2d\u7684\u6570\u636e\uff0c\u51fa\u73b0 \u7a7a\u7ffb\uff0c\u5bfc\u81f4\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a C \u7f6e 0 \u65f6 Q \u7684\u8f93\u51fa\u7a76\u7adf\u662f\u4ec0\u4e48\uff0c\u800c\u8fd9\u662f\u975e\u5e38\u5371\u9669\u7684\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5f53D \u9501\u5b58\u5668\u7684\u8f93\u5165\u4fe1\u53f7\u5728\u65f6\u949f\u4fe1\u53f7\u7684\u4e0a\u5347\u6cbf\uff08\u6216\u4e0b\u964d\u6cbf\uff09\u5230\u6765\u65f6\u53d1\u751f\u53d8\u5316\uff0c\u5e76\u4e14\u5728\u65f6\u949f\u4fe1\u53f7\u7684\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\uff08\u6216\u4e0b\u964d\u6cbf\uff09\u5230\u6765\u524d\uff0c\u8f93\u5165\u4fe1\u53f7\u518d\u6b21\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u53ef\u80fd\u5bfc\u81f4\u201d \u7a7a\u7ffb\u201d \u73b0\u8c61\u7684\u51fa\u73b0\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cD \u9501\u5b58\u5668\u7684\u8f93\u51fa\u4f1a\u5728\u4e24\u4e2a\u8fde\u7eed\u7684\u65f6\u949f\u5468\u671f\u5185\u51fa\u73b0\u4e24\u6b21\u7ffb\u8f6c\u3002</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a\u6d88\u9664\u7a7a\u7ffb\u73b0\u8c61\uff0c\u4f7f\u6bcf\u6b21\u89e6\u53d1\u4ec5\u4f7f\u9501\u5b58\u5668\u7684\u5185\u90e8\u72b6\u6001\u4ec5\u6539\u53d8\u4e00\u6b21.</p> <p>\u9a8c\u8bc1D\u9501\u5b58\u5668\u7684\u7a7a\u7ffb\u73b0\u8c61</p> <p></p> <p></p> <p>(a) \u57280-20ns\uff0cC = 0, D = 1, \u5f97\u5230\u8f93\u51fa\u7ed3\u679c\u5f85\u5b9a</p> <p>(b) \u572820-40ns\uff0cC = 1\uff0cD = 1\uff0c\u5f97\u5230\u8f93\u51fa\u7ed3\u679cQ=1\uff0cQbar=0</p> <p>\u00a9 \u572840-50ns\uff0cC = 0\uff0cD = 1\uff0c\u4fdd\u6301\u539f\u72b6\u6001\u3002</p> <p>(d) \u572850-60ns\uff0cD = 0\uff0cQbar \u6210\u4e3a\u8f93\u5165\uff0c\u4f46\u662f\u7531\u4e8eC=0\uff0c\u4fdd\u6301\u539f\u72b6\u6001\u3002</p> <p>(e) \u4e4b\u540e\uff0cQbar \u4f5c\u4e3a\u8f93\u5165\uff0cC=1\uff0c\u5f00\u542f\u632f\u8361\uff0cQ \u548cQbar \u4ea4\u66ff\u53d8\u5316\u3002</p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#412-flip-flop","title":"4.1.2 Flip-Flop \u89e6\u53d1\u5668","text":"<p>\u9501\u5b58\u5668\u4e0d\u9002\u5408\u4f7f\u7528\u5728\u7535\u8def\u4e2d\uff1a\u4e0d\u80fd\u505a\u5230\u4e00\u4e2a\u5468\u671f\uff0c\u72b6\u6001\u53ea\u66f4\u65b0\u4e00\u6b21\u3002</p> <p></p> <p></p> <p>\u53ea\u8981C = 1 \uff0c Y\u7684\u503c\u5c31\u4f1a\u4e0d\u65ad\u5730\u53d8\u5316</p> <p>\u6211\u4eec\u671f\u671b\u7684\u662f\uff1aY\u7684\u503c\u6bcf\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u53d8\u5316\u4e00\u6b21</p> <p>\u6253\u65adD\u5230Q\u7684\u76f4\u8fde\u901a\u9053\uff0c\u6dfb\u52a0\u4e00\u4e2a\u4e2d\u95f4\u4ef6</p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4121-masterslave-flip-flop","title":"4.1.2.1 Master\u2014Slave Flip-Flop","text":"<ul> <li>\u524d\u9762\u79f0\u4e3a master(\u4e3b\u9501\u5b58\u5668), \u540e\u9762\u79f0\u4e3a slave(\u4ece\u9501\u5b58\u5668)</li> <li>\u5f53 \\(C=0\\) \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u4e0d\u53d8\u3002\u4ece\u9501\u5b58\u5668\u5904\u4e8eEnable\u72b6\u6001\uff0cS\uff0cR\u8f93\u5165\u672a\u77e5\uff0cQ\uff0c\\(\\bar Q\\) \u7ed3\u679c\u672a\u77e5</li> <li>\u4e0d\u59a8\u8bbe\\(S= 1, Q = 0\\) \\(,C \\(\u4ece 0 \u53d8\u4e3a 1 \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u88ab\u4f7f\u80fd\uff0cQ \u6539\u53d8\\)Q = 1, \\bar Q = 0\\)\uff0c\u4f46\u4ece\u9501\u5b58\u5668\u4e0d\u53d8\uff0c\u8f93\u51fa\u7ed3\u679c\u4e0d\u53d8\u3002</li> <li>\\(C\\) \u4ece 1 \u53d8\u4e3a 0\u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u4e0d\u53d8\u3002\u4ece\u9501\u5b58\u5668\u5904\u4e8eEnable\u72b6\u6001\uff0c\\(Q = 1, \\bar Q = 0\\)</li> </ul> <p>\u5468\u671f\u53d8\u957f\u4e00\u500d \u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898(1s catching)\uff1a\u5f53 S R \u5747\u4e3a 0 \u65f6\u5982\u679c\u6709\u5c0f\u6270\u52a8\uff0c\u65e0\u6cd5\u590d\u539f\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\u7684\u89e3\u91ca</p> <p>S and/or R are permitted to change while C = 1</p> <ul> <li>Suppose Q = 0 and S goes to 1 and then back to 0 with R remaining at 0</li> </ul> <p>\u5f53SR\u521d\u59cb\u72b6\u6001\u4e3a00\uff0cS\u4ea7\u751f\u4e00\u4e2a\u5c0f\u8109\u51b2\uff0c\u4ece0\u53d8\u4e3a1\uff0c\u518d\u53d8\u4e3a0</p> <ul> <li> <p>The master latch sets to 1. <code>\u5bfc\u81f4\u4e3b\u9501\u5b58\u5668\u7684\u8f93\u51faQ\u2019\u53d8\u4e3a1</code></p> </li> <li> <p>A 1 is transferred to the slave <code>\u8be5\u7ed3\u679c\u88ab\u4f20\u8f93\u7ed9\u4ece\u9501\u5b58\u5668</code></p> </li> <li> <p>Suppose Q = 0 and S goes to 1 and back to 0 and R goes to 1 and back to 0</p> </li> </ul> <p>SR\u521d\u59cb\u72b6\u6001\u4e3a00\uff0cS\u5148\u4ece0\u53d8\u4e3a1\uff0c\u518d\u53d8\u4e3a0\u3002R\u518d\u4ece0\u53d8\u4e3a1\uff0c\u518d\u53d8\u4e3a0</p> <ul> <li> <p>The master latch sets and then resets</p> <p><code>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3b\u9501\u5b58\u5668\u5148\u7ecf\u5386Set\uff0c\u8f93\u51fa\u7ed3\u679cQ\u2018=1\uff0c\u518d\u7ecf\u5386Reset\uff0c\u8f93\u51fa\u7ed3\u679c\u53d8\u4e3a0</code></p> </li> <li> <p>A 0 is transferred to the slave</p> </li> </ul> <p>\u2022 This behavior is called 1s catching</p> <p></p> <p>0-25ns\uff0cC = 0\uff0c \u4ece\u9501\u5b58\u5668\u8f93\u51fa\u672a\u77e5</p> <p>25ns-50ns\uff0c\u4e3b\u9501\u5b58\u5668\u4e0d\u5f71\u54cd\u4ece\u9501\u5b58\u5668\uff0cQ\u2018 = 1\uff0c\u8f93\u51fa\u4ecd\u7136\u672a\u77e5</p> <p>50ns-75ns\uff0c\u4ece\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0cQ\u2018=1\uff0c\u8f93\u51faQ=1</p> <p>75ns-100ns\uff0c\u4e3b\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0cS=0\uff0cR=1\uff0cQ\u2019=0\uff0c\u4f46\u662f\u4ece\u9501\u5b58\u5668\u8f93\u51fa\u4e0d\u53d8</p> <p>100ns-125ns\uff0c\u4ece\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0c\u7531\u4e8eQ\u2019=0\uff0c\u8f93\u51faQ=0</p> <p>125ns-150ns\uff0c\u4e3b\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0cS=0\uff0cR=0\uff0cQ\u2018=1\uff0cQ\u2019bar=1</p> <p>150ns-175ns\uff0c\u4ece\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0c\u8f93\u5165\u662f11\uff0c\u4fdd\u6301\u4e4b\u524d\u7684\u72b6\u6001\uff0cQ=0</p> <p>175ns-200ns\uff0c\u4e3b\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0c\u4e2d\u95f4S\u4ece0\u53d8\u4e3a1\uff0c\u5bfc\u81f4\u8f93\u51faQ'\u53d8\u4e3a1\uff0c\u4e4b\u540e\u867d\u7136S\u53d8\u4e3a0\uff0c\u4f46\u662fS=0\uff0cR=0\uff0c\u5f97\u5230\u7684\u662f\u4fdd\u6301\u539f\u6765\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u662fQ\u2019=1</p> <p>200-225ns\uff0c\u4ece\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0c\u7531\u4e8eQ'=1,\u5bfc\u81f4\u8f93\u51faQ=1\uff0c\u4f46\u662f\u6309\u7167\u539f\u6765\u7684\u60f3\u6cd5\uff0c\u8109\u51b2\u8fd4\u56de\u539f\u6765\u7684\u72b6\u6001\uff0c\u4f46\u662fQ\u6ca1\u6709\u6309\u7167\u539f\u6765\u7684\u72b6\u6001</p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4122-edge-triggered-d-filp-flop","title":"4.1.2.2 Edge-Triggered D Filp-Flop","text":"<ol> <li>An edge-triggered flip-flop ignores the pulse while it is at a constant level and triggers only during a transition of the clock signal.</li> </ol> <p>\u8fb9\u6cbf\u89e6\u53d1\u89e6\u53d1\u5668\u4f1a<code>\u5ffd\u7565\u5904\u4e8e\u6052\u5b9a\u7535\u5e73\u7684\u8109\u51b2</code>\uff0c\u5e76\u4e14\u4ec5\u5728\u65f6\u949f\u4fe1\u53f7\u8f6c\u6362\u671f\u95f4(\u8fb9\u6cbf\u4ea4\u754c\u5904)\u89e6\u53d1\u3002</p> <ol> <li>A master-slave D flip-flop which also exhibits edge-triggered behavior can be used.</li> </ol> <p>\u53ef\u4ee5\u4f7f\u7528\u4e5f\u5177\u6709\u8fb9\u6cbf\u89e6\u53d1\u884c\u4e3a\u7684\u4e3b\u4ece D \u89e6\u53d1\u5668\u3002</p> <ol> <li>The delay of the S-R master-slave flip-flop can be avoided since the 1s-catching behavior is not present with D replacing S and R inputs.</li> </ol> <p>\u7531\u4e8e\u7528 D \u4ee3\u66ff S \u548c R \u8f93\u5165\uff0c\u4e0d\u5b58\u5728 1 \u6355\u6349\u884c\u4e3a\uff0c\u56e0\u6b64\u53ef\u4ee5\u907f\u514d S-R \u4e3b\u4ece\u89e6\u53d1\u5668\u7684\u5ef6\u8fdf\u3002</p> <ol> <li><code>D\u89e6\u53d1\u5668\u53d1\u660e\u7684\u539f\u56e0\uff0c\u5728\u4e8e\u89e3\u51b3MS FLIP-FLOP \u4e3b\u4ece\u89e6\u53d1\u5668\u7684\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\u3002D\u9501\u5b58\u5668\u7684\u4f7f\u7528\u76f4\u63a5\u89e3\u51b3\u4e86SR\u540c\u65f6\u4e3a0\u7684\u60c5\u51b5\uff0c\u5c3d\u7ba1\u51fa\u73b0\u8109\u51b2\uff0c\u4e5f\u80fd\u591f\u6062\u590d\u6b63\u5e38\u3002</code></li> </ol> <p>Positive-Edge Triggered D Flip-Flop</p> <p><code>\u4e0a\u5347\u6cbf\u548c\u4e0b\u964d\u6cbf\uff0c\u770b\u7684\u662f\u8f93\u5165\u5230D\u89e6\u53d1\u5668C\u8f93\u5165\u7aef\u7684\u503c\u4e0eCLK\u7684\u5173\u7cfb\u3002\u4e0a\u5347\u610f\u5473\u7740\uff0cCLK\u4ece0\u53d8\u4e3a1\uff0c\u57280\u9636\u6bb5\uff0c\u5b9e\u73b0\u4e3b\u9501\u5b58\u5668Q\u2019\u7684\u6539\u53d8\uff0c\u57281\u9636\u6bb5\uff0c\u5b9e\u73b0Q\u2018\u7684\u8f93\u51fa\u3002\u4e5f\u5c31\u662f\u8bf40\u9636\u6bb5\uff0c\u4e3b\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\uff0c1\u9636\u6bb5\u4ece\u9501\u5b58\u5668\u53d1\u6325\u4f5c\u7528\u3002</code></p> <p><code>\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ece\u9501\u5b58\u5668\u8bfb\u53d6\u7684Q\u2018\u662f\u4e3b\u9501\u5b58\u5668\u5728clk = 0 \u7684\u6700\u540e\u4e00\u523b\u786e\u5b9a\u7684\uff08D\u89e6\u53d1\u5668\u89c4\u907f\u4e86\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff09\uff0c\u5bf9\u5e94\u7684\u4e5f\u5c31\u662f\u8fb9\u6cbf\u3002</code></p> <p>\u5bf9\u4e8e\u4e0a\u5347\u6cbf\uff0c\u4e3b\u9501\u5b58\u5668C\u524d\u9762\u6709\u4e00\u4e2a\u975e\u95e8 0 -&gt; 1 ,\u8fdb\u884c\u8f93\u51fa </p> <p>\u5bf9\u4e8e\u4e0b\u964d\u6cbf\uff0c\u4ece\u9501\u5b58\u5668C\u524d\u9762\u6709\u4e00\u4e2a\u975e\u95e8</p> <p></p> <p></p> <p>(a) \u5f53R = S = 1 \u65f6\u8f93\u51faQ \u968f\u7740\u8f93\u5165D \u7684\u53d8\u5316\u800c\u53d8\u5316</p> <p>(b) \u5728R = 0\uff0cS = 1 \u65f6\uff0c\u8f93\u51faQ \u4e3a0</p> <p>\u00a9 R = 1\uff0cS = 0 \u65f6\uff0c\u8f93\u51faQ \u4e3a1\uff08Direct Input\uff0c\u6b64\u65f6\u8f93\u51fa\u4e0eC D \u7684\u503c\u65e0\u5173\uff09\u548c\u771f\u503c\u8868\u76f8\u7b26\uff0c\u7b26\u5408\u9884\u671f\u3002</p> <p>(d) \u4e0a\u5347\u6cbf\u89e6\u53d1\u4f53\u73b0\u5728\uff1a\u5728120ns \u65f6\uff0cD \u4ece0 \u53d8\u4e3a1\uff0c\u4f46\u7531\u4e8e\u6b64\u65f6C \u4e0d\u53d8\uff0c\u6240\u4ee5Q \u4e0d\u53d8\uff0c\u76f4\u5230150ns\uff0cC \u4ece0 \u53d8\u4e3a1\uff0c\u8fd9\u65f6Q \u624d\u53d8\u4e3a1</p> <p></p> <p>\u4e0e\u4e0a\u9762\u7684D\u89e6\u53d1\u5668\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c\uff0c\u4f46\u662f\u95e8\u8f93\u5165\u6210\u672c\u66f4\u4f4e</p> <p>Standard symbol for storage Elements:</p> <p></p> <p></p> <p>Direct Input:</p> <p></p> <ul> <li>Direct R and/or S inputs that control the state of the latches within the flip-flops are used for this initialization.</li> </ul> <p>For the example flip-flop shown</p> <ul> <li>0 applied to \\(\\overline R\\) resets the flip-flop to the 0 state</li> <li>0 applied to \\(\\overline S\\) sets the flip-flop to the 1 state</li> </ul>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#413-analysis","title":"4.1.3 Analysis","text":"<p>\u5229\u7528\u540c\u6b65\uff0c\u6240\u6709\u7684\u89e6\u53d1\u5668\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u6539\u53d8</p> <ul> <li>Current State at time (t) is stored in an array of flip-flops.</li> <li>Next State at time (t+1) is a Boolean function of State and Inputs.</li> <li>Outputs at time (t) are a Boolean function of State (t) and (sometimes) Inputs (t).</li> </ul> <p>\u4f8b\u5b50\uff1a</p> <p></p> <ul> <li>\u6b64\u5904\u7684CP\u4e5f\u5c31\u662fCLK\uff0c\u662f\u65f6\u949f\uff0c<code>\u65f6\u95f4\u4fe1\u53f7\u4e0d\u4f1a\u51fa\u73b0\u5728\u72b6\u6001\u56fe\uff08\u72b6\u6001\u53d8\u8fc1\uff09**\uff0c**\u4e0d\u662f\u5916\u90e8\u4fe1\u53f7\u8f93\u5165</code></li> <li>\u5c06\u89e6\u53d1\u5668\u7684\u8f93\u51fa\uff0c\u89c6\u4f5c\u7535\u8def\u7684\u72b6\u6001state</li> <li>\\(state \uff1a A(t),B(t)\\),n\u4e2a\u89e6\u53d1\u5668\u5c31\u6709\\(2^n\\)\u4e2a\u72b6\u6001\u7ec4\u5408</li> <li>\\(Input: x(t)\\)</li> <li>\\(Output: y(t)\\)</li> <li>\u7531\u4e8e\u662fD\u89e6\u53d1\u5668\uff0c\u4e0b\u4e00\u72b6\u6001\u503c\u7531D\u51b3\u5b9a(\u5373\\(Q = D\\))\uff0c\u6240\u4ee5\\(\\(A(t+1)= D_A(t)\\)\\)</li> <li></li> </ul>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4131-state-table","title":"4.1.3.1 State Table","text":"<ul> <li>Present State \u2013 the values of the state variables for each allowed state.</li> <li>Input \u2013 the input combinations allowed.</li> <li>Next-state \u2013 the value of the state at time (\\(\\(t+1\\)\\)) based on the present state and the input.</li> <li>Output \u2013 the value of the output as a function of the present state and (sometimes) the input.</li> </ul> <p>\u884c\u6570\u7531\u8f93\u5165\u7ec4\u5408\u51b3\u5b9a\uff0c\u4e24\u4e2a\u89e6\u53d1\u5668\uff0c\u4e24\u4e2a\u72b6\u6001\uff0c+ input = 3</p> <p>\u5f53x\uff08t\uff09= 0 \u65f6\uff0cNext state \u5747\u53d8\u4e3a\uff080 0\uff09</p> <p>\u5f53x\uff08t\uff09= 1\u65f6\uff0cNext state \u5386\u7ecf\uff080\uff0c0\uff09\uff0c\uff080\uff0c1\uff09\uff0c\uff081\uff0c1\uff09\uff0c\uff081\uff0c0\uff09</p> <p></p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4132-state-diagrams","title":"4.1.3.2 State Diagrams \u72b6\u6001\u56fe","text":"<ul> <li>A circle with the state name in it for each state </li> </ul> <p>\u6bcf\u4e00\u4e2a\u5706\u5708\u8868\u793a\u4e00\u4e2a\u72b6\u6001\uff0c\u591a\u5c11\u4e2a\u72b6\u6001\u8f93\u5165\uff0c\u5c31\u6709\\(2^n\\)\u4e2a\u5706\u5708</p> <ul> <li>A directed arc from the Present State to the Next State for each state transition</li> </ul> <p>\u6bcf\u4e2a\u72b6\u6001\u8f6c\u6362\u4ece\u5f53\u524d\u72b6\u6001\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u6709\u5411\u5f27</p> <ul> <li>A label on each directed arc with the Input values which causes the state transition, and A label:</li> </ul> <p>\u6bcf\u4e2a\u6709\u5411\u5f27\u4e0a\u7684\u6807\u7b7e\uff0c\u5176\u4e2d\u5305\u542b\u5bfc\u81f4\u72b6\u6001\u8f6c\u6362\u7684\u8f93\u5165\u503c</p> <p>\u8f93\u51fa\u548c\u8f93\u5165\u662f\u5426\u6709\u5173\uff0c\u65e0\u5173\u6807\u5728\u5708\u91cc\u9762\uff0c\u6709\u5173\u6807\u5728\u5916\u9762</p> <ul> <li>On each circle with the output value produced, or</li> <li>On each directed arc with the output value produced.</li> </ul> <ol> <li><code>**Moore** type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762)</code></li> </ol> <p>\u8f93\u51fa\u4ec5\u53d6\u51b3\u4e8e\u72b6\u6001</p> <ol> <li>**<code>Mealy** type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a)</code></li> </ol> <p>\u8f93\u51fa\u53d6\u51b3\u4e8e\u72b6\u6001\u548c\u8f93\u5165</p> <p></p> <p>\u659c\u6760\u5de6\u8fb9\u8868\u793a\u5916\u90e8\u8f93\u5165\uff0c\u53f3\u8fb9\u8868\u793a\u8f93\u51fa\u7ed3\u679c\uff0cMealy\u578b\u8f93\u51fa\u5199\u5728\u6709\u5411\u5f27\u4e0a</p> <p>Equivalent State Definitions</p> <p>\u4e24\u4e2a\u72b6\u6001\uff0c\u65e0\u8bba\u8f93\u5165\u662f\u4ec0\u4e48\uff0c\u90fd\u4f1a\u4f7f\u8fd9\u4e24\u4e2a\u72b6\u6001\u8f93\u51fa\u76f8\u540c\uff0c\u6b21\u6001\u4e5f\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u72b6\u6001\u662f\u7b49\u6548\u72b6\u6001\u3002</p> <p></p> <p>\u89c2\u5bdfS2\u548cS3\uff0c\u5f53\u8f93\u5165\u4e3a0\uff0c\u8f93\u51fa\u90fd\u4e3a1\uff0c\u6b21\u6001\u90fd\u4e3aS0\u3002\u5f53\u8f93\u5165\u4e3a1\uff0c\u8f93\u51fa\u90fd\u662f0\uff0c\u6b21\u6001\u90fd\u4e3aS2.\u8bf4\u660eS2\u548cS3\u662f\u7b49\u6548\u72b6\u6001\u3002</p> <p></p> <p>\u89c2\u5bdfS1\u548cS2\uff0c\u5f53\u8f93\u5165\u4e3a0\u662f\uff0c\u8f93\u51fa\u90fd\u4e3a1\uff0c\u6b21\u6001\u90fd\u4e3aS0.\u8f93\u5165\u4e3a1\u65f6\uff0c\u8f93\u51fa\u90fd\u4e3a0\uff0c\u6b21\u6001\u90fd\u4e3aS2\uff0c\u4e24\u8005\u4e3a\u7b49\u6548\u72b6\u6001\u3002</p> <p></p> <p>D\u89e6\u53d1\u5668\u7684\u4e2a\u6570\u75312\u4e2a\u53d8\u4e3a1\u4e2a\uff0c\u5b9e\u73b0\u4e86\u7535\u8def\u7684\u7b80\u5316</p> <p>Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs). Two formal models exist:</p> <ul> <li>Moore Model</li> <li>Outputs are a function ONLY of states</li> <li>Usually specified on the states.</li> <li>Mealy Model</li> <li>Outputs are a function of inputs AND states</li> <li>Usually specified on the state transition arcs. </li> </ul> <p></p> <p></p> <p>Example2\uff1a</p> <p></p> <p></p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4133-flip-flop-timing-parameters","title":"4.1.3.3 Flip-Flop Timing Parameters \u89e6\u53d1\u5668\u65f6\u5e8f\u53c2\u6570","text":"<p>\u4e3b\u4ece\u8109\u51b2\u89e6\u53d1\u5668\uff08positive pulse\uff09</p> <ul> <li> <p>\\(t_s\\) \uff1a\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0cts\u7b49\u4e8e\u89e6\u53d1\u8109\u51b2\u7684\u5bbd\u5ea6</p> </li> <li> <p>\\(t_w\\) : clock pulse width \u65f6\u949f\u8109\u51b2\u5bbd\u5ea6</p> </li> <li>\\(t_s\\)\u4e0eC\u5904\u4e8e\u9ad8\u7535\u5e73\u7684\u65f6\u95f4\u76f8\u540c\uff08\u8fd9\u6bb5\u65f6\u95f4SR\u4e0d\u80fd\u53d1\u751f\u6539\u53d8\uff09\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898</li> <li></li> </ul> <p>\u4e0b\u8fb9\u6cbf\u89e6\u53d1\u5668\uff08negative edge\uff09\uff0cC\u4ece\u9ad8\u7535\u5e73\u53d8\u4e3a\u4f4e\u7535\u5e73\u65f6\u89e6\u53d1\u3002</p> <ul> <li> <p>\\(t_s\\) : setup time. \u5728C\u4e0b\u964d\u4e4b\u524d\u8981\u5148\u51c6\u5907\u597d\u3002\u7b49\u4e8e\u901a\u5e38\u8fdc\u5c0f\u4e8e\u89e6\u53d1\u8109\u51b2\u5bbd\u5ea6\u7684\u65f6\u95f4\u95f4\u9694</p> </li> <li> <p>\\(t_h\\) : hold time. \u89e6\u53d1\u4e4b\u540e\u8fd8\u8981\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4\uff0c\u901a\u5e38\u7b49\u4e8e0</p> </li> <li> <p>\\(t_{px}\\) : propagation delay. \u4f20\u8f93\u5ef6\u8fdf</p> </li> </ul> <p>Measured from clock edge that triggers the output change to the output change.</p> <p>\u6839\u636e\u5b9a\u4e49, \\(t_s\\)\u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002</p> <p>\u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002</p>"},{"location":"course/cldf/Sequential%20Circuit/Storage%20Elements%20and%20Sequential%20Circuit%20Analysis/#4134-circuit-and-system-level-timing","title":"4.1.3.4 Circuit and System Level Timing","text":"<ul> <li> <p>\\(t_p\\) :  clock period</p> </li> <li> <p>$t_{pd,COMB} : $ total delay of combinational logic along the path from flip-flop output to flip-flop input</p> </li> </ul> <p>\u4ece\u89e6\u53d1\u5668\u8f93\u51fa\u5230\u89e6\u53d1\u5668\u8f93\u5165\u8def\u5f84\u4e0a\u7ec4\u5408\u903b\u8f91\u7684\u603b\u5ef6\u8fdf</p> <ul> <li>\\(t_{slack}\\) : extra time in the clock period in addition to the sum of the delays and setup time on a path. \u677e\u5f1b\u65f6\u95f4\uff08\u4f11\u606f\uff09\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e 0.\u624d\u80fd\u6b63\u786e\u8fd0\u884c</li> </ul> <p></p> <p>\u5bf9\u4e8eEdge-triggered \uff0c \u5148\u662f(\\(t_{pd\uff0cFF}\\)\\)\u89e6\u53d1\u5668\u4f20\u8f93\u5ef6\u8fdf \uff0c\u518d(\\(t_{pd,COMB}\\)\\),\u7ec4\u5408\u903b\u8f91\u7535\u8def\u4f20\u8f93\u5ef6\u8fdf\uff0c(\\(t_s\\)\\)\u662fset time\uff0c\u51c6\u5907\u65f6\u95f4</p> <p>\u5bf9\u4e8ePulse- triggered \uff0c(\\(t_s\\)\\)\u5360\u636e\u4e00\u6574\u4e2a\u4f4e\u7535\u5e73\u7684\u65f6\u95f4</p> <p>(\\(t_{slack}\\)\\) \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e0\uff0c\u624d\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u8fb9\u6cbf\u89e6\u53d1\u7684(\\(t_s\\)\\)\u8f83\u5c0f\uff0c\u8109\u51b2\u89e6\u53d1\u7684(\\(t_s\\)\\)\u8f83\u5927\uff0c\u4e3a\u4e86\u5c3d\u53ef\u80fd\u7f29\u5c0f(\\(t_p\\)\\),\u5c3d\u53ef\u80fd\u51cf\u5c0f\u7ec4\u5408\u903b\u8f91\u7535\u8def\u7684\u4f20\u8f93\u5ef6\u8fdf</p> <p>Time equation: \\(t_p\u2265max(t_{pd,FF}+t_{pd,COMB}+t_s)\\) for all paths from flip-flop output to flip-flop input.</p> <p></p> <p>Compare the allowable combinational delay for a specific circuit:</p> <ul> <li>Using edge-triggered flip-flops; </li> <li>Using master-slave flip-flops.</li> </ul> <p>\u7ed9\u5b9a\u4e00\u4e9bparameter \uff1a </p> <ul> <li>clock frequency = 250 MHz</li> <li>\\(t_{pd,FF}(max) = 1.0ns\\)</li> <li>$t_s(max) = 0.3ns  $for  edge-triggered  flip-flops</li> <li>\\(t_s(max) = t_{wH} = 2.0ns\\) for master-slave flip-flops</li> </ul> <p>\u5229\u7528Timing Equations $$ t_p  = \\dfrac{1}{clock  frequency} = 4.0ns\\ \\ \u5bf9\u4e8eEdge-triggered :\\ 4.0 &gt;= t_{pd,FF} + t_{pd,COMB} + t_s = 1.0ns + t_{pd,COMB} + 0.3ns\\ \u5f97\u5230t_{pd,CMOB} &lt;= 2.7ns\\ \\  \u5bf9\u4e8eMaster-slave:\\ 4.0 &gt;= t_{pd,FF} + t_{pd,COMB} + t_s = 1.0ns + t_{pd,COMB} + 2.0ns\\ \u5f97\u5230\u5f97\u5230t_{pd,CMOB} &lt;= 1.0ns\\ $$</p>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Basic%20principle%20of%20imaging/","title":"Basic principle of imaging","text":""},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Basic%20principle%20of%20imaging/#_1","title":"\u76f8\u673a","text":"<p>\u53d1\u5c55\u5386\u53f2\uff1a\u773c\u775b -&gt; \u6697\u7bb1 -&gt; \u76f8\u673a \uff08\u5355\u53cd -&gt; \u6570\u7801\uff09</p> <p>\u5355\u955c\u5934\u53cd\u5149\u76f8\u673a\uff1a\u7528\u4e00\u53ea\u955c\u5934\u5e76\u901a\u8fc7\u6b64\u955c\u5934\u53cd\u5149\u53d6\u666f</p> <p>\u5355\u955c\u5934\uff1a\u6444\u5f71\u66dd\u5149\u5149\u8def\u548c\u53d6\u666f\u5149\u8def\u5171\u7528\u4e00\u4e2a\u955c\u5934</p> <p>\u53cd\u5149\uff1a\u6307\u76f8\u673a\u5185\u4e00\u5757\u5e73\u9762\u53cd\u5149\u955c\u5c06\u4e24\u4e2a\u5149\u8def\u5206\u5f00\uff1a\u53d6\u666f\u65f6\u53cd\u5149\u955c\u843d\u4e0b\uff0c\u5c06\u955c\u5934\u7684\u5149\u7ebf\u53cd\u5c04\u5230\u4e94\u68f1\u955c\uff0c\u518d\u5230\u53d6\u666f\u7a97\uff1b\u62cd\u6444\u65f6\u53cd\u5149\u955c\u5feb\u901f\u62ac\u8d77\uff0c\u5149\u7ebf\u53ef\u4ee5\u7167\u5c04\u5230\u611f\u5149\u5143\u4ef6CMOS\u4e0a</p> <p>\u6210\u50cf\u539f\u7406\uff1a\u5c0f\u5b54\u6210\u50cf</p> <p>\u5149\u5708\u5b54\u5f84\u5927\uff0c\u56fe\u50cf\u6a21\u7cca\uff1b\u5149\u5708\u5b54\u5f84\u5c0f\uff0c\u901a\u8fc7\u7684\u5149\u7ebf\u5c11\uff0c\u5149\u5f3a\u5f31\uff1b\u5149\u5708\u5b54\u5f84\u8fc7\u5c0f\uff0c\u53d1\u751f\u884d\u5c04</p> <p>\u900f\u955c\uff1a\u6c47\u805a\u5149\u7ebf</p> <ul> <li>There is a specific distance at which objects are \u201cin focus\u201d, other points project to a \u201ccircle of confusion\u201d in the image</li> <li>Changing the shape of the lens changes this distance</li> </ul> <p>\u5f25\u6563\u5706\uff1a\u7126\u70b9\u524d\u540e\u5149\u7ebf\u6269\u6563\u5bfc\u81f4\u70b9\u5f71\u50cf\u6a21\u7cca\uff0c\u5f62\u6210\u6269\u5927\u7684\u5706\uff0c\u82e5\u5f25\u6563\u5706\u76f4\u5f84\u5927\u4e8e\u4eba\u773c\u9274\u522b\u80fd\u529b\uff0c\u5219\u79f0\u4e3a\u5bb9\u8bb8\u5f25\u6563\u5706</p> <p>\u5149\u5708\u5927\u5c0f\u4e0e\u666f\u6df1\u7684\u5173\u7cfb\uff1a</p> <ol> <li>\u955c\u5934\u5149\u5708\uff1a\u5149\u5708\u8d8a\u5927\uff0c\u666f\u6df1\u8d8a\u5c0f\uff1b\u5149\u5708\u8d8a\u5c0f\uff0c\u666f\u6df1\u8d8a\u5927</li> <li>\u955c\u5934\u7126\u8ddd\uff1a\u955c\u5934\u7126\u8ddd\u8d8a\u957f\uff0c\u666f\u6df1\u8d8a\u5c0f\uff1b\u7126\u8ddd\u8d8a\u77ed\uff0c\u666f\u6df1\u8d8a\u5927</li> <li>\u62cd\u6444\u8ddd\u79bb\uff1a\u8ddd\u79bb\u8d8a\u8fdc\uff0c\u666f\u6df1\u8d8a\u5927\uff1b\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u666f\u6df1\u8d8a\u5c0f</li> </ol> <p>\u6570\u7801\u76f8\u673a\u6210\u50cf\u8fc7\u7a0b\u539f\u7406\uff1a </p> <ol> <li>\u666f\u7269\u53cd\u5c04\u7684\u5149\u7ebf\u900f\u8fc7\u955c\u5934\u900f\u5c04\u5230CCD\u4e0a</li> <li>\u5f53CCD\u66dd\u5149\u540e\uff0c\u5149\u7535\u4e8c\u6781\u7ba1\u53d7\u5230\u5149\u7ebf\u6fc0\u53d1\u91ca\u653e\u7535\u8377\uff0c\u611f\u5149\u5143\u4ef6\u4ea7\u751f\u7535\u4fe1\u53f7</li> <li>CCD\u63a7\u5236\u82af\u7247\u5229\u7528\u611f\u5149\u5143\u4ef6\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u7535\u8def\u5bf9\u53d1\u5149\u4e8c\u6781\u7ba1\u4ea7\u751f\u7684\u7535\u6d41\u8fdb\u884c\u63a7\u5236\uff0c\u7531\u7535\u6d41\u4f20\u8f93\u7535\u8def\u8f93\u51fa\uff0cCCD\u4f1a\u5c06\u4e00\u6b21\u6210\u50cf\u7684\u7535\u8def\u6536\u96c6\u8d77\u6765\uff0c\u7edf\u4e00\u8f93\u51fa\u5230\u653e\u5927\u5668</li> <li>\u7535\u4fe1\u53f7\u653e\u5927\u3001\u6ee4\u6ce2\u540e\u88ab\u4f20\u9001\u5230ADC\uff0c\u7531ADC\u5c06\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0c\u6570\u503c\u5927\u5c0f\u4e0e\u7535\u4fe1\u53f7\u5f3a\u5ea6\u4e0e\u7535\u538b\u6210\u6b63\u6bd4\uff08\u56fe\u50cf\u6570\u636e\uff09</li> <li>\u5c06\u6570\u636e\u8f93\u9001\u5230DSP\uff08\u6570\u5b57\u4fe1\u606f\u5904\u7406\u5668\uff09\u4e2d\uff0c\u8fdb\u884c\u8272\u5f69\u6821\u6b63\u3001\u767d\u5e73\u8861\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u6240\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff08JPEG\u7b49\uff09\u5e76\u5b58\u50a8\u4e3a\u56fe\u50cf\u6587\u4ef6</li> <li>\u5904\u7406\u5b8c\u6bd5\uff0c\u56fe\u50cf\u88ab\u5b58\u50a8\u5230\u5b58\u50a8\u5668\u4e0a</li> </ol>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Color%20space/","title":"Color space","text":"<p>\u8272\u5f69\uff1a\u5149\u4e0e\u7269\u4f53\u4e4b\u95f4\u53d1\u751f\u53cd\u5c04\u3001\u6298\u5c04\u3001\u6563\u5c04\u3001\u4f20\u64ad\u3001\u5438\u6536\u4ee5\u53ca\u884d\u5c04\u7b49\u4ea7\u751f  \uff08\u57fa\u672c\u95ee\u9898\uff1aDichromatic Reflection Separation\uff09</p> <ul> <li>\u5206\u7c7b\uff1a<ul> <li>\u5f69\u8272 (chromatic color)\uff1a\u7ea2\u3001\u9ec4\u3001\u84dd\u7b49\u5355\u8272\u4ee5\u53ca\u5b83\u4eec\u7684\u6df7\u5408\u8272\uff08\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u5177\u6709\u9009\u62e9\u6027\uff0c\u5728\u767d\u5149\u7167\u5c04\u4e0b\u5448\u4e0d\u540c\u989c\u8272\uff09</li> <li>\u6d88\u8272 (achromatic color)\uff1a\u7070\u5ea6\uff0c\u5373\u767d\u8272\uff0c\u9ed1\u8272\u4ee5\u53ca\u5404\u79cd\u6df1\u6d45\u4e0d\u540c\u7684\u7070\u8272\uff08\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u4e0d\u5177\u9009\u62e9\u6027\uff09</li> </ul> </li> <li>\u8272\u89c9\uff1a\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u4f5c\u7528\u4e8e\u89c6\u7f51\u819c\u800c\u5728\u5927\u8111\u4e2d\u5f15\u8d77\u7684\u611f\u89c9<ul> <li>\u53ef\u89c1\u5149\u6ce2\u957f\uff1a390 ~ 780 nm</li> <li>\u539f\u7406\uff1a\u89c6\u7f51\u819c\u89c6\u89c9\u7ec6\u80de<ul> <li>\u6746\u72b6\u4f53\uff1a\u5bf9\u5149\u6781\u4e3a\u7075\u654f\uff0c\u4f46\u6ca1\u6709\u533a\u5206\u8272\u5f69\u7684\u80fd\u529b\uff08\u4e0a\u4ebf\u4e2a\uff09</li> <li>\u9525\u72b6\u4f53\uff1a\u5728\u8f83\u5f3a\u7684\u7167\u5ea6\u4e0b\u624d\u80fd\u6fc0\u53d1\uff0c\u80fd\u8fa8\u522b\u4e0d\u540c\u989c\u8272\uff08\u516d\u3001\u4e03\u767e\u4e07\u4e2a\uff09</li> </ul> </li> <li>\u89e3\u91ca\uff1a\u4e09\u539f\u8272\u2014\u2014\u89c6\u7f51\u819c\u4e0a\u5b58\u5728\u4e09\u79cd\u5bf9\u7ea2\u3001\u7eff\u3001\u84dd\u5149\u6ce2\u957f\u7279\u522b\u654f\u611f\u7684\u89c6\u9525\u7ec6\u80de\u6216\u76f8\u5e94\u7684\u611f\u5149\u8272\u7d20\uff0c\u5f53\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u8fdb\u5165\u4eba\u773c\u65f6\uff0c\u4e0e\u4e4b\u76f8\u7b26\u6216\u76f8\u8fd1\u7684\u89c6\u9525\u7ec6\u80de\u53d1\u751f\u4e0d\u540c\u7a0b\u5ea6\u7684\u5174\u594b\uff0c\u4ece\u800c\u4ea7\u751f\u89c6\u89c9\uff08\u4e09\u79cd\u89c6\u9525\u7ec6\u80de\u53d7\u5230\u540c\u7b49\u7a0b\u5ea6\u7684\u523a\u6fc0\u65f6\u4ea7\u751f\u6d88\u8272\uff09<ul> <li>\u6807\u51c6\u989c\u8272\uff1aR\uff1a700nm    G\uff1a541.6nm    B\uff1a435.8nm</li> </ul> </li> <li>\u95ee\u9898\uff1avision illusion\uff0c\u4eba\u773c\u901a\u8fc7\u4e0a\u4e0b\u6587\uff08\u76f8\u5bf9\uff09\u6765\u5224\u65ad\u989c\u8272\uff0c\u7edd\u5bf9\u8272\u5f69\u4e0d\u51c6\u786e</li> <li>\u6027\u8d28\uff1a\u97e6\u4f2f\u5b9a\u5f8b \\(K=\\dfrac{\\Delta I}{I}\\) \u523a\u6fc0\u5dee\u522b\u9608\u503c\u4e0e\u523a\u6fc0\u5f3a\u5ea6\u6210\u6b63\u6bd4</li> <li>\u611f\u77e5\u7684\u4f18\u5148\u7a0b\u5ea6\u548c\u7075\u654f\u5ea6\uff1a<ul> <li>\u4f18\u5148\u7a0b\u5ea6\uff1a\u8272\u8c03\uff08hue, H\uff09 &gt; \u9971\u548c\u5ea6\uff08saturation, S\uff09 &gt; \u4eae\u5ea6\uff08lightness value, V\uff09 </li> <li>\u654f\u611f\u5ea6\uff1a\u5bf9\u4eae\u5ea6\u53d8\u5316\u6700\u654f\u611f</li> </ul> </li> </ul> </li> </ul> <p>\u663e\u793a\u5668\u65e0\u6cd5\u663e\u793a\u4eba\u773c\u53ef\u89c1\u8303\u56f4\u7684\u5168\u90e8\u8272\u5f69</p> <p>\u989c\u8272\u7a7a\u95f4\uff1a</p> <ul> <li>\u989c\u8272\u7a7a\u95f4\u6a21\u578b\uff1a<ul> <li>\u5206\u7c7b\uff1a<ul> <li>\u8bbe\u5907\u4f9d\u8d56\uff1aRGB, CMY, HSV</li> <li>\u8bbe\u5907\u65e0\u5173\uff1aCIE XYZ, CIE L*a*b, CIE YUV (CIE, Commission Internationale de L\u2018Eclairage\uff0c\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a)</li> </ul> </li> <li> <p>RGB\uff1a\u4e09\u7ef4\u76f4\u89d2\u5750\u6807\u989c\u8272\u7cfb\u7edf\u4e2d\u7684\u5355\u4f4d\u7acb\u65b9\u4f53</p> <p></p> <ul> <li>\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u5404\u539f\u8272\u7684\u91cf\u76f8\u7b49\uff0c\u4ea7\u751f\u7531\u6697\u5230\u4eae\u7684\u767d\u8272\uff08\u7070\u5ea6\uff09</li> <li>\uff080\uff0c0\uff0c0\uff09\u4e3a\u9ed1\uff0c\uff081\uff0c1\uff0c1\uff09\u4e3a\u767d\uff0c\u6b63\u65b9\u4f53\u7684\u5176\u4ed66\u4e2a\u89d2\u70b9\u5206\u522b\u4e3a\u7ea2\u3001\u9ec4\u3001\u7eff\u3001\u9752\u3001\u84dd\u548c\u54c1\u7ea2</li> <li>RGB \\(\\subset\\) CIE<ul> <li>CMY\uff1aComplementary color of RBG \u2014\u2014 Cyan, Magenta, Yellow</li> </ul> </li> <li>\u76f8\u51cf\u8272\uff0c\u51cf\u6389\u4e86\u4e3a\u89c6\u89c9\u7cfb\u7edf\u8bc6\u522b\u989c\u8272\u6240\u9700\u8981\u7684\u53cd\u5c04\u5149</li> <li>\u5f69\u8272\u5370\u5237\u6216\u8005\u5f69\u8272\u6253\u5370\u7684\u7eb8\u5f20\u4e0d\u80fd\u53d1\u5c04\u5149\u7ebf\uff0c\u56e0\u800c\u5370\u5237\u673a\u6216\u6253\u5370\u673a\u5c31\u53ea\u80fd\u4f7f\u7528\u4e00\u4e9b\u80fd\u591f\u5438\u6536\u7279\u5b9a\u5149\u6ce2\u800c\u53cd\u5c04\u5176\u4ed6\u5149\u6ce2\u7684\u6cb9\u58a8\u6216\u8005\u989c\u8272\uff08\u53cd\u5c04C=G+B\u610f\u5473\u7740\u5438\u6536R\uff09<ul> <li>RGB VS CMY\uff1a</li> </ul> </li> </ul> <p></p> <ul> <li>R+G=Y\uff0cR+B=M\uff0cG+B=C\uff0cR+G+B=W</li> <li>Y+M=R\uff0cC+Y=G\uff0cC+M=B\uff0cC+M+Y=K<ul> <li>HSV\uff1a\u8272\u8c03\uff08Hue\uff09\u3001\u8272\u9971\u548c\u5ea6\uff08Saturation\uff09\u548c\u4eae\u5ea6\uff08Intensity / Value\uff09\uff0c\u4ece\u4eba\u7684\u89c6\u89c9\u7cfb\u7edf\u51fa\u53d1</li> </ul> </li> </ul> <p></p> <ul> <li>\u5706\u9525\u7684\u9876\u9762\u5bf9\u5e94\u4e8eV=1\uff0c\u5305\u542bRGB\u6a21\u578b\u4e2d\u7684R=1\uff0cG=1\uff0cB=1\u4e09\u4e2a\u9762</li> <li>H\u7531\u7ed5V\u8f74\u7684\u65cb\u8f6c\u89d2\u7ed9\u5b9a\u3002\u7ea2\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea60\\(^\\circ\\)\uff0c\u7eff\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6120\\(^\\circ\\)\uff0c\u84dd\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6240\\(^\\circ\\)</li> <li>\u5706\u9525\u7684\u9876\u70b9\u5904\uff0cV=0\uff0cH\u548cS\u65e0\u5b9a\u4e49\uff0c\u4e3a\u9ed1\u8272</li> <li>\u4f18\u52bf\uff1a\u4e09\u4e2a\u5750\u6807\u72ec\u7acb\uff0c\u5f69\u8272\u4e4b\u95f4\u611f\u89c9\u4e0a\u7684\u8ddd\u79bb\u4e0eHSV\u989c\u8272\u6a21\u578b\u5750\u6807\u4e0a\u70b9\u7684\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u6210\u6b63\u6bd4<ul> <li>CIE\uff1a\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u989c\u8272</li> </ul> </li> <li> <p>CIE XYZ\uff1a\u7531\u6807\u51c6\u89c2\u5bdf\u8005\u914d\u8272\u51fd\u6570\u8ba1\u7b97\u5f97\u6765\uff0c\u4ee5\u8272\u89c6\u89c9\u4e09\u5143\u7406\u8bba\u4e3a\u6839\u636e</p> <p></p> <ul> <li>Y\u4e3a\u4eae\u5ea6\uff0cx,y\u662f\u4ece\u4e09\u523a\u6fc0\u503cXYZ\u8ba1\u7b97\u5f97\u6765\u7684\u8272\u5750\u6807         + CIE L*a*b\uff1aCIE XYZ\u989c\u8272\u6a21\u578b\u7684\u6539\u8fdb\u578b\uff0c\u4ee5\u4fbf\u514b\u670d\u539f\u6765\u7684Yxy\u989c\u8272\u7a7a\u95f4\u5b58\u5728\u7684\u5728x\uff0cy\u8272\u5ea6\u56fe\u4e0a\u76f8\u7b49\u7684\u8ddd\u79bb\u5e76\u4e0d\u76f8\u5f53\u4e8e\u89c9\u5bdf\u5230\u76f8\u7b49\u8272\u5dee\u7684\u95ee\u9898</li> </ul> <p></p> <ul> <li>L\uff08\u660e\u4eae\u5ea6\uff09\uff0ca\uff08\u7eff\u8272\u5230\u7ea2\u8272\uff09\u548cb\uff08\u84dd\u8272\u5230\u9ec4\u8272\uff09</li> <li>\u989c\u8272\u7684\u4eae\u5ea6\uff08L\uff09\u3001\u7070\u9636\u548c\u9971\u548c\u5ea6\uff08a,b\uff09\u53ef\u4ee5\u5355\u72ec\u4fee\u6b63\uff0c\u6574\u4e2a\u989c\u8272\u90fd\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u56fe\u50cf\u6216\u5176\u4eae\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u6539\u53d8         + CIE YUV\uff1a\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u8272\u5ea6\u4fe1\u53f7U\u3001V\u5206\u79bb</li> <li>Used in TV.<ul> <li>\u989c\u8272\u7a7a\u95f4\u7684\u8f6c\u6362\uff1a</li> </ul> </li> <li>RGB \\(\\leftrightarrow\\) CIE\uff1a</li> </ul> </li> </ul> </li> </ul> </li> </ul> \\[ \\begin{bmatrix} Y\\\\ U\\\\ V \\end{bmatrix}= \\begin{bmatrix} 0.299&amp;0.587&amp;0.114\\\\ -0.147&amp;-0.289&amp;0.435\\\\ 0.615&amp;-0.515&amp;-0.100 \\end{bmatrix} \\begin{bmatrix} R\\\\ G\\\\ B \\end{bmatrix} \\] <ul> <li>RGB \\(\\leftrightarrow\\) CMY\uff1aC = 255 - R, M = 255 - G, Y = 255 - B</li> <li> <p>RGB \\(\\leftrightarrow\\) HSV\uff1a</p> <p></p> <p></p> </li> <li> <p>RGB \\(\\leftrightarrow\\) CIE\uff1a</p> </li> </ul> \\[ \\begin{bmatrix} X\\\\ Y\\\\ Z \\end{bmatrix}= \\begin{bmatrix} 0.608&amp;0.714&amp;0.200\\\\ 0.299&amp;0.587&amp;0.144\\\\ 0.000&amp;0.066&amp;1.112 \\end{bmatrix} \\begin{bmatrix} R\\\\ G\\\\ B \\end{bmatrix} \\] <ul> <li> <p>CIE XYZ \\(\\leftrightarrow\\) CIE L*a*b</p> <p></p> </li> </ul>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Image%20format/","title":"Image format","text":"<p>\u89c4\u8303\uff1a\u57fa\u4e8e\u50cf\u7d20\uff0c\u77e9\u5f62\u6846\u5f62\u5f0f</p> <p>\u67d0\u4e9b\u56fe\u50cf\u683c\u5f0f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u9ad8\u5ea6\u76f8\u5173</p> <p>\u8868\u793a\uff1a</p> <ul> <li> <p>\u56fe\u50cf\uff1a2D array or matrix</p> </li> <li> <p>\u50cf\u7d20\uff1a</p> <ul> <li>\u7070\u5ea6\u56fe\uff1a1\u5b57\u8282 [0, 255]</li> <li>\u5f69\u8272\u56fe\uff1a3\u5b57\u8282 R, G, B</li> </ul> </li> </ul> <p>\u7f16\u7801\u65b9\u5f0f\uff1a</p> <ul> <li>\u538b\u7f29\uff1a\u6709\u635f / \u65e0\u635f</li> <li>\u4e0d\u538b\u7f29</li> </ul> <p>\u4ee3\u8868\u683c\u5f0f\uff1aBMP\uff08\u538b\u7f29 / \u4e0d\u538b\u7f29\uff09, JPEG\uff08\u6709\u635f\u538b\u7f29\uff09, TIFF\uff08\u7528\u4e8eGIS\uff09, GIF, PNG\uff08\u7528\u4e8e\u7f51\u9875\uff09, ...</p>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Image%20format/#bmp","title":"BMP","text":"<p>\u7b80\u4ecb\uff1aWindows\u6807\u51c6\u6587\u4ef6\u683c\u5f0f\uff0c\u540e\u7f00\u540d.bmp / .dib</p> <p>BMP\u901a\u5e38\u4e0d\u538b\u7f29\uff08\u53ef\u652f\u6301\u538b\u7f29\uff09</p> <p>\u6587\u4ef6\u7ed3\u6784\uff1a</p> <p></p> <pre><code>BITMAPFILEHEADER bmfh;\nBITMAPINFOHEADER bmih;\nRGBQUAD aColors[];\nBYTE aBitmapBits[];\n</code></pre>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Image%20format/#image-file-header","title":"Image file header","text":"<pre><code>typedef struct tagBITMAPFILEHEADER {\n    WORD bfType;\n    DWORD bfSize;\n    WORD bfReserved1;\n    WORD bfReserved2;\n    DWORD bfOffBits;\n} BITMAPFILEHEADER, *PBITMAPFILEHEADER;\n</code></pre>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Image%20format/#image-information-header","title":"Image information header","text":"<pre><code>typedef struct tagBITMAPINFOHEADER {\n    DWORD bitsize;\n    LONG biWidth;\n    LONG biHeight;\n    WORD biPlanes;\n    WORD biBitCount;\n    DWORD biCompression;\n    DWORD biSizeImage;\n    LONG biXPelsPerMeter;\n    LONG biYPelsPerMeter;\n    DWORD biClrUsed;\n    DWORD biClrImportant;\n} BITMAPINFOHEADER, *BITMAPINFOHEADER;\n</code></pre>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Image%20format/#palette","title":"Palette","text":"<p>\u5927\u5c0f\uff1aN * 4 bytes</p> <p>\u683c\u5f0f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u989c\u8272\uff0cR, G, B\u54041 byte\uff0c 1 byte \u6052\u4e3a0</p>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/Image%20format/#bitmap-data","title":"Bitmap Data","text":"<p>\u5927\u5c0f\uff1a\u53d6\u51b3\u4e8e\u56fe\u50cf\u5927\u5c0f\u548c\u4f4d\u6df1</p> <p>\u89c4\u5b9a\uff1a</p> <ul> <li>\u6bcf\u4e00\u884c\u7684\u5b57\u8282\u6570\u5fc5\u987b\u662f 4\u7684\u500d\u6570\uff0c\u5426\u5219\u9700\u8981\u8865\u9f50</li> <li>BMP\u6587\u4ef6\u6570\u636e\u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\uff08\u4e0a\u4e0b\u98a0\u5012\uff09</li> </ul>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/JPEG%28Joint%20Photographic%20Experts%20Group%29%20format/","title":"JPEG(Joint Photographic Experts Group) format","text":"<p>\u6027\u8d28\uff1a\u538b\u7f29\u9759\u6001\u56fe\u50cf</p> <p>\u7f16\u7801\u65b9\u5f0f\uff1a\u79bb\u6563\u4f59\u5f26\u53d8\u6362(DCT)</p> <p>\u9ad8\u4f4e\u9891\u4fe1\u606f\u5206\u522b\u5904\u7406</p> <p>\u538b\u7f29\u7b56\u7565\uff1a\u6839\u636e\u538b\u7f29\u6bd4\uff0c\u79fb\u9664\u9ad8\u9891\u4fe1\u606f</p> <ul> <li>\u9ad8\u9891\u4fe1\u606f\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\uff0c\u51cf\u5c11\u9ad8\u9891\u4fe1\u606f\u66f4\u5bb9\u6613\u83b7\u5f97\u9ad8\u538b\u7f29\u6bd4</li> <li>\u4f4e\u9891\u4fe1\u606f\u53ef\u4ee5\u4fdd\u7559\u7269\u4f53\u7684\u57fa\u672c\u8f6e\u5ed3\u548c\u8272\u5f69\u5206\u5e03\uff0c\u6700\u5927\u9650\u5ea6\u7ef4\u6301\u56fe\u50cf\u8d28\u91cf</li> </ul> <p>\u4f18\u52bf\uff1a\u9002\u5408\u7528\u4e8e\u4e92\u8054\u7f51</p> <p>\u6587\u4ef6\u7ed3\u6784\uff1a</p> <p> \u7531\u4e00\u7cfb\u5217\u7684segment\u7ec4\u6210\u7684\uff0c\u6bcf\u4e2asegment\u4ece\u4e00\u4e2a\u6807\u8bb0\uff08Marker\uff0c\u7528\u4ee5\u533a\u5206\u548c\u8bc6\u522b\u56fe\u50cf\u6570\u636e\u53ca\u5176\u76f8\u5173\u4fe1\u606f\uff0c\u75312\u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u524d\u4e00\u4e2a\u5b57\u8282\u662f\u56fa\u5b9a\u503c0xFF\uff09\u5f00\u59cb</p> <p></p> <ol> <li>SOI(Start of Image) Marker </li> <li>APP0 Marker\uff1a <pre><code>APP0 Marker:\n    Length\n    Identifier\n    Version\n    Density unit of X and Y:   \n        units=0-&gt; no unit\n        units=1: points/inch\n        units=2: points/cm\n    X density\n    Y density\n    Number of thumbnail horizontal pixels\n    Number of thumbnail vertical pixels\n    Thumbnail RGB bitmap\n</code></pre></li> <li>APPn (Markers)\uff0cn=1~15(optional)</li> <li> <p>One or more DQT\uff08Define Quantization Table\uff09</p> <ul> <li>Quantization table length\uff0cQuantization table number\uff0cQuantization table  <p>\u4eba\u773c\u5bf9\u4e8e\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5927\u8303\u56f4\u7684\u533a\u57df\uff0c\u8fa8\u522b\u8272\u5f69\u7ec6\u5fae\u5dee\u5f02\u80fd\u529b\u6bd4\u8f83\u5f3a\uff08\u4f4e\u9891\uff09\uff0c\u4f46\u5bf9\u4e8e\u9ad8\u9891\u533a\u57df\uff0c\u5374\u8868\u73b0\u4e00\u822c\u3002\u53d7\u6b64\u542f\u53d1\uff0c\u4eba\u4eec\u53ef\u4ee5\u5bf9\u9ad8\u9891\u90e8\u5206\u8fdb\u884c\u91cf\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u9891\u57df\u4e0a\u7684\u6bcf\u4e2a\u5206\u91cf\uff0c\u9664\u4ee5\u9488\u5bf9\u8be5\u5206\u91cf\u7684\u5e38\u6570\uff0c\u7136\u540e\u56db\u820d\u4e94\u5165\u53d6\u6574\u3002</p> <p>\u8fd9\u6837\u4e00\u822c\u4f1a\u628a\u9ad8\u9891\u5206\u91cf\u53d8\u4e3a0\u3002</p> <p>\u4f46\u8fd9\u6837\u64cd\u4f5c\u5c31\u8981\u6c42\u9488\u5bf9\u6bcf\u4e00\u4e2a\u5206\u91cf\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u6570\u503c\uff0c\u6240\u4ee5\u5c31\u6700\u7ec8\u5f62\u6210\u4e86\u91cf\u5316\u8868</p> </li> </ul> </li> <li> <p>SOF0 (Start of Frame, DCT based) <pre><code>Start of frame length\nPrecision: color depth (bit-width) of each color channel\nImage height\nImage width\nNumber of color components\nFor each color component\n    ID\n    vertical sample factor\n    horizontal sample factor\n    Quantization table # \n</code></pre></p> </li> <li>DHT(Define Huffman Table) <pre><code>Huffman table length\nType, AC or DC\nIndex\nbits table\nvalue table\n</code></pre></li> <li>Start of Scan (SoS)  <pre><code>SoS length\nNumber of color components\nFor each color component\n    ID\n    AC table #\n    DC table #\n    Compress image data \n</code></pre></li> <li>End of Image (EOI)</li> </ol> <p>\u7f16\u7801\u539f\u7406\uff1a</p> <ul> <li>DPCM(differential pulse-code modulation)\u7f16\u7801<ul> <li>\u5bf9\u6a21\u62df\u4fe1\u53f7\u5e45\u5ea6\u62bd\u6837\u7684\u5dee\u503c\u8fdb\u884c\u91cf\u5316\u7f16\u7801\u7684\u8c03\u5236\u65b9\u5f0f     </li> </ul> </li> <li>JPEG uses DCT\uff1a<ul> <li>The DCT transforms an 8\u00d78 block of input values to a linear combination of these 64 patterns. The patterns are referred to as the two-dimensional DCT basis functions, and the output values are referred to as transform coefficients. </li> </ul> </li> </ul> <p>\u52a3\u52bf\uff1a</p> <ul> <li>\u4e0d\u9002\u5408\u7528\u4e8e\u7ebf\u6761\u753b\u3001\u6587\u5b57\u3001\u56fe\u6807\u7b49</li> <li>\u6709\u635f\u538b\u7f29\u4f1a\u5bfc\u81f4\u8fd9\u7c7b\u5bf9\u8c61\u7684\u7455\u75b5\u4e25\u91cd</li> </ul>"},{"location":"course/dip/Basic%20concept%20and%20programming%20introduction/TIFF%28Tagged%20Image%20File%20Format%29%20format/","title":"TIFF(Tagged Image File Format) format","text":"<p>\u4f7f\u7528\u573a\u666f\uff1a\u626b\u63cf\u4eea\uff0cCAD\uff0cGIS</p> <p>\u7279\u6027\uff1a</p> <ul> <li>\u652f\u6301\u4ece\u9ad8\u7aef\u5230\u4f4e\u7aef\u7684\u8bbe\u5907</li> <li>\u53ef\u6269\u5c55\u6027\u5f3a\uff0c\u652f\u6301\u516c\u5171\u548c\u79c1\u7528\u7684\u6807\u8bb0\u7ed3\u6784</li> <li>\u652f\u6301\u5404\u79cd\u538b\u7f29\u683c\u5f0f</li> <li>\u6709\u516c\u5171\u8f6f\u4ef6\u5e93\u652f\u6301</li> <li>\u529f\u80fd\u5f3a\u5927\uff1a<ol> <li>\u4e8c\u503c</li> <li>\u7070\u5ea6\u56fe</li> <li>\u8c03\u8272\u677f</li> <li>\u771f\u5f69\u8272</li> <li>\u5176\u4ed6\u6269\u5c55</li> </ol> </li> </ul> <p>\u6587\u4ef6\u7ed3\u6784\uff1a <pre><code>struct TIFF_img {\n     unsigned char **mono;\n     unsigned char **cmap;\n     unsigned char ***color;\n     char          TIFF_type; \n     char          compress_type;\n     int           height;\n     int           width;\n};\n</code></pre> </p> <p>\u7f16\u7801\u65b9\u5f0f\uff1aLZW</p> <p>\u7279\u70b9\uff1a</p> <ol> <li>\u4e00\u4e2aGIF\u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u591a\u5e45\u56fe\u50cf</li> <li>\u5e26\u6709\u8272\u5f69\u8868\uff08\u5168\u5c40\u3001\u5c40\u90e8\u8272\u5f69\u8868\uff09</li> <li>\u652f\u6301\u56fe\u50cf\u5b9a\u5e8f\u663e\u793a\u6216\u8986\u76d6</li> <li>\u53ef\u4ee5\u9519\u884c\u5b58\u653e</li> <li>\u652f\u6301\u6587\u672c\u8986\u76d6</li> </ol>"},{"location":"course/dip/Basic%20operation/Convolution/","title":"Convolution","text":"<p>\u8fde\u7eed\u4e00\u7ef4\u5377\u79ef\uff1a</p> <ul> <li>\u5b9a\u4e49\uff1a\\(g(x)=f(x)*h(x)=\\int_{-\\infty}^\\infty f(t)h(x-t)\\text{d}t\\)\uff0c\\(f(x)\\)\u4e3a\u8f93\u5165\uff0c\\(h(x)\\)\u4e3a\u5377\u79ef\u51fd\u6570</li> <li>\u6027\u8d28\uff1a<ul> <li>\u4ea4\u6362\u7387\uff1a\\(f(x)*h(x)=h(x)*f(x)\\)</li> <li>\u5206\u914d\u5f8b\uff1a\\(f*(g+h)=f*g+f*h\\)</li> <li>\u7ed3\u5408\u5f8b\uff1a\\(f*(g*h)=(f*g)*h\\)</li> </ul> </li> </ul> <p>\u79bb\u6563\u4e00\u7ef4\u5377\u79ef\uff1a\\(g(x)=f(x)*h(x)=\\dfrac{1}{M}\\sum\\limits_{t=0}^{M-1}f(t)h(x-t)\\)</p> <p>3x3\u5377\u79ef\uff1a</p> <p></p> <p>\u53ea\u66f4\u65b0\u4e2d\u95f4\u7684\u50cf\u7d20</p>"},{"location":"course/dip/Basic%20operation/Convolution/#filtering","title":"Filtering","text":"<p>\u6982\u5ff5\uff1a\u6ee4\u6ce2\u5668\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3aM\u00d7N\u7684\u7a97\u53e3\uff0c\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\u4e0e\u539f\u56fe\u50cf\u7684\u5904\u4e8e\u7a97\u53e3\u5185\u7684\u50cf\u7d20\u8fdb\u884c\u67d0\u79cd\u8fd0\u7b97\uff0c\u7ed3\u679c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u7684\u4e00\u4e2a\u50cf\u7d20\u3002\u5f53\u7a97\u53e3\u6ed1\u8fc7\u539f\u56fe\u50cf\u5e76\u5b8c\u6210\u4e0a\u8ff0\u8fd0\u7b97\u4e4b\u540e\uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u5e45\u65b0\u56fe\u50cf</p> <p>\u522b\u540d\uff1a\u6ee4\u6ce2\u5668\u3001\u63a9\u6a21\u3001\u6838\u3001\u6a21\u677f\uff0c\u7a97\u53e3</p> <p>\u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570\u503c\uff0c\u800c\u4e0d\u662f\u50cf\u7d20\u503c\uff0c\u5b83\u4ee3\u8868\u4e86\u5f71\u54cd\u65b0\u50cf\u7d20\u4ea7\u751f\u7684\u6743\u91cd</p> <p>\u4f4e\u901a\u6ee4\u6ce2\uff1a\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e2d\u9010\u70b9\u79fb\u52a8\u63a9\u6a21\uff0c\u5728\u6bcf\u4e00\u70b9(x,y)\u5904\uff0c\u6ee4\u6ce2\u5668\u5728\u8be5\u70b9\u7684\u54cd\u5e94\u901a\u8fc7\u5b9e\u73b0\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97\u3002\u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\uff0c\u5176\u54cd\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u5bf9\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa</p> <ul> <li>\u901a\u5e38\uff0c\u63a9\u6a21\u7684\u957f\u5bbd\u90fd\u4e3a\u5947\u6570\u3002\u5047\u8bbe\u5206\u522b\u4e3a2a+1\u548c2b+1\u3002\u5f53\u7a97\u53e3\u4e2d\u5fc3\u5904\u4e8e\u50cf\u7d20(x,y)\u5904\u65f6\uff0c\u65b0\u7684\u50cf\u7d20\u503c\u4e3a\uff1a \\(g(x,y)=\\sum_{s=-a}^a\\sum_{t=-b}^bw(s,t)f(x+s,y+t)\\);\u5bf9\u56fe\u50cff\u4e2d\u6240\u6709\u50cf\u7d20\u90fd\u4e0e\u63a9\u6a21\u8fdb\u884c\u8fd0\u7b97\u4e4b\u540e\uff0c\u6700\u7ec8\u4ea7\u751f\u4e00\u5e45\u65b0\u56fe\u50cfg</li> <li>\u7b80\u5316\u516c\u5f0f\uff1a\\(R=w_1z_1+\\cdots+w_{mn}z_{mn}=\\sum_{i=1}^{mn}w_iz_i\\)</li> <li>\u76ee\u7684\uff1a\u5e73\u6ed1\u5904\u7406<ul> <li>\u56fe\u50cf\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u4f20\u8f93\u4fe1\u9053\u3001\u91c7\u6837\u7cfb\u7edf\u8d28\u91cf\u8f83\u5dee\uff0c\u6216\u53d7\u5404\u79cd\u5e72\u6270\u7684\u5f71\u54cd\uff0c\u800c\u9020\u6210\u56fe\u50cf\u6bdb\u7cd9\uff0c\u6b64\u65f6\uff0c\u5c31\u9700\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002\u5e73\u6ed1\u53ef\u4ee5\u6291\u5236\u9ad8\u9891\u6210\u5206\uff0c\u4f46\u4e5f\u4f7f\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca</li> <li>\u5e73\u6ed1\u7a7a\u95f4\u6ee4\u6ce2\u5668\u7528\u4e8e\u6a21\u7cca\u5904\u7406\u548c\u51cf\u5c11\u566a\u58f0\u3002\u6a21\u7cca\u5904\u7406\u7ecf\u5e38\u7528\u4e8e\u9884\u5904\u7406\uff0c\u4f8b\u5982\uff0c\u5728\u63d0\u53d6\u5927\u7684\u76ee\u6807\u4e4b\u524d\u53bb\u9664\u56fe\u50cf\u4e2d\u4e00\u4e9b\u7410\u788e\u7684\u7ec6\u8282\uff0c\u6865\u63a5\u76f4\u7ebf\u6216\u66f2\u7ebf\u7684\u7f1d\u9699</li> </ul> </li> </ul> <p>\u5747\u503c\u6ee4\u6ce2\uff1a\u5e73\u6ed1\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u90bb\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c</p> <ul> <li>\u5e94\u7528\uff1a\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u4e0d\u76f8\u5e72\u7ec6\u8282\uff0c\u5373\u90a3\u4e9b\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u5c3a\u5bf8\u76f8\u6bd4\u66f4\u5c0f\u7684\u50cf\u7d20\u533a\u57df</li> <li>\u5206\u7c7b\uff1a<ul> <li>\u7b80\u5355\u5e73\u5747\uff1a\u8868\u793a\u7a97\u53e3\u4e2d\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5bf9\u54cd\u5e94\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684</li> <li>\u52a0\u6743\u5e73\u5747\uff1a\u8868\u793a\u7a97\u53e3\u4e2d\u7684\u50cf\u7d20\u5bf9\u76f8\u5e94\u7684\u8d21\u732e\u6709\u5927\u5c0f\u4e4b\u5206</li> </ul> </li> <li>\u516c\u5f0f</li> </ul> \\[ g(x,y)=\\dfrac{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^bw(s,t)f(x+s,y+t)}{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^bw(s,t)} \\] <p>\u5176\u4e2d\uff0c\u6ee4\u6ce2\u5668\u5927\u5c0f\u4e3a(2a+1) \u00d7(2b+1)\uff0cw\u4e3a\u6ee4\u6ce2\u5668\uff0cf\u4e3a\u8f93\u5165\u56fe\u50cf\uff0cg\u4e3a\u8f93\u51fa\u56fe\u50cf.</p> <p>\u6ee4\u6ce2\u63a9\u6a21\u7684\u5927\u5c0f\u4e0e\u56fe\u50cf\u7684\u5e73\u6ed1\u6548\u679c\u6709\u76f4\u63a5\u7684\u5173\u7cfb\u3002\u5f53\u63a9\u6a21\u6bd4\u8f83\u5c0f\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u5728\u6574\u5e45\u56fe\u50cf\u4e2d\u6709\u8f7b\u5fae\u7684\u6a21\u7cca\uff0c\u5f53\u63a9\u6a21\u5927\u5c0f\u589e\u52a0\uff0c\u6a21\u7cca\u7a0b\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0</p> <p>\u5e94\u7528\uff1a\u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7269\u4f53\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf\uff0c\u8fd9\u6837\uff0c\u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u6df7\u5408\u5728\u4e00\u8d77\u4e86\uff0c\u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u201c\u6591\u70b9\u201d\u800c\u6613\u4e8e\u68c0\u6d4b\u3002\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u90a3\u4e9b\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u53bb\u7684\u7269\u4ef6\u5c3a\u5bf8\u6765\u51b3\u5b9a</p> <p>\u4e2d\u503c\u6ee4\u6ce2\uff1a\u7edf\u8ba1\u6ee4\u6ce2\u5668\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7684\u7a7a\u95f4\u6ee4\u6ce2\u5668\uff0c\u5b83\u7684\u54cd\u5e94\u662f\u57fa\u4e8e\u7a97\u53e3\u5185\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u503c\u7684\u6392\u5e8f\uff0c\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u51b3\u5b9a\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c\uff1b\u7edf\u8ba1\u6ee4\u6ce2\u5668\u4e2d\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u4e2d\u503c\u6ee4\u6ce2\u5668</p> <ul> <li>\u6027\u8d28\uff1a<ul> <li>\u7528\u50cf\u7d20\u90bb\u57df\u5185\u7070\u5ea6\u7684\u4e2d\u503c\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c</li> <li>\u63d0\u4f9b\u4e86\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b\uff0c\u6bd4\u5c0f\u5c3a\u5bf8\u7684\u7ebf\u6027\u5e73\u6ed1\u6ee4\u6ce2\u5668\u7684\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e</li> <li>\u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0\uff08\u4e5f\u79f0\u4e3a\u6912\u76d0\u566a\u58f0\uff09\u975e\u5e38\u6709\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u7684</li> </ul> </li> <li>\u64cd\u4f5c\uff1a<ol> <li>\u6c42\u4e2d\u503c\\(\\xi\\)</li> <li>\u5c06\u63a9\u6a21\u5185\u6b32\u6c42\u7684\u50cf\u7d20\u53ca\u5176\u90bb\u57df\u7684\u50cf\u7d20\u503c\u6392\u5e8f\uff0c\u786e\u5b9a\u51fa\u4e2d\u503c\uff0c\u5e76\u5c06\u4e2d\u503c\u8d4b\u4e88\u8be5\u50cf\u7d20\u70b9</li> </ol> </li> <li>\u5e94\u7528\uff1a<ul> <li>\u53bb\u9664\u90a3\u4e9b\u76f8\u5bf9\u4e8e\u5176\u90bb\u57df\u50cf\u7d20\u66f4\u4eae\u6216\u66f4\u6697\uff0c\u5e76\u4e14\u5176\u533a\u57df\u5c0f\u4e8e\\(n^2/2\\)\uff08\u6ee4\u6ce2\u5668\u533a\u57df\u7684\u4e00\u534a\uff09\u7684\u5b64\u7acb\u50cf\u7d20\u96c6</li> <li>\u7a81\u51fa\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u6216\u8005\u589e\u5f3a\u88ab\u6a21\u7cca\u4e86\u7684\u7ec6\u8282</li> </ul> </li> </ul> <p>\u56fe\u50cf\u9510\u5316\uff1a\u5fae\u5206\u7b97\u5b50</p> <ul> <li>\u5fae\u5206\u7b97\u5b50\u662f\u5b9e\u73b0\u9510\u5316\u7684\u5de5\u5177\uff0c\u5176\u54cd\u5e94\u7a0b\u5ea6\u4e0e\u56fe\u50cf\u5728\u8be5\u70b9\u5904\u7684\u7a81\u53d8\u7a0b\u5ea6\u6709\u5173\u3002\u5fae\u5206\u7b97\u5b50\u589e\u5f3a\u4e86\u8fb9\u7f18\u548c\u5176\u4ed6\u7a81\u53d8\uff08\u5982\u566a\u58f0\uff09\u5e76\u524a\u5f31\u4e86\u7070\u5ea6\u53d8\u5316\u7f13\u6162\u7684\u533a\u57df</li> <li>\u5fae\u5206\u8f6c\u5dee\u5206\uff1a\\(\\dfrac{\\partial f}{\\partial x}=f(x+1)-f(x)\\quad\\dfrac{\\partial^2f}{\\partial x^2}=f(x+1)+f(x-1)-2f(x)\\)</li> <li> <p>\u5206\u7c7b\uff1a</p> <ul> <li> <p>\u68af\u5ea6\u7b97\u5b50</p> <ul> <li>\\(\\nabla f=[G_x^2+G_y^2]^{\\frac{1}{2}}=\\left[(\\dfrac{\\partial f}{\\partial x})^2+(\\dfrac{\\partial f}{\\partial y})^2\\right]^{\\frac{1}{2}}\\)</li> <li>\u7b80\u5316\u8ba1\u7b97\uff1a\\(\\nabla f\\approx|G_x|+|G_y|\\)</li> <li>\u63a8\u5e7f\uff1aRobert \u4ea4\u53c9\u68af\u5ea6\u7b97\u5b50 \\(\\nabla f\\approx|z_9-z_5|+|z_8-z_6|\\)</li> </ul> <p></p> </li> <li> <p>Laplacian\u7b97\u5b50\uff1a\\(\\nabla^2f=\\dfrac{\\partial^2f}{\\partial x^2}+\\dfrac{\\partial^2f}{\\partial y^2}\\)</p> <ul> <li>\u79bb\u6563\u5f62\u5f0f\uff1a\\(\\nabla^2f=[f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)]-4f(x,y)\\)</li> <li>\u77e9\u9635\u5f62\u5f0f\uff1a</li> </ul> <p></p> <ul> <li>\u63a8\u5e7f\uff1a\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u4e5f\u53ef\u4ee5\u8003\u8651\u8fdb\u6765\u8bbe\u8ba1\u63a9\u819c<ul> <li>\\(\\nabla^2f=\\sum_{i=-1}^1\\sum_{j=-1}^1f(x+i,y+j)-9f(x,y)\\)</li> </ul> </li> <li>\u64cd\u4f5c\uff1a\u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u5904\u7406\u7684\u6548\u679c\uff0c\u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f<ul> <li>\\(g(x,y)=\\left\\{\\begin{array}{ll}f(x,y)-\\nabla^2f(x,y)\\\\ f(x,y)+\\nabla^2f(x,y)\\end{array}\\right.\\) <p>\u5f53\u62c9\u666e\u62c9\u65af\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e0e\u5176\u5b83\u56fe\u50cf\u5408\u5e76\u65f6\uff08\u76f8\u52a0\u6216\u76f8\u51cf\uff09\uff0c\u5219\u5fc5\u987b\u8003\u8651\u7b26\u53f7\u4e0a\u7684\u5dee\u522b</p> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>\u95ee\u9898\uff1a\u9ad8\u65af\u6ee4\u6ce2\u65e0\u6cd5\u589e\u5f3a\uff0c\u9510\u5316\u6ee4\u6ce2\u65e0\u6cd5\u53bb\u566a</p> <p>\u89e3\u51b3\uff1a\u53cc\u8fb9\u6ee4\u6ce2\u2014\u2014\u540c\u65f6\u6ee4\u6ce2&amp;\u53bb\u566a</p> <p>\u53cc\u8fb9\u6ee4\u6ce2\uff1a</p> <ul> <li>\u76ee\u7684\uff1a\u56fe\u50cf\u5e73\u6ed1</li> <li> <p>\u539f\u7406\uff1a</p> <ul> <li>\u5c06\u56fe\u50cf\u5206\u5272\u4e3a<ul> <li>large-scale feature, structure</li> <li>small-scale feature, texture</li> </ul> </li> <li>Input \\(\\to\\) BLUR\uff08\u7531Guass Blur\u5f97\u5230\uff09 + HALOS\uff08\u6b8b\u5dee\uff09</li> <li>\u6bcf\u4e2a\u533a\u57df\u7531\u5468\u56f4\u533a\u57df\u51b3\u5b9a</li> <li>\u9ad8\u65af\u6ee4\u6ce2\uff1a\\(GB[I]_p=\\sum\\limits_{q\\in S}G_\\sigma(\\Vert p-q\\Vert)I_q\\quad G_\\sigma(x)=\\dfrac{1}{\\sigma\\sqrt{2\\pi}}\\exp\\left(-\\dfrac{x^2}{2\\sigma^2}\\right)\\)</li> <li>\u53cc\u8fb9\u6ee4\u6ce2\uff1a\\(BF[I]_p=\\dfrac{1}{W_p}\\sum\\limits_{q\\in S}G_{\\sigma_s}(\\Vert p-q\\Vert)G_{\\sigma_r}(|I_p-I_q|)I_q\\)<ul> <li>\u591a\u6b21\u6ee4\u6ce2\uff1a\\(I_{(n+1)}=BF[I_{(n)}]\\) <p>\\(|\\cdot|\\)\u5373\u4e3a\u8ddd\u79bb\uff08\u6807\u91cf\uff09</p> </li> </ul> </li> </ul> </li> <li> <p>\u5e94\u7528\uff1a</p> <ul> <li>Denoising</li> <li>Tone Mapping</li> <li>Relighting &amp; texture editing</li> </ul> </li> </ul>"},{"location":"course/dip/Basic%20operation/Fourier%20Transform/","title":"Fourier Transform","text":"<p>Fourier\u7ea7\u6570\uff1a</p> \\[ f(x)=\\dfrac{1}{2}a_0+\\sum_{n=1}^\\infty a_n\\cos(nx)+\\sum_{n=1}^\\infty b_n\\sin(nx) \\] \\[ a_0=\\dfrac{1}{\\pi}\\int_{-\\pi}^\\pi f(x)dx\\quad a_n=\\dfrac{1}{\\pi}\\int_{-\\pi}^\\pi f(x)\\cos(nx)dx\\quad b_n=\\dfrac{1}{\\pi}\\int_{-\\pi}^\\pi f(x)\\sin(nx)dx \\] <p>\u7b80\u8c10\u632f\u52a8\uff1a\\(y=A\\sin(\\omega t+\\varphi)\\)</p> <p>\u5468\u671f\u8fd0\u52a8\uff1a</p> \\[ y=\\sum_{k=1}^ny_k=\\sum_{k=1}^nA_k\\sin(k\\omega t+\\varphi_k) \\] <p>\u5468\u671f\u5ef6\u62d3\uff1a\u5bf9\u4e8e\u975e\u5468\u671f\u51fd\u6570,\u5982\u679c\u51fd\u6570\\(\ud835\udc53(\ud835\udc65)\\)\u53ea\u5728\u533a\u95f4\\([\u2212\\pi,\\pi]\\)\u4e0a\uff0c\u4e5f\u53ef\u5c55\u5f00\u6210\u5085\u6c0f\u7ea7\u6570 </p> <p>\u56fe\u50cf\u53d8\u6362\uff1a</p> <p></p> <ol> <li>Transform the image</li> <li>Carry out the task(s) in the transformed domain</li> <li>Apply inverse transform to return to the spatial domain</li> </ol> <p>\u5377\u79ef\u6838\uff1a</p> <ul> <li>\u5085\u91cc\u53f6\u53d8\u6362 $$ T(u,v)=\\sum_{x=0}^{M-1}\\sum_{y=0}^{N-1}f(x,y)r(x,y,u,v) $$</li> <li>\u9006\u5085\u91cc\u53f6\u53d8\u6362 $$ f(x,y)=\\sum_{u=0}^{M-1}\\sum_{v=0}^{N-1}T(u,v)s(x,y,u,v) $$</li> </ul> <p>\u8fde\u7eed\u5085\u91cc\u53f6\u53d8\u6362\uff1a</p> <ul> <li>\u5085\u91cc\u53f6\u53d8\u6362 $$ \\mathcal F(f(x))=F(u)=\\int_{-\\infty}^\\infty f(x)e^{-i2\\pi ux}dx $$</li> <li>\u9006\u5085\u91cc\u53f6\u53d8\u6362 $$ \\mathcal F^{-1}(F(u))=f(x)=\\int_{-\\infty}^\\infty F(u)e^{i2\\pi ux}dx $$</li> </ul> <p>\u9891\u7387\u4e0e\u56fe\u50cf\uff1a</p> <ul> <li>Low frequencies correspond to slowly varying information (e.g., continuous surface)</li> <li>High frequencies correspond to quickly varying information (e.g., edges)</li> </ul> <p></p> <p>\u6ee4\u6ce2\u6b65\u9aa4\uff1a</p> <ol> <li>\u5085\u91cc\u53f6\u53d8\u6362\\(\\mathcal F(f(x))\\)</li> <li>\u53bb\u9664\u4e0d\u9700\u8981\u7684\u9891\u7387\\(D(\\mathcal F(f(x)))\\)</li> <li>\u9006\u5085\u91cc\u53f6\u53d8\u6362\\(f(x)=\\mathcal F^{-1}(D(\\mathcal F(f(x))))\\)</li> </ol> <p>\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff1a</p> <ul> <li>\u5085\u91cc\u53f6\u53d8\u6362\uff1a $$ F(u)=\\sum_{x=0}^{N-1}f(x)e^{-\\frac{i2\\pi ux}{N}} $$</li> <li>\u9006\u5085\u91cc\u53f6\u53d8\u6362\uff1a $$ f(x)=\\dfrac{1}{N}\\sum_{u=0}^{N-1}F(u)e^{\\frac{i2\\pi ux}{N}} $$</li> </ul> <p>FFT\uff1a\\(O(N^2)\\to O(N\\log n)\\)</p> <p>\u6b65\u9aa4\uff1a\u4ee4\\(W_N^{n,k}=e^{-i2\\pi nk/N}\\)\uff0c\u5219\\(F(k)=\\sum_{n=0}^{N-1}f(n)W_N^{n,k}\\)</p> <p>\u8bbe\\(N=2^H=2M\\)\uff0c\u5219 $$ F(k)=\\dfrac{1}{2M}\\sum_{n=0}^{2M-1}f(n)W_{2M}^{n,k}=\\dfrac{1}{2}\\left[\\dfrac{1}{M}\\sum_{n=0}^{M-1}f(2n)W_{2M}^{2n,k}+\\dfrac{1}{M}\\sum_{n=0}^{M-1}f(2n+1)W_{2M}^{2n+1,k}\\right] $$</p> <p>\u53c8\\(W_{2M}^{2n,k}=W_M^{n,k},W_{2M}^{2n+1,k}=W_M^{n,k}\\cdot W_{2M}^{1,k}\\)\uff0c\u6545</p> \\[ F(k)=\\sum_{n=0}^{M-1}f(2n)W_M^{n,k}+\\sum_{n=0}^{M-1}f(2n+1)W_M^{n,k}W_{2M}^{k,1} \\] <p>\u4ee4</p> \\[\\left\\{ \\begin{array}{l} F_e(k)=\\sum\\limits_{n=0}^{M-1}f(2n)W_{M}^{n,k}\\\\ F_o(k)=\\sum\\limits_{n=0}^{M-1}f(2n+1)W_{M}^{n,k} \\end{array} \\right. \\] <p>\u6545\\(F(k)=F_e(k)+F_o(k)W_{2M}^{k,1}\\)</p> <p>\u9012\u63a8\u5373\u53ef\u3002</p> <p>\u4e8c\u7ef4FT\uff1a</p> <p></p> <ul> <li>\u5085\u91cc\u53f6\u53d8\u6362\uff1a $$ \\mathcal F(f(x,y))=F(u,v)=\\int_{-\\infty}^\\infty f(x,y)e^{-i2\\pi(ux+vy)}dxdy $$</li> <li>\u9006\u5085\u91cc\u53f6\u53d8\u6362\uff1a $$ \\mathcal F^{-1}(F(u,v))=f(x,y)=\\int_{-\\infty}^\\infty\\int_{-\\infty}^\\infty F(u,v)e^{i2\\pi(ux+vy)}dudv $$</li> </ul> <p>\u4e8c\u7ef4DFT\uff1a</p> <ul> <li>\u5085\u91cc\u53f6\u53d8\u6362\uff1a $$ F(u,v)=\\sum_{x=0}^{N-1}\\sum_{y=0}^{N-1}f(x,y)e^{-i2\\pi(\\frac{ux}{M}+\\frac{vy}{N})} $$</li> <li>\u9006\u5085\u91cc\u53f6\u53d8\u6362\uff1a $$ f(x,y)=\\dfrac{1}{MN}\\sum_{u=0}^{N-1}\\sum_{v=0}^{N-1}F(u,v)e^{i2\\pi(\\frac{ux}{M}+\\frac{vy}{N})} $$</li> </ul> <p>\u56fe\u50cf\u7684\u76f8\u4f4d\u4fe1\u606f\u66f4\u91cd\u8981</p>"},{"location":"course/dip/Basic%20operation/Geometric%20transform/","title":"Geometric transform","text":"<p>\u6982\u5ff5\uff1a\u5229\u7528\u53d8\u6362\u51fd\u6570\u6539\u53d8\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b</p> <p>\u51e0\u4f55\u53d8\u6362\u4e0d\u6539\u53d8\u50cf\u7d20\u503c\uff0c\u800c\u662f\u6539\u53d8\u50cf\u7d20\u6240\u5728\u7684\u4f4d\u7f6e</p> <p>\u53d8\u6362\uff1a</p> \\[ g(x,y)=f(x',y')=f[a(x,y),b(x,y)] \\] \\[ \\left\\{ \\begin{array}{l} x'=a(x,y)\\\\ y'=b(x,y) \\end{array} \\right. \\] <p>\u5206\u7c7b\uff1a</p> <ul> <li>\u7b80\u5355\u53d8\u6362\u2014\u2014\u53d8\u6362\u8fc7\u7a0b\uff08\u5404\u4e2a\u50cf\u7d20\u53d8\u6362\u524d\u540e\u7684\u4f4d\u7f6e\uff09\u4ee5\u53ca\u53d8\u6362\u53c2\u6570\u53ef\u77e5\u65f6\u7684\u53d8\u6362\uff0c\u5982\u56fe\u50cf\u7684\u5e73\u79fb\u3001\u955c\u50cf\u3001\u8f6c\u7f6e\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u9519\u5207\u53d8\u6362\u7b49</li> <li>\u4e00\u822c\u53d8\u6362\u2014\u2014\u53d8\u6362\u8fc7\u7a0b\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\uff0c\u53d8\u6362\u53c2\u6570\u96be\u4ee5\u6d4b\u91cf\u65f6\u7684\u53d8\u6362\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u56fe\u50cf\u7578\u53d8\u8fdb\u884c\u6821\u6b63\u65f6\uff0c\u9700\u8981\u7528\u5230\u8f83\u4e3a\u590d\u6742\u7684\u53d8\u6362\u516c\u5f0f</li> </ul> <p>\u5e73\u79fb\u53d8\u6362\uff1a\u5c06\u56fe\u50cf\u6cbf\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u79fb\u52a8\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b</p> \\[ \\left\\{ \\begin{array}{l} x'=x+x_0\\\\ y'=y+y_0 \\end{array} \\right. \\] \\[ \\begin{bmatrix} x'\\\\ y'\\\\ 1 \\end{bmatrix}= \\begin{bmatrix} 1&amp;0&amp;x_0\\\\ 0&amp;1&amp;y_0\\\\ 0&amp;0&amp;1 \\end{bmatrix} \\begin{bmatrix} x\\\\ y\\\\ 1 \\end{bmatrix} \\] <p>\u79fb\u52a8\u540e\uff0c\u753b\u5e03\u5ef6\u5c55\uff0c\u4fdd\u7559\u539f\u7a7a\u767d\uff1b \u5e73\u79fb\u540e\u7684\u666f\u7269\u4e0e\u539f\u56fe\u50cf\u76f8\u540c\uff0c\u4f46\u201c\u753b\u5e03\u201d\u4e00\u5b9a\u662f\u6269\u5927\u4e86\uff0c\u5426\u5219\u5c31\u4f1a\u4e22\u5931\u4fe1\u606f</p> <p>\u955c\u50cf\u53d8\u6362\uff1a\u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b</p> <p>\u7ed5x\u8f74\uff1a</p> \\[ \\left\\{ \\begin{array}{l} x'=x\\\\ y=-y \\end{array} \\right. \\] <p>\u7ed5y\u8f74\uff1a</p> \\[ \\left\\{ \\begin{array}{l} x'=-x\\\\ y=y \\end{array} \\right. \\] \\[ \\begin{bmatrix} x'\\\\ y'\\\\1 \\end{bmatrix}= \\begin{bmatrix} s_x&amp;0&amp;0\\\\0&amp;s_y&amp;1\\\\0&amp;0&amp;1 \\end{bmatrix} \\begin{bmatrix} x\\\\y\\\\1 \\end{bmatrix} \\] <p>\\(s_x=1,s_y=-1\\)\u7ed5\\(x\\)\u8f74\uff0c\\(s_x=-1,s_y=1\\)\u7ed5\\(y\\)\u8f74.</p> <p>\u65cb\u8f6c\u53d8\u6362\uff1a\u7ed5\u539f\u70b9\u65cb\u8f6c\\(\\theta\\)\u89d2\uff0c\u5f97\u5230\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b</p> \\[ \\left\\{ \\begin{array}{l} x'=x\\cos\\theta-y\\sin\\theta\\\\ y'=x\\sin\\theta+y\\cos\\theta \\end{array} \\right. \\] \\[ \\begin{bmatrix} x'\\\\y'\\\\1 \\end{bmatrix}= \\begin{bmatrix} \\cos\\theta&amp;-\\sin\\theta&amp;0\\\\ \\sin\\theta&amp;\\cos\\theta&amp;0\\\\ 0&amp;0&amp;1 \\end{bmatrix} \\begin{bmatrix} x\\\\y\\\\1 \\end{bmatrix} \\] <p>\u95ee\u9898\uff1a\u56fe\u50cf\u7ecf\u8fc7\u65cb\u8f6c\u53d8\u6362\u4ee5\u540e\uff0c\u65b0\u56fe\u50cf\u4e2d\u4f1a\u51fa\u73b0\u8bb8\u591a\u7a7a\u6d1e \uff08\u6d6e\u70b9\u6570\u88ab\u820d\u5f03\uff09</p> <p>\u89e3\u51b3\uff1a\u63d2\u503c</p> <ul> <li>\u884c\u63d2\u503c\uff1a\u6309\u987a\u5e8f\u5bfb\u627e\u6bcf\u4e00\u884c\u4e2d\u7684\u7a7a\u6d1e\u50cf\u7d20\uff0c\u8bbe\u7f6e\u5176\u50cf\u7d20\u503c\u4e0e\u540c\u4e00\u884c\u4e2d\u524d\u4e00\u4e2a\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u76f8\u540c</li> </ul> <p>\u7f29\u653e\uff1a\u5c06\u56fe\u50cf\u4e58\u4ee5\u4e00\u5b9a\u7cfb\u6570\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b</p> \\[ \\left\\{ \\begin{array}{l} x'=cx\\\\y'=dy \\end{array} \\right. \\] \\[ \\begin{bmatrix} x'\\\\y'\\\\1 \\end{bmatrix}= \\begin{bmatrix} c&amp;0&amp;0\\\\0&amp;d&amp;0\\\\0&amp;0&amp;1 \\end{bmatrix} \\begin{bmatrix} x\\\\y\\\\1 \\end{bmatrix} \\] <ul> <li>\u6cbf\\(x\\)\u8f74\u65b9\u5411\u7f29\u653e\\(c\\)\u500d\uff08\\(c&gt;1\\)\u653e\u5927\uff0c\\(0&lt;c&lt;1\\)\u7f29\u5c0f\uff09\uff0c\u6cbf\\(y\\)\u8f74\u65b9\u5411\u7f29\u653e\\(d\\)\u500d\uff08\\(d&gt;1\\)\u653e\u5927\uff0c\\(0&lt;d&lt;1\\)\u7f29\u5c0f\uff09</li> <li>\\(c=d\\)\u7b49\u6bd4\u7f29\u653e\uff0c\u5426\u5219\u4e3a\u975e\u7b49\u6bd4\u7f29\u653e\uff0c\u5bfc\u81f4\u56fe\u50cf\u53d8\u5f62</li> <li>\u7f29\u5c0f\u2014\u2014\u6309\u4e00\u5b9a\u95f4\u9694\u9009\u53d6\u67d0\u4e9b\u884c\u548c\u5217\u7684\u50cf\u7d20\u6784\u6210\u7f29\u5c0f\u540e\u7684\u65b0\u56fe\u50cf\uff1b\u653e\u5927\u2014\u2014\u65b0\u56fe\u50cf\u51fa\u73b0\u7a7a\u884c\u548c\u7a7a\u5217\uff0c\u53ef\u91c7\u7528\u63d2\u503c\u7684\u65b9\u6cd5\u52a0\u4ee5\u586b\u8865\uff0c\u4f46\u5b58\u5728\u201c\u9a6c\u8d5b\u514b\u201d\u73b0\u8c61</li> </ul> <p>\u9519\u5207\uff1a\u56fe\u50cf\u7684\u9519\u5207\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u666f\u7269\u5728\u5e73\u9762\u4e0a\u7684\u975e\u5782\u76f4\u6295\u5f71\u6548\u679c</p> <p>\u6cbf\\(x\\)\u8f74\uff1a</p> \\[ \\left\\{ \\begin{array}{l} a(x,y)=x+d_xy\\\\ b(x,y)=y \\end{array} \\right. \\] <p>\u6cbf\\(y\\)\u8f74\uff1a</p> \\[ \\left\\{ \\begin{array}{l} a(x,y)=x\\\\ b(x,y)=y+d_yx \\end{array} \\right. \\] <p>\u7ec4\u5408\u53d8\u6362\uff1a\u5404\u9879\u7b80\u5355\u51e0\u4f55\u53d8\u6362\u7684\u6df7\u5408\u64cd\u4f5c</p> \\[ \\begin{bmatrix} x'\\\\y'\\\\1 \\end{bmatrix}= \\begin{bmatrix} a&amp;b&amp;c\\\\d&amp;e&amp;f\\\\g&amp;h&amp;1 \\end{bmatrix} \\begin{bmatrix} x\\\\y\\\\1 \\end{bmatrix} \\] <p>\u53d8\u6362\u77e9\u9635\u662f\u7531\u6784\u6210\u7ec4\u5408\u53d8\u6362\u7684\u5404\u79cd\u7b80\u5355\u53d8\u6362\u7684\u53d8\u6362\u77e9\u9635\u6309\u4ece\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\u9010\u6b21\u76f8\u4e58\u4ee5\u540e\u5f97\u5230\u7684\u7ed3\u679c</p> <p>\u53d8\u6362\u77e9\u9635\u76f8\u4e58\u65f6\u7684\u987a\u5e8f\u662f\u4e0d\u53ef\u4ee5\u4efb\u610f\u6539\u53d8\u7684</p>"},{"location":"course/dip/Basic%20operation/Guided%20Image%20Filtering/","title":"Guided Image Filtering","text":"<p>\u5143\u7d20\uff1a</p> <ul> <li>\u8f93\u5165\uff1a\\(p_i\\)\uff0c\u5e26\u6709\u566a\u58f0\\(n_i\\)</li> <li>\u8f93\u51fa\uff1a\\(q_i=p_i-n_i\\)</li> <li>guide\uff1a\\(I\\)</li> </ul> <p>\u539f\u7406\uff1a</p> \\[ \\nabla q_i=a\\nabla I_i \\] \\[ q_i=aI_i+b \\] <p>\u5f62\u5f0f\u5316\uff1a</p> \\[ \\min_{(a,b)}\\sum_i(aI_i+b-p_i)^2+\\epsilon a^2 \\] <p>\u5176\u4e2d\\(\\epsilon a^2\\)\u4e3a\u6b63\u5219\u9879\uff1b\u4e0a\u5f0f\u5373\u566a\u58f0\u6700\u5c0f\u3002</p> <p>\u6c42\u89e3\u6700\u4f18\u5316\u95ee\u9898\uff1aLagrange</p> \\[ a=\\dfrac{\\text{cov}(I,p)}{\\text{var}(I)+\\epsilon} \\] \\[ b=\\bar p-a\\bar I \\] <p>\u4f18\u5316\uff1a\u5229\u7528\u91cd\u53e0\u7a97\u53e3</p> <ul> <li>\u7a97\u53e3\u5b9a\u4e49\uff1a</li> </ul> \\[ \\begin{array}{l} a_k=\\dfrac{\\text{cov}_k(I,p)}{\\text{var}_k(I)+\\epsilon}\\\\ b_k=\\bar{p_k}-a\\bar{I_k}\\\\ q_i=\\dfrac{1}{|\\omega|}\\sum\\limits_{k|i\\in\\omega_k}(a_kI_i+b_k)=\\bar{a_i}I_i+\\bar{b_i} \\end{array} \\] <p>\u53c2\u6570\u5f71\u54cd\uff1a</p> <ul> <li>\\(I\\)\uff1a\u5f53\\(\\text{var}(I)&lt;\\!&lt;\\epsilon\\)\u65f6\uff0c\\(a\\approx0,b\\approx\\bar p\\Rightarrow q_i\\approx\\bar{\\bar p}\\)</li> <li>\\(r\\)\uff1a\u5f71\u54cdband-width</li> <li>\\(\\epsilon\\)\uff1a\u5f71\u54cd\u4fdd\u8fb9\uff08\u5f53\\(I\\)\u5b58\u5728\u9636\u68af\u65f6\uff0c\u8f93\u51fa\u4e5f\u5b58\u5728\u9636\u68af\uff09</li> </ul> <p>\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</p> <p>\u5e94\u7528\uff1a</p> <ul> <li>\u7ec6\u8282\u589e\u5f3a\uff08\u65e0\u68af\u5ea6\u9006\u8f6c\uff09</li> <li>\u56fe\u50cf\u538b\u7f29</li> <li>\u56fe\u50cf\u53bb\u566a</li> <li>\u53bb\u96fe\uff1a\\(\\epsilon\\to0\\)</li> <li>\u8fb9\u7f18\u63d0\u53d6</li> </ul>"},{"location":"course/dip/Basic%20operation/Image%20feature/","title":"Image feature","text":""},{"location":"course/dip/Basic%20operation/Image%20feature/#invariant-local-features","title":"Invariant local features","text":"<p>\u4e0d\u53d8\u91cf\uff1atranslation, rotation, scale</p> <p>\u7279\u5f81\u68c0\u6d4b\uff1aHarris corner detector</p> <ul> <li>\u601d\u60f3\uff1a\u89d2\u70b9\u66f4\u9002\u5408\u505a\u7279\u5f81\u70b9</li> <li>\u523b\u753b\uff1a\u627e\u5230\u5305\u542b\u5927\u68af\u5ea6\u4e14\u68af\u5ea6\u671d\u5411\u4e0d\u540c\u7684\u7a97\u53e3</li> <li>\u63a8\u5bfc\uff1a\u8bbe\u7a97\u53e3\\(W\\)\u4f4d\u79fb\u4e3a\\((u,v)\\)\uff0cSSD\u8bef\u5dee\u4e3a</li> </ul> \\[ E(u,v)=\\sum_{(x,y)\\in W}[I(x+u,y+v)-I(x,y)]^2 \\] \\[I(x+u,y+v)\\approx I(x,y)+\\dfrac{\\partial I}{\\partial x}u+\\dfrac{\\partial I}{\\partial y}v\\approx I(x,y)+[I_x I_y]\\begin{bmatrix}u\\\\ v\\end{bmatrix}\\] \\[E(u,v)\\approx\\sum_{(x,y)\\in W}\\left[[I_x I_y]\\begin{bmatrix}u\\\\ v\\end{bmatrix}\\right]^2=\\sum_{(x,y)\\in W}[u\\ \\ v]\\begin{bmatrix}I_x^2&amp;I_xI_y\\\\ I_yI_x&amp;I_y^2\\end{bmatrix}\\begin{bmatrix}u\\\\ v\\end{bmatrix}\\] <p>\u4ee4\\(H=\\begin{bmatrix}I_x^2&amp;I_xI_y\\\\ I_yI_x&amp;I_y^2\\end{bmatrix}\\)\uff0c\u5176\u4e24\u4e2a\u7279\u5f81\u5411\u91cf\u65b9\u5411\u4e3a\u4e0b\u964d\u6700\u5feb\u7684\u65b9\u5411</p> <p>\u5f53\\(\\lambda_+,\\lambda_-\\)\u90fd\u5927\u65f6\u4e3a\u89d2\u70b9\u3002</p> <p></p> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u70b9\u7684\u68af\u5ea6</li> <li>\u901a\u8fc7\u68af\u5ea6\u5f97\u5230\u6bcf\u4e2awindows\u7684H\u77e9\u9635</li> <li>\u8ba1\u7b97\u7279\u5f81\u503c\u627e\u5230\u76f8\u5e94\u8f83\u5927\u7684\u70b9(\\(\\lambda_-\\)&gt;Threshold)</li> <li>\u9009\u62e9\u90a3\u4e9b\\(\\lambda_-\\)\u662f\u5c40\u90e8\u6781\u5927\u503c\u7684\u70b9\u4f5c\u4e3a\u7279\u5f81</li> </ol> <p>\u95ee\u9898\uff1a\u8ba1\u7b97\u91cf\u5927</p> <p>\u89e3\u51b3\uff1aHarris\u7b97\u5b50</p> \\[ f=\\dfrac{\\lambda_1\\lambda_2}{\\lambda_1+\\lambda_2}=\\dfrac{\\det(H)}{\\text{tr}(H)} \\] <p>\u6027\u8d28\uff1a</p> <ul> <li>\u65cb\u8f6c\u4e0d\u53d8\u6027</li> <li>\u5f3a\u5ea6\u7ebf\u6027\u53d8\u6362\u4e0d\u53d8\u6027\uff1a\\(I\\to I+b,I\\to aI\\)</li> <li>\u65e0\u7f29\u653e\u4e0d\u53d8\u6027</li> </ul> <p>\u89e3\u51b3\uff1a\u5177\u6709\u7f29\u653e\u4e0d\u53d8\u6027\u7684\u7279\u5f81\u68c0\u6d4b</p> <p>\u8981\u6c42\uff1a\u5728\u4e0d\u540c\u6bd4\u4f8b\u56fe\u50cf\u4e0a\u6781\u503c\u70b9\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0</p> <p></p>"},{"location":"course/dip/Basic%20operation/Image%20feature/#scale-invariant-detectors","title":"Scale Invariant Detectors","text":""},{"location":"course/dip/Basic%20operation/Image%20feature/#harris-laplacian","title":"Harris-Laplacian","text":"<p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0a\u505aHarris\u89d2\u70b9\u68c0\u6d4b</li> <li>\u82e5\u89d2\u70b9\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0a\u90fd\u7a33\u5b9a\u5b58\u5728\uff0c\u5219\u901a\u8fc7\u7b2c\u4e00\u9053\u68c0\u9a8c</li> <li>\u9009\u62e9\u6700\u4f18\u5c3a\u5ea6\uff1a\u5229\u7528Laplace\u503c\uff0c\u9009\u62e9Laplace\u503c\u6700\u5927\u7684\u5c3a\u5ea6</li> </ol> <p></p>"},{"location":"course/dip/Basic%20operation/Image%20feature/#sift","title":"SIFT","text":"<p>\u5377\u79ef\u6838\uff1a\\(\\text{DoG}=G(x,y,k\\sigma)-G(x,y,\\sigma)\\)</p> <p></p> <p>\u6bcf\u4e2a\u70b9\u540c\u5468\u56f426\u4e2a\u70b9\u6bd4\u8f83\u6765\u5224\u65ad\u662f\u5426\u4e3a\u6781\u503c</p> <p> \u68af\u5ea6/\u89d2\u5ea6\u8ba1\u7b97\uff1a</p> \\[ m(x,y)=\\sqrt{(L(x+1,y)-L(x-1,y))^2+(L(x,y+1)-L(x,y-1))^2} \\] \\[ \\theta(x,y)=\\sigma\\tan 2((L(x,y+1)-L(x,y-1))/(L(x+1,y)-L(x-1,y))) \\] <p>\u65b9\u5411\u9009\u62e9\uff1a</p> <p></p> <p>\u63cf\u8ff0\u7b26\uff1a</p> <ul> <li>\u4e0d\u53d8\u6027\uff1a\u5728\u653e\u5c04\u53d8\u6362\u3001\u4eae\u5ea6\u53d8\u6362\u540e\u4e0d\u53d8\u7684\u7279\u5f81</li> <li>Scale Invariant Feature Transform\uff1a     <ul> <li>\u6b65\u9aa4\uff1a<ol> <li>\u5728\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u89d2\u70b9\u5468\u56f4\u9009\u53d616 * 16\u7684\u65b9\u5f62\u7a97\u53e3</li> <li>\u8ba1\u7b97\u6bcf\u4e2a\u50cf\u7d20\u7684\u8fb9\u7684\u671d\u5411\uff08\u68af\u5ea6\u7684\u89d2\u5ea6-90\u00b0\uff09</li> <li>\u5254\u9664\u5f31\u8fb9\u7f18\uff08\u5c0f\u4e8e\u9608\u503c\u68af\u5ea6\u5e45\u5ea6\uff09</li> <li>\u521b\u5efa\u5269\u4e0b\u8fb9\u7684\u65b9\u5411\u7684\u76f4\u65b9\u56fe</li> </ol> </li> </ul> </li> </ul>"},{"location":"course/dip/Basic%20operation/Image%20grayscale%20transform/","title":"Image grayscale transform","text":"<p>\u53ef\u89c6\u5316\u589e\u5f3a\uff1a\u5bf9\u6570\u64cd\u4f5c</p> <ul> <li>\u76ee\u7684\uff1a\u4e3a\u4e86\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u4fe1\u606f\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u57fa\u4e8e\u5bf9\u6570\u7684\u64cd\u4f5c</li> <li>\u516c\u5f0f\uff1a\\(L_d=\\dfrac{\\log(L_W+1)}{\\log(L_\\max+1)}\\)\uff0c\u5176\u4e2d\\(L_d\\)\u662f\u663e\u793a\u4eae\u5ea6\uff0c\\(L_W\\)\u662f\u771f\u5b9e\u4e16\u754c\u4eae\u5ea6\uff0c\\(L_\\max\\)\u662f\u573a\u666f\u6700\u4eae\u503c</li> <li>\u6027\u8d28\uff1a\u8fd9\u4e2a\u6620\u5c04\u80fd\u591f\u786e\u4fdd\u4e0d\u7ba1\u573a\u666f\u7684\u52a8\u6001\u8303\u56f4\u662f\u600e\u4e48\u6837\u7684\uff0c\u5176\u6700\u5927\u503c\u90fd\u80fd\u6620\u5c04\u52301\uff08\u767d\uff09\uff0c\u5176\u4ed6\u7684\u503c\u80fd\u591f\u6bd4\u8f83\u5e73\u6ed1\u5730\u53d8\u5316</li> <li>\u539f\u7406\uff1a<ul> <li>Weber\u2019s Law\uff1a\\(\\dfrac{\\Delta I}{I}\\approx K_{\\text{weber}}\\approx1\\%\\sim2\\%\\)</li> <li>\u5047\u8bbe\u8fde\u7eed\u4e24\u4e2a\u7070\u5ea6\u7ea7\u4e4b\u95f4\u7684\u4eae\u5ea6\u5dee\u5f02\u662fWeber\u2019s Law\u4e2d\u7684\u53ef\u89c6\u4e34\u754c\u503c\uff0c\u5219\\(\\dfrac{I_{\\max}}{I_{\\min}}=(1+K_{\\text{weber}})^{255}\\approx13\\sim156\\)</li> <li>\u4f20\u7edf\u663e\u793a\u5bf9\u6bd4\u5ea6\uff1a<ul> <li>\u9634\u6781\u5c04\u7ebf\u7ba1 CRT: 100 : 1</li> <li>\u7eb8\u4e0a\u6253\u5370\uff1a10\uff1a1</li> </ul> </li> <li>Fechner\u2019s Law\uff1a\u4eba\u611f\u77e5\u80fd\u529b\u670d\u4ece\\(\\log(I)\\) \uff08\u7406\u60f3\u5bf9\u6570\u66f2\u7ebf\uff09</li> </ul> </li> </ul> <p>\\(\\gamma\\)\u77eb\u6b63\uff1a</p> <ul> <li>CRT\u663e\u793a\u5668\uff1a<ul> <li>\u901a\u8fc7\u8c03\u6574\u7535\u538b\u53ef\u4ee5\u8c03\u6574\u4eae\u5ea6\u53ca\u5176\u53d8\u5316\u66f2\u7387\uff0c\u4ece\u800c\u5f71\u54cd\u53ef\u89c6\u6027\u548c\u5bf9\u7ec6\u8282\u7684\u8868\u73b0\u80fd\u529b</li> <li>\\(U\\sim I^{{1}/{\\gamma}}\\) </li> </ul> </li> <li>\u7167\u76f8\u6280\u672f\uff1a<ul> <li>\\(I\\sim(\\alpha\\cdot I_0)^\\gamma=a^\\gamma\\cdot{I_0}^\\gamma\\to\\alpha\\cdot{I_0}^\\gamma\\)</li> <li>\u4e0e\u8c03\u6574\u66dd\u5149\u65f6\u95f4\u6548\u679c\u8fd1\u4f3c\u76f8\u540c</li> <li>\u5e94\u7528\uff1a\\(\\gamma\\)\u8f83\u5927\uff0c\u63d0\u5347\u89c6\u89c9\u51b2\u51fb\u529b\uff08\u7528\u4e8e\u8bbe\u8ba1\uff09\uff1b\\(\\gamma\\)\u8f83\u5c0f\uff0c\u4fdd\u7559\u66f4\u591a\u7ec6\u8282\uff08\u7528\u4e8e\u673a\u5668\u5b66\u4e60\uff09</li> </ul> </li> </ul> <p>\u7070\u5ea6\u56fe\u50cf\uff1a</p> <ul> <li>\u6982\u5ff5\uff1a2D array composed by pixels (M rows\u00d7N columns), Each pixel is represented by 8 bits. The grayscales is divided into\\(2^8\\) = 256 levels, grayscale intensity p = 0,1,2,\u2026,255</li> </ul> <p>\u7070\u5ea6\u76f4\u65b9\u56fe:</p> <ul> <li>\u6982\u5ff5\uff1a\u8868\u793a\u4e00\u5e45\u56fe\u50cf\u4e2d\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd     </li> <li>\u51fd\u6570\u5173\u7cfb\uff1a\\(h(r_k)=n_k\\qquad0\\leqslant k\\leqslant L-1,0\\leqslant n_k\\leqslant n-1\\)</li> <li>\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff1a\\(P(r_k)=n_k/n\\quad\\sum\\limits_{k=0}^{L-1}P(r_k)=1\\)</li> </ul> <p>\u5f69\u8272\u76f4\u65b9\u56fe\uff1a</p> <ul> <li>\u6982\u5ff5\uff1a\u4e00\u5e45\u56fe\u50cf\u4e2dr,g,b\u901a\u9053\u4e0a\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd</li> <li>\u5e94\u7528\uff1a<ul> <li>\u56fe\u50cf\u641c\u7d22\uff1a\u5bfb\u627e\u76f4\u65b9\u56fe\u76f8\u8fd1\u7684\u56fe\u7247</li> <li>\u62fc\u56fe\uff1a\u5c06\u56fe\u50cf\u5207\u5272\u4e3a\u5c0f\u4efd\uff0c\u6c42\u6bcf\u4e2a\u5c0f\u683c\u5b50\u4e0e\u5f85\u62fc\u56fe\u76f4\u65b9\u56fe\u7684\u6b27\u5f0f\u8ddd\u79bb\uff0c\u9009\u62e9\u76f8\u8fd1\u7684\u8fdb\u884c\u62fc\u56fe\uff08\u56fe\u50cf\u5207\u7684\u8d8a\u5c0f\u8d8a\u80fd\u8868\u73b0\u7ec6\u8282\uff09</li> </ul> </li> <li>\u95ee\u9898\uff1a\u4ec5\u8868\u73b0\u989c\u8272\u5206\u5e03\uff0c\u5e76\u4e0d\u8868\u793a\u56fe\u50cf\u5177\u4f53\u5185\u5bb9</li> <li>\u6027\u8d28\uff1a<ul> <li>\u7a7a\u95f4\u57df\u5904\u7406\u6280\u672f\u7684\u57fa\u7840</li> <li>\u53cd\u6620\u56fe\u50cf\u7070\u5ea6\u7684\u5206\u5e03\u89c4\u5f8b\uff0c\u4f46\u4e0d\u80fd\u4f53\u73b0\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u53d8\u5316\u60c5\u51b5</li> <li>\u5bf9\u4e8e\u4e00\u5e45\u7ed9\u5b9a\u7684\u56fe\u50cf\uff0c\u5176\u76f4\u65b9\u56fe\u662f\u552f\u4e00\u7684</li> <li>\u4e0d\u540c\u7684\u56fe\u50cf\u53ef\u4ee5\u5bf9\u5e94\u76f8\u540c\u7684\u76f4\u65b9\u56fe</li> </ul> </li> </ul> <p>\u76f4\u65b9\u56fe\u64cd\u4f5c\uff1a</p> <ul> <li>\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff1a\u5c06\u539f\u56fe\u50cf\u7684\u975e\u5747\u5300\u5206\u5e03\u7684\u76f4\u65b9\u56fe\u901a\u8fc7\u53d8\u6362\u51fd\u6570T\u4fee\u6b63\u4e3a\u5747\u5300\u5206\u5e03\u7684\u76f4\u65b9\u56fe\uff0c\u7136\u540e\u6309\u5747\u8861\u76f4\u65b9\u56fe\u4fee\u6b63\u539f\u56fe\u50cf\uff1b\u56fe\u50cf\u5747\u8861\u5316\u5904\u7406\u540e\uff0c\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u662f\u5e73\u76f4\u7684\uff0c\u5373\u5404\u7070\u5ea6\u7ea7\u5177\u6709\u76f8\u540c\u7684\u51fa\u73b0\u9891\u6570      </li> <li>\u64cd\u4f5c\uff1a\u627e\u5230\u53d8\u6362\u51fd\u6570T\uff0c\u786e\u5b9a\u5982\u4e0b\u5bf9\u5e94\u5173\u7cfb\\(s=T(r)\\)\uff0c\u4ece\u800c\u786e\u4fdd\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7070\u5ea6r\u90fd\u80fd\u8f6c\u6362\u4e3a\u65b0\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u5bf9\u5e94\u7684\u7070\u5ea6s</li> <li>\u7b97\u6cd5\uff1a<ul> <li>\u5047\u8bbe\uff1a<ol> <li>\u4ee4r\u548cs\u5206\u522b\u4ee3\u8868\u53d8\u5316\u524d\u540e\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\uff0c\u5e76\u4e14 0\u2264r,s \u22641</li> <li>P(r)\u548cP(s) \u5206\u522b\u4e3a\u53d8\u5316\u524d\u540e\u5404\u7ea7\u7070\u5ea6\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08r\u548cs\u503c\u5df2\u5f52\u4e00\u5316\uff0c\u6700\u5927\u7070\u5ea6\u503c\u4e3a1\uff09</li> </ol> </li> <li>\u89c4\u5b9a\uff1a<ol> <li>\u57280\u2264r \u22641\u4e2d\uff0cT(r)\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\u5e76\u4e140\u2264T(r)\u22641</li> <li>\u53cd\u53d8\u6362r = \\(T^{-1}\\)(s)\u4e5f\u4e3a\u5355\u8c03\u9012\u589e\u51fd\u6570</li> </ol> </li> <li>\u63a8\u5bfc\uff1a     \u7070\u5ea6\u53d8\u6362\u4e0d\u5f71\u54cd\u50cf\u7d20\u7684\u4f4d\u7f6e\u5206\u5e03\uff0c\u4e5f\u4e0d\u4f1a\u589e\u51cf\u50cf\u7d20\u6570\u76ee\uff1a     \\(\\int_0^rP(r)\\text dr=\\int_0^sP(s)\\text ds=\\int_0^s1\\cdot\\text ds=s=T(r)\\)     \u5373\\(s=T(r)=\\int_0^rP(r)\\text dr\\)</li> <li>\u7ed3\u8bba\uff1a\u8f6c\u6362\u51fd\u6570T\u5728\u53d8\u91cfr\u5904\u7684\u51fd\u6570\u503cs\uff0c\u662f\u539f\u76f4\u65b9\u56fe\u4e2d\u7070\u5ea6\u7b49\u7ea7\u4e3a[0,r]\u4ee5\u5185\u7684\u76f4\u65b9\u56fe\u66f2\u7ebf\u6240\u8986\u76d6\u7684\u9762\u79ef</li> </ul> </li> <li>\u63a8\u5e7f\uff1a\u79bb\u6563\u5316<ul> <li>\u8bbe\u4e00\u5e45\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\u4e3an\uff0c\u5206L\u4e2a\u7070\u5ea6\u7ea7\uff0cnk\u4e3a\u7b2ck\u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u50cf\u7d20\u6570\uff0c\u5219\u7b2ck\u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u4e3a \\(P(r_k)=n_k/n\\)</li> <li>\u79bb\u6563\u5316\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u8f6c\u6362\u516c\u5f0f\uff1a $$ s_k=T(r_k)=\\sum_{i=0}^kP(r_i)=\\sum_{i=0}^k\\dfrac{n_i}{n}=\\dfrac{1}{n}\\sum_{i=0}^kn_i $$</li> </ul> </li> <li> <p>\u4f8b\uff1a</p> <p></p> </li> <li> <p>\u76f4\u65b9\u56fe\u5339\u914d\uff1a\u4fee\u6539\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\uff0c\u4f7f\u5f97\u5b83\u4e0e\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5339\u914d\u6216\u5177\u6709\u4e00\u79cd\u9884\u5148\u89c4\u5b9a\u7684\u51fd\u6570\u5f62\u72b6</p> <ul> <li>\u76ee\u6807\uff1a\u7a81\u51fa\u6211\u4eec\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\uff0c\u4f7f\u56fe\u50cf\u8d28\u91cf\u6539\u5584</li> <li>\u601d\u8def\uff1a\u5229\u7528\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c</li> <li>\u63a8\u5bfc\uff1a\\(r\\mapsto z\\)<ol> <li>\\(s=T(r)=\\int_0^rP(r)\\text dr\\)</li> <li>\\(v=T(z)=\\int_0^zP(z)\\text dz\\)</li> <li>\\(s,v\\)\u5206\u5e03\u76f8\u540c\uff0c\u53d6\\(v=s\\)\uff0c\u6c42\u4e0e\\(r\\)\u5bf9\u5e94\u7684\\(z=G^{-1}(s)\\)</li> </ol> </li> <li>\u6b65\u9aa4\uff1a<ol> <li>\u8ba1\u7b97\u83b7\u5f97\u4e24\u5f20\u8868</li> <li>\u9009\u53d6\u4e00\u5bf9\\(v_k=s_j\\)\uff0c\u67e5\u8868\u5f97\\(z_k,r_j\\)</li> <li>\\(r_j\\mapsto z_k\\)</li> </ol> </li> </ul> </li> <li>\u76f4\u65b9\u56fe\u53d8\u6362\uff1a\u786e\u5b9a\u53d8\u6362\u524d\u540e\u4e24\u4e2a\u76f4\u65b9\u56fe\u7070\u5ea6\u7ea7\u4e4b\u95f4\u5bf9\u5e94\u5173\u7cfb\u7684\u53d8\u6362\u51fd\u6570\uff1b\u7ecf\u8fc7\u76f4\u65b9\u56fe\u53d8\u6362\u4ee5\u540e\uff0c\u539f\u56fe\u50cf\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7070\u5ea6\u503c\u90fd\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u65b0\u7684\u7070\u5ea6\u503c\uff0c\u4ece\u800c\u6784\u6210\u4e00\u5e45\u65b0\u56fe\u50cf<ul> <li>\u4eae\u5ea6\u8c03\u6574\uff1a     </li> <li>\u5bf9\u6bd4\u5ea6\u8c03\u6574\uff1a(k = 1\u4e34\u754c)     </li> <li>\u989c\u8272\u91cf\u5316\uff1a\u5c06\u843d\u5728\u67d0\u533a\u95f4\u7684\u989c\u8272\u8bbe\u4e3a\u56fa\u5b9a\u503c\uff08\u79bb\u6563\u5316\uff09     </li> <li>\u7ebf\u6027\u53d8\u6362\uff1a\\(S=T(r)=kr+b\\) <ul> <li>\u6027\u8d28\uff1a<ul> <li>\\(k&gt;0\\)\u53d8\u4eae\uff0c\\(k&gt;1\\)\u5bf9\u6bd4\u5ea6\u53d8\u5f3a\uff08\u7070\u5ea6\u6563\u5f00\uff09\uff0c\\(k&lt;0\\)\u989c\u8272\u53cd\u8f6c</li> <li>\u5229\u7528\u5206\u6bb5\u76f4\u65b9\u56fe\u53d8\u6362\uff0c\u53ef\u4ee5\u5c06\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\u7ebf\u6027\u6269\u5c55\uff0c\u540c\u65f6\u76f8\u5bf9\u6291\u5236\u4e0d\u611f\u5174\u8da3\u7684\u7070\u5ea6\u533a\u57df </li> </ul> </li> </ul> </li> <li>\u5206\u6bb5\u7ebf\u6027\u53d8\u6362\uff1a     </li> <li>\u975e\u7ebf\u6027\u53d8\u6362\uff1a<ul> <li>\u5bf9\u6570\u53d8\u6362\uff1a\\(g(x,y)=a+\\dfrac{\\ln[f(x,y)+1]}{b\\ln c}\\) <ul> <li>\u62c9\u5347\u4f4e\u7070\u5ea6\uff0c\u538b\u7f29\u9ad8\u7070\u5ea6</li> </ul> </li> <li>\u6307\u6570\u53d8\u6362\uff1a\\(g(x,y)=b^{c[f(x,y)-a]}-1\\) <ul> <li>\u62c9\u5347\u9ad8\u7070\u5ea6\uff0c\u538b\u7f29\u4f4e\u7070\u5ea6</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"course/dip/Basic%20operation/Interpolation/","title":"Interpolation","text":"<p>\u6982\u5ff5\uff1a\u63d2\u503c\u662f\u51e0\u4f55\u53d8\u6362\u6700\u5e38\u7528\u7684\u5de5\u5177\uff0c\u5229\u7528\u5df2\u77e5\u50cf\u7d20\u503c\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6a21\u62df\u51fa\u672a\u77e5\u50cf\u7d20\u7684\u50cf\u7d20\u503c</p>"},{"location":"course/dip/Basic%20operation/Interpolation/#_1","title":"\u6700\u8fd1\u90bb\u63d2\u503c","text":"<p>\u6982\u5ff5\uff1a\u8f93\u51fa\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u7b49\u4e8e\u79bb\u5b83\u6240\u6620\u5c04\u5230\u7684\u4f4d\u7f6e\u6700\u8fd1\u7684\u8f93\u5165\u50cf\u7d20\u7684\u7070\u5ea6\u503c</p> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u8ba1\u7b97\u8be5\u51e0\u4f55\u53d8\u6362\u7684\u9006\u53d8\u6362\uff0c\u8ba1\u7b97\u51faP\u2019\u6240\u5bf9\u5e94\u7684\u539f\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6eP</li> <li>\u5bfb\u627e\u4e0eP\u70b9\u6700\u63a5\u8fd1\u7684\u50cf\u7d20Q\uff0c\u628aQ\u70b9\u7684\u50cf\u7d20\u503c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u4e2dP\u2019\u70b9\u7684\u50cf\u7d20\u503c \\((x',y')\\to(x,y)\\to(x_{\\text{int}},y_{\\text{int}})\\to I_{\\text{new}}(x',y')\\to I_{\\text{old}}(x_{\\text{int}},y_{\\text{int}})\\)</li> </ol> <p>\u95ee\u9898\uff1a\u5f53\u56fe\u50cf\u4e2d\u5305\u542b\u660e\u663e\u7684\u51e0\u4f55\u7ed3\u6784\u65f6\uff0c\u7ed3\u679c\u5c06\u4e0d\u592a\u5149\u6ed1\u8fde\u7eed\uff0c\u4ece\u800c\u5728\u56fe\u50cf\u4e2d\u4ea7\u751f\u4eba\u4e3a\u7684\u75d5\u8ff9\uff08\u91cd\u590d\u91c7\u6837\uff09</p>"},{"location":"course/dip/Basic%20operation/Interpolation/#_2","title":"\u7ebf\u6027\u63d2\u503c","text":"<p>\u4e00\u7ef4\uff1a\\(g_3=\\dfrac{g_2-g_1}{x_2-x_1}(x_3-x_1)+g_1\\)</p> <p>\u4e8c\u7ef4\uff08\u53cc\u7ebf\u6027\u63d2\u503c\uff09</p> <p></p> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u5b9a\u4e49\u53cc\u7ebf\u6027\u65b9\u7a0b\\(g(x,y)=ax+by+cxy+d\\)</li> <li>\u5206\u522b\u5c06A\u3001B\u3001C\u3001D\u56db\u70b9\u7684\u4f4d\u7f6e\u548c\u7070\u5ea6\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230\u65b9\u7a0b\u7ec4</li> <li>\u89e3\u65b9\u7a0b\u7ec4\uff0c\u89e3\u51faa\u3001b\u3001c\u3001d\u56db\u4e2a\u7cfb\u6570</li> <li>\u5c06P\u70b9\u7684\u4f4d\u7f6e\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230P\u70b9\u7684\u7070\u5ea6</li> </ol>"},{"location":"course/dip/Basic%20operation/Interpolation/#rbf","title":"\u5f84\u5411\u57fa\u51fd\u6570(RBF)\u63d2\u503c","text":"<p>\u5b9a\u4e49\uff1a\\(G(x)=\\sum_{i=1}^nw_iG(c_i),\\quad w_i=\\dfrac{\\varphi(|x-c_i|)}{\\sum_{i=1}^n\\varphi(|x-c_i|)}\\)</p> <p>\u5176\u4e2d\\(\\mathbf x\\)\u53ef\u4ee5\u662f\u6807\u91cf\u6216\u5411\u91cf\uff0c\u53ef\u4ee5\u662f\u4e00\u7ef4\u6216\u591a\u7ef4\u63d2\u503c\uff1b\\(\\varphi\\)\u4e3a\u6838\u51fd\u6570\uff0c\\(c_{1..n}\\)\u4e3a\u63a7\u5236\u70b9</p> <p>\u6838\u51fd\u6570\uff1a\\(\\varphi(r)=\\varphi(|x-x_i|)\\)</p> <ul> <li>Gaussian\uff1a\\(\\varphi(r)=\\exp(-\\dfrac{r^2}{2\\sigma^2})\\)</li> <li>Multiquadrics\uff1a\\(\\varphi(r)=\\sqrt{1+\\dfrac{r^2}{\\sigma^2}}\\)</li> <li>Linear\uff1a\\(\\varphi(r)=r\\)</li> <li>Cubic\uff1a\\(\\varphi(r)=r^3\\)</li> <li>Thinplate\uff1a\\(\\varphi(r)=r^2\\ln(r+1)\\)</li> </ul>"},{"location":"course/dip/Basic%20operation/Morph/","title":"Morph","text":"<p>\u51e0\u4f55\u53d8\u6362\uff1aonly change the pixel\u2019s location</p> <p>morph\uff1a\u4f7f\u4e00\u5e45\u56fe\u50cf\u9010\u6b65\u53d8\u5316\u5230\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u5904\u7406\u65b9\u6cd5</p> <ul> <li>\u8f83\u590d\u6742\u7684\u4e8c\u7ef4\u56fe\u50cf\u5904\u7406\uff0c\u9700\u8981\u5bf9\u5404\u50cf\u7d20\u70b9\u7684\u989c\u8272\u3001\u4f4d\u7f6e\u4f5c\u53d8\u6362</li> <li>\u53d8\u5f62\u7684\u8d77\u59cb\u56fe\u50cf\u548c\u7ed3\u675f\u56fe\u50cf\u5206\u522b\u4e3a\u4e24\u5e45\u5173\u952e\u5e27\uff0c\u4ece\u8d77\u59cb\u5f62\u72b6\u53d8\u5316\u5230\u7ed3\u675f\u5f62\u72b6\u7684\u5173\u952e\u5728\u4e8e\u81ea\u52a8\u5730\u751f\u6210\u4e2d\u95f4\u5f62\u72b6\uff0c\u4e5f\u5373\u81ea\u52a8\u751f\u6210\u4e2d\u95f4\u5e27</li> </ul> <p>\u9759\u6001\u53d8\u6362\uff1a\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5e45\u56fe\u7684\u8f6c\u6362\u4f5c\u9759\u6001\u53d8\u6362\uff0c\u4ece\u4e00\u5e45\u56fea\u9010\u6e10\u53d8\u5316\u6210\u7b2c\u4e8c\u5e45\u56feb</p> <ul> <li>\u539f\u7406\uff1a\u8ba9\u56fea\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\uff0c\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u50cf\u7d20\u7684\u989c\u8272</li> <li>\u65b9\u6cd5\uff1a\u6839\u636e\u53d8\u6362\u7684\u5feb\u6162\uff0c\u8bbe\u7f6e\u76f8\u5e94\u7684\u6b65\u957f\uff0c\u5c06\u56fea\u6bcf\u4e00\u70b9\u7684RGB\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u8c61\u7d20\u7684RGB\uff0c\u53ef\u4ee5\u9009\u62e9\u7b49\u6bd4\u6216\u7b49\u5dee\u7684\u65b9\u5f0f</li> <li>\u5bf9\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u6bd4\u6216\u7b49\u5dee\u7ea7\u6570\u5b9a\u4e49\u6b65\u957f\uff0c\u4f7f\u989c\u8272\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe $$ I_i=I_{\\text{begin}}+i\\times\\dfrac{I_{\\text{end}}-I_{\\text{begin}}}{n} $$</li> <li>\u5bf9\u4e8e\u5f69\u8272\u56fe\u50cf\uff0cRGB\u4e09\u8272\u540c\u65f6\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u50cf\u3002\u53ef\u4ee5\u5206\u522b\u53d8\u5316\uff0c\u4e5f\u53ef\u8003\u8651RGB\u7684\u76f8\u5bf9\u6bd4\u4f8b\u5173\u7cfb\u540c\u65f6\u53d8\u5316</li> </ul> \\[ r_{i,j}=r_{i,j}^a+\\dfrac{r_{i,j}^b-r_{i,j}^a}{N}\\times n,\\quad n=0,\\cdots,N-1 \\] \\[ g_{i,j}=g_{i,j}^a+\\dfrac{g_{i,j}^b-g_{i,j}^a}{N}\\times n,\\quad n=0,\\cdots,N-1 \\] \\[ b_{i,j}=b_{i,j}^a+\\dfrac{b_{i,j}^b-b_{i,j}^a}{N}\\times n,\\quad n=0,\\cdots,N-1 \\] <p>\u9009\u62e9\u4e24\u5e45\u7ed3\u6784\u76f8\u4f3c\u3001\u5927\u5c0f\u76f8\u540c\u7684\u753b\u9762\u4f5c\u4e3a\u8d77\u59cb\u548c\u7ed3\u675f\u5173\u952e\u5e27\uff0c\u8fd9\u6837\u624d\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5b9e\u73b0\u81ea\u7136\u3001\u8fde\u7eed\u7684\u4e2d\u95f4\u53d8\u5f62\u8fc7\u7a0b</p> <p>\u7ed3\u6784\u4fdd\u6301\uff1a\u5bf9\u9f50</p> <ul> <li>\u57fa\u4e8e\u70b9\uff1a\u5728\u8d77\u59cb\u548c\u7ed3\u675f\u753b\u9762\u4e0a\u786e\u5b9a\u548c\u52fe\u753b\u51fa\u5404\u90e8\u5206\uff08\u4e3b\u8981\u8f6e\u5ed3\uff09\u7684\u7ed3\u6784\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e5f\u5373\u4ece\u8d77\u59cb\u753b\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\u53d8\u5230\u7ed3\u675f\u753b\u9762\u4e0a\u7684\u53e6\u4e00\u4e2a\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u53d8\u5f62\u8fd0\u7b97\u6240\u9700\u8981\u7684\u53c2\u6570\uff1b\u6839\u636e\u9700\u8981\uff0c\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\u53ef\u4ee5\u4efb\u610f\u79fb\u52a8\u3002\u8c03\u6574\u8d77\u59cb\u5e27\u7684\u5bf9\u5e94\u70b9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u6a21\u62df\u6444\u50cf\u4e2d\u7684\u955c\u5934\u6e10\u53d8\u6548\u679c</li> <li>\u57fa\u4e8e\u7ebf\u6bb5\uff1a\u5728\u5404\u70b9\u50cf\u7d20\u5750\u6807\u53d8\u5316\u7684\u540c\u65f6\uff0c\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272RGB\u4e5f\u4e00\u8d77\u4ece\u539f\u56fe\u50cf\u6539\u53d8\u4e3a\u76ee\u6807\u56fe\u50cf\uff1b\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u7b56\u7565\u8ba1\u7b97\u50cf\u7d20\u4e2d\u95f4\u503c\uff08\u7a7a\u95f4\uff0c\u989c\u8272\uff09     </li> <li>\u57fa\u4e8e\u7f51\u683c\uff1a\u786e\u5b9a\u5750\u6807\u53d8\u6362\u51fd\u6570\uff0c\u6839\u636e\u53d8\u6362\u51fd\u6570\u4ea7\u751f\u4e2d\u95f4\u5e27<ul> <li>\u89c6\u70b9\u53d8\u6362\u5c31\u662f\u6c42\u5728\u89c6\u70b9\u79fb\u52a8\u540e\u539f\u59cb\u56fe\u50cf\u53d8\u6362\u751f\u6210\u7684\u65b0\u89c6\u56fe\uff1b\u5728\u7528\u76f8\u673a\u62cd\u6444\u7269\u4f53\u65f6\uff0c\u4fdd\u6301\u7269\u4f53\u7684\u4f4d\u7f6e\u4e0d\u52a8\uff0c\u800c\u5c06\u76f8\u673a\u79fb\u79bb\u7269\u4f53\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u89c6\u70b9\u53d8\u6362\uff0c\u5982\u679c\u6211\u4eec\u4fdd\u6301\u76f8\u673a\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u5c06\u7269\u4f53\u79fb\u79bb\u76f8\u673a\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u6a21\u578b\u8f6c\u6362\u3002\u89c6\u70b9\u53d8\u5f62\u8981\u6c42\u5bf9\u7269\u4f53\u6709\u4e09\u7ef4\u5750\u6807\u77e5\u8bc6</li> </ul> </li> </ul> <p>\u5e94\u7528\uff1aExpressive Expression Mapping  with Ratio Images</p> <p>\u89e3\u6cd5\uff1a\u51e0\u4f55\u53d8\u6362</p> <p>\u95ee\u9898\uff1a\u8868\u60c5\u7ec6\u8282\u4e22\u5931</p> <p>\u5149\u7167\u6a21\u578b\uff1a\u5047\u8bbe\u5b58\u5728\\(m\\)\u4e2a\u70b9\u5149\u6e90</p> \\[ I=\\rho\\sum_{1\\leqslant i\\leqslant m}S_iI_in\\cdot l_i\\equiv\\rho E(n) \\] <p>\u5176\u4e2d\\(S_i=0\\)\u5f53\u4e14\u4ec5\u5f53\u70b9\u65e0\u6cd5\u522b\u5149\u6e90i\u7167\u4eae\uff0c\u5426\u5219\\(S_i=1\\)</p> <p>\u8868\u60c5\u6bd4\u4f8b\u56fe\uff1a</p> \\[ \\dfrac{I'}{I}=\\dfrac{\\rho E(n')}{\\rho E(n)}=\\dfrac{E(n')}{E(n)} \\] <p>\u8868\u9762\u53d8\u5f62\u6620\u5c04\uff1a\\(I_1=\\rho_1E(n)\\to I'_1=\\rho_1E(n')\\), \\(I_2=\\rho_2E(n)\\to I'_2=\\rho_2E(n')\\)</p> \\[ \\dfrac{I_1'}{I_1}=\\dfrac{I_2'}{I_2}\\Rightarrow I_2'=\\dfrac{I_1'}{I_1}I_2 \\] <p>\u7b97\u6cd5\uff1a</p> <ul> <li>\u8f93\u5165\uff1a\u56fe\u50cf\\(A,A',B\\)</li> <li>\u6807\u8bb0\u7279\u5f81\u70b9</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u7279\u5f81\u70b9\uff0c\u505a\u53d8\u6362\\(v_{b'}=v_b+v_{a'}-v_a\\)\uff0c\u4ee4\\(B_g\\)\u4e3aB\u7684\u53d8\u6362\u56fe</li> <li>\u5bf9\u9f50\\(A,A',B_g\\)</li> <li>\u8ba1\u7b97\u6bd4\u4f8b\u56fe\\(\\mathfrak R=\\dfrac{A'}{A}\\)</li> <li>\\(B'=\\mathfrak R\\cdot B_g\\)</li> </ul>"},{"location":"course/dip/Basic%20operation/Sparse%20Norm%20Filtering/","title":"Sparse Norm Filtering","text":"<p>\u601d\u8def\uff1a</p> <ul> <li> <p>\u5747\u503c\u6ee4\u6ce2\uff1a $$ \\min_{l_i^{\\text{new}}}\\sum_{j\\in N_i}(I_i^{\\text{new}}-I_j)^2 $$</p> </li> <li> <p>\u5229\u7528\u7a00\u758f\u8303\u6570\u8fdb\u884c\u4fdd\u8fb9\u6ee4\u6ce2\uff1a</p> </li> </ul> \\[ \\min_{l_i^{\\text{new}}}\\sum_{j\\in N_i}|I_i^{\\text{new}}-I_j|^p,0&lt;p\\leqslant2 \\]"},{"location":"course/dip/Binary%20Image%20and%20Morphological%20Operation/Binary%20Image/","title":"Binary Image","text":"<p>\u6982\u5ff5\uff1aPixel value is limited to 0 or 1.</p> <p>For convenience in programming, we usually use 0 OR 255 instead of 0 OR 1 to represent the binary image.</p> <p>\u4f18\u52bf\uff1a</p> <ul> <li>\u66f4\u5c0f\u7684\u5185\u5b58\u9700\u6c42 </li> <li>\u8fd0\u884c\u901f\u5ea6\u66f4\u5feb</li> <li>\u4e3a\u4e8c\u503c\u56fe\u50cf\u5f00\u53d1\u7684\u7b97\u6cd5\u5f80\u5f80\u53ef\u4ee5\u7528\u4e8e\u7070\u5ea6\u7ea7\u56fe\u50cf </li> <li>\u66f4\u4fbf\u5b9c</li> </ul> <p>\u7f3a\u52bf\uff1a</p> <ul> <li>\u5e94\u7528\u8303\u56f4\u6bd5\u7adf\u6709\u9650</li> <li>\u66f4\u65e0\u6cd5\u63a8\u5e7f\u5230\u4e09\u7ef4\u7a7a\u95f4\u4e2d</li> <li>\u8868\u73b0\u529b\u6b20\u7f3a\uff0c\u4e0d\u80fd\u8868\u73b0\u7269\u4f53\u5185\u90e8\u7ec6\u8282</li> <li>\u65e0\u6cd5\u63a7\u5236\u5bf9\u6bd4\u5ea6</li> </ul> <p>\u6784\u5efa\uff1a\u9608\u503c\u5316 Thresholding</p> \\[ \\left\\{ \\begin{array}{ll} I(x,y)=0&amp;if\\ I(x,y)&lt;Threshold\\\\ I(x,y)=255&amp;if\\ I(x,y)\\geqslant Threshold \\end{array} \\right. \\] <p>\u9608\u503c\u8bbe\u7f6e\u5341\u5206\u91cd\u8981</p> <p>\u9608\u503c\u5bfb\u627e\uff1a\u5927\u6d25\u7b97\u6cd5</p> <ul> <li>\u601d\u8def\uff1a\u6700\u5c0f\u5316\u524d\u666f/\u80cc\u666f\u5185\u90e8\u65b9\u5dee\uff0c\u6700\u5927\u5316\u524d\u666f\u3001\u80cc\u666f\u95f4\u7684\u65b9\u5dee $$ \\sigma_{within}^2(T)=\\dfrac{N_{Fgrd}(T)}{N}\\sigma_{Fgrd}^2(T)+\\dfrac{N_{Bgrd}(T)}{N}\\sigma_{Bgrd}^2(T) $$ \u63a8\u5bfc\uff1a\u7c7b\u95f4\u65b9\u5dee = \u603b\u65b9\u5dee - \u7c7b\u5185\u65b9\u5dee \uff08\u6545\u6700\u5c0f\u5316\u7c7b\u5185\u65b9\u5dee\u7b49\u4ef7\u4e8e\u6700\u5927\u5316\u7c7b\u95f4\u65b9\u5dee\uff09</li> </ul> \\[ \\begin{array}{l} \\sigma_{between}^2(T)=\\sigma^2-\\sigma_{within}^2(T)\\\\ =\\left(\\dfrac{1}{N}\\sum_{x,y}(f^2[x,y]-\\mu^2)\\right)-\\dfrac{N_{Fgrd}}{N}\\left(\\dfrac{1}{N_{Fgrd}}\\sum_{x,y\\in Fgrd}(f^2[x,y]-\\mu_{Fgrd}^2)\\right)-\\dfrac{N_{Bgrd}}{N}\\left(\\dfrac{1}{N_{Bgrd}}\\sum_{x,y\\in Bgrd}(f^2[x,y]-\\mu_{Bgrd}^2)\\right)\\\\ =-\\mu^2+\\dfrac{N_{Fgrd}}{N}\\mu^2_{Fgrd}+\\dfrac{N_{Bgrd}}{N}\\mu^2_{Bgrd}\\\\ =\\dfrac{N_{Fgrd}}{N}(\\mu_{Fgrd}-\\mu)^2+\\dfrac{N_{Bgrd}}{N}(\\mu_{Bgrd}-\\mu)^2\\\\ =\\dfrac{N_{Fgrd}(T)\\cdot N_{Bgrd}(T)}{N^2}\\left(\\mu_{Fgrd}(T)-\\mu_{Bgrd}(T)\\right)^2 \\end{array} \\] <p>\u7b80\u5316\u7248\u63a8\u5bfc\uff1a\uff08\u76f4\u63a5\u5229\u7528\u4e0a\u5f0f\u65b9\u5dee\u76f8\u5173\u7ed3\u679c\uff09</p> <p>\u4ee4\\(w_f=\\dfrac{N_{Fgrd}}{N},w_b=\\dfrac{N_{Bgrd}}{N}\\)\uff0c\\(w_f+w_b=1\\) \\(\\mu=w_f\\cdot\\mu_{Fgrd}+w_b\\cdot\\mu_{Bgrd}\\) \\(\\sigma^2_{between}=w_bw_f(\\mu_f-\\mu_b)^2\\) </p> <p>\u76f8\u5f53\u4e8e\u5316\u53bb\u5168\u5c40\u5747\u503c\\(\\mu\\)\uff0c\u7b80\u5316\u8ba1\u7b97</p> <ul> <li>\u6b65\u9aa4\uff1a<ol> <li>\u786e\u5b9a\u539f\u59cb\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c</li> <li>\u6700\u5c0f\u503c\u52a01\u4f5c\u4e3athreshold\u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c</li> <li>\u6839\u636e\u5bf9\u5e94\u5173\u7cfb\u786e\u5b9a\u524d\u666f\u548c\u80cc\u666f\uff0c\u5206\u522b\u8ba1\u7b97\u5f53\u524dthreshold\u4e0b\u7684\u5185\u90e8\u534f\u65b9\u5dee\u548c\u5916\u90e8\u534f\u65b9\u5dee</li> <li>\u56de\u5230Step 2\u76f4\u5230\u8fbe\u5230\u50cf\u7d20\u6700\u5927\u503c</li> <li>\u627e\u5230\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u534f\u65b9\u5dee\u5bf9\u5e94\u7684threshold</li> </ol> </li> </ul> <p>\u6539\u8fdb\uff1a\u5c40\u90e8\u4e8c\u503c\u5316</p> <ul> <li>\u8bbe\u5b9a\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3\uff0c\u5728\u6574\u4e2a\u56fe\u50cf\u4e0a\u6ed1\u52a8\u8be5\u7a97\u53e3</li> <li>\u5bf9\u4e8e\u6bcf\u4e00\u7a97\u53e3\u4f4d\u7f6e\uff0c\u786e\u5b9a\u9488\u5bf9\u8be5\u7a97\u53e3\u7684threshold</li> </ul> <p>\u95ee\u9898\uff1a\u8fde\u7eed\u7ebf\u6761\u63d0\u53d6 / \u566a\u58f0\u8bc6\u522b</p> <p>\u89e3\u51b3\uff1a\u5f62\u6001\u5b66</p>"},{"location":"course/dip/Binary%20Image%20and%20Morphological%20Operation/Morphology/","title":"Morphology","text":"<p>\u7814\u7a76\u5bf9\u8c61\uff1a\u52a8\u7269\u548c\u690d\u7269\u7ed3\u6784</p> <p>\u57fa\u7840\u7406\u8bba\uff1a\u96c6\u5408\u8bba</p> <p>\u4e00\u79cd\u7b80\u5355\u7684\u975e\u7ebf\u6027\u4ee3\u6570\u7b97\u5b50</p> <p>\u5bf9\u8c61\uff1a\u4e3b\u8981\u7528\u4e8e\u4e8c\u503c\u56fe\u50cf\uff0c\u53ef\u6269\u5c55\u5230\u7070\u5ea6\u56fe\u50cf</p> <p>\u5e94\u7528\uff1a\u566a\u58f0\u8fc7\u6ee4\u3001\u5f62\u72b6\u7b80\u5316\u3001\u7ec6\u5316\u3001\u5206\u5272\u3001\u7269\u4f53\u63cf\u8ff0\u7b49\uff08\u7b80\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4fdd\u6301\u5b83\u4eec\u57fa\u672c\u7684\u5f62\u72b6\u7279\u6027\uff0c\u5e76\u9664\u53bb\u4e0d\u76f8\u5e72\u7684\u7ed3\u6784\uff09</p> <p>\u64cd\u4f5c\uff1a</p> <ol> <li>\u81a8\u80c0</li> <li>\u8150\u8680</li> <li>\u5f00\u64cd\u4f5c</li> <li>\u95ed\u64cd\u4f5c \u57fa\u672c\u6982\u5ff5\uff1a</li> </ol> <p></p> <p>\u57fa\u672c\u64cd\u4f5c\uff1a</p> <p></p> <p></p>"},{"location":"course/dip/Binary%20Image%20and%20Morphological%20Operation/Morphology/#_1","title":"\u81a8\u80c0","text":"<p>\u8f93\u5165\uff1aA \u4e8c\u503c\u56fe\u50cf    B \u7ed3\u6784\u5143</p> <p>\u5b9a\u4e49\uff1a\\(A\\oplus B=\\set{z|(B)_Z\\cap A\\not=\\phi}\\)</p> <p>\u7269\u7406\u610f\u4e49\uff1a\u81a8\u80c0\u662f\u5c06\u4e0e\u7269\u4f53\u201c\u63a5\u89e6\u201d\u7684\u6240\u6709\u80cc\u666f\u70b9\u5408\u5e76\u5230\u8be5\u7269\u4f53\u4e2d\uff0c\u4f7f\u8fb9\u754c\u5411\u5916\u90e8\u6269\u5f20\u7684\u8fc7\u7a0b\u3002\u53ef\u4ee5\u7528\u6765\u586b\u8865\u7269\u4f53\u4e2d\u7684\u7a7a\u6d1e\uff1b\u5176\u4e2d\u201c\u63a5\u89e6\u201d\u7684\u542b\u4e49\u7531\u7ed3\u6784\u5143\u63cf\u8ff0</p> <p>\u4f8b\uff1a </p> <p>\u5e94\u7528\uff1a\u7f1d\u9699\u586b\u8865</p> <ul> <li>\u7ed3\u6784\u5143\uff1a</li> </ul> <p></p>"},{"location":"course/dip/Binary%20Image%20and%20Morphological%20Operation/Morphology/#_2","title":"\u8150\u8680","text":"<p>\u8f93\u5165\uff1aA \u4e8c\u503c\u56fe\u50cf    B \u7ed3\u6784\u5143</p> <p>\u5b9a\u4e49\uff1a\\(A\\ominus B=\\set{(x,y)|(B)_{xy}\\subset A}\\) \u7269\u7406\u610f\u4e49\uff1a\u8150\u8680\u662f\u4e00\u79cd\u6d88\u9664\u8fb9\u754c\u70b9\uff0c\u4f7f\u8fb9\u754c\u5411\u5185\u90e8\u6536\u7f29\u7684\u8fc7\u7a0b\uff1b\u53ef\u4ee5\u7528\u6765\u6d88\u9664\u5c0f\u4e14\u65e0\u610f\u4e49\u7684\u7269\u4f53</p> <p>\u4f8b\uff1a  \u5e94\u7528\uff1a\u6ee4\u6ce2</p> <ul> <li>\u5148\u8150\u8680\uff0c\u540e\u81a8\u80c0\uff0c\u6ee4\u53bb\u7ec6\u8282</li> </ul> <p>\u81a8\u80c0\u4e0e\u8150\u8680\u7684\u5173\u7cfb\uff1a\u5bf9\u5076\u64cd\u4f5c</p> <ul> <li>\u5b9a\u7406\uff1a\\((A\\oplus B)^C=A^C\\ominus B\\)</li> <li>\u8bc1\u660e\uff1a</li> </ul> <p></p> <p>\u5e94\u7528\uff1a</p> <ul> <li>\u8fb9\u7f18\u63d0\u53d6\uff1aA - \u8150\u8680(A)<ul> <li>\u7ed3\u6784\u5143\uff1a </li> </ul> </li> <li>\u8865\u6d1e\uff1a\\(X_k=(X_{k-1}\\oplus B)\\cap A^C,k=1,2,\\cdots\\)\u8fed\u4ee3  \u521d\u59cb\u6761\u4ef6\\(X_0=p\\)\uff0c\u7ec8\u6b62\u6761\u4ef6\\(X_k=X_{k-1}\\)<ul> <li>\u7ed3\u6784\u5143\uff1a </li> </ul> </li> <li>\u7ed3\u6784\u63d0\u53d6</li> </ul>"},{"location":"course/dip/Binary%20Image%20and%20Morphological%20Operation/Morphology/#_3","title":"\u5f00\u64cd\u4f5c","text":"<p>\u5b9a\u4e49\uff1a\\(A\\circ B=(A\\ominus B)\\oplus B\\)</p> <p>\u5e94\u7528\uff1a\u6d88\u9664\u5c0f\u7269\u4f53\u3001\u5728\u7ea4\u7ec6\u70b9\u5904\u5206\u79bb\u7269\u4f53\u3001\u5e73\u6ed1\u8f83\u5927\u7269\u4f53\u7684\u8fb9\u754c\u7684\u540c\u65f6\u5e76\u4e0d\u660e\u663e\u6539\u53d8\u5176\u9762\u79ef</p>"},{"location":"course/dip/Binary%20Image%20and%20Morphological%20Operation/Morphology/#_4","title":"\u95ed\u64cd\u4f5c","text":"<p>\u5b9a\u4e49\uff1a\\(A\\bullet B=(A\\oplus B)\\ominus B\\)</p> <p>\u5e94\u7528\uff1a\u7528\u6765\u586b\u5145\u7269\u4f53\u5185\u7ec6\u5c0f\u7a7a\u6d1e\u3001\u8fde\u63a5\u90bb\u8fd1\u7269\u4f53\u3001\u5e73\u6ed1\u5176\u8fb9\u754c\u7684\u540c\u65f6\u5e76\u4e0d\u660e\u663e\u6539\u53d8\u5176\u9762\u79ef</p> <p>\u5bf9\u6bd4\uff1a</p> <p></p> <p>\u5e94\u7528\uff1a\u6307\u7eb9\u8bc6\u522b\u9884\u5904\u7406</p> <p></p>"},{"location":"course/fds/%E5%93%88%E5%B8%8C/","title":"\u5341. Hashing","text":"<p>\u3010\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u301104 \u54c8\u5e0c\u8868 / \u6563\u5217\u8868 \uff08\u54c8\u5e0c\u51fd\u6570\u3001\u54c8\u5e0c\u51b2\u7a81\u3001\u94fe\u5730\u5740\u6cd5\u3001\u5f00\u653e\u5730\u5740\u6cd5\u3001SHA256\uff09-CSDN\u535a\u5ba2</p> <p></p> <p></p>"},{"location":"course/fds/%E5%93%88%E5%B8%8C/#101","title":"10.1 \u57fa\u672c\u601d\u60f3","text":"<p>Symbol Table ADT:</p> <ul> <li> <p>Objects: A set of name-attribute pairs, where the names are unique</p> </li> <li> <p>\u64cd\u4f5c</p> </li> <li>\u521b\u5efa\u6563\u5217\u8868</li> <li>\u67e5\u8be2\u5173\u952e\u5b57\u662f\u5426\u5728\u6563\u5217\u8868\u4e2d</li> <li>\u67e5\u8be2\u5173\u952e\u5b57 Attribute Find(symtab, name) </li> <li>\u63d2\u5165\u5173\u952e\u5b57 SymTab Insert(symtab, name, attr)</li> <li>\u5220\u9664\u5173\u952e\u5b57 SymTab Delete(symtab, name) </li> </ul> <p></p> <p><code>x</code>\u662f\u6807\u8bc6\u7b26\uff0c\u5b9a\u4e49\u4e00\u4e2a\\(\\(hash function\\)\\)\uff0c$$ f(x) = position  of  x  in  ht[] $$\u4e5f\u5c31\u662f\u5305\u542bx\u7684bucket\u7684\u7d22\u5f15</p> <p>\u8fd9\u91cc\u6211\u4eec\u7528 T \u8868\u793a <code>x</code> \u53ef\u80fd\u7684\u4e0d\u540c\u503c; n \u8868\u793a <code>ht[]</code> \u4e2d\u6240\u6709\u4e0d\u540c\u6807\u8bc6\u7b26\u7684\u4e2a\u6570; \u6807\u8bc6\u7b26\u5bc6\u5ea6(identifier density)\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{T}\\); \u88c5\u8f7d\u5bc6\u5ea6(Load density)\u5b9a\u4e49\u4e3a\\(\\lambda = \\dfrac{n}{sb}\\) </p> <ul> <li>\u5f53\u6211\u4eec\u628a\u4e24\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u91cc\u65f6\uff0c\u51b2\u7a81\uff08collision\uff09\u53d1\u751f\u4e86\\(f(i_1) = f(x_2), i_1 != i_2\\)</li> <li>\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u4e00\u4e2a\u6ee1\u7684\u6876\u91cc\u65f6\uff0c\u6ea2\u51fa\uff08overflow\uff09\u53d1\u751f\u4e86</li> <li><code>\u5f53s = 1\uff0c \u51b2\u7a81\u548c\u4e0a\u6ea2\u4f1a\u540c\u65f6\u53d1\u751f</code></li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a</p> <p>Mapping n = 10 C library functions into a hash table ht[ ] with b = 26 buckets and s = 2.</p> <ul> <li>Load density \\(\\lambda  = 10 / 52 = 0.19\\)</li> <li>\u4e3a\u4e86\u5c06\u9996\u5b57\u6bcda-z\u6620\u5c04\u52300-25\uff0c\u5b9a\u4e49\\(f(x) = x[0] - 'a'\\)</li> <li></li> </ul>"},{"location":"course/fds/%E5%93%88%E5%B8%8C/#102-hash-function","title":"10.2 Hash Function","text":""},{"location":"course/fds/%E5%93%88%E5%B8%8C/#1021","title":"10.2.1 \u6c42\u4f59\u6cd5","text":"<p>TableSize \u5e94\u8be5\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u8fd9\u6837\u5bf9\u968f\u673a\u8f93\u5165\uff0c\u5173\u952e\u5b57\u7684\u5206\u5e03\u6bd4\u8f83\u5747\u5300</p> <p></p> <p></p> <p>\u5b9e\u9645\u53ef\u80fd\u7684\u53d6\u503c\u4ec5\u67093000\u79cd\uff0c\u4f1a\u9020\u6210\u6d6a\u8d39</p> <p></p> <p>\\(32^i\\)\u5b9e\u9645\u4e0a\u662f\u8fdb\u884c\u79fb\u4f4d\u64cd\u4f5c</p> <pre><code>Index Hash3( const char *x, int TableSize ) \n{ \n    unsigned  int  HashVal = 0; \n    while( *x != '\\0' ) \n        HashVal = ( HashVal &lt;&lt; 5 ) + *x++; \n    return HashVal % TableSize; \n} \n</code></pre> \\[ abcde\\\\ a * 32^4 + b * 32^3 + c * 32^2 + d * 32 + e \\\\  = (((a * 32 + b) * 32 + c) * 32 + d )*32 + e \\]"},{"location":"course/fds/%E5%93%88%E5%B8%8C/#1022","title":"10.2.2 \u5e73\u65b9\u53d6\u4e2d\u6cd5","text":"\\[ key = 12345\\\\ f(x) = x * x\\\\ \u53d6f(x)\u4e2d\u95f4\u7684\u4e24\u4f4d \\]"},{"location":"course/fds/%E5%93%88%E5%B8%8C/#1023","title":"10.2.3 \u6298\u53e0\u6cd5","text":"\\[ key = 12345\\\\ f(key) = 12 + 34 + 05 = 51 \\]"},{"location":"course/fds/%E5%93%88%E5%B8%8C/#103-separate-chaining","title":"10.3 Separate Chaining \u2014\u2014\u89e3\u51b3\u51b2\u7a81","text":"<p>\u89e3\u51b3\u51b2\u7a81\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u53eb\u4f5c\u5206\u79bb\u94fe\u63a5\u6cd5\u3002\u5176\u505a\u6cd5\u662f\u5c06\u6563\u5217\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u4fdd\u5b58\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u94fe\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u3002</p> <p>\u7ed3\u6784\u4f53\u5b9a\u4e49\uff1a</p> <pre><code>typedef struct point\n{\n    int Data;\n    ListNode *Next;\n}ListNode;\ntypedef ListNode *List;\ntypedef struct point\n{\n    int TableSize;\n    List *TheLists;\n    // \u6b64\u5904List *TheLists\u7b49\u4ef7\u4e8eList TheLists[]\n    // List \u662f struct ListNode *\u7684\u522b\u540d\uff0c\u662f\u6307\u9488\n    // List *TheLists\u662f\u6307\u9488\u7684\u6307\u9488\uff0c\u662f\u4e8c\u7ea7\u6307\u9488\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u7531\u6307\u9488\u6784\u6210\u7684\u6570\u7ec4\n    // \u6240\u4ee5\u80fd\u591f\u6307\u5411\u591a\u6761\u94fe\u8868\n}HashTbl;\ntypedef HashTbl *HashTable;\n</code></pre> <p></p> <p>\u521b\u5efa\u7a7a\u8868\uff1a\u5e26\u5934\u7ed3\u70b9</p> <pre><code>// Create an empty hash table\nHashTable Initialize (int TableSize)\n{\n    HashTable H;\n    // \u5206\u914d\u5185\u5b58\u7a7a\u95f4\n    H = malloc(sizeof(HashTbl));\n    if(H == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        exit(1);\n    }\n    // \u521d\u59cb\u5316HashTable\n    // \u8981\u6c42hash\u8868\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u7d20\u6570\n    H-&gt;TableSize = NextPrime(TableSize);\n    H-&gt;TheLists = malloc(sizeof(List) * H-&gt;TableSize);\n    if(H-&gt;TheLists == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        exit(1);\n    }\n    // \u521d\u59cb\u5316\u6bcf\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n    for(int i = 0; i &lt; H-&gt;TableSize; i++)\n    {\n        // List \u5bf9\u5e94\u7684\u662f ListNode*\uff0c\u662f\u6307\u9488\n        // \u4e00\u6574\u4e2aTheLists[i]\u90fd\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u94fe\u8868\n        H-&gt;TheLists[i] = malloc(sizeof(ListNode));\n        if(H-&gt;TheLists[i] == NULL)\n        {\n            printf(\"Out of space!\\n\");\n            exit(1);\n        }\n        else\n        {\n            H-&gt;TheLists[i]-&gt;Next = NULL;\n        }\n    }\n    return H;\n}\n</code></pre> <p>Find a key from a hash table</p> <pre><code>// Hash function\nint Hash(int key, int TableSize)\n{\n    return key % TableSize;\n}\n// Find a key from a hash table\nListNode * Find(int key, HashTable H)\n{\n    ListNode *p;\n    List L = H-&gt;TheLists[Hash(key, H-&gt;TableSize)];\n    // \u5934\u7ed3\u70b9\u4e0d\u5b58\u50a8\u6570\u636e\n    p = L-&gt;Next;\n    while(p != NULL &amp;&amp; p-&gt;Data != key)\n    {\n        p = p-&gt;Next;\n    }\n    return p;\n}\n</code></pre> <p>Insert a key into a hash table</p> <pre><code>// Insert a key into a hash table\nvoid Insert(int key, HashTable H)\n{\n    ListNode *p, *newcell;\n    p = Find(key, H);\n    if(p == NULL)\n    {\n        // \u4e5f\u5c31\u662f\u8bf4\uff0ckey\u4e0d\u5b58\u5728\n        newcell = malloc(sizeof(ListNode));\n        List L = H-&gt;TheLists[Hash(key, H-&gt;TableSize)];\n        newcell -&gt; Next = L-&gt;Next;\n        L-&gt;Next = newcell;\n        newcell-&gt;Data = key;\n    }\n    // \u5982\u679ckey\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u63d2\u5165\u4e86\n}\n</code></pre>"},{"location":"course/fds/%E5%93%88%E5%B8%8C/#104-open-addressing-another-way-to-solve-collision","title":"10.4 Open Addressing \u2014\u2014another way to solve collision","text":"<p>\u5f00\u653e\u5730\u5740\u6cd5\uff0c\u5f53\u6709\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u5c1d\u8bd5\u9009\u62e9\u5176\u4ed6\u7684\u5355\u5143\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u7684\u5355\u5143\u4e3a\u6b62\u3002 \u4e00\u822c\u5730, \\(\u210e0(X),\u210e1(X),\u2026,\\) \u5176\u4e2d \\(h_i(X) \\ = \\ (Hash(X)+F(i)) \\ mod \\ TableSize\\)</p> <p>\\(F(i)\\)\u662f\u504f\u79fb\u91cf/\u51b2\u7a81\u91cf</p> <pre><code>Algorithm: insert key into an array of hash table\n{\n    index = hash(key);\n    initialize i = 0 ------ the counter of probing;\n    while ( collision at index ) {\n        index = ( hash(key) + f(i) ) % TableSize;\n        if ( table is full )    break;\n        else    i ++;\n    }\n    if ( table is full )\n        ERROR (\u201cNo space left\u201d);\n    else\n        insert key at index;\n}\n</code></pre> <ol> <li>\u7ebf\u6027\u63a2\u6d4b\u6cd5 Linear Probing</li> </ol> <p></p> <p>Cause primary clustering: any key that hashes into the cluster will add to the cluster after several attempts to resolve the collision.</p> <ol> <li>\u5e73\u65b9\u63a2\u6d4b\u6cd5</li> </ol> <p>\u5e73\u65b9\u63a2\u6d4b\u6cd5\u662f\u6d88\u9664\u7ebf\u6027\u63a2\u6d4b\u4e2d\u4e00\u6b21\u805a\u96c6\u95ee\u9898\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u3002\u51b2\u7a81\u51fd\u6570\u4e3a\u4e8c\u6b21\u51fd\u6570\uff0c\u4e00\u822c\u4e3a \\(F(i) = i^2\\)</p> <p>\u5b9a\u7406: \u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u4e3a\u7a7a\u65f6\uff0c\u603b\u80fd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002</p> <p>\u5bf9\u4e8e\u4efb\u610f\u5143\u7d20 \ufffd, \u5b83\u6709 [TableSize/2\u2309 \u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u53ef\u80fd\u653e\u7f6e\u8fd9\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6700\u591a $\\lfloor TableSize/2 \\rfloor $ \u4f4d\u7f6e\u88ab\u4f7f\u7528\uff0c\u90a3\u4e48\u603b\u80fd\u627e\u5230\u653e x \u7684\u7a7a\u5355\u5143</p> <pre><code>Position  Find ( ElementType Key, HashTable H ) \n{\n    Position  CurrentPos; \n    int  CollisionNum; \n    CollisionNum = 0; \n    CurrentPos = Hash( Key, H-&gt;TableSize ); \n    while( H-&gt;TheCells[ CurrentPos ].Info != Empty &amp;&amp; \n        H-&gt;TheCells[ CurrentPos ].Element != Key ) {\n        // \u8ba1\u7b97\u7b80\u5316H(x) + (i + 1) ^2 = H(x) + i^2 + 2(i +1)-1\n        CurrentPos += 2 * ++CollisionNum \uf02d 1; \n        if ( CurrentPos &gt;= H-&gt;TableSize )  CurrentPos \uf02d = H-&gt;TableSize; \n        } \n    return CurrentPos; \n} \n</code></pre> <pre><code>void  Insert ( ElementType Key, HashTable H ) \n{ \n    Position  Pos; \n    Pos = Find( Key, H ); \n    if ( H-&gt;TheCells[ Pos ].Info != Legitimate ) { /* OK to insert here */ \n    H-&gt;TheCells[ Pos ].Info = Legitimate; \n    H-&gt;TheCells[ Pos ].Element = Key; /* Probably need strcpy */ \n    } \n} \n</code></pre> <p>\u5e73\u5747\u6210\u529f\u67e5\u627e\u548c\u4e0d\u6210\u529f\u67e5\u627e\u6b21\u6570</p> <ol> <li> <p>\u6210\u529f\u67e5\u627e\uff1a\u627e\u5230\u7ed9\u5b9a\u6570\u636e\u6240\u9700\u7684\u65f6\u95f4</p> </li> <li> <p>\u4e0d\u6210\u529f\u67e5\u627e\uff1a\u786e\u5b9a\u7ed9\u5b9a\u6570\u4e0d\u5728Hash\u8868\u4e2d\u6240\u9700\u7684\u65f6\u95f4\uff0c\u6839\u636ehash function \u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002</p> </li> </ol> <p></p> <p></p> <p></p> <p>\u6700\u5c111\u6b21\uff0c\u6700\u591aN\u6b21\uff0c\u5e73\u5747\uff08N+1\uff09/2</p> <p></p> <p></p> <ol> <li>Double Hashing</li> </ol> <p></p> <ol> <li>Rehashing</li> </ol> <p></p> <p></p>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/","title":"\u4e5d. \u6392\u5e8f","text":"<ol> <li>\u9009\u62e9\u6392\u5e8f\u3002\u6bcf\u6b21\u6311\u9009\u6700\u5927\u7684\u5143\u7d20\uff0c\u6362\u5230\u6700\u540e\u4f4d\u7f6e</li> </ol> <ol> <li>\u5192\u6ce1\u6392\u5e8f\u3002\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u6bd4\u8f83</li> </ol> <ol> <li>\u63d2\u5165\u6392\u5e8f</li> </ol> <p>\u7a33\u5b9a\u662f\u6307\u76f8\u540c\u7684\u5143\u7d20\u5728\u6392\u5e8f\u524d\u540e\u7684\u987a\u5e8f\u662f\u4e0d\u53d8\u7684\u3002</p> <p>\u51e1\u662f\u6709\u524d\u540e\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u7684\u7b97\u6cd5\u90fd\u662f\u4e0d\u7a33\u5b9a\u7684\u3002</p> <p>\u5e0c\u5c14\u6392\u5e8fis not stable\uff0c MergSort\u53ea\u6d89\u53ca\u5230\u6309\u987a\u5e8f\u8d4b\u503c\uff0c\u6ca1\u6709\u524d\u540e\u5143\u7d20\u7684\u4ea4\u6362\uff0cis stable\u3002</p> <p></p> <p></p> <p>quicksort \u6700\u5dee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N^2)\\)</p> <p></p> <p>\u9012\u5f52\u7684\u603b\u6570\u4e0d\u53d8</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#91-shell-sort","title":"9.1 Shell Sort \u5e0c\u5c14\u7b97\u6cd5","text":"<p>shell sort \u662f\u5bf9\u63d2\u5165\u6392\u5e8f\u7684\u6539\u8fdb</p> <p>\u5bf9\u4e8en\u4e2a\u5f85\u6392\u5e8f\u7684\u6570\u5217\uff0c\u53d6\u4e00\u4e2a\u5c0f\u4e8en\u7684\u6b63\u6570gap\uff08gap\u79f0\u4e3a\u6b65\u957f\uff09\uff0c\u5c06\u5f85\u6392\u5e8f\u5143\u7d20\u5206\u6210\u82e5\u5e72\u4e2a\u7ec4\u5b50\u5e8f\u5217\uff0c\u6240\u6709\u8ddd\u79bb\u4e3agap\u7684\u500d\u6570\u7684\u8bb0\u5f55\u653e\u5728\u540c\u4e00\u4e2a\u7ec4\u4e2d\uff0c\u7136\u540e\u5bf9\u5404\u7ec4\u5185\u7684\u5143\u7d20\u76f4\u63a5\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 \u8fd9\u4e00\u8d9f\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2a\u7ec4\u7684\u5143\u7d20\u90fd\u662f\u6709\u5e8f\u7684\u3002\u7136\u540e\u51cf\u5c0fgap\u7684\u503c\uff0c\u5e76\u91cd\u590d\u6267\u884c\u4e0a\u8ff0\u7684\u5206\u7ec4\u548c\u6392\u5e8f\u3002\u91cd\u590d\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5f53gap=1\u65f6\uff0c\u6574\u4e2a\u6570\u5217\u5c31\u662f\u6709\u5e8f\u7684\u3002</p> <pre><code>void Shellsort( ElementType A[ ], int N ) \n{ \n      int  i, j, Increment; \n      ElementType  Tmp; \n      for ( Increment = N / 2; Increment &gt; 0; Increment /= 2 )  \n    /*h sequence */\n    for ( i = Increment; i &lt; N; i++ ) { /* insertion sort */\n          Tmp = A[ i ]; \n          for ( j = i; j &gt;= Increment; j - = Increment ) \n        if( Tmp &lt; A[ j - Increment ] ) \n              A[ j ] = A[ j - Increment ]; \n        else \n              break; \n        A[ j ] = Tmp; \n    } /* end for-I and for-Increment loops */\n}\n\nvoid Shellsort(int a[], int n)\n{\n    int i, j, gap;\n    // gap\u4e3a\u6b65\u957f\uff0c\u6bcf\u4e00\u6b21\u51cf\u4e3a\u539f\u6765\u7684\u4e00\u534a\n    for(gap = n / 2; gap &gt; 0; gap /= 2)\n    {\n        // \u6b64\u65f6\u4e00\u5171\u5206\u6210gap\u4e2a\u7ec4\uff0c\u5206\u522b\u662f\uff080\uff0cgap\uff09\uff081\uff0cgap+1\uff09\u2026\u2026\n        // \u5bf9\u5404\u7ec4\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\n        for(i = gap; i &lt; n; i++)\n        {\n            int temp = a[i];\n            for(j = i; j &gt;= gap; j-= gap)\n            {\n                // \u5982\u679c\u5f53\u524d\u7684\u6570a[i]\u6bd4\u5b83\u7ec4\u5185\u7684\u6570\u5c0f\uff0c\u5219\u4ea4\u6362\n                if(temp &lt; a[j - gap])\n                {\n                    // \u76f4\u63a5\u8d4b\u503c\u6cd5\uff0c\u5927\u7684\u6570a[j - gap]\u540e\u79fb\n                    a[j] = a[j - gap];\n                }\n                // \u8be5\u8f6efor\u5faa\u73af\u7ed3\u675f\u540e\uff0cj = j - gap\n                else\n                {\n                    // \u6bd4\u8f83\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4a[j - gap], a[j - 2 * gap]\u2026\u2026\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\n                    // \u5982\u679ca[i]\u6bd4a[j - gap]\u5927\uff0c\u5219a[i]\u4e00\u5b9a\u6bd4a[j - 2 * gap]\u5927\uff0c\u4e0d\u7528\u518d\u6bd4\u8f83\u4e86\n                    break;\n                }\n            }\n            // \u6b64\u65f6j\u7684\u4f4d\u7f6e\u5c31\u662fa[i]\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0cj\u4f4d\u7f6e\u5c31\u662f\u539f\u5148\u7684\u90a3\u4e2aj-gap\u4f4d\u7f6e\n            // \u76f4\u63a5\u8d4b\u503c\u6cd5\uff0c\u5c0f\u7684\u6570\u524d\u79fba[j] = temp\n            a[j] = temp;\n        }\n        printf(\"gap = %d:\\t\", gap);\n        for(i = 0; i &lt; n; i++)\n        {\n            printf(\"%d\\t\", a[i]);\n        }\n        printf(\"\\n\");\n    }\n}\n</code></pre> <p>\u5916\u5c42\u5faa\u73af\u662f\u5206\u7ec4\u7684\u6570\u91cf\uff0c\u5185\u5c42\u5faa\u73af\u662f\u63d2\u5165\u6392\u5e8f</p> <p>\u3010Theorem\u3011The worst-case running time of Shellsort, using Shell\u2019s increments, is Q ( N^2)</p> <p>\u4f8b\u9898</p> <p>To sort { 8, 3, 9, 11, 2, 1, 4, 7, 5, 10, 6 } by Shell Sort, if we obtain ( 4, 2, 1, 8, 3, 5, 10, 6, 9, 11, 7 ) after the first run, and ( 1, 2, 3, 5, 4, 6, 7, 8, 9, 11, 10 ) after the second run, then the increments of these two runs must be __ , respectively.</p> <p></p> <p></p> <p>\u6309\u6b21\u5e8f3\u4e2a3\u4e2a\u6bd4\u8f83\u5373\u53ef</p> <p></p> <p>\u8003\u8651\u8f83\u6781\u7aef\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6709\u5e8f\u6570\u7ec4\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7684\u6bd4\u8f83\u6b21\u6570\u4e3an-1,\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u7684\u6bd4\u8f83\u6b21\u6570\u59cb\u7ec8\u4e3a1+2+\u2026+n-1=n(n-1)/2\uff0cI\u6b63\u786e\u3002\u4e24\u79cd\u6392\u5e8f\u65b9\u6cd5\u7684\u8f85\u52a9\u7a7a\u95f4\u90fd\u662f0(1), \u65e0\u5dee\u522b\uff0cII\u9519\u8bef\u3002\u521d\u59cb\u6709\u5e8f\u65f6\uff0c\u79fb\u52a8\u6b21\u6570\u5747\u4e3a0; \u5bf9\u4e8e\u901a\u5e38\u60c5\u51b5\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u6bcf\u8d9f\u63d2\u5165\u90fd\u9700\u8981\u4f9d\u6b21\u5411\u540e\u632a\u4f4d\uff0c\u800c\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u53ea\u9700\u4e0e\u627e\u5230\u7684\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u540e\u8005\u7684\u79fb\u52a8\u6b21\u6570\u5c11\u5f88\u591a\uff0cIII \u9519\u8bef\u3002</p>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#92-heap-sort","title":"9.2 Heap Sort \u5806\u6392\u5e8f","text":"<pre><code>Algorithm 1:\n{\n     BuildHeap( H );  // O(N)\n     for ( i=0; i&lt;N; i++ ) \n        TmpH[ i ] = DeleteMin( H ); //O(log N)\n     for ( i=0; i&lt;N; i++ ) \n        H[ i ] = TmpH[ i ]; //O(1)\n}\n</code></pre> <p>T ( N ) = O ( N log N )</p> <pre><code>void Heapsort( ElementType A[ ], int N ) \n{   int i; \n    for ( i = N / 2; i &gt;= 0; i - - ) /* BuildHeap */ \n        PercDown( A, i, N ); \n    for ( i = N - 1; i &gt; 0; i - - ) { \n        Swap( &amp;A[ 0 ], &amp;A[ i ] ); /* DeleteMax */ \n        PercDown( A, 0, i ); \n    } \n}\n</code></pre> <p>\u6ce8\u91cd\u6392\u5e8f\u8fc7\u7a0b\u7684Heapsort</p> <pre><code>10\n123 456 789 753 951 741 852 963 1452 2365\n2365 1452 852 963 951 741 789 123 753 456\n1452 963 852 753 951 741 789 123 456 2365\n963 951 852 753 456 741 789 123 1452 2365\n951 753 852 123 456 741 789 963 1452 2365\n852 753 789 123 456 741 951 963 1452 2365\n789 753 741 123 456 852 951 963 1452 2365\n753 456 741 123 789 852 951 963 1452 2365\n741 456 123 753 789 852 951 963 1452 2365\n456 123 741 753 789 852 951 963 1452 2365\n123 456 741 753 789 852 951 963 1452 2365\n123 456 741 753 789 852 951 963 1452 2365\n</code></pre> <p>\u3010Theorem\u3011The average number of comparisons used to heapsort a random permutation of N distinct items is</p> <p>2N log N - O( N log log N ) .</p>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#93-mergesort","title":"9.3 MergeSort","text":"<p>divide + conque +  merge</p> <p></p> <p></p> \\[ \\begin{aligned} T(1) &amp;= 1\\\\ T(N) &amp;= 2T(N/2) + O(N) merge \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N) \\\\     &amp;= 2^kT(N/2^k)+k*O(N)\\\\     &amp;= N * T(1) + log N * O(N)\\\\     &amp;= O(N + NlogN) \\end{aligned} \\]"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#94","title":"9.4 \u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u6240\u91c7\u7528\u7684\u601d\u60f3\u662f\u5206\u6cbb\u7684\u601d\u60f3\u3002\u6240\u8c13\u5206\u6cbb\uff0c\u5c31\u662f\u6307\u4ee5\u4e00\u4e2a\u6570\u4e3a\u57fa\u51c6\uff0c\u5c06\u5e8f\u5217\u4e2d\u7684\u5176\u4ed6\u6570\u5f80\u5b83\u4e24\u8fb9\u201c\u6254\u201d\u3002\u4ee5\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e3a\u4f8b\uff0c\u6bd4\u5b83\u5c0f\u7684\u90fd\u201c\u6254\u201d\u5230\u5b83\u7684\u5de6\u8fb9\uff0c\u6bd4\u5b83\u5927\u7684\u90fd\u201c\u6254\u201d\u5230\u5b83\u7684\u53f3\u8fb9\uff0c\u7136\u540e\u5de6\u53f3\u4e24\u8fb9\u518d\u5206\u522b\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4e0d\u505c\u5730\u5206\uff0c\u76f4\u81f3\u5206\u5230\u6bcf\u4e00\u4e2a\u5206\u533a\u7684\u57fa\u51c6\u6570\u7684\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\u90fd\u53ea\u5269\u4e00\u4e2a\u6570\u4e3a\u6b62\u3002\u8fd9\u65f6\u6392\u5e8f\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002</p> <p>\u5047\u8bbe\u5e8f\u5217\u4e2d\u6709 n \u4e2a\u6570\uff0c\u5c06\u8fd9 n \u4e2a\u6570\u653e\u5230\u6570\u7ec4 A \u4e2d\u3002\u201c\u821e\u52a8\u7b97\u6cd5\u201d\u4e2d\u4e00\u8d9f\u5feb\u901f\u6392\u5e8f\u7684\u7b97\u6cd5\u662f\uff1a</p> <ol> <li>\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf i\u3001j\uff0c\u6392\u5e8f\u5f00\u59cb\u7684\u65f6\u5019\uff1ai=0\uff0cj=n\u20131\u3002</li> <li>\u4ee5\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u5173\u952e\u6570\u636e\uff0c\u8d4b\u7ed9\u53d8\u91cf key\uff0c\u5373 key=A[0]\u3002</li> <li>\u4ece j \u5f00\u59cb\u5411\u524d\u641c\u7d22\uff0c\u5373\u7531\u540e\u5f00\u59cb\u5411\u524d\u641c\u7d22\uff08j--\uff09\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e key \u7684\u503c A[j]\uff0c\u5c06 A[j] \u548c A[i] \u4e92\u6362\u3002</li> <li>\u7136\u540e\u518d\u4ece i \u5f00\u59cb\u5411\u540e\u641c\u7d22\uff0c\u5373\u7531\u524d\u5f00\u59cb\u5411\u540e\u641c\u7d22\uff08++i\uff09\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e key \u7684 A[i]\uff0c\u5c06 A[i] \u548c A[j] \u4e92\u6362\u3002</li> <li>\u91cd\u590d\u7b2c 3\u30014 \u6b65\uff0c\u76f4\u5230 i=j\u3002\u6b64\u65f6\u5c31\u80fd\u786e\u4fdd\u5e8f\u5217\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u4e0e key \u6bd4\u8f83\u8fc7\u4e86\uff0c\u4e14 key \u7684\u5de6\u8fb9\u5168\u90e8\u662f\u6bd4 key \u5c0f\u7684\uff0ckey \u7684\u53f3\u8fb9\u5168\u90e8\u662f\u6bd4 key \u5927\u7684\u3002</li> </ol> <p>\u4e0b\u9762\u5217\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\u5bf9\u5982\u4e0b\u6570\u7ec4 a \u4e2d\u7684\u5143\u7d20\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u5b9e\u73b0\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1a</p> <p>35 12 37 -58 54 76 22</p> <p>1) \u9996\u5148\u5206\u522b\u5b9a\u4e49 low \u548c high \u7528\u4e8e\u5b58\u50a8\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5373 low=0\uff0chigh=6\u3002</p> <p>2) \u7136\u540e\u5b9a\u4e49 key \u7528\u4e8e\u5b58\u653e\u57fa\u51c6\u6570\uff0c\u7406\u8bba\u4e0a\u8be5\u57fa\u51c6\u6570\u53ef\u4ee5\u53d6\u5e8f\u5217\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6570\u3002\u6b64\u5904\u5c31\u53d6\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u628a a[low] \u8d4b\u7ed9 key\u3002</p> <p>3) \u7136\u540e key \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c 22 \u6bd4\u8f83\uff0c35&gt;22\uff0c\u5219\u5b83\u4eec\u4e92\u6362\u4f4d\u7f6e\uff1a</p> <p>22 12 37 -58 54 76 35</p> <p>4) \u7136\u540e low++==1\uff0ckey \u548c a[low] \u6bd4\u8f83\uff0c\u5373 35 \u548c 12 \u6bd4\u8f83\uff0c12&lt;35\uff0c\u5219\u4e0d\u7528\u4e92\u6362\u4f4d\u7f6e\uff1b\u7ee7\u7eed low++==2\uff0c\u7136\u540e key \u548c a[low] \u6bd4\u8f83\uff0c\u5373 35 \u548c 37 \u6bd4\u8f83\uff0c37&gt;35\uff0c\u5219\u5b83\u4eec\u4e92\u6362\u4f4d\u7f6e\uff1a</p> <p>22 12 35 -58 54 76 37</p> <p>5) \u7136\u540e high--==5\uff0ckey \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c 76 \u6bd4\u8f83\uff0c35&lt;76\uff0c\u5219\u4e0d\u7528\u4e92\u6362\u4f4d\u7f6e\uff1b\u7ee7\u7eed high--==4\uff0c\u7136\u540e key \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c 54 \u6bd4\u8f83\uff0c35&lt;54\uff0c\u5219\u4e0d\u7528\u4e92\u6362\u4f4d\u7f6e\uff1b\u7ee7\u7eed high--==3\uff0c\u7136\u540e key \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c -58 \u6bd4\u8f83\uff0c35&gt;\u201358\uff0c\u5219\u5b83\u4eec\u4e92\u6362\u4f4d\u7f6e\uff1a</p> <p>22 12 -58 35 54 76 37</p> <p>6) \u7136\u540e low++==3\uff0c\u6b64\u65f6 low==high\uff0c\u7b2c\u4e00\u8f6e\u6bd4\u8f83\u7ed3\u675f\u3002\u4ece\u6700\u540e\u5f97\u5230\u7684\u5e8f\u5217\u53ef\u4ee5\u770b\u51fa\uff0c35 \u5de6\u8fb9\u7684\u90fd\u6bd4 35 \u5c0f\uff0c35 \u53f3\u8fb9\u7684\u90fd\u6bd4 35 \u5927\u3002\u8fd9\u6837\u5c31\u4ee5 35 \u4e3a\u4e2d\u5fc3\uff0c\u628a\u539f\u5e8f\u5217\u5206\u6210\u4e86\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\u3002\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u5206\u522b\u5bf9\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u5c31\u884c\u4e86\u3002</p> <p>\u5176\u4e2d\u6bcf\u4e00\u8f6e\u90fd\u662fkey\u4e0ea[low]\u6216\u8005a[high]\u4ea4\u6362</p>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#941","title":"9.4.1\u4ea4\u6362\u7248","text":"<pre><code>void quicksort(int a[],int low,int high)\n{\n    int i = low;\n    int j = high;\n    int key = a[i];\n    if(i &gt;= j)\n    {\n        return;\n    }\n    while(i &lt; j)\n    {\n        while(i &lt; j &amp;&amp; a[j]&gt;=key)  \n        {\n            j--;\n        }\n        if(a[j] &lt; key)\n        {\n            swap(&amp;a[i],&amp;a[j]);\n        }\n        while(i &lt; j &amp;&amp; a[i] &lt;= key )\n        {\n            i++;\n        }\n        if(a[i] &gt; key)\n        {\n            swap(&amp;a[i],&amp;a[j]);\n        }\n    }\n    quicksort(a,low,i-1);\n    quicksort(a,i+1,high);\n}\n</code></pre> <p>\u6ce8\u610f\u70b9\uff1a</p> <ol> <li> <p>\u4e0d\u8981\u5224\u65adif\uff08i &gt;= j) return; \u5426\u5219\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u6301\u7eed\u4e0b\u53bb</p> </li> <li> <p>\u5148\u5bf9j\u8fdb\u884c\u64cd\u4f5c\uff0c\u7b2c\u4e00\u4e2a\u5c0f\u4e8ekey\u7684\u503c\u79fb\u5230\u7b2c\u4e00\u4f4d\u3002\u5426\u5219\uff0c\u5148\u5bf9i\u64cd\u4f5c\u7684\u8bdd\uff0c\u4f1a\u81ea\u7136\u5730\u8df3\u8fc7key\uff0c\u4ece\u800c\u65e0\u6cd5\u5b9e\u73b0\u5206\u5272\u3002</p> </li> </ol>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#942","title":"9.4.2\u53cc\u6307\u9488\u5d4c\u5957\u4f7f\u7528(\u53d6\u4e2d\u95f4\u6570\u4e3a\u57fa\u51c6\u503c)","text":"<pre><code>int partition(int a[],int low,int high)\n{\n    int i = low-1;               //do while \u5faa\u73af\u4e2d\u5148\u8fdb\u884ci++\uff1ba[i]\u4ecea[0]\u5f00\u59cb\n    int j= high+1;               //\u540c\u7406\uff0ca[j]\u4ecea[n-1]\u5f00\u59cb\n    int mid = (low+high)/2;\n    int key=a[mid];\n    while(low &lt; high)\n    {\n        do\n        {\n            j--;\n        }\n        while(a[j]&gt;key);\n        do\n        {\n            i++;\n        }\n        while(a[i]&lt;key);\n        if(i&gt;=j) return j;//j\u7684\u53cd\u5217\u662fa[j]&lt;=key,\u6545\u4f1a\u5728\u7b49\u4e8e\u7684\u65f6\u5019\u505c\u4f4f\uff0c\u4e5f\u5c31\u662fkey\u7684\u4f4d\u7f6e\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\nvoid quicksort(int a[],int low, int high)\n{\n    if(low&gt;=high)\n    {\n        return;\n    }\n    int pivot=partition(a,low,high);\n    quicksort(a,0,pivot);\n    quicksort(a,pivot+1,high);\n}\n</code></pre>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#943-quicksort-insertsort","title":"9.4.3 Quicksort \u4e0e Insertsort \u7ed3\u5408","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define Cutoff 10\n\nvoid Swap(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint Median3(int temp[], int low, int high)\n{\n    int mid = (low + high)/2;\n    if(temp[low] &gt; temp[mid])\n    {\n        Swap(&amp;temp[low], &amp;temp[mid]);\n    }\n    // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[mid]\n    if(temp[low] &gt; temp[high])\n    {\n        Swap(&amp;temp[low], &amp;temp[high]);\n    }\n    // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[mid] \uff0ctemp[low] &lt;= temp[high]\n    if(temp[mid] &gt; temp[high])\n    {\n        Swap(&amp;temp[mid], &amp;temp[high]);\n    }\n    // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[mid] &lt;= temp[high]\n    Swap(&amp;temp[mid], &amp;temp[high - 1]);\n    // key = temp[high - 1]\n    return temp[high - 1];\n}\nvoid InsertionSort(int temp[], int n)\n{\n    // n \u8868\u793a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\u4e2a\u6570\n    int i, j;\n    int temp1;\n    for(i = 1; i &lt; n; i++)\n    {\n        temp1 = temp[i];\n        for(j = i; j &gt; 0 &amp;&amp; temp1 &lt; temp[j-1]; j--)\n        {\n            temp[j] = temp[j - 1];\n        }\n        temp[j] = temp1;\n    }\n}\nvoid Qsort(int temp[], int low, int high)\n{\n    int i, j;\n    int pivot;\n    // \u5f53\u6570\u7ec4\u957f\u5ea6\u8f83\u5927\u65f6\uff0c\u91c7\u7528\u5feb\u901f\u6392\u5e8f\n    if(low + Cutoff &lt;= high)\n    {\n        // \u7ecf\u8fc7Median3\u64cd\u4f5c\u4e4b\u540e\uff0cpivot\u7684\u4f4d\u7f6e\u548chigh-1\u8fdb\u884c\u4e86\u4e92\u6362\n        // \u5728\u6700\u540e\u65f6\u523b\uff0c\u5e94\u8be5\u5c06pivot\u7684\u4f4d\u7f6e\u548chigh - 1\u8fdb\u884c\u4e92\u6362\n        pivot = Median3(temp, low, high);\n        i = low;\n        j = high - 1; // \u6b64\u65f6\uff0ctemp[high - 1] = pivot\n        while(1)\n        {\n            // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[high - 1]\n            // \u6240\u4ee5\uff0c\u4e0d\u9700\u8981\u8003\u8651temp[low]\u7684\u60c5\u51b5\n            while(temp[++i]  &lt; pivot){}\n            // temp[high - 1] \u521d\u59cb\u72b6\u6001\u4e0b\u662fpivot\uff0c\u81ea\u52a8\u901a\u8fc7\n            while(temp[--j] &gt; pivot){}\n            // \u627e\u5230\u4e00\u5bf9\u9006\u5e8f\u5bf9\uff0c\u4ea4\u6362\n            if(i &lt; j)\n            {\n                Swap(&amp;temp[i], &amp;temp[j]);\n            }\n            else break;\n        }\n        // \u6b64\u65f6temp\u3010i\u3011 &gt;= pivot\n        // temp[high-1] = pivot\n        // \u4ea4\u6362temp[i]\u548ctemp[high-1]\uff0c\u4f7f\u5f97pivot\u4f4d\u4e8e\u4e2d\u95f4\n        Swap(&amp;temp[i], &amp;temp[high - 1]);\n        Qsort(temp, low, i - 1);\n        Qsort(temp, i + 1, high);\n    }\n    else\n    {\n        // \u5f53\u6570\u7ec4\u957f\u5ea6\u8f83\u5c0f\u65f6\uff0c\u91c7\u7528\u63d2\u5165\u6392\u5e8f\n        // \u4ece\u7b2clow\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u5171\u6709high - low + 1\u4e2a\u5143\u7d20\n        InsertionSort(temp + low, high - low + 1);\n    }\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &amp;n);\n    int temp[n];\n    for(int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;temp[i]);\n    }\n    // ElementType A[], int low, int high\n    Qsort(temp, 0, n - 1);\n    for(int i = 0; i &lt; n; i++)\n    {\n        printf(\"%d \", temp[i]);\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#94-bucket-sort","title":"9.4 Bucket Sort","text":""},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#941_1","title":"9.4.1 \u6982\u8ff0","text":"<p>\u6876\u6392\u5e8f\uff08Bucket Sort\uff09\u53c8\u79f0\u7bb1\u6392\u5e8f\uff0c\u662f\u4e00\u79cd\u6bd4\u8f83\u5e38\u7528\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5176\u7b97\u6cd5\u539f\u7406\u662f\u5c06\u6570\u7ec4\u5206\u5230\u6709\u9650\u6570\u91cf\u7684\u6876\u91cc\uff0c\u518d\u5bf9\u6bcf\u4e2a\u6876\u5206\u522b\u6392\u597d\u5e8f\uff08\u53ef\u4ee5\u662f\u9012\u5f52\u4f7f\u7528\u6876\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f7f\u7528\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\u5c06\u6bcf\u4e2a\u6876\u5206\u522b\u6392\u597d\u5e8f\uff09\uff0c\u6700\u540e\u4e00\u6b21\u5c06\u6bcf\u4e2a\u6876\u4e2d\u6392\u597d\u5e8f\u7684\u6570\u8f93\u51fa\u3002</p> <p>\u6876\u6392\u5e8f\u7684\u601d\u60f3\u5c31\u662f\u628a\u5f85\u6392\u5e8f\u7684\u6570\u5c3d\u91cf\u5747\u5300\u5730\u653e\u5230\u5404\u4e2a\u6876\u4e2d\uff0c\u518d\u5bf9\u5404\u4e2a\u6876\u8fdb\u884c\u5c40\u90e8\u7684\u6392\u5e8f\uff0c\u6700\u540e\u518d\u6309\u5e8f\u5c06\u5404\u4e2a\u6876\u4e2d\u7684\u6570\u8f93\u51fa\uff0c\u5373\u53ef\u5f97\u5230\u6392\u597d\u5e8f\u7684\u6570\u3002</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u901a\u5e38\u9002\u7528\u4e8e\u8f93\u5165\u6570\u636e\u5747\u5300\u5206\u5e03\u5728\u67d0\u4e2a\u8303\u56f4\u5185\u7684\u60c5\u51b5\u3002</p>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#942_1","title":"9.4.2 \u7b97\u6cd5\u89e3\u6790","text":"<ol> <li>\u521b\u5efa\u6876\uff0c\u9996\u5148\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u8303\u56f4\uff0c\u521b\u5efa\u76f8\u5e94\u6570\u91cf\u7684\u7a7a\u6876\u3002    - \u786e\u5b9a\u6bcf\u4e2a\u6876\u6240\u88c5\u6570\u636e\u7684\u8303\u56f4\u3002\u7ed9\u5b9a\u6570\u636e\u4e2d\u7684\u6700\u5927\u503cmax\u548c\u6700\u5c0f\u503cmin\uff0c\u8f93\u5165\u6570\u636e\u7684\u603b\u6570\u4e3an\u3002\\(size = (max - min) / n + 1\\)    - \u63a5\u4e0b\u6765\u8ba1\u7b97\u6240\u9700\u6876\u7684\u6570\u91cf\u3002\\(\\(cnt = (max - min) / size  + 1\\)\\)    - \\(size \u548c cnt\\)\u786e\u5b9a\u540e\uff0c\u6bcf\u4e2a\u6876\u6240\u5b58\u7684\u6570\u636e\u8303\u56f4\u4e5f\u968f\u4e4b\u786e\u5b9a\u3002\u7b2c\u4e00\u4e2a\u6876\uff08min, min + size\uff09,(min + size , min + 2*size ),\u2026..</li> <li>\u5bf9\u6bcf\u4e2a\u6876\u8fdb\u884c\u6392\u5e8f\uff1a \u5bf9\u6bcf\u4e2a\u975e\u7a7a\u7684\u6876\u5355\u72ec\u8fdb\u884c\u6392\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u9012\u5f52\u5730\u4f7f\u7528\u6876\u6392\u5e8f\u81ea\u8eab\u3002</li> <li> <p>\u5408\u5e76\u6876\uff1a \u6700\u540e\uff0c\u5c06\u6240\u6709\u975e\u7a7a\u6876\u4e2d\u7684\u5143\u7d20\u6309\u987a\u5e8f\u5408\u5e76\u8d77\u6765\uff0c\u5f97\u5230\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002</p> </li> <li> <p>\u590d\u6742\u5ea6\u5206\u6790    - \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\(O(n^2)\\)\\)\uff0c\u5176\u4e2d\\(\\(n\\)\\)\u662f\u5f85\u6392\u5e8f\u5143\u7d20\u7684\u6570\u91cf\u3002\u4f46\u662f\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\(O(n+k)\\)\\)\uff0c\u5176\u4e2d\\(\\(k\\)\\)\u662f\u6876\u7684\u6570\u91cf    - \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u6876\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u6876\u7684\u6570\u91cf\uff0c\\(O(N+K)\\)\u3002    - \u7a33\u5b9a\u6027\uff1a\u6876\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff0c\u5373\u76f8\u7b49\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u5728\u6392\u5e8f\u540e\u4e0d\u4f1a\u6539\u53d8\u3002</p> </li> </ol>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#95-radix-sort","title":"9.5 \u57fa\u6570\u6392\u5e8f Radix Sort","text":""},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#951","title":"9.5.1 \u6982\u8ff0","text":"<p>\u539f\u7406\u662f\u5c06\u6574\u6570\u6309\u4f4d\u6570\u5207\u5272\u6210\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u7136\u540e\u6309\u6bcf\u4e2a\u4f4d\u6570\u5206\u522b\u6bd4\u8f83\u3002\u57fa\u6570\u6392\u5e8f\u7684\u65b9\u5f0f\u53ef\u4ee5\u91c7\u7528LSD\uff08Least significant digital\uff09\u6216MSD\uff08Most significant digital\uff09\uff0cLSD\u7684\u6392\u5e8f\u65b9\u5f0f\u7531\u952e\u503c\u7684\u6700\u53f3\u8fb9\u5f00\u59cb\uff0c\u800cMSD\u5219\u76f8\u53cd\uff0c\u7531\u952e\u503c\u7684\u6700\u5de6\u8fb9\u5f00\u59cb\u3002</p> <ul> <li>MSD\uff1a\u5148\u4ece\u9ad8\u4f4d\u5f00\u59cb\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u6bcf\u4e2a\u5173\u952e\u5b57\u4e0a\uff0c\u53ef\u91c7\u7528\u8ba1\u6570\u6392\u5e8f</li> <li>LSD\uff1a\u5148\u4ece\u4f4e\u4f4d\u5f00\u59cb\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u6bcf\u4e2a\u5173\u952e\u5b57\u4e0a\uff0c\u53ef\u91c7\u7528\u6876\u6392\u5e8f</li> </ul>"},{"location":"course/fds/%E6%8E%92%E5%BA%8F/#952","title":"9.5.2.\u5b9e\u73b0\u903b\u8f91","text":"<p>\u2460 \u5c06\u6240\u6709\u5f85\u6bd4\u8f83\u6570\u503c\uff08\u6b63\u6574\u6570\uff09\u7edf\u4e00\u4e3a\u540c\u6837\u7684\u6570\u4f4d\u957f\u5ea6\uff0c\u6570\u4f4d\u8f83\u77ed\u7684\u6570\u524d\u9762\u8865\u96f6\u3002</p> <p>\u2461 \u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\u3002</p> <p>\u2462 \u8fd9\u6837\u4ece\u6700\u4f4e\u4f4d\u6392\u5e8f\u4e00\u76f4\u5230\u6700\u9ad8\u4f4d\u6392\u5e8f\u5b8c\u6210\u4ee5\u540e, \u6570\u5217\u5c31\u53d8\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002</p> <ol> <li>\u590d\u6742\u5ea6\u5206\u6790\uff1a    - \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u57fa\u6570\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(d(N+K))\\)\uff0c\u5176\u4e2dd\u662f\u6700\u5927\u6574\u6570\u7684\u4f4d\u6570\uff0cN\u662f\u5f85\u6392\u5e8f\u5143\u7d20\u7684\u6570\u91cf\uff0ck\u662f\u57fa\u6570\uff08\u4f8b\u5982\u5341\u8fdb\u5236\u4e2d\u768410\uff09\u3002    - \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u57fa\u6570\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u5b58\u50a8\u6392\u5e8f\u540e\u7ed3\u679c\u7684\u7a7a\u95f4\u4ee5\u53ca\u5b58\u50a8\u6876\u7684\u7a7a\u95f4\uff0c\u4e3a\\(\\(O(N+K)\\)\\)\u3002    - \u7a33\u5b9a\u6027\uff1a\u57fa\u6570\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff0c\u5373\u76f8\u7b49\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u5728\u6392\u5e8f\u540e\u4e0d\u4f1a\u6539\u53d8\u3002</li> </ol> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/","title":"\u4e00.Algorithm Analysis","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#11","title":"1.1 \u5206\u6790\u5185\u5bb9","text":"<ul> <li>\u8fd0\u884c\u65f6\u95f4\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u6709\u5173</li> <li>\u65f6\u95f4 &amp; \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u65e0\u5173</li> </ul> <p>\u5047\u8bbe\uff1a</p> <ul> <li>\u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c</li> <li>\u6bcf\u6761\u6307\u4ee4\u662f\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u5355\u4f4d\u6267\u884c</li> <li>\u6570\u636e\u89c4\u6a21\u662f\u7ed9\u5b9a\u7684\uff0c\u800c\u7a7a\u95f4\u662f\u65e0\u9650\u7684</li> </ul> <p>\u901a\u5e38\u6211\u4eec\u9700\u8981\u5206\u6790$T_{avg}(N),T_{worst}(N), N $\u662f\u8f93\u5165\u89c4\u6a21\uff08\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165\uff09</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#12","title":"1.2 \u6e10\u8fdb\u7b26\u53f7","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#121","title":"1.2.1 \u5b9a\u4e49","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#122","title":"1.2.2 \u8fd0\u7b97\u89c4\u5219","text":"<ul> <li> <p>\u58f0\u660e\u7684\u8d4b\u503c\u5ea6\uff1a \u65e0</p> </li> <li> <p>\u6bcf\u6761\u8d4b\u503c\u7684\u590d\u6742\u5ea6\uff1a1</p> </li> <li> <p>\u6bcf\u6761\u5224\u65ad\u7684\u590d\u6742\u5ea6\uff1a1</p> </li> <li> <p>\u5224\u65ad\u7684\u5206\u652f\uff1a\u8ba1\u7b97\u6240\u6709\u60c5\u51b5\u4e2d\u590d\u6742\u5ea6\u8f83\u5927\u8005</p> </li> <li> <p>\u8fd4\u56dereturn\u7684\u590d\u6742\u5ea6\uff1a1</p> </li> <li> \\[   \\begin{aligned}   &amp; T_1(N) = O(f(N)),T_2(N) = O(g(N))\\\\   &amp; T_1(N) + T_2(N) = max(O(f(N)),O(g(N)))\\\\   &amp; T_1(N) * T_2(N) = O(f(N) * g(N))    \\end{aligned}   \\] </li> <li> <p>\u82e5\\(T(N)\\)\u662f\u6700\u9ad8\u6b21\u6570\u4e3ak\u6b21\u7684\u591a\u9879\u5f0f\uff0c\u90a3\u4e48$ T(N) = \\Theta((N^k))$</p> </li> <li> <p>\u5bf9\u4e8e\u4efb\u610f\u5e38\u6570 k, \u90fd\u6709 \\(log^kN = O(N)\\)\uff0c\u8fd9\u8bf4\u660e\u5bf9\u589e\u957f\u975e\u5e38\u7f13\u6162\u3002</p> </li> <li> <p>\u5206\u6790\u65f6\u7684\u89c4\u5219</p> </li> <li> <p>for loop     \u8fd0\u884c\u65f6\u95f4\u662f\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u7684\u6700\u957f\u65f6\u95f4\uff08\u5305\u62ec for \u8fb9\u754c\u5224\u65ad\uff09\u4e58\u5faa\u73af\u7684\u6b21\u6570</p> </li> <li>\u5d4c\u5957 for loop     \u8fd0\u884c\u65f6\u95f4\u662f\u5404\u4e2a for loop \u7684\u8fd0\u884c\u65f6\u95f4\u9010\u6b21\u76f8\u4e58</li> <li>\u8fde\u7eed\u6267\u884c\u7684\u8bed\u53e5     \u76f8\u52a0</li> <li>if else     \u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u5224\u65ad\u65f6\u95f4\u52a0\u4e0a\u7528\u65f6\u6700\u591a\u7684\u8bed\u53e5\u5757\u7684\u65f6\u95f4</li> </ul> <p></p> <p>if\u4e2d\u590d\u6742\u5ea6\u4e3aN^3\uff0c\u6ce8\u610fN2\u4e0d\u662fN\u5e73\u65b9\uff0celse\u590d\u6742\u5ea6\u4e3aN * N * N(\u5f53i\u5230n\u7684\u65f6\u5019\u5c31\u4e0d\u8fdb\u53bb\u4e86\uff0c\u56e0\u6b64\u5916\u5faa\u73af\u6309N\u7b97\uff0c\u7b54\u6848\u4e3aT)*</p> <p><code>\u5bf9\u4e8efor\u5faa\u73af\u4ece0\u5230n\uff0c\u5faa\u73af\u4f53\u4e2d\u7684\u5185\u5bb9\u6267\u884cn\u6b21\uff0cfor\u8bed\u53e5\u7684\u5faa\u73af\u53d8\u91cf\u6267\u884cn+1\u6b21</code></p> <p><code>\u6545\u603b\u6267\u884c\u6b21\u6570 = n+1+n*(\u5faa\u73af\u4f53\u4e2d\u8bed\u53e5\u6267\u884c\u6b21\u6570)</code></p> <pre><code>void  add ( int  a[ ][ MAX_SIZE ], \n                   int  b[ ][ MAX_SIZE ], \n                   int  c[ ][ MAX_SIZE ],\n                   int  rows,  int  cols )\n{\n    int  i,  j ;//\u58f0\u660e\u590d\u6742\u5ea6\u65e0\n    for ( i = 0; i &lt; rows; i++ )//\u5bf9\u4e8e\u8be5\u5faa\u73af\u4f53\uff0c\u590d\u6742\u5ea6\u4e3arows+1+rows(i\u7684\u5185\u90e8)\n          for ( j = 0; j &lt; cols; j++ )//\u5bf9\u4e8ei\u7684\u5185\u90e8\uff0c\u590d\u6742\u5ea6\u4e3acols+1+cols(j\u7684\u5185\u90e8)\n                c[ i ][ j ] = a[ i ][ j ] + b[ i ][ j ];//j\u7684\u5185\u90e8=1\n}\n// \u603b\u7684\u590d\u6742\u5ea6\u4e3a\uff1arows+ 1 + rows(cols + 1 + cols * 1) = 2 rows * cols + 2rows + 1\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#13","title":"1.3 \u5177\u4f53\u95ee\u9898\u5206\u6790","text":"<p>Given (possibly negative) integers \\(A_1, A_2,\\cdots,A_N\\),<code>find the maximum value</code> of \\(\\sum_{k=i}^{j}A_k\\)</p> <p>\u5373\u7ed9\u5b9a\u4e00\u4e32\u6574\u6570\uff0c\u6c42\u6574\u6570\u5b57\u4e32\u7684\u6700\u5927\u503c</p> <pre><code>int MaxSubsequenceSum(int A[], int N)\n{\n    int sum, i, j, k;\n    int maxsum = 0;\n    for(i = 0; i &lt; N; i++)\n    {\n        for(j = i; j &lt; N; j++)\n        {\n            sum = 0;\n            for(k = i; k &lt;= j; k++)\n            {\n                sum += A[k];\n            }\n            if(sum &gt; maxsum)\n            {\n                sum = maxsum;\n            }\n        }\n    }\n    return maxsum\n}\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08N^3\uff09\n</code></pre> <pre><code>int MaxSubsequenceSum(int A[], int N)\n{\n    int sum, i, j, k;\n    int maxsum;\n    for(i = 0; i &lt; N; i++)\n    {\n        sum = 0;\n        for(j = i; j &lt; N; j++)\n        {\n            sum += A[j];\n            if(sum &gt; maxsum)\n            {\n                sum = maxsum;\n            }\n        }\n    }\n    return maxsum;\n}\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n</code></pre> <p></p> <pre><code>// Algorithm 4\nint MaxSubsequenceSum(int A[], int N)\n{\n    int sum, maxsum, i;\n    sum = maxsum = 0;\n    for(i = 0; i &lt; N; i++)\n    {\n        sum += A[i];\n        if(sum &gt; maxsum)\n        {\n            maxsum = sum;\n        }\n        else if(sum &lt; 0)\n        {\n            sum = 0;\n        }\n    }\n    return maxsum;\n}\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08N\uff09\n</code></pre> <p></p> <p>\u95ee\u9898\uff1a\u5982\u4f55\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f\u590d\u6742\u5ea6\u53c8\u662f\u591a\u5c11\uff1f</p> <p></p> <p>\u81f3\u4e8e\u7a7a\u95f4\u590d\u6742\u5ea6</p> <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u9012\u5f52\u7b97\u6cd5\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6216\u5faa\u73af\u6765\u8ba1\u7b97\u3002 </p> <ul> <li>\u5982\u679c\u4f7f\u7528\u9012\u5f52\u65b9\u5f0f\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO (n)\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u9012\u5f52\u8c03\u7528\u90fd\u4f1a\u5360\u7528\u4e00\u5b9a\u7684\u6808\u7a7a\u95f4\uff0c\u800c\u9012\u5f52\u6df1\u5ea6\u5c31\u662fn\u3002 (recursively)</li> <li>\u5982\u679c\u4f7f\u7528\u5faa\u73af\u65b9\u5f0f\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5219\u53ea\u9700\u8981\u5e38\u6570\u7ea7\u522b\u7684\u7a7a\u95f4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO (1)\u3002(iteratively)</li> </ul> <p></p> <p></p> <ol> <li>**The Fibonacci number sequence \\({F_N}\\) is defined as: \\(F_0=0, F_1=1, F_N=F_{N-1}+F_{N-2}, N = 2, 3, ....\\) The time complexity of the function which calculates \\(F_N\\) recursively is \\(\u0398(N!)\\). **</li> </ol> <p>False,\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6307\u6570\u578b\u589e\u957f</p> <ol> <li>The recurrent equations for the time complexities of programs P1 and P2 are:</li> </ol> <ul> <li>P1: T(1)=1,T(N)=T(N/3)+1</li> <li>P2: T(1)=1,T(N)=3T(N/3)+1</li> </ul> <p>Then the correct conclusion about their time complexities is:    $$    \\begin{aligned}    &amp;T(N) = T(N/3) + 1 = T(N/3^2) + 2 = \\cdots = T(1) + log_3N\\    &amp;\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log N)\\    \\    &amp;T(N) + \\dfrac{1}{2} = 3(T(N/3) + \\dfrac{1}{2}) = 3^{log_3N}(T(1) + \\dfrac{1}{2}) = N\\    &amp;\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)</p> <p>\\end{aligned}    $$</p> <ol> <li> <p>\u66f4\u591a\u9898\u76ee\u89c1\uff1a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\uff08\u5468\u6d4b1-\u7b97\u6cd5\u5206\u6790\uff09 - nonlinearthink - \u535a\u5ba2\u56ed (cnblogs.com)</p> </li> <li> \\[    \\begin{aligned}    T(N) &amp;= 2T(N/2) + N \\\\    &amp;= 2(2T(N/4) + N/2)+N \\\\    &amp;= 2^{log_2N}T(1) + log_2N * N \\\\    &amp;= N + NlogN    \\end{aligned}    \\] </li> <li> <p></p> </li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_1","title":"\u4e8c.\u94fe\u8868","text":"<p>\u89c1\u91cd\u96be\u70b9\u624b\u518c</p> <p></p> <p></p> <p></p> <pre><code>List Reverse( List L )\n{\n    struct Node *p = (struct Node*)malloc(sizeof(struct Node));\n    int cnt = 0;\n    for(p = L -&gt; Next;p;p = p -&gt; Next)\n    {\n        cnt++; //\u8ba1\u7b97\u94fe\u8868\u7684\u957f\u5ea6\n    }\n    if(cnt == 0)\n    {\n        return L;\n    }\n    struct Node *t, *new, *old, *temp;\n    p = L;\n    new = p -&gt; Next; //\u8868\u793a\u7b2c\u4e00\u4e2a\u7ed3\u70b9\n    old = new -&gt; Next;\n    t = new;         // \u8bb0\u5f55\u7b2c\u4e00\u4e2a\u6709\u6548\u6570\u636e\u70b9\u7684\u4f4d\u7f6e\uff0c\u8981\u4f7f\u5b83\u7684next\u6700\u540e\u53d8\u4e3aNULL\uff1b\n    for(int cnt1 = 1;cnt1 &lt; cnt;cnt1++)  //\u9006\u8f6c\u7684\u6b21\u6570\u7b49\u4e8e\u603b\u957f\u5ea6cnt-1\n    {\n        temp = old -&gt; Next;       //\u5148\u8bb0\u5f55\u4e3a\u9006\u8f6c\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u540e\u7eed\u4f7fold\u53d8\u4e3aold-&gt;next\n        old -&gt; Next = new;        //\u5f00\u59cb\u9006\u8f6c\n        new = old;                //\u66f4\u66ff\uff0c\u5df2\u7ecf\u9006\u8f6c\u5230old\u7ed3\u70b9\n        old = temp;\n    }\n    p -&gt; Next = new;              //p\u662fhead\uff0chead\u7684next\u662f\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\n    t -&gt; Next = old;              //old\u53d8\u4e3aNULL\uff0ct\u662f\u7b2c\u4e00\u4e2a\u6709\u6548\u6570\u636e\u7684\u7ed3\u70b9\uff0c\u9006\u8f6c\u540e\u662f\u6700\u540e\u4e00\u4e2a\uff0cnext\u53d8\u4e3aNULL\n    return p;\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_2","title":"\u4e09. \u6808","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#31","title":"3.1 \u6808\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>1\u3001\u6808\u7684\u5b9a\u4e49</p> <p>\u6808\uff08Stack\uff09\uff1a\u662f\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u7684\u7ebf\u6027\u8868\u3002\u9996\u5148\u6808\u662f\u4e00\u79cd\u7ebf\u6027\u8868\uff0c\u4f46\u9650\u5b9a\u8fd9\u79cd\u7ebf\u6027\u8868\u53ea\u80fd\u5728\u67d0\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002</p> <p></p> <p>\u6808\u9876\uff08Top\uff09\uff1a\u7ebf\u6027\u8868\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u5220\u9664\u7684\u90a3\u4e00\u7aef\u3002</p> <p>\u6808\u5e95\uff08Bottom)\uff1a\u56fa\u5b9a\u7684\uff0c\u4e0d\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u7684\u53e6\u4e00\u7aef\u3002</p> <p>\u7a7a\u6808\uff1a\u4e0d\u542b\u4efb\u4f55\u5143\u7d20\u7684\u7a7a\u8868\u3002</p> <p>\u6808\u53c8\u79f0\u4e3a\u540e\u8fdb\u5148\u51fa\uff08Last In First Out\uff09\u7684\u7ebf\u6027\u8868\uff0c\u7b80\u79f0LIFO\u7ed3\u6784</p> <p>2\u3001\u6808\u7684\u5e38\u89c1\u57fa\u672c\u64cd\u4f5c</p> <ul> <li>InitStack(&amp;S)\uff1a\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u6808S\u3002</li> <li>StackEmpty(S)\uff1a\u5224\u65ad\u4e00\u4e2a\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u6808\u4e3a\u7a7a\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002</li> <li>Push(&amp;S, x)\uff1a\u8fdb\u6808\uff08\u6808\u7684\u63d2\u5165\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u6808\u9876\u3002</li> <li>Pop(&amp;S, &amp;x)\uff1a\u51fa\u6808\uff08\u6808\u7684\u5220\u9664\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de\u3002</li> <li>GetTop(S, &amp;x)\uff1a\u8bfb\u6808\u9876\u5143\u7d20\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u7528x\u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>DestroyStack(&amp;S)\uff1a\u6808\u9500\u6bc1\uff0c\u5e76\u91ca\u653eS\u5360\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\uff08\u201c&amp;\u201d\u8868\u793a\u5f15\u7528\u8c03\u7528\uff09\u3002</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#32","title":"3.2 \u6808\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784","text":"<p>\u91c7\u7528\u987a\u5e8f\u5b58\u50a8\u7684\u6808\u79f0\u4e3a\u987a\u5e8f\u6808\uff0c\u4ed6\u5229\u7528\u4e00\u7ec4\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u5b58\u653e\u81ea\u6808\u5e95\u5230\u6808\u9876\u7684\u987a\u5e8f\u5143\u7d20\uff0c\u540c\u65f6\u9644\u8bbe\u4e00\u4e2a\u6307\u9488\uff08top)\u6307\u793a\u5f53\u524d\u6808\u9876\u7684\u4f4d\u7f6e\u3002</p> <p>\u82e5\u5b58\u50a8\u6808\u7684\u957f\u5ea6\u4e3aStackSize\uff0c\u5219\u6808\u9876\u4f4d\u7f6etop\u5fc5\u987b\u5c0f\u4e8eStackSize\u3002</p> <p><code>\u5f53\u6808\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\u65f6\uff0ctop\u7b49\u4e8e0\uff0c\u56e0\u6b64\u901a\u5e38\u628a\u7a7a\u6808\u7684\u5224\u65ad\u6761\u4ef6\u5b9a\u4f4d\u4e3a-1.</code></p> <pre><code>#define MAXSIZE 50  //\u5b9a\u4e49\u6808\u4e2d\u5143\u7d20\u7684\u6700\u5927\u4e2a\u6570\ntypedef int ElemType; // ElemType \u7684\u7c7b\u578b\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\uff0c\u6b64\u5904\u5047\u5b9a\u4e3aint\ntypedef struct{\n    ElemType data[MAXSIZE];\n    int top;                 //\u6808\u9876\u6307\u9488\n}Stack;\n\n//\u6216\u8005\nstruct point{\n    int Capacity;           // size of stack\n    int Top;                // the top pointer\n    // push ++, pop --, empty stack -1\n    ElemType *Array;        // array for stack elements\n}\n</code></pre> <p></p> <p>\u6808\u7684\u5e38\u89c1\u57fa\u672c\u64cd\u4f5c</p> <ul> <li>InitStack(&amp;S)\uff1a\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u6808S\u3002</li> <li>StackEmpty(S)\uff1a\u5224\u65ad\u4e00\u4e2a\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u6808\u4e3a\u7a7a\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002</li> <li>Push(&amp;S, x)\uff1a\u8fdb\u6808\uff08\u6808\u7684\u63d2\u5165\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u6808\u9876\u3002</li> <li>Pop(&amp;S, &amp;x)\uff1a\u51fa\u6808\uff08\u6808\u7684\u5220\u9664\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de\u3002</li> <li>GetTop(S, &amp;x)\uff1a\u8bfb\u6808\u9876\u5143\u7d20\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u7528x\u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>DestroyStack(&amp;S)\uff1a\u6808\u9500\u6bc1\uff0c\u5e76\u91ca\u653eS\u5360\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\uff08\u201c&amp;\u201d\u8868\u793a\u5f15\u7528\u8c03\u7528\uff09\u3002</li> </ul> <p>\uff081\uff09\u521d\u59cb\u5316</p> <pre><code>void InitStack(Stack *S)\n{\n    S-&gt;top = -1; //\u521d\u59cb\u5316\u6808\u9876\u6307\u9488\n}\n</code></pre> <p>\uff082\uff09\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a</p> <pre><code>bool StackEmpty(Stack S)\n{\n    if(S.top == -1)\n    {\n        return True;\n    }\n    return False;\n}\n</code></pre> <p>(3)\u8fdb\u6808 push</p> <pre><code>void Push(Stack *S, ElemType x)\n{\n    //\u5148\u5224\u65ad\u6808\u662f\u5426\u4e3a\u6ee1\n    if(S-&gt;top == MAXSIZE - 1)\n    {\n        printf(\"The stack is full!\");\n        return;\n    }\n    S-&gt;top ++;\n    S-&gt;data[S-&gt;top] = x;\n}\n</code></pre> <p>(4)\u51fa\u6808 pop</p> <pre><code>void pop(Stack *S,ElemType *x)\n{\n    //\u5148\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\n    if(S-&gt;top == -1)\n    {\n        printf(\"The stack is empty!\");\n        return;\n    }\n    *x = S-&gt;data[S-&gt;top]; //\u5c06\u8981\u5220\u9664\u7684\u6808\u9876\u5143\u7d20\u8d4b\u503c\u7ed9x\n    S-&gt;top --; //\u6808\u9876\u6307\u9488\u51cf1\n}\n</code></pre> <p>\uff085\uff09\u8bfb\u53d6\u6808\u9876\u5143\u7d20</p> <pre><code>void Gettop(Stack *S, ElemType *x)\n{\n    if(S-&gt;top == -1)\n    {\n        printf(\"The stack is empty!\");\n        return;\n    }\n    *x = S-&gt;data[S-&gt;top];\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#33","title":"3.3 \u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784","text":"<ol> <li>\u94fe\u6808</li> </ol> <p>\u91c7\u7528\u94fe\u5f0f\u5b58\u50a8\u7684\u6808\u79f0\u4e3a\u94fe\u6808\uff0c\u94fe\u6808\u7684\u4f18\u70b9\u662f\u4fbf\u4e8e\u591a\u4e2a\u6808\u5171\u4eab\u5b58\u50a8\u7a7a\u95f4\u548c\u63d0\u9ad8\u6548\u7387\uff0c\u4e14\u4e0d\u5b58\u5728\u6808\u6ee1\u4e0a\u6ea2\u7684\u60c5\u51b5\u3002</p> <p>\u901a\u5e38\u91c7\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff0c\u5e76\u89c4\u5b9a\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5728\u5355\u94fe\u8868\u7684\u8868\u5934\u8fdb\u884c\u3002</p> <p><code>\u8fd9\u91cc\u89c4\u5b9a\u94fe\u6808\u6ca1\u6709\u5934\u7ed3\u70b9\uff0cLhead \u6307\u5411\u6808\u9876\u5143\u7d20\u3002</code></p> <p>\u5bf9\u4e8e\u7a7a\u6808\u6765\u8bf4\uff0c\u94fe\u8868\u539f\u5b9a\u4e49\u662f\u5934\u6307\u9488\u6307\u5411\u7a7a\uff0c\u90a3\u4e48\u94fe\u6808\u7684\u7a7a\u5176\u5b9e\u5c31\u662ftop=NULL\u7684\u65f6\u5019\u3002</p> <p></p> <pre><code>typedef struct StackNode\n{\n    ElemType data;\n    struck StackNode *next;\n}StackNode,*LinkStackPrt;\n\ntypedef struct LinkStack\n{\n    StackNode *top;   //\u7ed3\u6784\u6307\u9488\uff0ctop\u5bf9\u5e94\u7684\u662f\u6808\u9876\u7ed3\u70b9\n    int count;      \n}LinkStack;\n</code></pre> <ol> <li>\u94fe\u6808\u7684\u57fa\u672c\u7b97\u6cd5</li> </ol> <p>\uff081\uff09 \u94fe\u6808\u7684\u8fdb\u6808 push</p> <p>\u5bf9\u4e8e\u94fe\u6808\u7684\u8fdb\u6808push\u64cd\u4f5c\uff0c\u5047\u8bbe\u5143\u7d20\u503c\u4e3ae\u7684\u65b0\u8282\u70b9\u662fs\uff0ctop\u4e3a\u6808\u9876\u6307\u9488\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <pre><code>void push(LinkStack *S, ElemType e)\n{\n    StackNode *p = (StackNode*)malloc(sizeof(StackNode))\n    //LinkStackPrt p = (LinkStackPrt)malloc(sizeof(StackNode));\n    p-&gt;data = e;\n    p-&gt;next = S-&gt;top;  //\u63d2\u5165\u7ed3\u70b9\n    S-&gt;top = p;        //\u5c06\u65b0\u7684\u7ed3\u70b9\u8d4b\u503c\u7ed9\u6808\u9876\u6307\u9488\n    S-&gt;count ++;       //\u6808\u4e2d\u5143\u7d20\u7684\u4e2a\u6570+1\n}\n</code></pre> <p>\uff082\uff09 \u94fe\u8868\u7684\u51fa\u6808 pop</p> <p>\u94fe\u6808\u7684\u51fa\u6808pop\u64cd\u4f5c\uff0c\u4e5f\u662f\u5f88\u7b80\u5355\u7684\u4e09\u53e5\u64cd\u4f5c\u3002\u5047\u8bbe\u53d8\u91cfp\u7528\u6765\u5b58\u50a8\u8981\u5220\u9664\u7684\u6808\u9876\u7ed3\u70b9\uff0c\u5c06\u6808\u9876\u6307\u9488\u4e0b\u79fb\u4ee5\u4e3a\uff0c\u6700\u540e\u91ca\u653ep\u5373\u53ef\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <pre><code>void pop(LinkStack *S, ElemType *e)\n{\n    StackNode *p;\n    if(S-&gt;count == 0)    //\u901a\u8fc7\u5224\u65adcount== 0\uff1f\n    {\n        printf(\"The stack is empty!\")\n    }\n    *e = S-&gt;top-&gt;data;      //pop\u8fd4\u56de\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u503c\n    p = S-&gt;top;          //\u5c06\u6808\u9876\u6307\u9488\u8d4b\u503c\u7ed9p\uff0c\u7528\u4e8e\u6700\u540e\u7684free\n    S-&gt;top = S-&gt;top-&gt;next; // \u6808\u9876\u6307\u9488\u4e0b\u79fb\u4e00\u4f4d\uff0c\u6307\u5411\u540e\u4e00\u4e2a\u7ed3\u70b9\n    free(p);\n    S-&gt;count--;\n}\n</code></pre> <p>\u94fe\u6808\u7684\u8fdb\u6808push\u548c\u51fa\u6808pop\u64cd\u4f5c\u90fd\u5f88\u7b80\u5355\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3aO(1)\u3002</p> <p>\u5bf9\u6bd4\u4e00\u4e0b\u987a\u5e8f\u6808\u4e0e\u94fe\u6808,\u5b83\u4eec\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u662f\u4e00\u6837\u7684,\u5747\u4e3aO(1)\u3002\u5bf9\u4e8e\u7a7a\u95f4\u6027\u80fd,\u987a\u5e8f\u6808\u9700\u8981\u4e8b\u5148\u786e\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u957f\u5ea6,\u53ef\u80fd\u4f1a\u5b58\u5728\u5185\u5b58\u7a7a\u95f4\u6d6a\u8d39\u7684\u95ee\u9898,\u4f46\u5b83\u7684\u4f18\u52bf\u662f\u5b58\u53d6\u65f6\u5b9a\u4f4d\u5f88\u65b9\u4fbf,\u800c\u94fe\u6808\u5219\u8981\u6c42\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u6307\u9488\u57df,\u8fd9\u540c\u65f6\u4e5f\u589e\u52a0\u4e86\u4e00\u4e9b\u5185\u5b58\u5f00\u9500,\u4f46\u5bf9\u4e8e\u6808\u7684\u957f\u5ea6\u65e0\u9650\u5236\u3002</p> <p>\u6240\u4ee5\u5b83\u4eec\u7684\u533a\u522b\u548c\u7ebf\u6027\u8868\u4e2d\u8ba8\u8bba\u7684\u4e00\u6837,\u5982\u679c\u6808\u7684\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u5143\u7d20\u53d8\u5316\u4e0d\u53ef\u9884\u6599,\u6709\u65f6\u5f88\u5c0f,\u6709\u65f6\u975e\u5e38\u5927,\u90a3\u4e48\u6700\u597d\u662f\u7528\u94fe\u6808,\u53cd\u4e4b,\u5982\u679c\u5b83\u7684\u53d8\u5316\u5728\u53ef\u63a7\u8303\u56f4\u5185,\u5efa\u8bae\u4f7f\u7528\u987a\u5e8f\u6808\u4f1a\u66f4\u597d\u4e00\u4e9b\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#34","title":"3.4 \u6808\u7684\u5e94\u7528\u2014\u2014\u56db\u5219\u8fd0\u7b97\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<ol> <li>\u540e\u7f00\u8868\u8fbe\u5f0f\u8ba1\u7b97\u7ed3\u679c</li> </ol> <p>\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u7b26\u5728\u64cd\u4f5c\u6570\u540e\u9762\uff0c\u5728\u540e\u7f00\u8868\u8fbe\u5f0f\u4e2d\u5df2\u8003\u8651\u4e86\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7,\u6ca1\u6709\u62ec\u53f7,\u53ea\u6709\u64cd\u4f5c\u6570\u548c\u8fd0\u7b97\u7b26\u3002\u4f8b\u5982\u4e2d\u7f00\u8868\u8fbe\u5f0f\\(A + B \u2217 ( C \u2212 D ) \u2212 E / F A\\)\u6240\u5bf9\u5e94\u7684\u540e\u7f00\u8868\u8fbe\u5f0f\u4e3a$A B C D \u2212 \u2217 + E F / \u2212 $</p> <p>\u540e\u7f00\u8868\u8fbe\u5f0f\u8ba1\u7b97\u89c4\u5219\uff1a\u4ece\u5de6\u5230\u53f3\u904d\u5386\u8868\u8fbe\u5f0f\u7684\u6bcf\u4e2a\u6570\u5b57\u548c\u7b26\u53f7\uff0c\u9047\u5230\u662f\u6570\u5b57\u5c31\u8fdb\u6808\uff0c\u9047\u5230\u662f\u7b26\u53f7\uff0c\u5c31\u5c06\u5904\u4e8e\u6808\u9876\u4e24\u4e2a\u6570\u5b57\u51fa\u6808\uff0c\u8fdb\u9879\u8fd0\u7b97\uff0c\u8fd0\u7b97\u7ed3\u679c\u8fdb\u6808\uff0c\u4e00\u76f4\u5230\u6700\u7ec8\u83b7\u5f97\u7ed3\u679c\u3002</p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_3","title":"\u56db. \u961f\u5217","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#41","title":"4.1 \u961f\u5217\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u961f\u5217\uff08queue\uff09\u662f\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u64cd\u4f5c\uff0c\u800c\u5728\u53e6\u4e00\u7aef\u8fdb\u884c\u5220\u9664\u64cd\u4f5c\u7684\u7ebf\u6027\u8868\u3002 \u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08First In First Out\uff09\u7684\u7ebf\u6027\u8868\uff0c\u7b80\u79f0FIFO\u3002\u5141\u8bb8\u63d2\u5165\u7684\u4e00\u7aef\u79f0\u4e3a\u961f\u5c3e\uff0c\u5141\u8bb8\u5220\u9664\u7684\u4e00\u7aef\u79f0\u4e3a\u961f\u5934\u3002</p> <p></p> <p>\u961f\u5934\uff08Front\uff09\uff1a\u5141\u8bb8\u5220\u9664\u7684\u4e00\u7aef\uff0c\u53c8\u79f0\u961f\u9996\u3002</p> <p>\u961f\u5c3e\uff08Rear\uff09\uff1a\u5141\u8bb8\u63d2\u5165\u7684\u4e00\u7aef\u3002</p> <p>\u7a7a\u961f\u5217\uff1a\u4e0d\u5305\u542b\u4efb\u4f55\u5143\u7d20\u7684\u7a7a\u8868\u3002</p> <ol> <li>\u961f\u5217\u7684\u5e38\u89c1\u57fa\u672c\u64cd\u4f5c</li> </ol> <ul> <li>InitQueue(&amp;Q)\uff1a\u521d\u59cb\u5316\u961f\u5217\uff0c\u6784\u9020\u4e00\u4e2a\u7a7a\u961f\u5217Q\u3002</li> <li>QueueEmpty(Q)\uff1a\u5224\u961f\u5217\u7a7a\uff0c\u82e5\u961f\u5217Q\u4e3a\u7a7a\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002</li> <li>EnQueue(&amp;Q, x)\uff1a\u5165\u961f\uff0c\u82e5\u961f\u5217Q\u672a\u6ee1\uff0c\u5c06x\u52a0\u5165\uff0c\u4f7f\u4e4b\u6210\u4e3a\u65b0\u7684\u961f\u5c3e\u3002</li> <li>DeQueue(&amp;Q, &amp;x)\uff1a\u51fa\u961f\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5220\u9664\u961f\u5934\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de\u3002</li> <li>GetHead(Q, &amp;x)\uff1a\u8bfb\u961f\u5934\u5143\u7d20\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5219\u5c06\u961f\u5934\u5143\u7d20\u8d4b\u503c\u7ed9x\u3002</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#42","title":"4.2 \u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784","text":"<p>\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff1a</p> <pre><code>#define MAXSIZE 50 //\u5b9a\u4e49\u961f\u5217\u4e2d\u5143\u7d20\u7684\u6700\u5927\u4e2a\u6570\ntypedef struct{\n    ElemTpye data[MAXSIZE];\n    int front,rear;\n}Queue;\n\n// \u6216\u8005\nstruct point{\n    int Capacity;       //max size of queue\n    int Front;          // the front pointer\n    int Rear;           // the rear pointer\n    int Count;          // the current size of queue\n    ElemType *Array;    // array\n}Queue;\n</code></pre> <ul> <li>\u521d\u59cb\u72b6\u6001\uff08\u961f\u5217\u4e3a\u7a7a\uff09\uff1a \\(Q-&gt;front == Q-&gt;rear == 0\\)</li> <li>\u8fdb\u961f\u64cd\u4f5c\uff1a \u961f\u5217\u4e0d\u6ee1\u65f6\uff0c\u5148\u5c06\u503c\u5b58\u50a8\u5230rear\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u518d\u961f\u5c3e\u6307\u9488\u52a01</li> <li>\u51fa\u961f\u64cd\u4f5c\uff1a\u961f\u5217\u975e\u7a7a\u65f6\uff0c\u5148\u53d6\u51fafront \u5bf9\u5e94\u7684\u5143\u7d20\u503c\uff0c\u518d\u961f\u5934\u6307\u9488\u52a01</li> </ul> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#43","title":"4.3 \u5faa\u73af\u961f\u5217","text":"<p>\u6211\u4eec\u628a\u961f\u5217\u7684\u8fd9\u79cd\u5934\u5c3e\u76f8\u63a5\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u79f0\u4e3a\u5faa\u73af\u961f\u5217\u3002</p> <p>\u5f53\u961f\u9996\u6307\u9488<code>Q-&gt;front = MAXSIZE-1</code>\u540e\uff0c\u518d\u524d\u8fdb\u4e00\u4e2a\u4f4d\u7f6e\u5c31\u81ea\u52a8\u52300\uff0c\u8fd9\u53ef\u4ee5\u5229\u7528\u9664\u6cd5\u53d6\u4f59\u8fd0\u7b97\uff08%\uff09\u6765\u5b9e\u73b0\u3002</p> <ul> <li>\u521d\u59cb\u72b6\u6001\u65f6 \\(Q-&gt;front = Q-&gt;rear = 0\\)</li> <li>\u961f\u9996\u6307\u9488\u8fdb\u4e00\uff08\u51fa\u961f\uff09\uff1a \\(Q-&gt;front = (Q-&gt;front + 1) \\% MAXSIZE\\)</li> <li>\u961f\u5c3e\u6307\u9488\u8fdb\u4e00\uff08\u5165\u961f\uff09\uff1a \\(Q-&gt;rear = (Q-&gt;rear + 1) \\% MAXSIZE\\)</li> <li>\u961f\u5217\u957f\u5ea6\uff1a\\((Q-&gt;rear - Q-&gt;front + MAXSIZE) / \\% MAXSIZE\\)</li> </ul> <p></p> <p>\u90a3\u4e48\uff0c\u5faa\u73af\u961f\u5217\u961f\u7a7a\u548c\u961f\u6ee1\u7684\u5224\u65ad\u6761\u4ef6\u662f\u4ec0\u4e48\u5462\uff1f</p> <p>\u663e\u7136\uff0c\u961f\u7a7a\u7684\u6761\u4ef6\u662f Q-&gt;front == Q-&gt;rear \u3002\u82e5\u5165\u961f\u5143\u7d20\u7684\u901f\u5ea6\u5feb\u4e8e\u51fa\u961f\u5143\u7d20\u7684\u901f\u5ea6\uff0c\u5219\u961f\u5c3e\u6307\u9488\u5f88\u5feb\u5c31\u4f1a\u8d76\u4e0a\u961f\u9996\u6307\u9488\uff0c\u5982\u56fe( d1 \uff09\u6240\u793a\uff0c\u6b64\u65f6\u53ef\u4ee5\u770b\u51fa\u961f\u6ee1\u65f6\u4e5f\u6709 Q -&gt;front == Q -&gt; rear \u3002 \u4e3a\u4e86\u533a\u5206\u961f\u7a7a\u8fd8\u662f\u961f\u6ee1\u7684\u60c5\u51b5\uff0c\u6709\u4e09\u79cd\u5904\u7406\u65b9\u5f0f\uff1a</p> <p>\uff081\uff09\u727a\u7272\u4e00\u4e2a\u5355\u5143\u6765\u533a\u5206\u961f\u7a7a\u548c\u961f\u6ee1\uff0c\u5165\u961f\u65f6\u5c11\u7528\u4e00\u4e2a\u961f\u5217\u5355\u5143\uff0c\u8fd9\u662f\u79cd\u8f83\u4e3a\u666e\u904d\u7684\u505a\u6cd5\uff0c<code>`\u7ea6\u5b9a\u4ee5\u201c\u961f\u5934\u6307\u9488\u5728\u961f\u5c3e\u6307\u9488\u7684\u4e0b\u4e00\u4f4d\u7f6e\u4f5c\u4e3a\u961f\u6ee1\u7684\u6807\u5fd7\u201d\uff0c</code>\u5982\u56fe ( d2 \uff09\u6240\u793a\u3002</p> <p>rear \u4f4d\u7f6e\u8868\u793a\uff0c\u8be5\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u63d2\u5165\uff0cfront\u4f4d\u7f6e\u8868\u793a\u8be5\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u79bb\u5f00</p> <ul> <li>\u961f\u6ee1\u6761\u4ef6\uff1a (Q-&gt;rear + 1)%Maxsize == Q-&gt;front\uff085+1 % 6 = 0\uff09</li> <li>\u961f\u7a7a\u6761\u4ef6\u4ecd\uff1a Q-&gt;front == Q-&gt;rear</li> <li>\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\uff1a (Q-&gt;rear - Q -&gt;front + Maxsize)% Maxsize</li> </ul> <p>\uff082\uff09\u7c7b\u578b\u4e2d\u589e\u8bbe\u8868\u793a\u5143\u7d20\u4e2a\u6570\u7684\u6570\u636e\u6210\u5458\u3002\u8fd9\u6837\uff0c\u961f\u7a7a\u7684\u6761\u4ef6\u4e3a Q-&gt;size == O \uff1b\u961f\u6ee1\u7684\u6761\u4ef6\u4e3a Q-&gt;size == Maxsize \u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u6709 Q-&gt;front == Q-&gt;rear</p> <p>\uff083\uff09\u7c7b\u578b\u4e2d\u589e\u8bbetag \u6570\u636e\u6210\u5458\uff0c\u4ee5\u533a\u5206\u662f\u961f\u6ee1\u8fd8\u662f\u961f\u7a7a\u3002tag \u7b49\u4e8e0\u65f6\uff0c\u82e5\u56e0\u5220\u9664\u5bfc\u81f4 Q-&gt;front == Q-&gt;rear \uff0c\u5219\u4e3a\u961f\u7a7a\uff1btag \u7b49\u4e8e 1 \u65f6\uff0c\u82e5\u56e0\u63d2\u5165\u5bfc\u81f4 Q -&gt;front == Q-&gt;rear \uff0c\u5219\u4e3a\u961f\u6ee1\u3002</p> <p><code>\u4ee5\u4e0b\u9488\u5bf9\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u4ecb\u7ecd\u5faa\u73af\u961f\u5217\u7684\u5e38\u89c1\u57fa\u672c\u7b97\u6cd5\uff08\u7a7a\u4f59\u4e00\u4e2a\u4f4d\u7f6e\uff09</code></p> <p>\uff081\uff09\u5faa\u73af\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784</p> <pre><code>typedef int ElemType;              //ElemType\u7684\u7c7b\u578b\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\uff0c\u8fd9\u91cc\u5047\u5b9a\u4e3aint\n#define MAXSIZE 50\ntypedef struct{\n    ElemType data[MAXSIZE];\n    int front;\n    int rear;                     //\u5c3e\u6307\u9488,\u82e5\u961f\u5217\u4e0d\u7a7a\uff0c\u6307\u5411\u961f\u5217\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n}Queue;\n</code></pre> <p>\uff082\uff09 \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316</p> <pre><code>void InitQueue(Queue * Q)\n{\n    Q-&gt;front = 0;\n    Q-&gt;rear = 0;\n}\n</code></pre> <p>\uff083\uff09\u5faa\u73af\u961f\u5217\u5224\u65ad\u662f\u5426\u4e3a\u7a7a</p> <pre><code>Bool Isempty(Queue Q)\n{\n    if(Q.rear == Q.front)\n    {\n        return True;\n    }\n    return False;\n}\n</code></pre> <p>\uff084\uff09 \u6c42\u5faa\u73af\u961f\u5217\u7684\u957f\u5ea6</p> <pre><code>int Queuelength(Queue Q)\n{\n    return (Q.rear - Q.front + MAXSIZE) % MAXSIZE;\n    // \u4e4b\u6240\u4ee5\u8981\u52a0MAXSIZE\uff0c\u662f\u56e0\u4e3a\u5f53front = rear + 1\u65f6\uff0c\u6b64\u65f6\u7ed3\u679c\u4e3aMAXSIZE - 1\n}\n</code></pre> <p>\uff085\uff09 \u5faa\u73af\u961f\u5217\u5165\u961f</p> <pre><code>/*\u82e5\u961f\u5217\u672a\u6ee1\uff0c\u5219\u63d2\u5165\u5143\u7d20e\u4e3aQ\u65b0\u7684\u961f\u5c3e\u5143\u7d20*/\nvoid EnQueue(Queue *Q, ElemType e)\n{\n    // \u5148\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u6ee1\n    if((Q-&gt;rear + 1) % MAXSIZE == Q-&gt;front)\n    {\n        printf(\"The queue is full!\");\n    }\n    else\n    {\n        Q-&gt;data[Q-&gt;rear] = e;\n        Q-&gt;rear = (Q-&gt;rear + 1) % MAXSIZE;//rear\u6307\u9488\u5411\u540e\u79fb\u4e00\u4f4d\u7f6e\uff0c\u82e5\u5230\u6700\u540e\u5219\u8f6c\u5230\u6570\u7ec4\u5934\u90e8\n    }\n}\n</code></pre> <p>\uff086\uff09\u5faa\u73af\u961f\u5217\u51fa\u961f</p> <pre><code>void DeQueue(Queue *Q, ElemType *e)\n{\n    if(Q-&gt;rear == Q-&gt;front)\n    {\n        printf(\"The queue is empty!\");\n    }\n    else\n    {\n        *e = Q-&gt;data[Q-&gt;front];\n        Q-&gt;front = (Q-&gt;front + 1) % MAXSIZE;//rear\u6307\u9488\u5411\u540e\u79fb\u4e00\u4f4d\u7f6e\uff0c\u82e5\u5230\u6700\u540e\u5219\u8f6c\u5230\u6570\u7ec4\u5934\u90e8\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#44","title":"4.4 \u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784","text":"<p>\u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u8868\u793a\u4e3a\u94fe\u961f\u5217\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u540c\u65f6\u5e26\u6709\u961f\u5934\u6307\u9488\u548c\u961f\u5c3e\u6307\u9488\u7684\u5355\u94fe\u8868\uff0c\u53ea\u4e0d\u8fc7\u5b83\u53ea\u80fd\u5c3e\u8fdb\u5934\u51fa\u800c\u5df2</p> <p></p> <p></p> <p>\uff081\uff09\u94fe\u961f\u5217\u5b58\u50a8\u7c7b\u578b</p> <pre><code>typedef struct{\n    ELemType data;\n    struct LinkNode *next;\n}LinkNode;\n// \u5bf9\u4e8e\u961f\u5217\uff0c\u521b\u5efa\u7684\u662f\u4e00\u4e2a\u53cc\u5934\u94fe\u8868\uff0cfront\u548crear\ntypedef struct{\n    LinkNode *front;\n    LinkNode *rear;\n}LinkQueue;\n</code></pre> <p>\uff082\uff09\u94fe\u961f\u5217\u7684\u521d\u59cb\u5316</p> <pre><code>void InitQueue(LinkQueue *Q)\n{\n    //\u6b64\u5904\u7684\u94fe\u8868\u5e26\u5934\u7ed3\u70b9\uff0c\u5934\u7ed3\u70b9\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u521d\u59cb\u72b6\u6001\u5747\u6307\u5411NULL\n    Q-&gt;front = Q-&gt;rear = (LinkNode*)malloc(sizeof(LinkNode));//\u5efa\u7acb\u5934\u7ed3\u70b9\n    Q-&gt;front-&gt;next = Q-&gt;rear-&gt;next = NULL;//\u521d\u59cb\u4e3a\u7a7a\n}\n</code></pre> <p>\uff083\uff09\u94fe\u961f\u5217\u5165\u961f</p> <p></p> <pre><code>void EnQueue(LinkQueue *Q,ElemType e)\n{\n    LinkNode *s = (LinkNode *)malloc(sizeof(LinkNode));\n    s-&gt;data = e;\n    s-&gt;next = NULL;\n    Q-&gt;rear-&gt;next = s; //\u628a\u62e5\u6709\u5143\u7d20e\u65b0\u7ed3\u70b9s\u8d4b\u503c\u7ed9\u539f\u961f\u5c3e\u7ed3\u70b9\u7684\u540e\u7ee7\n    Q-&gt;rear = s;       //\u628a\u5f53\u524d\u7684s\u8bbe\u7f6e\u4e3a\u65b0\u7684\u961f\u5c3e\u7ed3\u70b9\n    // \u4e5f\u5c31\u662f\u8bf4rear\u7ed3\u70b9\u662f\u5e26\u6570\u636e\u7684\n}\n</code></pre> <p>\uff084\uff09\u94fe\u961f\u5217\u51fa\u961f</p> <p>\u51fa\u961f\u64cd\u4f5c\u65f6\uff0c\u5c31\u662f\u5934\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u51fa\u961f\uff0c\u5c06\u5934\u7ed3\u70b9\u7684\u540e\u7ee7\u6539\u4e3a\u5b83\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u82e5\u94fe\u8868\u9664\u5934\u7ed3\u70b9\u5916\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u5219\u9700\u5c06rear\u6307\u5411\u5934\u7ed3\u70b9\u3002</p> <p></p> <pre><code>void Dequeue(LinkQueue *Q,ElemType *e)\n{\n    LinkNode *p;\n    if(Q-&gt;front == Q-&gt;rear)\n    {\n        printf(\"The Queue is empty\");\n    }\n    else\n    {\n        *p = Q-&gt;front-&gt;next;      //\u5c06\u6b32\u5220\u9664\u7684\u961f\u5934\u7ed3\u70b9\u6682\u5b58\u7ed9p\n        *e = p -&gt; data;           \n        Q-&gt;front-&gt;next = p-&gt;next;\n        if(Q-&gt;rear == p)          //\u82e5\u5220\u9664\u7684\u961f\u5934\u662f\u961f\u5c3e\uff0c\u5219\u5220\u9664\u540e\u5c06rear\u6307\u5411\u5934\u7ed3\u70b9\n        {\n            Q-&gt;rear = Q-&gt;front;\n        }\n        // \u5728\u961f\u5217\u5143\u7d20\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0crear\u7ed3\u70b9\u4e0d\u9700\u8981\u6539\u53d8\n        free(p);\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_4","title":"\u4e94.\u6811","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#51","title":"5.1 \u6811\u7684\u5b9a\u4e49\u548c\u6027\u8d28","text":"<ol> <li>\u6811\u7684\u5b9a\u4e49\uff1a A tree is a colection of nodes.</li> </ol> <ul> <li>(1) a distinguished node r, called the root;</li> <li>(2) zero or more nonempty (sub)tree T1,\u2026Tk.</li> </ul> <p><code>\u6ce8\u610f\uff1a</code></p> <ol> <li> <p>Subtrees must not connect together. Therefore every node in the tree is the root of some subtree.</p> </li> <li> <p>There are N -1  edges in a tree with N nodes.</p> </li> <li> <p>Normally the root is drawn at the top.</p> </li> </ol> <ol> <li>\u5176\u4ed6\u5b9a\u4e49</li> </ol> <p></p> <ul> <li><code>degree of a node</code> : number of subtrees of the node. For example degree(A) = 3, degree(F) =  0.</li> <li><code>degree of a tree</code>: \\(= max_{node \\in tree}{degree(node)}\\).For example, degree of this tree = 3</li> <li><code>parent</code>: a node that has  subtrees</li> <li><code>children</code>: the roots of the subtrees of a parents</li> <li><code>siblings</code>: children of the same parent</li> <li><code>leaf</code> : a node with degree 0</li> <li><code>path from n1 to nk</code>: a <code>unique(\u552f\u4e00\u7684)</code>sequence of nodes \\(n_1, n_2, \\cdots n_k\\),such that \\(n_i\\) is the parent of  \\(n_{i+1}\\) </li> <li><code>length of path</code>: number of edges on the path</li> <li><code>depth of n_i</code>:length of the unique path from the root to \\(n_i\\) Depth(root) = 0.</li> <li><code>height of n_i</code>:length of the longest path from \\(n_i\\) to a leaf. Height(leaf) = 0, and height(D) = 2.</li> </ul> <p>\u6df1\u5ea6depth \u4ece root \u5f00\u59cb\u8ba1\u7b97\uff0c \u9ad8\u5ea6height \u4ece leaf \u5f00\u59cb\u8ba1\u7b97</p> <ul> <li><code>height(depth) of a tree:</code>height(root) = depth(deepest leaf).</li> <li><code>ancestors of a node:</code>all the nodes along the path from the node up to the root</li> <li><code>descendants of a node:</code> all the nodes in its subtrees.</li> </ul> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#52-implementation","title":"5.2 Implementation","text":"<p>\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 <code>FirstChild-NextSibling Representation</code></p> <p>\u5c06\u7ed3\u70b9\u7684\u5b69\u5b50\u653e\u5728\u5de6\u5b50\u6811</p> <p>\u5c06\u7ed3\u70b9\u7684\u5144\u5f1f\u653e\u5728\u53f3\u5b50\u6811</p> <p>\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u6811</p> <p>Note: The representation is not unique since the children in a tree can be of any order.</p> <pre><code>typedef struct TreeNode *PrtToNode;\nstruct TreeNode{\n    ElementType Element;\n    PrtToNode FirstChild;\n    PrtToNode NextSibling;\n}Tree;\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#53","title":"5.3 \u4e8c\u53c9\u6811","text":"<p>\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u4e0d\u80fd\u591a\u4e8e\u4e24\u4e2a</p> <p></p> \\[ \\begin{aligned} &amp;\u8bbe\u5177\u6709\u4e24\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u91cf\u4e3an2\uff0c\u4e00\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u91cf\u4e3an1\uff0cleaf\u7684\u6570\u91cf\u4e3an0\\\\ &amp; N(\u7ed3\u70b9\u603b\u6570) = n2 + n1 + n0\\\\ &amp; N-1(\u8fb9\u603b\u6570) = 2 * n2 + n1 \\\\ &amp;\u5f97\u5230n0 = n2 + 1\\\\ &amp;\u6b64\u59042015 = 2 * n2 + 16,\u663e\u7136\u4e0d\u5bf9 \\end{aligned} \\]"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#531","title":"5.3.1 \u8868\u8fbe\u5f0f\u6811","text":"<p>\u8868\u8fbe\u5f0f\u6811\u7684\u6811\u53f6\u662f\u64cd\u4f5c\u6570\uff0c\u6bd4\u5982\u5e38\u6570\u6216\u53d8\u91cf\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u4e3a\u64cd\u4f5c\u7b26\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u64cd\u4f5c\u7b26\u4e00\u822c\u662f\u4e8c\u5143\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u5982\u679c\u6709\u5355\u76ee\u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u8282\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002</p> <p></p> <p>\u6811\u53c8\u662f\u5982\u4f55\u5b58\u50a8\u7684\u5462\uff1f $$ (a+b) * (c(d+e)) = ab+cde+*\\ \u4e2d\u7f00\u8868\u8fbe\u5f0f\u548c\u540e\u7f00\u8868\u8fbe\u5f0f $$ </p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#532","title":"5.3.2 \u6811\u7684\u904d\u5386","text":"<ol> <li>\u524d\u5e8f\u904d\u5386</li> </ol> <pre><code>void preorder(tree_ptr tree)\n{\n    if(tree)\n    {\n        visit(tree);     //\u5148\u83b7\u53d6\u6839\u7ed3\u70b9root\n        for(each child C of tree) // \u4f9d\u6b21\u9012\u5f52\u5b50\u6811\n            preorder(C);\n    }\n}\n</code></pre> <ol> <li>\u540e\u5e8f\u904d\u5386</li> </ol> <pre><code>void postorder(tree_ptr tree)\n{\n    if(tree)\n    {\n        for(each child C of tree) //\u5148\u9012\u5f52\u5b50\u6811\n            postorder(C);\n        visit(tree);              //\u6700\u540e\u83b7\u53d6\u6839\u7ed3\u70b9\n    }\n}\n</code></pre> <ol> <li>\u5c42\u5e8f\u904d\u5386</li> </ol> <pre><code>void levelorder(tree_ptr tree)\n{\n    enqueue(tree);\n    while(queue is not empty)\n    {\n        visit(T = dequeue());\n        for(each child C of T)\n            enqueue(C);\n    }\n}\n</code></pre> <p><code>\u6309\u7167\u5c42\u6570\uff0c\u4f9d\u6b21\u8f93\u51fanode</code></p> <ol> <li>\u4e2d\u5e8f\u904d\u5386</li> </ol> <pre><code>// \u9012\u5f52\u7248\u672c\nvoid inorder(tree_ptr tree)\n{\n    if(tree)\n    {\n        inorder(tree-&gt;left);\n        visit(tree-&gt;element);\n        inorder(tree-&gt;right);\n    }\n}\n// \u904d\u5386\u7248\u672c(\u4e0d\u4fdd\u771f)\nvoid iter_inorder(tree_ptr tree)\n{\n    Stack S = CreateStack(MAX_SIZE);\n    for(;;)\n    {\n        for(;tree;tree = tree-&gt;left)\n        {\n            Push(tree,S);\n        }\n        tree = Top(S);\n        Pop(S);\n        if(!tree) break;\n        visit(tree-&gt;element);\n        for(;tree;tree = tree-&gt;left)\n        {\n            Push(tree,S);\n        }\n        tree = Top(S);\n        Pop(S);\n    }\n}\n</code></pre> <p></p> <p></p> <p>\u8f6c\u6362\u540e\uff0c T\u7684preorder = BT\u7684preorder(preorder\u4e0d\u53d8) </p> <p>T\u7684postorder = BT\u7684inorder</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#54","title":"5.4 \u7ebf\u7d22\u4e8c\u53c9\u6811","text":"<p>\u89c4\u5219\uff1a</p> <ul> <li>\u5982\u679c <code>Tree-&gt;Left</code> \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u7684\u6307\u9488\u4ee3\u66ff\u5b83</li> <li>\u5982\u679c <code>Tree-&gt;Right</code> \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u540e\u7ee7\u7684\u6307\u9488\u4ee3\u66ff\u5b83</li> <li>\u8fd9\u91cc\u6ca1\u6709\u7a7a\u95f2\u7684\u6307\u9488\uff0c\u56e0\u6b64\u4e00\u68f5\u7ebf\u7d22\u4e8c\u53c9\u6811\u9700\u8981\u6709\u4e00\u4e2a\u5de6\u513f\u5b50\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5934\u8282\u70b9\u3002</li> </ul> <p></p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u542bn\u4e2a\u7ed3\u70b9\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\uff0c\u5171\u6709n+1\u4e2anull\u7ed3\u70b9</p> \\[ \u5bf9\u4e8en\u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6539\u53d8\u5b83\u7684\u5f62\u72b6\uff0c\u4f7f\u5f97leaf\u7ed3\u70b9\u96c6\u4e2d\u5728\u6700\u540e\u4e00\u884c\u3002\\\\ \u4e0d\u59a8\u8bbe\uff0c\u8be5\u6811\u5b8c\u5168\u5e73\u94fak\u884c\uff0c\u4e5f\u5c31\u662f2^k -1 &lt;= n &lt; 2^{k+1} -1\\\\ \u6b64\u65f6\u6700\u540e\u4e00\u884c\u4e00\u5171n-2^k+1\u4e2a\u7ed3\u70b9\uff0c\\\\ \u6b64\u65f6\u6700\u540e\u4e00\u884c\u4ea7\u751f\u7684NULL\u7ed3\u70b9\u4e00\u5171\u67092*(n-2^k+1) = 2n-2^{k+1}+2\\\\ \u6700\u7ec8\u7684\u8ba1\u7b97\u7406\u89e3\u4e3a\uff0c\u7b2ck\u884c\u539f\u672c\u5e94\u8be5\u6709\u7684NULL\u7ed3\u70b9\u6570 - \u7b2ck+1\u884c\u7684\u7ed3\u70b9\u6570 + \u7b2ck+1\u884c\u4ea7\u751f\u7684NULL\u7ed3\u70b9\u6570\\\\ \u6700\u7ec8\uff0c2*(2^{k-1})+n-2^k+1 = n+1 \\] <p>Among the following threaded binary trees (the threads are represented by dotted curves), which one is the postorder threaded tree?</p> <p></p> <p><code>\u8c41\u7136\u5f00\u6717\u7248\uff1a\u7ebf\u7d22\u4e8c\u53c9\u6811\u4e5f\u6709\u5f88\u591a\u54c1\u79cd\uff0c\u6bd4\u5982inorder threaded tree\uff0cpostorder threaded tree\uff0c\u6839\u636e\u4e0d\u540c\u7684\u904d\u5386\u987a\u5e8f\uff0c\u4fee\u6539\u5b9a\u4e49\u3002</code></p> <p><code>\u6bd4\u5982\uff0c\u6b64\u5904\u4e3a\u540e\u5e8f\u7684\u7ebf\u7d22\u6811\uff0c\u90a3\u4e48\u5b9a\u4e49\u4e3a\uff0c\u5982\u679c\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c31\u7528\u865a\u7ebf\u6307\u5411\u81ea\u5df1postorder\u524d\u9762\u7684\u7ed3\u70b9\uff0c\u5982\u679c\u524d\u9762\u6ca1\u6709\uff0c\u5c31\u662fNULL\u3002\u5982\u679c\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c31\u7528\u865a\u7ebf\u6307\u5411\u81ea\u5df1postorder\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u662fNULL</code></p> <p>\u4e0b\u9762\u8fd9\u4e2a\u6811\uff0c\u540e\u5e8f\u6392\u5e8f\u662f\uff1adbca \u524d\u9a71\u5c31\u662f\u524d\u9762\u7684\uff0c\u6bd4\u5982b\u7684\u524d\u9a71\u662fd, d\u7684\u524d\u9a71\u662fNull \u540e\u9a71\u5c31\u662f\u540e\u9762\u7684\uff0c\u6bd4\u5982d\u7684\u540e\u9a71\u662fb\uff0ca\u7684\u540e\u9a71\u662fNull d\u6709\u4e24\u4e2a\u6307\u9488\u6ca1\u6709\u7528\uff0c\u5de6\u8fb9\u6307\u5411\u524d\u9a71Null\uff0c\u53f3\u8fb9\u6307\u5411b\uff08\u7136\u540e\u5c31\u9009\u51fa\u6765B\u4e86\uff09 b\u7684\u53f3\u8282\u70b9\u6709\u7528\u7684\uff08\u5df2\u7ecf\u6307\u5411d\u4e86\uff09\uff0c\u5de6\u8282\u70b9\u6307\u5411\u5176\u524d\u9a71\uff0c\u4e5f\u5c31\u662fd c\u524d\u9a71\u662fb\uff0c\u540e\u9a71\u662fa\uff0c\u6240\u4ee5\u5de6\u6307\u5411b\uff0c\u53f3\u6307\u5411a a\u6ca1\u6709\u6307\u9488\u53ef\u7528\u4e86\uff08\u5df2\u7ecf\u5de6\u4e3ab\u53f3\u4e3ac\uff09\u4e86 \u6240\u4ee5\u9009B\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#55-complete-binary-tree","title":"5.5 complete binary tree","text":"<p>skewed binary tree \u659c\u4e8c\u53c9\u6811</p> <p></p> <p>\u5bf9\u4e8ecomplete binary tree\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0cleaf\u96c6\u4e2d\u5728\u5012\u6570\u4e24\u884c\uff0c\u4e14leaf\u7684\u6392\u5217\u9700\u8981\u4f18\u5148\u6ee1\u8db3\u5de6\u5b50\u6811\uff0c\u4e5f\u5c31\u662f\u5f97\u5148\u94fa\u6ee1\u5de6\u5b50\u6811\uff0c\u518d\u94fa\u53f3\u5b50\u6811\u3002\u6700\u540e\u4e00\u884cleaf\u7684\u6392\u5217\u65b9\u5f0f\u4e3a\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u6392\u5217\u3002</p> <p><code>For any nonempty binary tree, $n_0 = n_2+1$where $n_0$ is thr number of leaf nodes and $n_2$ the number of nodes of degree 2.</code></p> <p>\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684\u6027\u8d28\uff1a\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u6570\u91cf\u7b49\u4e8edegree\u4e3a2\u7684\u7ed3\u70b9\u6570\u91cf\uff08\u6709\u4e24\u4e2a\u5b69\u5b50\uff09+1</p> <p> $$ \\begin{aligned} &amp;\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a\\ &amp;\u4e24\u79cd\u65b9\u5f0f\u7406\u89e3\u6811\u7684\u7ed3\u70b9\u6570\u91cf\uff1a\\ &amp;\u7b2c\u4e00\u79cd\u4ece\u7ed3\u70b9\u7684\u7c7b\u578b\u548c\u6570\u91cf\u5165\u624b\uff0c\u9996\u5148\u5728\u4e00\u68f5\u4e8c\u53c9\u6811\u4e2d\uff0c\u7ed3\u70b9\u7684\u79cd\u7c7b\u53ea\u6709leaf\uff0cnodes of  degree1\uff0c \\ &amp;nodes  of  degree2\uff0c\u4e0d\u59a8\u8bbe\u5b83\u4eec\u7684\u6570\u91cf\u5206\u522b\u4e3an_0,n_1,n_2.\u4e8e\u662f\u603b\u6570n = n_0+n_1+n_2\\ &amp;\u7b2c\u4e8c\u79cd\u4ece\u8fb9\u7684\u6570\u91cf\u548c\u8fb9\u662f\u600e\u4e48\u4ea7\u751f\u5165\u624b\uff0c\u9996\u5148e = n - 1\uff0c\u8fb9\u7684\u6570\u91cf\u7b49\u4e8e\u7ed3\u70b9\u6570\u51cf\u4e00\\ &amp;leaf \u4ea7\u751f\u7684\u8fb9\u7684\u6570\u91cf\u4e3a0\uff0cdegree \u4e3a1 \u7684nodes\u4ea7\u751f\u7684\u8fb9\u6570\u91cf\u4e3an_1, \\ &amp;degree \u4e3a2\u7684nodes\u4ea7\u751f\u7684\u8fb9\u7684\u6570\u91cf\u4e3a2n_2\uff0c\u4e8e\u662f\u8fb9\u7684\u603b\u6570\u4e3ae = n_1 + 2n_2\\ &amp; \u8054\u7acb\u65b9\u7a0b\u7ec4\uff1a n_1 + 2n_2 = e = n-1 = n_0 + n_1 + n_2 - 1,\u5f97\u5230n_0 = n_2 + 1 \\end{aligned} $$ </p> <p>If a general tree T is converted into a binary tree BT, then which of the following BT traversals gives the same sequence as that of the post-order traversal of T?</p> <p>\u5c06\u4e00\u68f5\u666e\u901a\u6811\u8f6c\u5316\u4e3a\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u7684\u4ec0\u4e48\u904d\u5386\u65b9\u5f0f\u76f8\u5f53\u4e8e\u539f\u6570\u7684\u540e\u5e8f\u904d\u5386</p> <p>A. Pre-order traversal</p> <p>B. In-order traversal</p> <p>C. Post-order traversal</p> <p>D. Level-order traversal</p> <p>\u8f6c\u4e3a\u7684\u65b9\u5f0f\u4e3a\uff1a\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\uff0c\u6b64\u5904\u7684\u5144\u5f1f\u662f\u7236\u4eb2\u7684\u5144\u5f1f\uff0c\u5343\u4e07\u6ce8\u610f</p> <p> </p> <p>\u4ece\u5b9e\u9645\u4f8b\u5b50\u51fa\u53d1\uff0c\u6613\u5f97inorder</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#56-binary-search-tree","title":"5.6 Binary Search Tree","text":"<p>\u5b9a\u4e49\uff1a A binary search tree is a binary tree. It may be empty. If it is not empty, it satisfies the following properties:</p> <p>(1) Every node has a key which is an integer, and the keys are    distinct.</p> <p>(2) The keys in a nonempty left subtree must be smaller than the key in the root of the subtree.</p> <ul> <li>\u82e5\u5b83\u7684\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u3002</li> </ul> <p>(3) The keys in a nonempty right subtree must be larger than the key in the root of the subtree.</p> <ul> <li>\u82e5\u5b83\u7684\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7684\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u3002</li> </ul> <p>(4) The left and right subtrees are also binary search trees.</p> <p><code>\u53f3\u8fb9\u7684\u4efb\u610f\u7ed3\u70b9\u5927\u4e8e\u5de6\u8fb9\u7684\u7ed3\u70b9</code></p> <p></p> <p></p> <p>\u8fd9\u4e2a\u4e5f\u662f\u4e8c\u5206\u67e5\u627e\u6811\uff0c\u5de6\u5b50\u6811\u5c0f\u4e8eroot\u540c\u6837\u9002\u7528\u4e8e\u53f3\u8fb9\u7684\u6811</p> <p>SearchTree MakeEmpty( SearchTree T ); </p> <p>Position Find( ElementType X, SearchTree T ); </p> <p>Position FindMin( SearchTree T ); </p> <p>Position FindMax( SearchTree T ); </p> <p>SearchTree Insert( ElementType X, SearchTree T ); </p> <p>SearchTree Delete( ElementType X, SearchTree T ); </p> <p>ElementType Retrieve(Position P ); </p> <p></p> <ol> <li> <p>\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(depth),\u4e5f\u5c31\u662fO\uff08logN\uff09</p> </li> <li> <p>\u6700\u5927\u503c\u4e0d\u4e00\u5b9a\u5728\u53f6\u7ed3\u70b9\u4e0a\uff0c\u56e0\u4e3a\u5b83\u7684\u5de6\u513f\u5b50\u53ef\u80fd\u5b58\u5728\uff0c\u4f46\u662f\u53f3\u513f\u5b50\u4e0d\u5b58\u5728\uff0c\u4f9d\u7136\u662f\u6700\u5927\u503c</p> </li> <li> <p>\u4f46\u662f\u6700\u5c0f\u503c\u4e00\u5b9a\u5728\u53f6\u7ed3\u70b9\u4e0a\uff0c\u56e0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5de6\u513f\u5b50\u4e0d\u5b58\u5728\uff0c\u5219\u8be5\u8282\u70b9\u4e3a\u6700\u5c0f\u503c\uff0c\u5de6\u513f\u5b50\u5b58\u5728\uff0c\u5219\u5de6\u513f\u5b50\u662f\u6700\u5c0f\u503c</p> </li> <li> <p><code>\u770b\u524d\u63d0\u6761\u4ef6\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5de6\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u4e00\u5b9a\u6bd4\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u591a</code>\uff0c\u6240\u4ee5\u4e2d\u4f4d\u6570\u4e00\u5b9a\u5728\u6839\u7ed3\u70b9\uff08\u5de6\u53f3\u5b57\u6811\u7ed3\u70b9\u6570\u76f8\u540c\uff09\u6216\u8005\u5de6\u5b50\u6811</p> </li> </ol> <p>3.\u5728\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u67e5\u627e63\uff0c\u5e8f\u521739\u3001101\u300125\u300180\u300170\u300159\u300163\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u67e5\u627e\u65f6\u7684\u7ed3\u70b9\u503c\u6bd4\u8f83\u5e8f\u5217\u3002</p> <p>F \u00d7</p> <p>\u4e00\u4e2a\u6bd4\u8f83\u5b9e\u7528\u7684\u5224\u65ad\u65b9\u6cd5\u662f\u5982\u679c\u5e8f\u5217\u524d\u4e00\u4e2a\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48\u66f4\u65b0\u533a\u95f4\u7684\u6700\u5927\u503c\u4e3a\u5f53\u524d\u5143\u7d20\uff1b\u5982\u679c\u5e8f\u5217\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5927\uff0c\u90a3\u4e48\u66f4\u65b0\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4e3a\u5f53\u524d\u5143\u7d20\u3002\u4e4b\u540e\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5fc5\u987b\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u3002\u6839\u636e\u8fd9\u4e2a\u89c4\u5219\uff0c\u5f53\u8fd0\u884c\u523070\u7684\u65f6\u5019\u533a\u95f4\u5df2\u7ecf\u662f(70,80)\uff0c\u800c\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f59\u3002</p> <p>\\((39, +\\infty),(39,101)\\)\u6b64\u65f6\u51fa\u73b025\uff0c\u4e0d\u5728\u533a\u95f4\u8303\u56f4\u5185\uff0c\u51fa\u73b0\u9519\u8bef</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#560","title":"5.6.0 \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49","text":"<pre><code>//\u5b9a\u4e49\u4e8c\u5206\u641c\u7d22\u6811\u7ed3\u6784\u4f53\ntypedef struct TreeNode* Tree; // tree \u4ee3\u8868struct TreeNode*\nstruct TreeNode{\n    int data;\n    Tree left;\n    Tree right;\n}TreeNode;\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#561-insert","title":"5.6.1 Insert \u6dfb\u52a0\u7ed3\u70b9","text":"<pre><code>Tree Insert(Tree T, int value)\n{\n    if(T == NULL)\n    {\n        T = (Tree)malloc(sizeof(TreeNode));\n        T-&gt;data = value;\n        T-&gt;left = NULL;\n        T-&gt;right = NULL;\n        return T;\n    }\n    else\n    {\n        if(value &lt; T-&gt;data)\n        {\n            T-&gt;left = Insert(T-&gt;left, value);\n        }\n        else if(value &gt; T-&gt;data)\n        {\n            T-&gt;right = Insert(T-&gt;right, value);\n        }\n        return T;\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#562-findmin-findmax","title":"5.6.2 Findmin \u548c Findmax","text":"<pre><code>int Findmin(Tree T)\n{\n    if(T == NULL)\n    {\n        return -1;\n    }\n    else if(T-&gt;left == NULL)\n    {\n        return T-&gt;data;\n    }\n    else\n    {\n        return Findmin(T-&gt;left);\n    }\n}\nTree Findmin1(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else if(T-&gt;left == NULL)\n    {\n        return T;\n    }\n    else\n    {\n        return Findmin1(T-&gt;left);\n    }\n}\nint Iter_Findmin(Tree T)\n{\n    if(T != NULL)\n    {\n        int min = T-&gt;data;\n        while(T-&gt;left != NULL)\n        {\n            T = T-&gt;left;\n            min = T-&gt;data;\n        }\n        return min;\n    }\n    return -1;\n}\n// Findmax \u627e\u5230\u6811\u7684\u6700\u5927\u503c\nint Findmax(Tree T)\n{\n    if(T == NULL)\n    {\n        return -1;\n    }\n    else if(T-&gt;right == NULL)\n    {\n        return T-&gt;data;\n    }\n    else\n    {\n        return Findmax(T-&gt;right);\n    }\n}\nTree Findmax1(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else if(T-&gt;right == NULL)\n    {\n        return T;\n    }\n    else\n    {\n        return Findmax1(T-&gt;right);\n    }\n}\nint Iter_Findmax(Tree T)\n{\n    if(T != NULL)\n    {\n        int max = T-&gt;data;\n        while(T-&gt;right != NULL)\n        {\n            T = T-&gt;right;\n            max = T-&gt;data;\n        }\n        return max;\n    }\n    return -1;\n}\n// \u5220\u9664\u6700\u5c0f\u503c\u7684\u7ed3\u70b9\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#563","title":"5.6.3 \u904d\u5386","text":"<pre><code>void Preorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        printf(\"%d \", T-&gt;data);\n        Preorder(T-&gt;left);\n        Preorder(T-&gt;right);\n    }\n}\n// \u4e2d\u5e8f\u904d\u5386\uff0c left --- root --- right\nvoid Inorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        Inorder(T-&gt;left);\n        printf(\"%d \", T-&gt;data);\n        Inorder(T-&gt;right);\n    }\n}\n// \u540e\u5e8f\u904d\u5386\uff0c left --- right --- root\nvoid Postorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        Postorder(T-&gt;left);\n        Postorder(T-&gt;right);\n        printf(\"%d \", T-&gt;data);\n    }\n}\n// \u5c42\u5e8f\u904d\u5386\nvoid Levelorder(Tree T)\n{\n    if(T)\n    {\n        Tree queue[100];\n        int front = 0, rear = 0;\n        queue[rear++] = T;\n        while(front != rear)\n        {\n            Tree temp = queue[front++];\n            printf(\"%d \", temp-&gt;data);\n            if(temp-&gt;left)\n            {\n                queue[rear++] = temp-&gt;left;\n            }\n            if(temp-&gt;right)\n            {\n                queue[rear++] = temp-&gt;right;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#564-delete","title":"5.6.4 Delete","text":"<p>Delete a leaf node : Reset its parent link to NULL.</p> <p>Delete a degree 1 node : Replace the node by its single child.</p> <p>Delete a degree 2 node :</p> <ul> <li>Replace the node by the largest one in its left subtree or the smallest one in its right subtree.</li> </ul> <p>\u7528\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6216\u8005\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\u8fdb\u884c\u66ff\u6362</p> <ul> <li>Delete the replacing node from the subtree.</li> </ul> <p>\u518d\u5c06\u66ff\u6362\u7528\u7684\u6570\u8fdb\u884c\u5220\u9664</p> <pre><code>Tree DeleteMin(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;left == NULL)\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            T-&gt;left = DeleteMin(T-&gt;left);\n            return T;\n        }\n    }\n}\nTree DeleteMin_Iter(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;left == NULL)\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            Tree parent = T;\n            Tree child = T-&gt;left;\n            while(child-&gt;left != NULL)\n            {\n                parent = child;\n                child = child-&gt;left;\n            }\n            // now child is the min node\n            // \u5982\u679cchild-&gt;right \u5b58\u5728\uff0c\u90a3\u4e48\u7528child-&gt;right\u9876\u66ffchild\u7684\u4f4d\u7f6e\n            parent-&gt;left = child-&gt;right;\n            free(child);\n            return T;\n        }\n    }\n}\n// \u5220\u9664\u6700\u5927\u503c\u7684\u7ed3\u70b9\nTree DeleteMax(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;right == NULL)\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            T-&gt;right = DeleteMax(T-&gt;right);\n            return T;\n        }\n    }\n}\nTree DeleteMax_Iter(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;right == NULL)\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            Tree parent = T;\n            Tree child = T-&gt;right;\n            while(child-&gt;right != NULL)\n            {\n                parent = child;\n                child = child-&gt;right;\n            }\n            parent-&gt;right = child-&gt;left;\n            free(child);\n            return T;\n\n        }\n    }\n}\n</code></pre> <pre><code>// \u5220\u9664\u6307\u5b9a\u503c\u7684\u7ed3\u70b9\n// Delete a leaf node :  Reset its parent link to NULL.\n// Delete a degree 1 node :  Replace the node by its single child.\n// Delete a degree 2 node :  Replace the node by the largest one in its left subtree or the smallest one in its right subtree.\n// Delete the replacing node from the subtree.\nTree Delete(Tree T, int value)\n{\n    if(T == NULL)\n    {\n        printf(\"Element not found\\n\");\n        return NULL;\n    }\n    else if(value &lt; T-&gt;data)\n    {\n        T-&gt;left = Delete(T-&gt;left, value);\n        return T;\n    }\n    else if(value &gt; T-&gt;data)\n    {\n        T-&gt;right = Delete(T-&gt;right, value);\n        return T;\n    }\n    else // value == T-&gt;data  \u5206leaf,degree = 1, degree = 2 \u8fdb\u884c\u8ba8\u8bba\n    {   \n        if(T-&gt;left == NULL &amp;&amp; T-&gt;right == NULL) // leaf\n        {\n            free(T);\n            return NULL;\n        }\n        else if(T-&gt;left == NULL) // degree = 1;\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else if(T-&gt;right == NULL) // degree = 1;\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else // degree = 2;\n        {\n            // replace the node by the smallest one in its right subtree\n            // Tree temp = Findmin1(T-&gt;right);\n            // T-&gt;data = temp-&gt;data;\n            // T-&gt;right = Delete(T-&gt;right, temp-&gt;data);\n            // return T;\n            // replace the node by the largest one in its left subtree\n            Tree temp = Findmax1(T-&gt;left);\n            T-&gt;data = temp-&gt;data;\n            T-&gt;left = Delete(T-&gt;left, temp-&gt;data);\n            return T;\n        }\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#565","title":"5.6.5 \u6c47\u603b","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\n//\u5b9a\u4e49\u4e8c\u5206\u641c\u7d22\u6811\u7ed3\u6784\u4f53\ntypedef struct TreeNode* Tree; // tree \u4ee3\u8868struct TreeNode*\nstruct TreeNode{\n    int data;\n    Tree left;\n    Tree right;\n}TreeNode;\n\n//\u5b9a\u4e49\u4e8c\u5206\u641c\u7d22\u6811\u7684\u63d2\u5165\u51fd\u6570\nTree Insert(Tree T, int value)\n{\n    if(T == NULL)\n    {\n        T = (Tree)malloc(sizeof(TreeNode));\n        T-&gt;data = value;\n        T-&gt;left = NULL;\n        T-&gt;right = NULL;\n        return T;\n    }\n    else\n    {\n        if(value &lt; T-&gt;data)\n        {\n            T-&gt;left = Insert(T-&gt;left, value);\n        }\n        else if(value &gt; T-&gt;data)\n        {\n            T-&gt;right = Insert(T-&gt;right, value);\n        }\n        return T;\n    }\n}\n// \u524d\u5e8f\u904d\u5386\uff0c root --- left --- right\nvoid Preorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        printf(\"%d \", T-&gt;data);\n        Preorder(T-&gt;left);\n        Preorder(T-&gt;right);\n    }\n}\n// \u4e2d\u5e8f\u904d\u5386\uff0c left --- root --- right\nvoid Inorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        Inorder(T-&gt;left);\n        printf(\"%d \", T-&gt;data);\n        Inorder(T-&gt;right);\n    }\n}\n// \u540e\u5e8f\u904d\u5386\uff0c left --- right --- root\nvoid Postorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        Postorder(T-&gt;left);\n        Postorder(T-&gt;right);\n        printf(\"%d \", T-&gt;data);\n    }\n}\n// Findmin \u627e\u5230\u6811\u7684\u6700\u5c0f\u503c\nint Findmin(Tree T)\n{\n    if(T == NULL)\n    {\n        return -1;\n    }\n    else if(T-&gt;left == NULL)\n    {\n        return T-&gt;data;\n    }\n    else\n    {\n        return Findmin(T-&gt;left);\n    }\n}\nTree Findmin1(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else if(T-&gt;left == NULL)\n    {\n        return T;\n    }\n    else\n    {\n        return Findmin1(T-&gt;left);\n    }\n}\nint Iter_Findmin(Tree T)\n{\n    if(T != NULL)\n    {\n        int min = T-&gt;data;\n        while(T-&gt;left != NULL)\n        {\n            T = T-&gt;left;\n            min = T-&gt;data;\n        }\n        return min;\n    }\n    return -1;\n}\n// Findmax \u627e\u5230\u6811\u7684\u6700\u5927\u503c\nint Findmax(Tree T)\n{\n    if(T == NULL)\n    {\n        return -1;\n    }\n    else if(T-&gt;right == NULL)\n    {\n        return T-&gt;data;\n    }\n    else\n    {\n        return Findmax(T-&gt;right);\n    }\n}\nTree Findmax1(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else if(T-&gt;right == NULL)\n    {\n        return T;\n    }\n    else\n    {\n        return Findmax1(T-&gt;right);\n    }\n}\nint Iter_Findmax(Tree T)\n{\n    if(T != NULL)\n    {\n        int max = T-&gt;data;\n        while(T-&gt;right != NULL)\n        {\n            T = T-&gt;right;\n            max = T-&gt;data;\n        }\n        return max;\n    }\n    return -1;\n}\n// \u5220\u9664\u6700\u5c0f\u503c\u7684\u7ed3\u70b9\nTree DeleteMin(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;left == NULL)\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            T-&gt;left = DeleteMin(T-&gt;left);\n            return T;\n        }\n    }\n}\n// \u5220\u9664\u6700\u5927\u503c\u7684\u7ed3\u70b9\nTree DeleteMax(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;right == NULL)\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            T-&gt;right = DeleteMax(T-&gt;right);\n            return T;\n        }\n    }\n}\n// \u5220\u9664\u6307\u5b9a\u503c\u7684\u7ed3\u70b9\n// Delete a leaf node :  Reset its parent link to NULL.\n// Delete a degree 1 node :  Replace the node by its single child.\n// Delete a degree 2 node :  Replace the node by the largest one in its left subtree or the smallest one in its right subtree.\n// Delete the replacing node from the subtree.\nTree Delete(Tree T, int value)\n{\n    if(T == NULL)\n    {\n        printf(\"Element not found\\n\");\n        return NULL;\n    }\n    else if(value &lt; T-&gt;data)\n    {\n        T-&gt;left = Delete(T-&gt;left, value);\n        return T;\n    }\n    else if(value &gt; T-&gt;data)\n    {\n        T-&gt;right = Delete(T-&gt;right, value);\n        return T;\n    }\n    else // value == T-&gt;data  \u5206leaf,degree = 1, degree = 2 \u8fdb\u884c\u8ba8\u8bba\n    {   \n        if(T-&gt;left == NULL &amp;&amp; T-&gt;right == NULL) // leaf\n        {\n            free(T);\n            return NULL;\n        }\n        else if(T-&gt;left == NULL) // degree = 1;\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else if(T-&gt;right == NULL) // degree = 1;\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else // degree = 2;\n        {\n            // replace the node by the smallest one in its right subtree\n            // Tree temp = Findmin1(T-&gt;right);\n            // T-&gt;data = temp-&gt;data;\n            // T-&gt;right = Delete(T-&gt;right, temp-&gt;data);\n            // return T;\n            // replace the node by the largest one in its left subtree\n            Tree temp = Findmax1(T-&gt;left);\n            T-&gt;data = temp-&gt;data;\n            T-&gt;left = Delete(T-&gt;left, temp-&gt;data);\n            return T;\n        }\n    }\n}\n//\u8fdb\u884c\u51fd\u6570\u7684\u58f0\u660e\nint main()\n{\n    //      3\n    //  2        4\n    //1             7\n    //            5   8 \n    //             6    9\n    Tree T;\n    T = (Tree) malloc(sizeof(TreeNode));\n    T = NULL;\n    T = Insert(T, 3);\n    T = Insert(T, 2);\n    T = Insert(T, 4);\n    T = Insert(T, 1);\n    T = Insert(T, 7);\n    T = Insert(T, 5);\n    T = Insert(T, 8);\n    T = Insert(T, 6);\n    T = Insert(T, 9);\n    printf(\"Preorder: \");\n    Preorder(T);\n    printf(\"\\n\");\n    printf(\"Inorder: \");\n    Inorder(T);\n    printf(\"\\n\");\n    printf(\"Postorder: \");\n    Postorder(T);\n    printf(\"\\n\");\n    // printf(\"Levelorder: \");\n    // Levelorder(T);\n    // printf(\"\\n\");\n    printf(\"Min: %d\\n\", Iter_Findmin(T));\n    printf(\"Max: %d\\n\", Iter_Findmax(T));\n    // T = DeleteMin(T);\n    // printf(\"Min: %d\\n\", Iter_Findmin(T));\n    // Inorder(T);\n    // printf(\"\\n\");\n    T = Delete(T,7);\n    Inorder(T);\n    printf(\"\\n\");\n}\n</code></pre> <p>![image-20240115203516757](</p> <p>)</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#heap","title":"\u516d. \u5806heap","text":"<p>\u4ec0\u4e48\u662f\u4f18\u5148\u961f\u5217\uff1f</p> <p></p> <ol> <li>\u4f18\u5148\u961f\u5217\u7684\u4e3b\u8981\u64cd\u4f5c</li> </ol> <ul> <li>\\(insert(key, data):\\)\u63d2\u5165\u952e\u503c\u4e3akey\u7684\u6570\u636e\u5230\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u5143\u7d20\u4ee5\u5176key\u8fdb\u884c\u6392\u5e8f</li> <li>\\(deleteMin/deleteMax:\\) \u5220\u9664\u5e76\u8fd4\u56de\u6700\u5c0f\u6700\u5927\u952e\u503c\u7684\u5143\u7d20</li> <li>\\(getMin/getMax:\\)\u8fd4\u56de\u6700\u5c0f\u6700\u5927\u952e\u503c\u7684\u5143\u7d20\uff0c\u5e76\u4e0d\u5220\u9664\u5b83</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#61","title":"6.1 \u7528\u5806\u5b9e\u73b0\u4f18\u5148\u961f\u5217","text":"<p>\u5148\u660e\u786e\u4e00\u4e0b\u4ec0\u4e48\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff08complete binary tree\uff09 \u548c \u6ee1\u4e8c\u53c9\u6811\u6216\u8005\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff08full binary tree / perfect binary tree\uff09</p> <ul> <li> <p>\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5982\u679c\u6bcf\u4e00\u5c42\u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u90a3\u8fd9\u4e2a\u4e8c\u53c9\u6811\u5c31\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u4e5f\u5c31\u8bf4\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7ed3\u70b9\u7684\u603b\u6570\u4e3a\\(2^k -1\\)</p> </li> <li> <p>```python3     \u4e00\u9897\u6811\u6df1\u5ea6\u4e3ah\uff0c\u6700\u5927\u5c42\u6570\u4e3ak\uff0c\u6df1\u5ea6\u4e0e\u6700\u5927\u5c42\u6570\u76f8\u540c\uff0ck=h;     \u5b83\u7684\u53f6\u5b50\u6570\u662f\uff1a 2^h\u3000\u3000\u7b2ck\u5c42\u7684\u7ed3\u70b9\u6570\u662f\uff1a 2^(k-1)\u3000\u3000\u603b\u7ed3\u70b9\u6570\u662f\uff1a 2^k-1 (2\u7684k\u6b21\u65b9\u51cf\u4e00)\u3000\u3000\u603b\u8282\u70b9\u6570\u4e00\u5b9a\u662f\u5947\u6570\u3002</p> <pre><code>                                  0\n                        /               \\\n                       1                   2\n                    /      \\            /       \\\n                  3        4         5           6\n                 /  \\    /   \\     /    \\       /   \\\n              7    8  9     10  11     12    13     14\n</code></pre> <p>```</p> </li> <li> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u6570\u662f\u4efb\u610f\u7684\uff0c\u4ece\u5f62\u5f0f\u4e0a\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u4e2a\u7f3a\u5931\u7684\u4e09\u89d2\u5f62\uff0c<code>\u6240\u7f3a\u5931\u7684\u90e8\u5206\u4e00\u5b9a\u662f\u53f3\u4e0b\u89d2\u67d0\u4e2a\u8fde\u7eed\u7684\u90e8\u5206\uff0c\u6700\u540e\u4e00\u884c\u53ef\u80fd\u4e0d\u5b8c\u6574</code></p> </li> <li> <p>\u5bf9\u4e8ek\u5c42\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u7ed3\u70b9\u6570\u7684\u8303\u56f4\u662f\\(2^{k-1}-1 &lt; N &lt; 2^k -1\\)</p> </li> <li> <p>```text     \u8bbe\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3ah\uff0c\u9664\u7b2c h \u5c42\u5916\uff0c\u5176\u5b83\u5404\u5c42 (1\uff5eh-1) \u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u4e2a\u6570\uff0c\u7b2c h \u5c42\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c     \u8fd9\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002</p> <pre><code>                                          0\n                                 /               \\\n                              1                   2\n                          /      \\            /       \\\n                        3        4         5           6\n                      /  \\    /   \\     /    \n                    7    8  9     10  11\n</code></pre> <p>```</p> </li> </ul> <p></p> <p>\u6700\u5c0f\u5806\u7684\u6700\u5927\u503c\u4e00\u5b9a\u5728\u53f6\u8282\u70b9\uff0c\u73b0\u5728\u8f6c\u4e3a\u5224\u65ad\u54ea\u4e2a\u70b9\u4e0d\u662f\u53f6\u7ed3\u70b9\u3002</p> <p>\u5bf9\u4e8e\u53f6\u7ed3\u70b9n\uff0c\u4e0d\u5b58\u5728\u5b50\u7ed3\u70b9\uff0c\u90a3\u4e482n+1\u4e00\u5b9a\u4e0d\u57282333\u4e2d</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#611-structure-property","title":"6.1.1 Structure Property","text":"<ol> <li>\u5806\u662f\u4e00\u9897\u5177\u6709\u7279\u5b9a\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff0c<code>\u5806\u7684\u57fa\u672c\u8981\u6c42\u662f\u5806\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5fc5\u987b\u5927\u4e8e\u6216\u8005\u7b49\u4e8e\uff08\u5c0f\u4e8e\u7b49\u4e8e\uff09\u5176\u5b69\u5b50\u7ed3\u70b9\u7684\u503c</code>\u3002\u9644\u52a0\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a\u6240\u6709\u7684\u53f6\u5b50\u7ed3\u70b9\u90fd\u5904\u4e8e\u7b2c h \u5c42 \u6216\u8005 h - 1\u5c42\uff0c\uff08\u5373\u6700\u540e\u4e00\u5c42\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c\u4e14\u53ef\u80fd\u4e0d\u5b8c\u6574\uff09</li> </ol> <ol> <li>\u53ef\u4ee5\u7528\u6570\u7ec4\u5f62\u5f0f\u8868\u793a\u5806\uff0c<code>`array representation</code></li> </ol> <p>\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4f9d\u6b21\u6392\u5217\uff0c\u4f46\u662f\u662f\u4eceBT[1]\u5f00\u59cb\uff0cBT[0]\u4f5c\u4e3a\u54e8\u5175</p> <p></p> <p></p> <ol> <li>\u5806\u7684\u5206\u7c7b</li> </ol> <p>A min tree is a tree in which the key value in each node is no larger than the key values in its children (if any).</p> <p>A min heap is a complete binary tree that is also a min tree.</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#612","title":"6.1.2 \u5806\u7684\u82e5\u5e72\u64cd\u4f5c","text":"<ol> <li>\u5806\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49</li> </ol> <pre><code>typedef struct Heapstruct{\n    int Capacity;\n    int Size;\n    int *Elements;\n}*MinHeap;\n// \u5806\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u7ed3\u6784\u548c\u6570\u7ec4\n</code></pre> <ol> <li>\u5806\u7684\u521d\u59cb\u5316</li> </ol> <pre><code>MinHeap Initialize(int MaxElements)\n{\n    MinHeap H;\n    H = (MinHeap)malloc(sizeof(struct Heapstruct));\n    if(H == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    // Allocate the array plus one extra for sentinel\uff08\u7ed9\u54e8\u5175\u4fdd\u7559\u4e00\u4e2a\u4f4d\u7f6e\uff09\n    H-&gt;Elements = (int *)malloc(sizeof(int) * (MaxElements + 1));\n    // \u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\n    if(H-&gt;Elements == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    // \u521b\u5efa\u7684\u6570\u7ec4\u7684\u5bb9\u91cf\uff0c\u4e0d\u5305\u62ec\u54e8\u5175\n    H-&gt;Capacity = MaxElements;\n    // \u5df2\u6709\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\n    H-&gt;Size = 0;\n    // Set the sentinel;\n    H-&gt;Elements[0] = -1;\n    return H;\n}\n</code></pre> <ol> <li>\u5806\u7684\u63d2\u5165 insertion</li> </ol> <p>\u6bcf\u6b21\u63d2\u5165\u90fd\u662f\u5c06\u5148\u5c06\u65b0\u6570\u636e\u653e\u5728\u6570\u7ec4\u6700\u540e\uff0c\u7531\u4e8e\u4ece\u8fd9\u4e2a\u65b0\u6570\u636e\u7684\u7236\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u5fc5\u7136\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u73b0\u5728\u7684\u4efb\u52a1\u662f\u5c06\u8fd9\u4e2a\u65b0\u6570\u636e\u63d2\u5165\u5230\u8fd9\u4e2a\u6709\u5e8f\u5e8f\u5217\u4e2d\u2014\u2014\u8fd9\u5c31\u7c7b\u4f3c\u4e8e\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u4e2d\u5c06\u4e00\u4e2a\u6570\u636e\u5e76\u5165\u5230\u6709\u5e8f\u533a\u95f4\u4e2d\u3002</p> <p>\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u63d2\u5165\u4f8b\u5b50\u6765\u770b\u770b\u63d2\u5165\u64cd\u4f5c\u7684\u7ec6\u8282\u3002\u6211\u4eec\u5c06\u6570\u5b57 <code>16</code> \u63d2\u5165\u5230\u8fd9\u4e2a\u5806\u4e2d\uff1a</p> <p></p> <p>\u7b2c\u4e00\u6b65\u662f\u5c06\u65b0\u7684\u5143\u7d20\u63d2\u5165\u5230\u6570\u7ec4\u7684\u5c3e\u90e8\uff0c\u6570\u7ec4\u53d8\u6210\uff1a[ 10, 7, 2, 5, 1, 16 ]\uff1b</p> <p>\u76f8\u5e94\u7684\u6811\u53d8\u6210\u4e86\uff1a</p> <p></p> <p>16 \u88ab\u6dfb\u52a0\u6700\u540e\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u3002</p> <p>\u4e0d\u884c\u7684\u662f\uff0c\u73b0\u5728\u5806\u5c5e\u6027\u4e0d\u6ee1\u8db3\uff0c\u56e0\u4e3a 2 \u5728 16 \u7684\u4e0a\u9762\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5927\u7684\u6570\u5b57\u5728\u4e0a\u9762\uff08\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u5806\uff09</p> <p>\u4e3a\u4e86\u6062\u590d\u5806\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u4ea4\u6362 16 \u548c 2\u3002</p> <p></p> <p>\u73b0\u5728\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u56e0\u4e3a 10 \u4e5f\u6bd4 16 \u5c0f\u3002\u6211\u4eec\u7ee7\u7eed\u4ea4\u6362\u6211\u4eec\u7684\u63d2\u5165\u5143\u7d20\u548c\u5b83\u7684\u7236\u8282\u70b9\uff0c\u76f4\u5230\u5b83\u7684\u7236\u8282\u70b9\u6bd4\u5b83\u5927\u6216\u8005\u6211\u4eec\u5230\u8fbe\u6811\u7684\u9876\u90e8\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 shift-up\uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u540e\u90fd\u9700\u8981\u8fdb\u884c\u3002\u5b83\u5c06\u4e00\u4e2a\u592a\u5927\u6216\u8005\u592a\u5c0f\u7684\u6570\u5b57\u201c\u6d6e\u8d77\u201d\u5230\u6811\u7684\u9876\u90e8\u3002</p> <p>\u6700\u540e\u6211\u4eec\u5f97\u5230\u7684\u5806\uff1a</p> <p></p> <p>\u73b0\u5728\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u90fd\u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5927\u3002</p> <pre><code>// \u76ee\u524d\u54e8\u5175sentinel Elements[0] \u662f\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u5373\u6b64\u65f6\u7684\u5806\u662f\u6700\u5c0f\u5806\nvoid Insert(int x, MinHeap H)\n{\n    int i;\n    if(H-&gt;Size == H-&gt;Capacity)\n    {\n        printf(\"Priority queue is full!\\n\");\n        return;\n    }\n    // ++H-&gt;Size is the position of the new node\n    // \u4e14\u5df2\u7ecf\u4f7f\u5f97H-&gt;Size\u52a0\u4e00\n    for( i = ++H-&gt;Size; H-&gt;Elements[i/2] &gt; x; i /= 2)\n    {\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = x;\n}\n\n// \u6216\u8005\u4f7f\u7528PercolateUp\u51fd\u6570\nvoid PercolateDown(MinHeap H, int i)\n{\n    int x = H-&gt;Elements[i];\n    int j;\n    for(j = i; j * 2 &lt;= H-&gt;Size &amp;&amp; x &gt; H-&gt;Elements[j * 2]; j *= 2)\n    {\n        H-&gt;Elements[j] = H-&gt;Elements[j * 2];\n    }\n    H-&gt;Elements[j] = x;\n}\nvoid Insert2(MinHeap H, int x)\n{\n    if(H-&gt;Size == H-&gt;Capacity)\n    {\n        printf(\"Priority queue is full!\\n\");\n        return;\n    }\n    H-&gt;Elements[++H-&gt;Size] = x;\n    PercolateUp(H, H-&gt;Size);\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a T\uff08N\uff09 = O\uff08\\(log N\\)\uff09</p> <p>4 . \u5806\u6700\u5c0f\u5143\u7d20\u7684\u5220\u9664deleteMin</p> <p>\u5806\u4e2d\u6bcf\u6b21\u90fd\u53ea\u80fd\u5220\u9664\u5806\u9876\u5143\u7d20\u3002\u4e3a\u4e86\u4fbf\u4e8e\u91cd\u5efa\u5806\uff0c\u5b9e\u9645\u7684\u64cd\u4f5c\u662f\u5c06\u6700\u540e\u4e00\u4e2a\u6570\u636e\u7684\u503c\u8d4b\u7ed9\u6839\u7ed3\u70b9\uff0c\u7136\u540e\u518d\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u8fdb\u884c\u4e00\u6b21\u4ece\u4e0a\u5411\u4e0b\u7684\u8c03\u6574\u3002\u8c03\u6574\u65f6\u5148\u5728\u5de6\u53f3\u5b50\u7ed3\u70b9\u4e2d\u627e\u6700\u5c0f\u7684\uff0c\u5982\u679c\u7236\u7ed3\u70b9\u6bd4\u8fd9\u4e2a\u6700\u5c0f\u7684\u5b50\u7ed3\u70b9\u8fd8\u5c0f\u8bf4\u660e\u4e0d\u9700\u8981\u8c03\u6574\u4e86\uff0c\u53cd\u4e4b\u5c06\u7236\u7ed3\u70b9\u548c\u5b83\u4ea4\u6362\u540e\u518d\u8003\u8651\u540e\u9762\u7684\u7ed3\u70b9\u3002\u76f8\u5f53\u4e8e\u6839\u7ed3\u70b9\u6570\u636e\u7684\u201c\u4e0b\u6c89\u201d\u8fc7\u7a0b\u3002</p> <p></p> <p></p> <p></p> <p></p> <pre><code>int DeleteMin(MinHeap H)\n{\n    int i, Child;\n    int MinElement, LastElement;\n    if(H-&gt;Size == 0)\n    {\n        printf(\"Priority queue is empty!\\n\");\n        return H-&gt;Elements[0];\n    }\n    // \u4fdd\u5b58\u6700\u5c0f\u7684\u5143\u7d20\uff0c \u6700\u5c0f\u5806\u7684\u8bdd\u662f\u6839\u8282\u70b9\n    MinElement = H-&gt;Elements[1];\n    // Size + 1 \u8868\u793a\u5143\u7d20\u7684\u4e2a\u6570\uff0c Size \u8868\u793a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\n    LastElement = H-&gt;Elements[H-&gt;Size];\n    H-&gt;Size--; // \u4f7f\u5f97Size\u51cf\u4e00\uff0c\u5220\u9664top\u5143\u7d20\uff0c\u610f\u5473\u7740\uff0csize-1\n    // \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3\n    for( i = 1 ; i * 2 &lt;= H-&gt;Size; i = child)\n    {\n        // Child is the smaller child of the current node\n        // \u5148\u9009\u51fa\u5de6\u53f3\u5b69\u5b50\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        Child = i * 2;\n        if(Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child + 1] &lt; H-&gt;Elements[Child])\n        {\n            // \u5982\u679c\u53f3\u513f\u5b50\u6bd4\u5de6\u513f\u5b50\u8fd8\u5c0f\uff0cchild\u4e0b\u6807+1\u6307\u5411\u53f3\u513f\u5b50\n            Child ++;\n        }\n        // \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5927\u4e8e\u513f\u5b50\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\u503c\uff0c\u90a3\u4e48\u5c31\u628a\u8f83\u5c0f\u7684\u90a3\u4e2a\u503c\u4e0a\u79fb\uff0c\u8c03\u6362\u4f4d\u7f6e\n        if(LastElement &gt; H-&gt;Elements[Child])\n        {\n            H-&gt;Elements[i] = H-&gt;Elements[Child];\n        }\n        else\n        {\n            break;\n        }\n    }\n    // \u6b64\u65f6LastElement\u7684\u503c\u5c0f\u4e8eH-&gt;Elements[Child]\uff0c\u6240\u4ee5\u5e94\u8be5\u653e\u5728parent\uff0c\u4e5f\u5c31\u662fi\u7684\u4f4d\u7f6e\n    H-&gt;Elements[i] = LastElement;\n    return MinElement;\n}\n\n// \u6216\u8005\u4f7f\u7528PercolateDown\u51fd\u6570\nvoid PercolateDown(MinHeap H, int i)\n{\n    int x = H-&gt;Elements[i];\n    int j, child;\n    for(j = i; j * 2 &lt;= H-&gt;Size; j = child)\n    {\n        // \u627e\u5230\u5de6\u53f3\u5b69\u5b50\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        child = j * 2;\n        if(child != H-&gt;Size &amp;&amp; H-&gt;Elements[child] &gt; H-&gt;Elements[child + 1])\n        {\n            child++;\n        }\n        // \u5982\u679c\u8f83\u5c0f\u7684\u90a3\u4e2a\u6bd4x\u5c0f\uff0c\u5c31\u628a\u8f83\u5c0f\u7684\u90a3\u4e2a\u4e0a\u79fb\n        if(x &gt; H-&gt;Elements[child])\n        {\n            H-&gt;Elements[j] = H-&gt;Elements[child];\n        }\n        else\n        {\n            break;\n        }\n    }\n    H-&gt;Elements[j] = x;\n}\nvoid Deletemin2(MinHeap H)\n{\n    if(H-&gt;Size == 0)\n    {\n        printf(\"Priority queue is empty!\\n\");\n        return;\n    }\n    int LastElement = H-&gt;Elements[H-&gt;Size--];\n    // \u5148\u5c06root\u66f4\u6362\u4e3a\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\uff0c\u518d\u5f00\u59cb\u4e0b\u6ee4\u64cd\u4f5c\n    H-&gt;Elements[1] = LastElement;\n    PercolateDown(H, 1);\n}\n</code></pre> <ol> <li>\u51cf\u5c0f\u7ed3\u70b9\u7684\u5143\u7d20\uff0c\u518d\u91cd\u65b0\u6392\u5e8f</li> </ol> <p></p> <p>\u5728\u4f4d\u7f6eP\u5904\uff0c\u51cf\u5c0f\\(\\Delta\\)\uff0c\u518d\u8fdb\u884c\u9012\u5f52\uff08\u6216\u8005for\u5faa\u73af\uff09\u4e0e\u7236\u8282\u70b9\u8fdb\u884c\u6bd4\u8f83</p> <pre><code>void DecreaseKey(MinHeap H, int index, int delta)\n{\n    H-&gt;Elements[index] -= delta;\n    PercolateUp(H, index);\n}\nvoid PercolateUp(MinHeap H, int i)\n{\n    int temp = H-&gt;Elements[i];\n    int j;\n    for(j = i; temp &lt; H-&gt;Elements[j/2]; j /= 2)\n    {\n        H-&gt;Elements[j] = H-&gt;Elements[j/2];\n    }\n    H-&gt;Elements[j] = temp;\n}\n</code></pre> <ol> <li>\u589e\u5927\u7ed3\u70b9\u7684\u5143\u7d20\u503c\uff0c\u518d\u91cd\u65b0\u6392\u5e8f</li> </ol> <p></p> <p>\u5728\u4f4d\u7f6eP\u5904\uff0c\u589e\u52a0\\(\\Delta\\)\uff0c\u518d\u8fdb\u884c\u9012\u5f52\uff08\u6216\u8005for\u5faa\u73af\uff09\u4e0e\u7236\u8282\u70b9\u8fdb\u884c\u6bd4\u8f83</p> <ol> <li>\u5220\u53bb\u67d0\u4e00\u7279\u5b9a\u4f4d\u7f6e\u7684\u7ed3\u70b9\u503c</li> </ol> <p><code>\u5728\u8be5\u4f4d\u7f6e\u5904\uff0c\u4e0d\u65ad\u5730\u51cf\u5c0f\uff0c\u76f4\u81f3\u8fbe\u5230MIN\u7684\u4f4d\u7f6e\uff0c\u518d\u5220\u53bbMin</code></p> <p></p> <ol> <li>\u7ed9\u5b9a\u4e00\u7ec4\u6570\uff0c\u987a\u5e8f\u6784\u5efatree\uff0c\u8be5\u5982\u4f55\u6784\u9020\u5806</li> </ol> <p></p> <pre><code>void PercolateUp(MinHeap H, int i)\n{\n    // i \u662f\u5f53\u524d\u65b0\u63d2\u5165\u5143\u7d20\u7684\u4e0b\u6807\n    int x = H-&gt;Elements[i];\n    // \u5f00\u59cb\u4e0a\u6ee4\u64cd\u4f5c\n    for(; H-&gt;Elements[i / 2] &gt; x; i /= 2)\n    {\n        H-&gt;Elements[i] = H-&gt;Elements[i / 2];\n    }\n    H-&gt;Elements[i] = x;\n}\nvoid PercolateDown(MinHeap H, int i)\n{\n    // i \u662f\u5f53\u524d\u65b0\u63d2\u5165\u5143\u7d20\u7684\u4e0b\u6807\n    int x = H-&gt;Elements[i];\n    int j;\n    for(j = i; j * 2 &lt;= H-&gt;Size; j *= 2)\n    {\n        if(x &gt; H-&gt;Elements[j * 2])\n        {\n            H-&gt;Elements[j] = H-&gt;Elements[j * 2];\n        }\n        else\n        {\n            break;\n        }\n    }\n    H-&gt;Elements[j] = x;\n}\n</code></pre> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#613-d-heaps","title":"6.1.3 d-Heaps","text":"<p>d-Heaps \u662f All nodes have d children</p> <p></p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;math.h&gt;\n\ntypedef struct Heapstruct{\n    int Capacity;\n    int Size;\n    int *Elements;\n}*MinHeap;\n// \u6700\u5c0f\u5806\u7ed3\u6784\u7684\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u4e4b\u540e\u662f\u4e3a\u4e86\u65b9\u4fbf\u63d2\u5165\u6784\u9020\u6700\u5c0f\u5806\nMinHeap Initialize(int MaxElements)\n{\n    MinHeap H;\n    H = (MinHeap)malloc(sizeof(struct Heapstruct));\n    if(H == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    // Allocate the array plus one extra for sentinel\n    H-&gt;Elements = (int *)malloc(sizeof(int) * (MaxElements + 1));\n    if(H-&gt;Elements == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    // \u521b\u5efa\u7684\u6570\u7ec4\u7684\u5bb9\u91cf\uff0c\u4e0d\u5305\u62ec\u54e8\u5175\n    H-&gt;Capacity = MaxElements;\n    // \u5df2\u6709\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\uff0c\u4e0d\u5305\u62ec\u54e8\u5175\n    H-&gt;Size = 0;\n    // Set the sentinel;\n    H-&gt;Elements[0] = -1;\n    return H;\n}\nvoid Insert1(int x, MinHeap H)\n{\n    int i;\n    if(H-&gt;Size == H-&gt;Capacity)\n    {\n        printf(\"Priority queue is full!\\n\");\n        return;\n    }\n    // ++H-&gt;Size is the position of the new node\n    // \u4e14\u5df2\u7ecf\u4f7f\u5f97H-&gt;Size\u52a0\u4e00\n    for( i = ++H-&gt;Size; H-&gt;Elements[i/2] &gt; x; i /= 2)\n    {\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = x;\n}\nvoid PercolateUp(MinHeap H, int i)\n{\n    int temp = H-&gt;Elements[i];\n    int j;\n    for(j = i; temp &lt; H-&gt;Elements[j/2]; j /= 2)\n    {\n        H-&gt;Elements[j] = H-&gt;Elements[j/2];\n    }\n    H-&gt;Elements[j] = temp;\n}\n// \u6216\u8005\u4f7f\u7528percolateup\u51fd\u6570\nvoid Insert2(MinHeap H, int x)\n{\n    if(H-&gt;Size == H-&gt;Capacity)\n    {\n        printf(\"The heap is full!\\n\");\n        return;\n    }\n    H-&gt;Elements[++H-&gt;Size] = x;\n    PercolateUp(H, H-&gt;Size);\n}\nvoid PercolateDown(MinHeap H, int i)\n{\n    int x = H-&gt;Elements[i];\n    int j, child ;\n    for(j = i; j * 2 &lt;= H-&gt;Size; j = child)\n    {\n        // \u627e\u5230\u5de6\u53f3\u5b69\u5b50\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        child = j * 2;\n        if(child != H-&gt;Size &amp;&amp; H-&gt;Elements[child] &gt; H-&gt;Elements[child + 1])\n        {\n            child++;\n        }\n        // \u5982\u679c\u8f83\u5c0f\u7684\u90a3\u4e2a\u6bd4x\u5c0f\uff0c\u5c31\u628a\u8f83\u5c0f\u7684\u90a3\u4e2a\u4e0a\u79fb\n        if(x &gt; H-&gt;Elements[child])\n        {\n            H-&gt;Elements[j] = H-&gt;Elements[child];\n        }\n        else\n        {\n            break;\n        }\n    }\n    H-&gt;Elements[j] = x;\n}\nvoid DeleteMin1(MinHeap H)\n{\n    if(H-&gt;Size == 0)\n    {\n        printf(\"The heap is empty!\\n\");\n        return;\n    }\n    int lastelement = H-&gt;Elements[H-&gt;Size--];\n    H-&gt;Elements[1] = lastelement;\n    // printf(\"%d\\n\", lastelement);\n    PercolateDown(H, 1);\n}\nint DeleteMin2(MinHeap H)\n{\n    int i, Child;\n    int MinElement, LastElement;\n    if(H-&gt;Size == 0)\n    {\n        printf(\"Priority queue is empty!\\n\");\n        return H-&gt;Elements[0];\n    }\n    // \u4fdd\u5b58\u6700\u5c0f\u7684\u5143\u7d20\uff0c \u6700\u5c0f\u5806\u7684\u8bdd\u662f\u6839\u8282\u70b9\n    MinElement = H-&gt;Elements[1];\n    // Size + 1 \u8868\u793a\u5143\u7d20\u7684\u4e2a\u6570\uff0c Size \u8868\u793a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\n    LastElement = H-&gt;Elements[H-&gt;Size];\n    H-&gt;Size--; // \u4f7f\u5f97Size\u51cf\u4e00\n    // \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3\n    for( i = 1 ; i * 2 &lt;= H-&gt;Size; i = child)\n    {\n        // Child is the smaller child of the current node\n        // \u5148\u9009\u51fa\u5de6\u53f3\u5b69\u5b50\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        Child = i * 2;\n        if(Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child + 1] &lt; H-&gt;Elements[Child])\n        {\n            Child ++;\n        }\n        // \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5927\u4e8e\u513f\u5b50\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\u503c\uff0c\u90a3\u4e48\u5c31\u628a\u8f83\u5c0f\u7684\u90a3\u4e2a\u503c\u4e0a\u79fb\uff0c\u8c03\u6362\u4f4d\u7f6e\n        if(LastElement &gt; H-&gt;Elements[Child])\n        {\n            H-&gt;Elements[i] = H-&gt;Elements[Child];\n        }\n        else\n        {\n            break;\n        }\n    }\n    // \u6b64\u65f6LastElement\u7684\u503c\u5c0f\u4e8eH-&gt;Elements[Child]\uff0c\u6240\u4ee5\u5e94\u8be5\u653e\u5728parent\uff0c\u4e5f\u5c31\u662fi\u7684\u4f4d\u7f6e\n    H-&gt;Elements[i] = LastElement;\n    return MinElement;\n}\nvoid Print(MinHeap H)\n{\n    int i, j = 1;\n    for(i = 1; i &lt;= H-&gt;Size; i++)\n    {\n        if(i == j)\n        {\n            printf(\"\\n\");\n            j *= 2;\n        }\n        printf(\"%d \", H-&gt;Elements[i]);\n    }\n    printf(\"\\n\");\n}\nvoid DecreaseKey(MinHeap H, int index, int delta)\n{\n    H-&gt;Elements[index] -= delta;\n    PercolateUp(H, index);\n}\nMinHeap CreateHeap(int MaxSize)\n{\n    MinHeap H = Initialize(MaxSize);\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i++)\n    {\n        scanf(\"%d\", &amp;H-&gt;Elements[i]);\n    }\n    H-&gt;Size = n;\n    for(int i = n/2; i &gt;= 0; i--)\n    {\n        PercolateDown(H, i);\n    }\n    return H;\n}\nint main()\n{\n    MinHeap H = Initialize(100);\n    Insert2(H, 3);\n    Insert2(H, 2);\n    Insert2(H, 4);\n    Insert2(H, 7);\n    Insert2(H, 1);\n    Insert2(H, 8);\n    Insert2(H, 5);\n    Insert2(H, 9);\n    Insert2(H, 6);\n    for(int i = 1; i &lt;= H-&gt;Size; i++)\n    {\n        printf(\"%d \", H-&gt;Elements[i]);\n    }\n    printf(\"\\n\");\n    // DeleteMin1(H);\n    // for(int i = 1; i &lt;= H-&gt;Size; i++)\n    // {\n    //     printf(\"%d \", H-&gt;Elements[i]);\n    // }\n    // printf(\"\\n\");\n    // DeleteMin2(H);\n    // for(int i = 1; i &lt;= H-&gt;Size; i++)\n    // {\n    //     printf(\"%d \", H-&gt;Elements[i]);\n    // }\n    // printf(\"\\n\");\n    DecreaseKey(H, 5, 3);\n    for(int i = 1; i &lt;= H-&gt;Size; i++)\n    {\n        printf(\"%d \", H-&gt;Elements[i]);\n    }\n    printf(\"\\n\");\n    MinHeap H1 = CreateHeap(100);\n    for(int i = 1; i &lt;= H1-&gt;Size; i++)\n    {\n        printf(\"%d \", H1-&gt;Elements[i]);\n    }\n    printf(\"\\n\");\n}\n</code></pre> <p>\u4e13\u4e1a\u6539\u826f\u7248</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef int ElementType;\n#define MinData -1\n\ntypedef struct HeapStruct *PriorityQueue;\nstruct HeapStruct {\n    ElementType  *Elements;\n    int Capacity;\n    int Size;\n};\n\nPriorityQueue Initialize( int MaxElements ); /* details omitted */\n\nvoid PercolateUp( int p, PriorityQueue H );\nvoid PercolateDown( int p, PriorityQueue H );\n\nvoid Insert( ElementType X, PriorityQueue H ) \n{\n    int p = ++H-&gt;Size;\n    H-&gt;Elements[p] = X;\n    PercolateUp( p, H );\n}\n\nElementType DeleteMin( PriorityQueue H ) \n{ \n    ElementType MinElement; \n    MinElement = H-&gt;Elements[1];\n    H-&gt;Elements[1] = H-&gt;Elements[H-&gt;Size--];\n    PercolateDown( 1, H );\n    return MinElement; \n}\nvoid PercolateUp( int p, PriorityQueue H )\n{\n    // p \u662f\u5f53\u524d\u65b0\u63d2\u5165\u5143\u7d20\u7684\u4e0b\u6807\n    int x = H-&gt;Elements[p];\n    int i;\n    for(i = p; H-&gt;Elements[i/2] &gt; x; i /= 2)\n    {\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = x;\n}\nvoid PercolateDown( int p, PriorityQueue H )\n{\n    int x = H-&gt;Elements[p];\n    int i;\n    for(i = p; H-&gt;Elements[i * 2] &lt; x &amp;&amp; i * 2 &lt;= H-&gt;Size; i *= 2)\n    {\n        H-&gt;Elements[i] = H-&gt;Elements[i * 2];\n    }\n    H-&gt;Elements[i] = x;\n}\nint main()\n{\n    int n, i, op, X;\n    PriorityQueue H;\n\n    scanf(\"%d\", &amp;n);\n    H = Initialize(n);\n    for ( i=0; i&lt;n; i++ ) {\n        scanf(\"%d\", &amp;op);\n        switch( op ) {\n        case 1:\n            scanf(\"%d\", &amp;X);\n            Insert(X, H);\n            break;\n        case 0:\n            printf(\"%d \", DeleteMin(H));\n            break;\n        }\n    }\n    printf(\"\\nInside H:\");\n    for ( i=1; i&lt;=H-&gt;Size; i++ )\n        printf(\" %d\", H-&gt;Elements[i]);\n    return 0;\n}\n</code></pre> <p>\u6784\u9020\u4e00\u4e2a\u65e2\u662f\u4e8c\u5206\u641c\u7d22\u6811\uff0c\u53c8\u662fcomplete binary tree</p> <p>Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.</p> <p>Input Specification:</p> <p>Each input file contains one test case. For each case, the first line contains a positive integer N (\u22641000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.</p> <p>Output Specification:</p> <p>For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p> <pre><code>Input:\n10\n1 2 3 4 5 6 7 8 9 0\n\nOutput\n6 3 8 1 5 7 9 0 2 4\n</code></pre> <p><code>\u672c\u9898\u7684\u5173\u952e\u5728\u4e8e\u6784\u9020\uff0c\u5df2\u77e5\u6574\u68f5\u6811\u7684\u8282\u70b9\u6570\u91cf\uff0c\u6839\u636ecomplete binary tree \u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5224\u65ad\u5de6\u5b50\u6811\u3001\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\uff0c\u8fd8\u8981\u5229\u7528 binary search tree \u7684\u6027\u8d28\uff0c\u5de6\u5b50\u6811\u7684\u5143\u7d20\u4e00\u5b9a\u5c0f\u4e8eroot\uff0croot\u5c0f\u4e8e\u53f3\u5b50\u6811\uff0c\u901a\u8fc7\u5bf9\u8f93\u5165\u7684\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u800c\u786e\u5b9aroot\uff0c\u7136\u540e\u91c7\u7528\u9012\u5f52\uff0c\u4e00\u6b21\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684root</code></p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;math.h&gt;\n\n// typedef struct TreeNode* Tree;\n// struct TreeNode{\n//     int data;\n//     Tree left;\n//     Tree right;\n// }TreeNode;\n\nint b[1000 + 5], a[1000 + 5];\n\nint cmp(const void *a, const void *b)\n{\n    return *(int *)a - *(int *)b;\n}\n//\u672c\u9898\u7684\u5173\u952e\u5728\u4e8e\u6784\u9020\uff0c\u5df2\u77e5\u6574\u68f5\u6811\u7684\u8282\u70b9\u6570\u91cf\uff0c\u6839\u636ecomplete binary tree \u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5224\u65ad\u5de6\u5b50\u6811\u3001\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\uff0c\u8fd8\u8981\u5229\u7528 binary search tree \u7684\u6027\u8d28\uff0c\u5de6\u5b50\u6811\u7684\u5143\u7d20\u4e00\u5b9a\u5c0f\u4e8eroot\uff0croot\u5c0f\u4e8e\u53f3\u5b50\u6811\uff0c\u901a\u8fc7\u5bf9\u8f93\u5165\u7684\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u800c\u786e\u5b9aroot\uff0c\u7136\u540e\u91c7\u7528\u9012\u5f52\uff0c\u4e00\u6b21\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684root\nvoid Create_tree(int left, int right, int root)\n{\n    // \u5982\u679c\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c\u5219\u8fd4\u56deNULL\u3002\n    if(left &gt; right)\n    {\n        return;\n    }\n    // \u5148\u901a\u8fc7n\uff0c\u8ba1\u7b97\u51fa\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u5143\u7d20\u4e2a\u6570\n    int n_left, n_right;\n    // \u8ba9n\u4e0e\u6ee1\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u8fdb\u884c\u6bd4\u8f83\uff0c\u5148\u8ba1\u7b97\u6700\u540e\u4e00\u884c\u7684\u7ed3\u70b9\u6570\u91cf\n    int n = right - left + 1;\n    // \u6b64\u5904\u7684\u884c\u6570\u662f\u5b8c\u6574\u6392\u5217\u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u6700\u540e\u4e00\u884c\n    int row = (int)log2(n);\n    //printf(\"%d\\n\", row);\n    int last_row = n - pow(2, row) + 1;\n    // \u5c06\u6700\u540e\u4e00\u884c\u7684\u7ed3\u70b9\u6570\u91cf\u4e0e\u524d\u4e00\u884c\u7684\u8282\u70b9\u6570\u91cf\u8fdb\u884c\u6bd4\u8f83\n    // \u5982\u679c\u5927\u4e8e\uff0c\u8bf4\u660e\u6700\u540e\u4e00\u884c\u7ed3\u70b9\u65e2\u6709\u5de6\u5b50\u6811\u7684\u7ed3\u70b9\uff0c\u53c8\u6709\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\n    // \u6b64\u5904\u9700\u8981\u533a\u5206\u4e00\u4e0b\uff0c\u5982\u4f55\u8ba1\u7b97\u603b\u6570\uff0cpow(2, row)-1 ,\u5982\u4f55\u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u7ed3\u70b9\u6570 pow(2, row-1)\n    if(last_row &gt; pow(2, row - 1))\n    {\n        n_left = pow(2, row) - 1;\n        n_right = n - n_left - 1;\n    }\n    else\n    {\n        n_left = pow(2, row - 1) - 1 + last_row;\n        n_right = n - n_left - 1;\n    }\n    // \u6839\u7ed3\u70b9\u5c31\u662f\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\uff0c\u4e0b\u6807\u662fn_left\n    b[root] = a[left + n_left];\n    // \u9012\u5f52\u521b\u5efa\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n    Create_tree(left, left + n_left - 1, 2 * root);\n    Create_tree(left + n_left + 1, right, 2 * root + 1);\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;a[i]);\n    }\n    // \u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f,\u6392\u5e8f\u4e4b\u540e\u7684\u6570\u7ec4\u5c31\u662finorder\n    qsort(a, n, sizeof(int), cmp);\n    // \u5148\u5c06\u6839\u7ed3\u70b9\u653e\u5728b[]\u6570\u7ec4index = 1\u7684\u4f4d\u7f6e\n    Create_tree(0, n-1, 1);\n    for(int i = 1; i &lt;=  n; i++){\n        if(i != n) \n        {\n            printf(\"%d \", b[i]);\n        }\n        else printf(\"%d\",b[i]);\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#union-and-find","title":"\u4e03.Union and Find \u5e76\u67e5\u96c6","text":"<p>\u5e76\u67e5\u96c6\u7684\u57fa\u672c\u6982\u5ff5\uff1a</p> <ol> <li>\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u5f62\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u7684\u5408\u5e76\u53ca\u67e5\u8be2\u95ee\u9898\uff08\u6240\u8c13\u7684\u5e76\u548c\u67e5\uff09</li> <li>\u5e76\u67e5\u96c6\u4e3b\u8981\u7531\u4e00\u4e2a\u6574\u578b\u6570\u7ec4root[ ], \u4e24\u4e2a\u51fd\u6570find\uff08\uff09\u548cunion\uff08\uff09\u6784\u6210    - root[ ]\u7528\u4e8e\u77e5\u9053\u6bcf\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\uff0c\u524d\u9a71\u8282\u70b9    - find\uff08x\uff09\u7528\u4e8e\u67e5\u627e\u6307\u5b9a\u7ed3\u70b9x\u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408    - union\uff08x\uff0cy\uff09\u7528\u4e8e\u5408\u5e76\u7ed3\u70b9</li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#71-relation","title":"7.1 Relation","text":"<p>Relation is symmetric, If \\((a, b) \u2208 R\\), then \\((b, a) \u2208 R\\).</p> <p>Relation is transitive, If \\((a, b) \u2208 R\\) &amp; \\((b, c) \u2208 R\\), then \\((a, c) \u2208 R\\).</p> <p>Relflexive Relation is relflexive, If \\((a, a) \u2208 R\\). </p> <p>Consistent Relation is symmetric and relflexive.</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#72-implement","title":"7.2 Implement","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#721-initialize","title":"7.2.1 Initialize","text":"<pre><code>Algorithm: Initialize\n{   /* step 1: read the relations in */\n    Initialize N disjoint sets;\n    while ( read in a ~ b ) {\n        if ( ! (Find(a) == Find(b)) ) // Find\u7528\u4e8e\u627e\u81ea\u5df1\u7684\u6839\u7ed3\u70b9\n    Union the two sets;\n    } /* end-while */\n    /* step 2: decide if a ~ b */\n    while ( read in a and b ) \n        if ( Find(a) == Find(b) )   output( true );// \u5982\u679c\u4e24\u4e2a\u7684\u6839\u76f8\u540c\uff0c\u5219\u8f93\u51faTrue\n        else   output( false );\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#722-unioni-j","title":"7.2.2 Union(i, j)","text":"<p>\u6c42\u5e76\u8fd0\u7b97\uff0c\u5c06\u542b\u6709 a \u548c b \u7684\u4e24\u4e2a\u7b49\u4ef7\u7c7b\u5408\u5e76\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7c7b</p> <p>\u60f3\u6cd5\uff1amake \\(S_i\\) a subtree of \\(S_j\\),. That is ,we can set the parent pointer of one of the roots to the other root.</p> <p>\u5c06\u4e00\u4e2a\u6839\u7ed3\u70b9\u8fde\u63a5\u5230\u53e6\u4e00\u68f5\u6811\u7684\u6839\u7ed3\u70b9\u4e0a\uff0c\u5f80\u5f80\u540e\u8005\u8fde\u63a5\u5230\u524d\u8005\u3002</p> <p></p> <p><code>Array Data Stucture Implementation</code></p> <ul> <li>S[element] = the parent of element</li> <li>S[root] = - 1</li> <li>set name  = root index</li> </ul> <p></p> <p></p> <pre><code>void SetUnion(DisjSet S, SetType Rt1, SetType Rt2)\n{\n    S[Rt2] = Rt1;\n    // \u76f8\u5f53\u4e8e\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u7ed3\u70b9\uff0c\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u7ed3\u70b9\u4e0a\u53bb\n}\n// \u5177\u4f53\u6837\u4f8b\nvoid Union(int S[], int x1, int x2)\n{\n    S[x2] = x1;\n}\n</code></pre> <pre><code>// Union-by-Size,Always change the smaller tree\n\n// S [ Root ] = \u2013 size;  /* initialized to be \u20131 */\n// \u6309\u7167\u96c6\u5408\u7684\u5927\u5c0f\u8fdb\u884cUnion\nvoid Union_by_size(int x1, int x2\uff0c int S[])\n{\n    int root1 = Find(x1);\n    int root2 = FInd(x2);\n    // \u9996\u5148\u5f97\u5224\u65ad\u662f\u5426\u9700\u8981Union\n    if(root1 == root2)\n    {\n        return;\n    }\n    else\n    {\n        //root1 is bigger than root2,so we Union root2 to root1\n        if(S[root1] &lt;= S[root2])\n        {\n            S[root2] = root1; //\u5c06\u7b2c\u4e8c\u4e2a\u96c6\u5408\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u96c6\u5408\n            S[root1] += S[root2]; // S[root]\u8868\u793a\u7684\u662f\u7ed3\u5408\u7684\u5927\u5c0f\n        }\n        else // root2 is bigger than root1\n        {\n            S[root1] = root2;\n            S[root2] += S[root1];\n        }\n    }\n}\nvoid Union_by_height(int x1, int x2, int S[])\n{\n    int root1 = Find(x1);\n    int root2 = FInd(x2);\n    // \u9996\u5148\u5f97\u5224\u65ad\u662f\u5426\u9700\u8981Union\n    if(root1 == root2)\n    {\n        return;\n    }\n    else\n    {\n        // \u96c6\u54081\u7684\u9ad8\u5ea6\u66f4\u5927\uff0c\u96c6\u5408\u4e8c\u63a5\u52301\u8eab\u4e0a\n        if(rank[root1] &gt; rank[root2])\n        {\n            pre[root2] = root1;\n        }\n        else if(rank[root1] &lt; rank[root2])\n        {\n            pre[root1] = root2;\n            // \u5728\u9ad8\u5ea6\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u77ed\u7684\u96c6\u5408\u63a5\u5230\u957f\u7684\u96c6\u5408\uff0c\u96c6\u5408\u7684\u957f\u5ea6\u4ecd\u7136\u662f\u539f\u5148\u957f\u7684\u96c6\u5408\uff0c\u77ed\u7684\u96c6\u5408height+1 &lt;= \u957f\u7684\u96c6\u5408height\n        }\n        // \u5982\u679c\u4e24\u8005\u9ad8\u5ea6\u76f8\u7b49\uff0c\u5219\u9ed8\u8ba4\u96c6\u5408\u4e8c\u63a5\u5230\u96c6\u54081shen\n        else\n        {\n            pre[root2] = root1;\n            rank[root1]++;\n            //\u53ea\u6709\u4e24\u4e2a\u9ad8\u5ea6\u76f8\u7b49\u65f6\uff0cheigtht\u624d\u4f1a\u589e\u52a0\n        }\n    }\n}\n</code></pre> <p>In Union/Find algorithm, if Unions are done by size, the depth of any node must be no more than \\(N/2\\), but not (\\(O(logN).\\)\\)</p> <p>\u6bcf\u505a\u4e00\u6b21\u5f52\u5e76\uff0c\u90fd\u4f1a\u4f7f\u5c0f\u7684\u96c6\u5408\u6df1\u5ea6+1\uff0c\u4f46\u662f\u603b\u7684\u6df1\u5ea6\u8fd8\u662f\u770b\u5927\u7684\u96c6\u5408\u3002\u6240\u4ee5\u53ea\u6709\u6df1\u5ea6\u76f8\u540c\u7684\u5f52\u5e76\u624d\u80fd\u4f7f\u603b\u7684\u6df1\u5ea6+1.</p> <p><code>\u56e0\u6b64\u6df1\u5ea6\u6700\u5927\u4e3alog_2{N}+1\uff0c\u539f\u56e0\u5728\u4e8e\uff0c\u5c06\u96c6\u5408\u5747\u5206\u4e3a\u4e24\u7b49\u4efd\uff0c\u6bcf\u4e00\u4efd\u7684\u6df1\u5ea6\u5c31\u662flog_2{N},\u5f52\u5e76\u540e+1.</code></p> <p>Time complexity of N Union and M Find operations is now \\(O( N + M log_2 N ).\\)</p> <p>Union \u65f6\u95f4\u590d\u6742\u5ea6\u662fO\uff081\uff09\uff0c\u628a\u4e00\u4e2a\u96c6\u5408\u7684root\u53d8\u4e00\u4e0b\u5c31\u597d\u4e86</p> <p>Find\uff0c\u6d89\u53ca\u5230\u627eroot\u548c\u8def\u5f84\u538b\u7f29\uff0c\u6240\u4ee5\u9700\u8981logN</p> <p>Let T be a tree created by union-by-size with N nodes, then \\(height(T)&lt;=(log2N)+1;\\)</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#723-find","title":"7.2.3 Find()","text":"<p>\u8fd4\u56de\u7ed9\u5b9a\u5143\u7d20\u7684\u6240\u5728\u7684\u96c6\u5408\uff08\u7b49\u4ef7\u7c7b\uff09</p> <p></p> <pre><code>//Recursive Version\nint Find(int x)\n{\n    // \u5148\u5224\u65ad\u81ea\u5df1\u662f\u4e0d\u662froot\n    if(root[x] &lt; 0)\n    {\n        return x;\n    }\n    else // \u82e5\u4e0d\u662f\u5219\u5f00\u59cb\u5bfb\u627e\u5e76\u8def\u5f84\u538b\u7f29\n    {\n        return root[x] = Find(root[x]);\n        // \u76f8\u5f53\u4e8e\u5148\u8ba1\u7b97Find(root[x]),\u518d\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\n    }\n}\n// Iterative Version\nint Find(int x, int S[])\n{\n    int root, trail, lead;\n    for(root = x; S[root] &gt;= 0; root = S[root]);\n    // \u5148\u627e\u5230\u96c6\u5408S\u7684root\n    for(trail = x; trail != root; trail = lead)\n    {\n        lead = S[trail];\n        S[trail] = root;//\u76f8\u5f53\u4e8e\u591a\u5c42\u7ed3\u6784\uff0c\u5c06\u6bcf\u4e00\u5c42\u7684\u7236\u8282\u70b9\u90fd\u6539\u4e3a\u6700\u7ec8\u7684\u6839\u7ed3\u70b9root\n    }// \u518d\u627e\u4e00\u904d\uff0c\u627e\u7684\u65f6\u5019\u5c06\u6bcf\u4e00\u5c42\u8ddf\u7684\u6700\u7ec8\u8ddf\u90fd\u6539\u6389\n    return root;\n}\n</code></pre> <p>\u8def\u5f84\u538b\u7f29\u7684\u6548\u679c\u662f\uff0c\u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5b83\u7684\u7236\u8282\u70b9\u53d8\u6210\u6839\u3002</p> <p>\u8def\u5f84\u538b\u7f29\u4e0e\u6309\u5927\u5c0f\u6c42\u5e76\u5b8c\u5168\u517c\u5bb9\uff0c\u53ef\u4ee5\u540c\u65f6\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u4e0e\u6309\u9ad8\u5ea6\u6c42\u5e76\uff08\u6709\u65f6\u79f0\u4e3a\u79e9\uff09</p> <p>\u5b9e\u6218\u4ee3\u7801\uff1a</p> <p></p> <p></p> <pre><code>5\nC 3 2\nI 3 2\nC 1 5\nI 4 5\nI 2 4\nC 3 5\nS\nno\nno\nyes\nThere are 2 components.\n\n5\nC 3 2\nI 3 2\nC 1 5\nI 4 5\nI 2 4\nC 3 5\nI 1 3\nC 1 5\nS\nno\nno\nyes\nyes\nThe network is connected.\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n// \u5168\u5c40\u53d8\u91cf\nint root[10000 + 5];\n// \u5728\u5bfb\u627e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fdb\u884c\u8def\u5f84\u538b\u7f29\nint Find(int x)\n{\n    if(root[x] &lt; 0)\n    {\n        return x;\n    }\n    else\n    {\n        return root[x] = Find(root[x]);\n        // \u76f8\u5f53\u4e8e\u5148\u8ba1\u7b97Find(root[x]),\u518d\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\n    }\n}\n// \u6b64\u5904\u4e3aUnion_by_size \u6a21\u5f0f\nvoid Union(int root1, int root2)\n{\n    // \u96c6\u54081\u7684\u5143\u7d20\u4e2a\u6570\u591a\u4f59\u96c6\u54082\uff0c\u96c6\u54082\u63a5\u5230\u96c6\u54081\u8eab\u4e0a\n    if(root[root1] &lt; root[root2])\n    {\n        root[root1] += root[root2];\n        // root[root1]\u8868\u793a\u7684\u662f -size\n        root[root2] = root1;\n    }\n    else\n    {\n        root[root2] += root[root1];\n        root[root1] = root2;\n    }\n}\n\nint main()\n{\n    int n;\n    int a, b;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i++)\n    {\n        root[i] = -1;\n        // \u91c7\u7528union_by_size \u6a21\u5f0f\n    }\n    char c = 'o';\n    while(c != 'S')\n    {\n        scanf(\"%c\", &amp;c);\n        scanf(\"%d\", &amp;a);\n        scanf(\"%d\", &amp;b);\n        if(c == 'I')\n        {\n            // Union\n            int root1 = Find(a);\n            int root2 = Find(b);\n            if(root1 != root2)\n            {\n                Union(root1, root2);\n            }\n        }\n        else if(c == 'C')\n        {\n            if(Find(a) == Find(b))\n            {\n                printf(\"yes\\n\");\n            }\n            else\n            {\n                printf(\"no\\n\");\n            }\n        }\n    }\n    int ans = 0;\n    for(int i = 1; i &lt;= n ; i++)\n    {\n        if(root[i] &lt; 0)\n        {\n            ans++;\n        }\n    }\n    if(ans == 1)\n    {\n        printf(\"The network is connected.\\n\");\n    }\n    else\n    {\n        printf(\"There are %d components.\\n\", ans);\n    }\n}\n\n// union_by_height\nint pre[10010]; //\u627e\u7236\u4eb2\nint rank[10010]; // \u6bcf\u4e00\u4e2a\u7ed3\u70b9\u6240\u5728\u96c6\u5408\u7684height\nint Find(int x)\n{\n    if(pre[x] == x){\n        return x;\n    }\n    else{\n        return pre[x] = Find(pre[x]);\n    }\n}\nvoid Union_by_height(int x, int y)\n{\n    int root1, root2;\n    root1 = Find(x);\n    root2 = Find(y);\n    if(root1 == root2)\n    {\n        return;\n    }\n    else\n    {\n        // \u6b64\u5904\u6bd4\u8f83\u7684\u662fheight\uff0c\u4e14height\u4e3a\u6b63\u6570\n        if(rank[root1] &gt; rank[root2])\n        {\n            pre[root2] = root1;\n        }\n        else if(rank[root1] &lt; rank[root2])\n        {\n            pre[root1] = root2;\n        }\n        else\n        {\n            pre[root2] = root1;\n            rank[root1]++;\n        }\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#graph","title":"\u516b. Graph","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#81","title":"8.1 \u56fe\u7684\u57fa\u672c\u6982\u5ff5","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#811","title":"8.1.1 \u56fe\u7684\u5b9a\u4e49\u548c\u76f8\u5173\u672f\u8bed","text":"<p>\u56fe(Graph)\u662f\u7531\u9876\u70b9\u7684\u6709\u7a77\u975e\u7a7a\u96c6\u5408\\(V ( G )\\) \u548c\u9876\u70b9\u4e4b\u95f4\u8fb9\u7684\u96c6\u5408\\(\\(E ( G )\\)\\)\u7ec4\u6210\uff0c\u901a\u5e38\u8868\u793a\u4e3a: \\(G = ( V , E )\\) \uff0c\u5176\u4e2d\uff0c\\(\\(G\\)\\)\u8868\u793a\u4e2a\u56fe\uff0c\\(\\(V\\)\\)\u662f\u56feG \u4e2d\u9876\u70b9\u7684\u96c6\u5408\uff0c\\(\\(E\\)\\)\u662f\u56fe\\(\\(G\\)\\)\u4e2d\u8fb9\u7684\u96c6\u5408\u3002\u82e5\\(\\(V = \\{ v 1 , v 2 , . . . , v n \\}\\)\\) \uff0c\u5219\u7528\\(\\(\u2223 V \u2223\\)\\)\u8868\u793a\u56feG\u4e2d\u9876\u70b9\u7684\u4e2a\u6570\uff0c\u4e5f\u79f0\u56feG\u7684\u9636\uff0c\\(\\(E = { ( u , v ) \u2223 u \u2208 V , v \u2208 V }\\)\\)\uff0c\u7528\\(\\(\u2223 E \u2223\\)\\)\u8868\u793a\u56feG\u4e2d\u8fb9\u7684\u6761\u6570\u3002</p> <p>\u6ce8\u610f:\u7ebf\u6027\u8868\u53ef\u4ee5\u662f\u7a7a\u8868\uff0c\u6811\u53ef\u4ee5\u662f\u7a7a\u6811\uff0c\u4f46\u56fe\u4e0d\u53ef\u4ee5\u662f\u7a7a\u56fe\u3002\u5c31\u662f\u8bf4\uff0c\u56fe\u4e2d\u4e0d\u80fd\u4e00\u4e2a\u9876\u70b9\u4e5f\u6ca1\u6709\uff0c\u56fe\u7684\u9876\u70b9\u96c6V\u4e00\u5b9a\u975e\u7a7a\uff0c\u4f46\u8fb9\u96c6E\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u6b64\u65f6\u56fe\u4e2d\u53ea\u6709\u9876\u70b9\u800c\u6ca1\u6709\u8fb9\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#812","title":"8.1.2 \u76f8\u5173\u672f\u8bed","text":"<ol> <li>\u6709\u5411\u56fe</li> </ol> <p>\u82e5E\u662f\u6709\u5411\u8fb9(\u4e5f\u79f0\u5f27)\u7684\u6709\u9650\u96c6\u5408\u65f6\uff0c\u5219\u56feG\u4e3a\u6709\u5411\u56fe\u3002\u5f27\u662f\u9876\u70b9\u7684\u6709\u5e8f\u5bf9\uff0c\u8bb0\u4e3a <p>\u5176\u4e2dv,w\u662f\u9876\u70b9\uff0cv\u79f0\u4e3a\u5f27\u5c3e\uff08tail\uff09\uff0cw\u79f0\u4e3a\u5f27\u5934\uff08head\uff09\uff0c\u79f0\u4e3a\u4ece\u9876\u70b9v\u5230\u9876\u70b9w\u7684\u5f27\uff0c\u4e5f\u79f0v\u90bb\u63a5\u5230w\uff0c\u6216w\u90bb\u63a5\u81eav\u3002 <p>\\(V_i \\ is \\ adjacent \\ to \\ V_j, \\ V_j \\ is \\ adjacent \\ from \\ V_i\\)</p> <p>\\(&lt;V_i,V_j&gt; != &lt;V_j, V_i&gt;\\)</p> <p></p> <ol> <li>\u65e0\u5411\u56fe</li> </ol> <p>\u82e5E\u662f\u65e0\u5411\u8fb9(\u7b80\u79f0\u8fb9)\u7684\u6709\u9650\u96c6\u5408\u65f6\uff0c\u5219\u56feG\u4e3a\u65e0\u5411\u56fe\u3002\u8fb9\u662f\u9876\u70b9\u7684\u65e0\u5e8f\u5bf9\uff0c\u8bb0\u4e3a(v, w)\u6216(w,v),\u56e0\u4e3a(v,w)=(w,v), \u5176\u4e2dv,w\u662f\u9876\u70b9\u3002\u53ef\u4ee5\u8bf4\u9876\u70b9w\u548c\u9876\u70b9v\u4e92\u4e3a\u90bb\u63a5\u70b9\u3002\u8fb9(v, w)\u4f9d\u9644\u4e8e\u9876\u70b9w\u548cv\uff0c\u6216\u8005\u8bf4\u8fb9(v, w)\u548c\u9876\u70b9v, w\u76f8\u5173\u8054\u3002</p> <p></p> <p>\\((V_i, V_j)\\) \\(V_i \\ and \\ V_j \\ is \\ adjacent\\)</p> <ol> <li>simple graph \u7b80\u5355\u56fe</li> </ol> <p>\u4e00\u4e2a\u56feG\u82e5\u6ee1\u8db3:</p> <p>\u2460<code>\u4e0d\u5b58\u5728\u91cd\u590d\u8fb9;</code></p> <p>\u2461<code>\u4e0d\u5b58\u5728\u9876\u70b9\u5230\u81ea\u8eab\u7684\u8fb9</code>\uff0c\u5219\u79f0\u56feG\u4e3a\u7b80\u5355\u56fe\u3002</p> <p>\u4e0a\u56fe\u4e2d$$G_1 $$ \u548c\\(\\(G_2\\)\\)\u5747\u4e3a\u7b80\u5355\u56fe\u3002\u6570\u636e\u7ed3\u6784\u4e2d\u4ec5\u8ba8\u8bba\u7b80\u5355\u56fe</p> <ol> <li>complete graph \u5b8c\u5168\u56fe</li> </ol> <p>complete  graph \uff1a a graph that has the maximum number of edges</p> <p></p> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u8fb9\u8fdb\u884c\u8fde\u63a5\uff0c\u8be5\u6761\u8fb9\u65e0\u65b9\u5411\u4e4b\u5206\uff0c\u53ef\u4ee5\u5171\u7528\uff0c\u6545\u9700\u8981\\(C_n^2=\\dfrac{n(n-1)}{2}\\)</p> <p>\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u8fb9\u7684\u65b9\u5411\u4e0d\u540c\uff0c\u4fbf\u65e0\u6cd5\u5171\u7528\u8fde\u63a5\uff0c\u6545\u9700\u8981\\(P_n^2 = n(n-1)\\)</p> <ol> <li>Subgraph \u5b50\u56fe</li> </ol> <p>\\(G' \\subset G \u76f8\u5f53\u4e8e V(G') \\subset V(G) \\ and \\ E(G') \\subset E(G)\\)</p> <ol> <li>connected and unconnected</li> </ol> <p>An undirected graph G is connected if every pair of distinct \\(V_i\\) and \\(V_j\\) are connected</p> <p>\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u82e5\u4ece\u9876\u70b9\\(v\\)\u5230\u9876\u70b9\\(w\\)\u6709\u8def\u5f84\u5b58\u5728\uff0c\u5219\u79f0\\(v\u548c\\)w\u662f\u8fde\u901a\u7684\u3002\u82e5\u56fe\\(G\\)\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u90fd\u662f\u8fde\u901a\u7684\uff0c\u5219\u79f0\u56fe\\(G\\)\u4e3a\u8fde\u901a\u56fe\uff0c\u5426\u5219\u79f0\u4e3a\u975e\u8fde\u901a\u56fe\u3002\u65e0\u5411\u56fe\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf()\u3002\u82e5\u4e00\u4e2a\u56fe\u6709\\(n\\)\u4e2a\u9876\u70b9\uff0c\u5e76\u4e14\u8fb9\u6570\u5c0f\u4e8e\\(n \u2212 1\\)\u5219\u6b64\u56fe\u5fc5\u662f\u975e\u8fde\u901a\u56fe\u3002\u5982\u4e0b\u56fe(a)\u6240\u793a\uff0c \u56fe\\(G 4\\)\u67093\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5982\u56fe\uff08b\uff09\u6240\u793a</p> <p></p> <p>Component of an undirected G ::= the <code>maximal</code>connected subgraph</p> <p>Strongly connected component ::= the<code>maximal</code> subgraph that is strongly connected</p> <ol> <li>strongly connected \u5f3a\u8fde\u901a\u7684</li> </ol> <p>\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u82e5\u4ece\u9876\u70b9v \u5230\u9876\u70b9w\u548c\u4ece\u9876\u70b9w\u5230\u9879\u70b9v\u4e4b\u95f4\u90fd\u6709\u8def\u5f84,\u5219\u79f0\u8fd9\u4e24\u4e2a\u9876\u70b9\u662f\u5f3a\u8fde\u901a\u7684\u3002\u82e5\u56fe\u4e2d\u4efb\u4f55\u4e00\u5bf9\u9876\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u5219\u79f0\u6b64\u56fe\u4e3a\u5f3a\u8fde\u901a\u56fe\u3002\u6709\u5411\u56fe\u4e2d\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p> <p>Strongly connected directed graph G ::= for every pair of \\(V_i\\) and \\(V_j\\) in V( G ), there exist directed paths from \\(V_i \\ to \\ V_j\\)and from \\(V_j \\ to \\ V_i\\)</p> <p>If the graph is connected without direction to the edges, then it is said to be weakly connected</p> <p>\u6ce8\u610f:\u5f3a\u8fde\u901a\u56fe\u3001\u5f3a\u8fde\u901a\u5206\u91cf\u53ea\u662f\u9488\u5bf9\u6709\u5411\u56fe\u800c\u8a00\u7684\u3002\u4e00\u822c\u5728\u65e0\u5411\u56fe\u4e2d\u8ba8\u8bba\u8fde\u901a\u6027\uff0c\u5728\u6709\u5411\u56fe\u4e2d\u8003\u8651\u5f3a\u8fde\u901a\u6027\u3002</p> <ol> <li>\u751f\u6210\u6811\u548c\u751f\u6210\u68ee\u6797</li> </ol> <p>A tree ::= a graph that is connected and acyclic \u8fde\u901a\u5e76\u4e14\u65e0\u73af</p> <p>\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u5305\u542b\u56fe\u4e2d\u5168\u90e8\u9876\u70b9\u7684\u4e00\u4e2a\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u3002<code>\u82e5\u56fe\u4e2d\u5b9a\u70b9\u6570\u4e3an\uff0c\u5219\u5b83\u7684\u751f\u6210\u6811\u542b\u6709n-1\u6761\u8fb9\u3002\u5bf9\u4e8e\u751f\u6210\u6811\u800c\u8a00\uff0c\u82e5\u780d\u53bb\u5b83\u7684\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u53d8\u6210\u4e0d\u8fde\u901a\u56fe\uff0c\u82e5\u52a0\u4e0a\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u56de\u8def</code></p> <p>\u5728\u975e\u8fde\u901a\u56fe\u4e2d\uff0c\u8fde\u901a\u5206\u91cf\u7684\u751f\u6210\u6811\u6784\u6210\u4e86\u975e\u8fde\u901a\u56fe\u7684\u751f\u6210\u68ee\u6797\u3002</p> <ol> <li> <p>degree(\u9876\u70b9\u7684\u5ea6)\uff0cin-degree(\u5165\u5ea6) out-degree(\u51fa\u5ea6)    - \u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u9876\u70b9\u7684\u5ea6\u662f\u6307\u4f9d\u9644\u4e8e\u8be5\u9876\u70b9\u7684\u8fb9\u7684\u6761\u6570\uff0c\u8bb0\u4f5cTD\uff08v)    - \u5728\u5177\u6709n\u4e2a\u9876\u70b9\u3001e\u6761\u8fb9\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\\(\\sum_{i =1}^{n}TD(v_i) = 2e\\)\u5373\u65e0\u5411\u56fe\u7684\u5168\u90e8\u9876\u70b9\u7684\u5ea6\u7684\u548c\u7b49\u4e8e\u8fb9\u6570\u76842\u500d\uff0c\u56e0\u4e3a\u6bcf\u6761\u8fb9\u548c\u4e24\u4e2a\u9876\u70b9\u76f8\u5173\u8054\u3002    - \u5bf9\u4e8e\u6709\u5411\u56fe,\u9876\u70b9v\u7684\u5ea6\u5206\u4e3a\u5165\u5ea6\u548c\u51fa\u5ea6,\u5165\u5ea6\u662f\u4ee5\u9876\u70b9v\u4e3a\u7ec8\u70b9\u7684\u6709\u5411\u8fb9\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a\\(I D ( v )\\); \u800c\u51fa\u5ea6\u662f\u4ee5\u9876\u70b9v\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a\\(O D ( v )\\)\u3002    - \u9876\u70b9v\u7684\u5ea6\u7b49\u4e8e\u5176\u5165\u5ea6\u548c\u51fa\u5ea6\u4e4b\u548c\uff0c\u5373\\(T D ( v ) = I D ( v ) + O D ( v )\\) \u3002    - \u5728\u5177\u6709n\u4e2a\u9876\u70b9\uff0ce\u6761\u8fb9\u7684\u6709\u5411\u56fe\u4e2d\uff0c\\(\\sum_{i = 1}^n ID(v_i) = \\sum_{i = 1}^n OD(v_i) = e\\)\u5373\u6709\u5411\u56fe\u7684\u5168\u90e8\u9876\u70b9\u7684\u5165\u5ea6\u4e4b\u548c\u4e0e\u51fa\u5ea6\u4e4b\u548c\u76f8\u7b49\uff0c\u5e76\u4e14\u7b49\u4e8e\u8fb9\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6761\u6709\u5411\u8fb9\u90fd\u6709\u4e00\u4e2a\u8d77\u70b9\u548c\u7ec8\u70b9\u3002</p> </li> <li> <p>\u8fb9\u7684\u6743\u91cd\u548c\u7f51</p> </li> </ol> <p>\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u6bcf\u6761\u8fb9\u90fd\u53ef\u4ee5\u6807\u4e0a\u5177\u6709\u67d0\u79cd\u542b\u4e49\u7684\u6570\u503c\uff0c\u8be5\u6570\u503c\u79f0\u4e3a\u8be5\u8fb9\u7684\u6743\u503c\u3002\u8fd9\u79cd\u8fb9\u4e0a\u5e26\u6709\u6743\u503c\u7684\u56fe\u79f0\u4e3a\u5e26\u6743\u56fe\uff0c\u4e5f\u79f0\u7f51\u3002</p> <ol> <li>Path from \\(V_p \\ to \\ V_q\\)(\u8def\u5f84)\u3001length of a path(\u8def\u5f84\u957f\u5ea6)\u548ccycle(\u56de\u8def)</li> </ol> <p>\u9876\u70b9\\(V_p\\)\u5230\u9876\u70b9\\(V_q\\)\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\u662f\u6307\u9876\u70b9\u5e8f\u5217\\(V_p,V_{i1},V_{i2},\\cdots,V_q\\),\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee\u79f0\u4e3a\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u76f8\u540c\u7684\u8def\u5f84\u79f0\u4e3a\u56de\u8def\u6216\u73af\u3002\u82e5\u4e00\u4e2a\u56fe\u6709n\u4e2a\u9876\u70b9\uff0c\u5e76\u4e14\u6709\u5927\u4e8en \u2212 1\u6761\u8fb9\uff0c\u5219\u6b64\u56fe\u4e00\u5b9a\u6709\u73af\u3002</p> <ol> <li>simple path(\u7b80\u5355\u8def\u5f84)\u3001simple cycle(\u7b80\u5355\u56de\u8def)</li> </ol> <p>\u5728\u8def\u5f84\u5e8f\u5217\u4e2d\uff0c\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\u7684\u8def\u5f84\u79f0\u4e3a\u7b80\u5355\u8def\u5f84\u3002\u9664\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\u7684\u56de\u8def\u79f0\u4e3a\u7b80\u5355\u56de\u8def\u3002</p> <ol> <li>\u8ddd\u79bb</li> </ol> <p>\u4ece\u9876\u70b9u\u51fa\u53d1\u5230\u9876\u70b9v\u7684\u6700\u77ed\u8def\u5f84\u82e5\u5b58\u5728\uff0c\u5219\u6b64\u8def\u5f84\u7684\u957f\u5ea6\u79f0\u4e3a\u4eceu\u5230v\u7684\u8ddd\u79bb\u3002\u82e5\u4eceu\u5230v\u6839\u672c\u4e0d\u5b58\u5728\u8def\u5f84\uff0c\u5219\u8bb0\u8be5\u8ddd\u79bb\u4e3a\u65e0\u7a77( \u221e ) </p> <p>\u8865\u5145\u4e00\u4e2a\uff1a DAG\uff1a a directed acyclic graph \u6709\u5411\u65e0\u73af\u56fe</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_5","title":"<code>\u533a\u5206\u6781\u5927\u8fde\u901a\u5b50\u56fe\u548c\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u6781\u5927\u8fde\u901a\u5b50\u56fe\u662f\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u8981\u6c42\u8fde\u901a\u5b50\u56fe\u5305\u542b\u5176\u6240\u6709\u7684\u8fb9\uff0c\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u662f\u65e2\u8981\u4fdd\u6301\u56fe\u8fde\u901a\u53c8\u8981\u4f7f\u8fb9\u7684\u6570\u91cf\u6700\u5c11</code>","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#82","title":"8.2 \u56fe\u7684\u5b58\u50a8\u7ed3\u6784\uff08\u5982\u4f55\u8868\u793a\u56fe\uff09","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#821","title":"8.2.1 \u90bb\u63a5\u77e9\u9635","text":"<p>\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff08adjacency Matrix\uff09\u5b58\u50a8\u65b9\u5f0f\u4f7f\u7528\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u56fe\uff0c\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u9876\u70b9\u4fe1\u606f\uff0c\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u7684\u8fb9\u7684\u4fe1\u606f</p> <p>\u8bbe\u56feG\u6709n\u4e2a\u9876\u70b9\uff0c\u5219\u90bb\u63a5\u77e9\u9635A\u662f\u4e00\u4e2an*n\u7684\u77e9\u9635 $$ A[i][j] =  \\begin{cases} 0 &amp; \\text{\u82e5(Vi,Vj)\u6216\u8005\u4e0d\u662fE\uff08G\uff09\u7684\u8fb9} \\ 1 &amp; \\text{\u82e5(Vi,Vj)\u6216\u8005\u662fE\uff08G\uff09\u7684\u8fb9} \\end{cases} $$"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_6","title":"\u65e0\u5411\u56fe","text":"<ul> <li> <p><code>\u65e0\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u4e00\u5b9a\u662f\u4e00\u4e2a\u5bf9\u79f0\u77e9\u9635</code>(\u5373\u4ece\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u4e3b\u5bf9\u89d2\u7ebf\u4e3a\u8f74\uff0c\u53f3\u4e0a\u89d2\u7684\u5143\u4e0e\u5de6\u4e0b\u89d2\u76f8\u5bf9\u5e94\u7684\u5143\u5168\u90fd\u662f\u76f8\u7b49\u7684)\u3002<code>\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u5b58\u50a8\u90bb\u63a5\u77e9\u9635\u65f6\u53ea\u9700\u5b58\u50a8\u4e0a(\u6216\u4e0b)\u4e09\u89d2\u77e9\u9635\u7684\u5143\u7d20\u3002</code></p> </li> <li> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u90bb\u63a5\u77e9\u9635\u7684\u7b2ci\u884c(\u6216\u7b2ci\u5217)\u975e\u96f6\u5143\u7d20(\u6216\u975e\u221e\u5143\u7d20)\u7684\u4e2a\u6570\u6b63\u597d\u662f\u7b2ci\u4e2a\u9876\u70b9\u7684\u5ea6$T D ( v i ) $\u3002\u6bd4\u5982\u9876\u70b9v 1 \u7684\u5ea6\u5c31\u662f1 + 0 + 1 + 0 =2\u3002</p> </li> <li>\u6c42\u9876\u70b9$$v i $$\u7684\u6240\u6709\u90bb\u63a5\u70b9\u5c31\u662f\u5c06\u77e9\u9635\u4e2d\u7b2ci\u884c\u5143\u7d20\u626b\u63cf\u4e00\u904d\uff0c \\(A [ i ] [ j ]\\)\u4e3a 1\u5c31\u662f\u90bb\u63a5\u70b9\u3002</li> </ul> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_7","title":"\u6709\u5411\u56fe","text":"<p>\u5bf9\u4e8e\u6709\u5411\u56fe\u548c\u5b83\u7684\u90bb\u63a5\u77e9\u9635</p> <ul> <li>\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u6570\u503c\u4f9d\u7136\u4e3a0\uff0c\u5e76\u4e14\u90bb\u63a5\u77e9\u9635\u4e0d\u662f\u4e00\u4e2a\u5bf9\u79f0\u77e9\u9635</li> <li>\u6709\u5411\u56fe\u7684\u5165\u5ea6\uff0c\\(v_i\\)\u7684\u5165\u5ea6\u5c31\u662f\u7b2ci\u5217\u5404\u6570\u4e4b\u548c\u3002\u6709\u5411\u56fe\u7684\u51fa\u5ea6\uff0c\\(v_i\\)\u7684\u51fa\u5ea6\u5c31\u662f\u7b2ci\u884c\u5404\u6570\u4e4b\u548c</li> <li>\u5224\u65ad\u9876\u70b9\\(v_i,v_j\\)\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u5f27\uff0c\u53ea\u9700\u67e5\u627e\u77e9\u9635A[i][j]\u662f\u5426\u7b49\u4e8e1</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_8","title":"\u6709\u6743\u56fe","text":"<p>\u5bf9\u4e8e\u5e26\u6743\u56fe\uff0c\u82e5\u9876\u70b9\\(v_i,v_j\\)\u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\uff0c\u5219\u90bb\u63a5\u77e9\u9635\u5bf9\u5e94\u9879\u5b58\u653e\u7740\u8be5\u8fb9\u7684\u6743\u503c $$ A[i][j] =  \\begin{cases} W_{ij} &amp; \u82e5(v_i,v_j)\\in E \u6216\u8005 \\in E\\ 0 &amp; \u82e5 i = j\\ \\infty &amp; \u5176\u4ed6 \\end{cases} $$ <pre><code>// \u5b9a\u4e49\u90bb\u63a5\u77e9\u9635\u7684\u5b58\u50a8\u7ed3\u6784\n//\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff08adjacency Matrix\uff09\u5b58\u50a8\u65b9\u5f0f\u4f7f\u7528\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u56fe\n//\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u9876\u70b9\u4fe1\u606f\n//\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u7684\u8fb9\u7684\u4fe1\u606f\n#define MAXVERTEXNUM 100    //\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\u662f100\ntypedef char VertexType;    //\u9876\u70b9\u7684\u6570\u636e\u7c7b\u578b\ntypedef int EdgeType;       //\u5e26\u6743\u56fe\u4e2d\u8fb9\u4e0a\u6743\u503c\u7684\u6570\u636e\u7c7b\u578b\ntypedef struct{\n    VertexType Vex[MAXVERTEXNUM];   //\u9876\u70b9\u8868\n    EgdeType Edge[MAXVERTEXNUM][MAXVERTEXNUM]; // \u90bb\u63a5\u77e9\u9635\uff0c\u8fb9\u8868\n    int vexnum, arcnum;     //\u56fe\u7684\u5f53\u524d\u5b9a\u70b9\u6570\u548c\u5f27\u6811\n}MGraph;\n</code></pre> <p>\u6ce8\u610f\uff1a</p> <ol> <li>\u5728\u7b80\u5355\u5e94\u7528\u4e2d\uff0c\u53ef\u76f4\u63a5\u7528\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635(\u9876\u70b9\u4fe1\u606f\u7b49\u5747\u53ef\u7701\u7565)\u3002</li> <li>\u65e0\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u662f\u5bf9\u79f0\u77e9\u9635\uff0c\u5bf9\u89c4\u6a21\u7279\u5927\u7684\u90bb\u63a5\u77e9\u9635\u53ef\u91c7\u7528\u538b\u7f29\u5b58\u50a8\u3002\u4e0a\u4e09\u89d2\u77e9\u9635/\u4e0b\u4e09\u89d2\u77e9\u9635</li> <li>\u90bb\u63a5\u77e9\u9635\u8868\u793a\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n^2)\\),n\u4e3a\u56fe\u7684\u9876\u70b9\u6570</li> <li>\u7a20\u5bc6\u56fe\u9002\u5408\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u7684\u5b58\u50a8\u8868\u793a</li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#822","title":"8.2.2 \u90bb\u63a5\u8868","text":"<p>\u5f53\u4e00\u4e2a\u56fe\u4e3a\u7a00\u758f\u56fe\u65f6\uff08\u8fb9\u6570\u76f8\u5bf9\u9876\u70b9\u6570\u8f83\u5c11\uff09\uff0c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6cd5\u663e\u7136\u8981\u6d6a\u8d39\u5927\u91cf\u7684\u5b58\u50a8\u7a7a\u95f4</p> <p>\u800c\u56fe\u7684\u90bb\u63a5\u8868\u7ed3\u5408\u4e86\u987a\u5e8f\u5b58\u50a8\u548c\u94fe\u5f0f\u5b58\u50a8\u65b9\u6cd5\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u8fd9\u79cd\u4e0d\u5fc5\u8981\u7684\u6d6a\u8d39</p> <ol> <li>\u6240\u8c13\u90bb\u63a5\u8868\uff0c\u662f\u6307\u5bf9\u56feG\u4e2d\u6bcf\u4e00\u4e2a\u9876\u70b9\\(v_i\\)\u5efa\u7acb\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u7b2c i \u4e2a\u5355\u94fe\u8868\u7684\u7ed3\u70b9\u8868\u793a\u4f9d\u9644\u4e8e\u7ed3\u70b9\\(v_i\\)\u7684\u8fb9</li> </ol> <p><code>\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u5219\u662f\u4ee5\u9876\u70b9$v_i$\u4e3a\u5934\u7684\u5f27</code>\uff0c\u8fd9\u4e2a\u5355\u94fe\u8868\u5c31\u6210\u4e3a\u9876\u70b9\\(v_i\\)\u7684\u8fb9\u8868\u3002</p> <ol> <li>\u8fb9\u8868\u7684\u5934\u6307\u9488\u548c\u9876\u70b9\u7684\u6570\u636e\u4fe1\u606f\u91c7\u7528\u987a\u5e8f\u5b58\u50a8\uff0c\u6240\u4ee5\u5728\u90bb\u63a5\u8868\u4e2d\u5b58\u5728\u4e24\u79cd\u8282\u70b9\uff1a\u9876\u70b9\u8868\u7ed3\u70b9\u548c\u8fb9\u8868\u7ed3\u70b9</li> </ol> <p></p> <p>\u9876\u70b9\u8868\u7ed3\u70b9\u7531\u9876\u70b9\u57df(data)\u548c\u6307\u5411\u7b2c\u4e00\u6761\u90bb\u63a5\u8fb9\u7684\u6307\u9488(firstarc) \u6784\u6210\uff0c\u8fb9\u8868(\u90bb\u63a5\u8868)\u7ed3\u70b9\u7531\u90bb\u63a5\u70b9\u57df(adjvex)\u548c\u6307\u5411\u4e0b\u4e00\u6761\u90bb\u63a5\u8fb9\u7684\u6307\u9488\u57df(nextarc) \u6784\u6210\u3002</p> <p><code>\u9876\u70b9\u5148\u6307\u5411\u8fb9\u8868</code>\uff0c\u8fb9\u8868\u5411\u540e\u4f9d\u6b21\u8fde\u63a5</p> <p>\u65e0\u5411\u56fe\u7684\u90bb\u63a5\u8868\u5b9e\u4f8b\u5982\u4e0b\uff1a</p> <p></p> <p>\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868\u5b9e\u4f8b\u5982\u4e0b\uff1a</p> <p>1\u4e0e2\u548c5\u8fde\u63a5\uff0c2\u548c5\u6ca1\u6709\u5148\u540e\u987a\u5e8f\u4e4b\u5206</p> <p></p> <p>\u5bf9\u4e8e\u6709\u6743\u56fe\uff0c\u53ef\u4ee5\u5728\u8fb9\u8868\u7ed3\u70b9\u7684\u5b9a\u4e49\u4e2d\u589e\u52a0\u4e00\u4e2aweight\u7684\u6570\u636e\u57df\uff0c\u5b58\u50a8\u6743\u503c\u4fe1\u606f\u3002</p> <pre><code>#define MAXVEX 10               //\u56fe\u4e2d\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\ntypedef char VertexType;        //\u9876\u70b9\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int WeightType;         //\u8fb9\u4e0a\u7684\u6743\u503c\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int Vertex;             //\u7528\u4e8e\u5b58\u50a8\u4e0b\u6807\u7684\u7c7b\u578b\n/* vertices are numbered from 1 to MaxVertexNum */\n\n/*\u8fb9\u8868\u7ed3\u70b9*/\ntypedef struct AdjVNode{\n    int adjvex;                 //\u8be5\u5f27\u6240\u6307\u5411\u7684\u9876\u70b9\u7684\u4e0b\u6807\u6216\u8005\u4f4d\u7f6e\n    WeightType weight;          //\u6743\u503c\uff0c\u5bf9\u4e8e\u975e\u7f51\u56fe\u53ef\u4ee5\u4e0d\u9700\u8981\n    struct AdjVNode *next;      //\u6307\u5411\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\n}AdjVNode;\ntypedef struct AdjVNode *PtrToAdjVNode;\n\n/*\u9876\u70b9\u8868\u7ed3\u70b9*/\ntypedef struct VertexNode{\n    VertexType data;            //\u9876\u70b9\u57df\uff0c\u5b58\u50a8\u9876\u70b9\u4fe1\u606f\n    PtrToAdjVNode FirstEdge;    //\u8fb9\u8868\u5934\u6307\u9488\n}AdjList[MAXVEX];\n\n/*\u90bb\u63a5\u8868*/\ntypedef struct{\n    AdjList adjList;\n    int Vertexnum;\n    int Edgenum;                //\u56fe\u4e2d\u5f53\u524d\u9876\u70b9\u6570\u548c\u8fb9\u6570\n}GNode;\ntypedef  GNode *PtrToGNode;\ntypedef PtrToGNode LGraph;      //\u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u5b58\u50a8\u7684\u56fe\u7c7b\u578b\n\nLGraph ReadG()\n{\n    int i;\n    // \u521b\u5efa\u4e00\u4e2a\u56fe\u8868\n    LGraph LG = (LGraph)malloc(sizeof(GNode));\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        LG-&gt;adjlist[i].FirstEdge = NULL;    // \u5c06\u8fb9\u8868\u7f6e\u4e3a\u7a7a\u8868\n    }\n    // \u8f93\u51fa\u56fe\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    scanf(\"%d %d\", &amp;LG-&gt;Vertexnum, &amp;LG-&gt;Edgenum);\n    for(i = 0; i &lt; LG-&gt;Edgenum; i++)\n    {\n        int v1, v2;\n        // \u4e00\u6b21\u8f93\u5165\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\n        scanf(\"%d %d\", &amp;v1, &amp;v2);\n        // \u5f00\u59cb\u521b\u5efaAdjVNode\n        PtrToAdjVNode adj = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        adj-&gt;adjvex = v2;       // \u90bb\u63a5\u5e8f\u53f7\u4e3av2,\u8be5\u8fb9\u6240\u6307\u5411\u7684\u9876\u70b9\n        adj-&gt;next = NULL;\n        // FirstEdge\u662f\u9876\u70b9\u6307\u5411\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5c31\u7528adj\u8fdb\u884c\u66ff\u4ee3\n        if(LG-&gt;adjlist[v1].FirstEdge == NULL)\n        {\n            LG-&gt;adjlist[v1].FirstEdge = adj;\n        }\n        else\n        {\n            // \u6b64\u5904\u4e3a\u5728\u672b\u5c3e\u6dfb\u52a0\u7ed3\u70b9\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u91c7\u7528\u5934\u63d2\u6cd5\n            PtrToAdjVNode temp = LG-&gt;adjlist[v1].FirstEdge;\n            while(temp-&gt;next != NULL)\n            {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = adj;\n        }\n    }\n    return LG;\n}\n</code></pre> <p>\u56fe\u7684\u90bb\u63a5\u8868\u5b58\u50a8\u65b9\u6cd5\u5177\u6709\u4ee5\u4e0b\u7684\u7279\u70b9\uff1a</p> <ol> <li>\u82e5G\u4e3a\u65e0\u5411\u56fe\uff0c\u5219\u6240\u9700\u7684\u5b58\u50a8\u7a7a\u95f4\u4e3a\\(\\(O(|V|+2|E|)\\)\\),\u5bf9\u4e8e\u9876\u70b9\u8868\u9700\u8981\\(\\(|V|\\)\\)\uff0c\u5bf9\u4e8e\u90bb\u63a5\u8868\u9700\u8981\\(O(|V|+2|E|)\\)</li> </ol> <p>\u524d\u8005\u7684\u500d\u65702\u662f\u7531\u4e8e\u65e0\u5411\u56fe\u4e2d,\u6bcf\u6761\u8fb9\u5728\u90bb\u63a5\u8868\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21</p> <ol> <li> <p>\u5bf9\u4e8e\u7a00\u758f\u56fe\uff0c\u91c7\u7528\u90bb\u63a5\u8868\u53ef\u4ee5\u6781\u5927\u5730\u8282\u7701\u5b58\u50a8\u7a7a\u95f4</p> </li> <li> <p>\u5728\u90bb\u63a5\u8868\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u9876\u70b9\uff0c\u53ea\u9700\u8981\u8bfb\u53d6\u5b83\u5730\u90bb\u63a5\u8868\uff0c\u5c31\u80fd\u627e\u5230\u5b83\u7684\u6240\u6709\u90bb\u8fb9\u3002\u5728\u90bb\u63a5\u77e9\u9635\u4e2d\uff0c\u76f8\u540c\u7684\u64cd\u4f5c\u5219\u9700\u8981\u626b\u63cf\u4e00\u884c\uff0c\u82b1\u8d39\u7684\u65f6\u95f4\u4e3aO ( n )\u3002\u4f46\u662f\uff0c\u82e5\u8981\u786e\u5b9a\u7ed9\u5b9a\u7684\u4e24\u4e2a\u9876\u70b9\u95f4\u662f\u5426\u5b58\u5728\u8fb9\uff0c\u5219\u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u53ef\u4ee5\u7acb\u523b\u67e5\u5230\uff0c\u800c\u5728\u90bb\u63a5\u8868\u4e2d\u5219\u9700\u8981\u5728\u76f8\u5e94\u7ed3\u70b9\u5bf9\u5e94\u7684\u8fb9\u8868\u4e2d\u67e5\u627e\u53e6\u4e00\u7ed3\u70b9\uff0c\u6548\u7387\u8f83\u4f4e\u3002</p> </li> <li> <p>\u5728\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a\u4e2d\uff0c\u6c42\u4e00\u4e2a\u7ed9\u5b9a\u9876\u70b9\u7684\u51fa\u5ea6\uff0c\u53ea\u9700\u8ba1\u7b97\u5b83\u5728\u90bb\u63a5\u8868\u4e2d\u7684\u7ed3\u70b9\u6570\u3002<code>\u4f46\u6c42\u7ed3\u70b9\u7684\u5165\u5ea6\uff0c\u9700\u8981\u904d\u5386\u5168\u90e8\u7684\u90bb\u63a5\u8868\uff0c\u56e0\u6b64\u540e\u9762\u5f15\u5165\u9006\u90bb\u63a5\u8868\u7684\u5b58\u50a8\u65b9\u5f0f\u6765\u52a0\u901f\u6c42\u89e3\u7ed9\u5b9a\u9876\u70b9\u7684\u5165\u5ea6\u3002</code></p> </li> <li> <p>\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a\u5e76\u4e0d\u552f\u4e00\uff0c\u56e0\u4e3a\u5728\u6bcf\u4e2a\u9876\u70b9\u5bf9\u5e94\u7684\u5355\u94fe\u8868\u4e2d\uff0c\u5404\u8fb9\u7ed3\u70b9\u7684\u94fe\u63a5\u6b21\u5e8f\u53ef\u4ee5\u662f\u4efb\u610f\u7684\uff0c\u5b83\u53d6\u51b3\u4e8e\u5efa\u7acb\u90bb\u63a5\u8868\u7684\u7b97\u6cd5\u53ca\u8fb9\u7684\u8f93\u5165\u6b21\u5e8f\u3002</p> </li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#823","title":"8.2.3 \u5341\u5b57\u94fe\u8868","text":"<ol> <li>\u5341\u5b57\u94fe\u8868\u662f\u6709\u5411\u56fe\u7684\u4e00\u79cd\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784</li> </ol> <p>\u5bf9\u4e8e\u6709\u5411\u56fe\u6765\u8bf4\uff0c\u90bb\u63a5\u8868\u662f\u6709\u7f3a\u9677\u7684\uff0c\u56e0\u4e3a\u65e0\u6cd5\u5feb\u901f\u8ba1\u7b97\u5165\u5ea6\uff0c\u9700\u8981\u904d\u5386\u4e00\u6574\u4e2a\u56fe\u3002</p> <p><code>\u4f46\u662f\u9006\u90bb\u63a5\u8868\u80fd\u591f\u89e3\u51b3\u5165\u5ea6\u95ee\u9898\uff0c\u4f46\u662f\u65e0\u6cd5\u89e3\u51b3\u51fa\u5ea6\u3002</code>\u6240\u4ee5\u6211\u4eec\u5c06\u90bb\u63a5\u8868\u548c\u9006\u90bb\u63a5\u8868\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5f97\u5230\u5341\u5b57\u94fe\u8868</p> <ol> <li>\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u9876\u70b9\u8868\u7ed3\u70b9\u7ed3\u6784\uff1a</li> </ol> <p></p> <p>\u5176\u4e2d\\(firstin\\)\u8868\u793a\u5165\u8fb9\u8868\u5934\u6307\u9488\uff0c\u6307\u5411\u8be5\u9876\u70b9\u7684\u5165\u8fb9\u8868\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\uff0c\\(firstout\\)\u8868\u793a\u51fa\u8fb9\u8868\u5934\u6307\u9488\uff0c\u6307\u5411\u8be5\u9876\u70b9\u7684\u51fa\u8fb9\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u3002</p> <ol> <li>\u91cd\u65b0\u5b9a\u4e49\u7684\u8fb9\u8868\u7ed3\u70b9\u7ed3\u6784\u5982\u4e0b\u8868\u6240\u793a\uff1a</li> </ol> <p></p> <p>tailvex \u662f\u6307\u8fb9\u8d77\u70b9\u5728\u9876\u70b9\u8868\u7684\u4e0b\u6807\uff0ctaillink\u662f\u6307\u8fb9\u8868\u6307\u9488\u57df\uff0c\u6307\u5411\u8d77\u70b9\u76f8\u540c\u7684\u4e0b\u4e00\u6761\u8fb9\u3002</p> <p>headvex \u662f\u6307\u5f27\u7ec8\u70b9\u5728\u9876\u70b9\u8868\u4e2d\u7684\u4e0b\u6807\uff0cheadlink\u662f\u6307\u5165\u8fb9\u8868\u6307\u9488\u57df\uff0c\u6307\u5411\u7ec8\u70b9\u76f8\u540c\u7684\u4e0b\u4e00\u6761\u8fb9</p> <p>\u5982\u679c\u6709\u9700\u6c42\uff0c\u53ef\u4ee5\u6dfb\u52a0weight</p> <ol> <li>\u4f8b\u5b50\uff1a</li> </ol> <p>\u9876\u70b9\u5b58\u5165\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4{\\(V_0,V_1,V_2,V_3\\)},\u5b9e\u7ebf\u7bad\u5934\u6307\u9488\u7684\u56fe\u793a\u4e0e\u90bb\u63a5\u8868\u76f8\u540c\uff0c\u4e5f\u5c31\u662f\u6307\u5411\u51fa\u8fb9\u8868\u3002</p> <p>\u4ee5\u9876\u70b9\\(V_0\\)\u4e3a\u4f8b\uff0cfisetout\u6307\u5411\u7684\u662f\u51fa\u8fb9\u8868\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\\(V_3\\),\u6240\u4ee5\\(V_0\\)\u8fb9\u8868\u7684headvex = 3\uff0ctailvex \u4e5f\u5c31\u662f\u5f53\u524d\u9876\u70b9\\(V_0\\)\u7684\u4e0b\u68070\uff0c\u7531\u4e8e\\(V_0\\)\u53ea\u6709\u4e00\u4e2a\u51fa\u8fb9\u9876\u70b9\uff0c\u6240\u4ee5headlink\u548ctaillink\u90fd\u662f\u7a7a</p> <p></p> <p><code>\u4ee5\u4e0b\u91cd\u70b9\u4ecb\u7ecd\u865a\u7ebf\u7bad\u5934\u7684\u542b\u4e49\uff1a\u4e5f\u5c31\u662f\u6b64\u56fe\u7684\u9006\u90bb\u63a5\u8868\u7684\u8868\u793a\u3002\u5bf9\u4e8eV0\u800c\u8a00\uff0c\u5b83\u6709\u9876\u70b9V1\u548cV2\u7684\u5165\u8fb9\u3002\u56e0\u6b64V0\u7684firstin\u6307\u5411\u9876\u70b9V1\u7684\u8fb9\u8868\u7ed3\u70b9\u4e2dheadvex = 0\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u4e0a\u56fe\u4e2d\u7684\u5e8f\u53f71\u3002\u63a5\u7740\u7531\u5165\u8fb9\u7ed3\u70b9\u7684headlink\u6307\u5411\u4e0b\u4e00\u4e2a\u5165\u8fb9\u9876\u70b9V2\uff0c\u4e5f\u5c31\u662f\u5e8f\u53f72\u3002</code></p> <p>\u5bf9\u4e8e\u9876\u70b9V1\u800c\u8a00\uff0c\u5b83\u6709\u4e00\u4e2a\u5165\u8fb9\u9876\u70b9V2\uff0c\u6240\u4ee5\u5b83\u7684firstin\u6307\u5411V2\u7684\u8fb9\u8868\u7ed3\u70b9\u4e2dheadvex = 1\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u5e8f\u53f73.</p> <p>\u9876\u70b9V2\u548cV3\uff0c\u4e5f\u662f\u540c\u6837\u6709\u4e00\u4e2a\u5165\u8fb9\u9876\u70b9\uff0c\u89c1\u56fe\u4e2d\u7684\u5e8f\u53f74.5</p> <p>\u5341\u5b57\u94fe\u8868\u7684\u597d\u5904\u5c31\u662f\u56e0\u4e3a\u628a\u90bb\u63a5\u8868\u548c\u9006\u90bb\u63a5\u8868\u6574\u5408\u5728\u4e86\u4e00\u8d77\uff0c \u8fd9\u6837\u65e2\u5bb9\u6613\u627e\u5230\u4ee5V1\u4e3a\u5c3e\u7684\u5f27\uff0c\u4e5f\u5bb9\u6613\u627e\u5230\u4ee5V1 \u4e3a\u5934\u7684\u5f27\uff0c\u56e0\u800c\u5bb9\u6613\u6c42\u5f97\u9876\u70b9\u7684\u51fa\u5ea6\u548c\u5165\u5ea6\u3002\u800c\u4e14\u5b83\u9664\u4e86\u7ed3\u6784\u590d\u6742\u4e00\u70b9\u5916\uff0c\u5176\u5b9e\u521b\u5efa\u56fe\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u548c\u90bb\u63a5\u8868\u76f8\u540c\u7684\uff0c\u56e0\u6b64\uff0c\u5728\u6709\u5411\u56fe\u7684\u5e94\u7528\u4e2d\uff0c\u5341\u5b57\u94fe\u8868\u662f\u975e\u5e38\u597d\u7684\u6570\u636e\u7ed3\u6784\u6a21\u578b\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#824","title":"8.2.4 \u90bb\u63a5\u591a\u91cd\u8868","text":"<p>\u91cd\u65b0\u5b9a\u4e49\u7684\u8fb9\u8868\u7ed3\u70b9\u7ed3\u6784\u4e3a\uff1a</p> <p></p> <p>\u5176\u4e2divex\u548cjvex\u662f\u4e0e\u67d0\u6761\u8fb9\u4f9d\u9644\u7684\u4e24\u4e2a\u9876\u70b9\u5728\u9876\u70b9\u8868\u4e2d\u4e0b\u6807\u3002ilink \u6307\u5411\u4f9d\u9644\u9876\u70b9ivex\u7684\u4e0b\u4e00\u6761\u8fb9\uff0cjlink \u6307\u5411\u4f9d\u9644\u9876\u70b9jvex\u7684\u4e0b\u4e00\u6761\u8fb9\u3002\u8fd9\u5c31\u662f\u90bb\u63a5\u591a\u91cd\u8868\u7ed3\u6784\u3002</p> <p>\u6bcf\u4e2a\u9876\u70b9\u4e5f\u7528\u4e00\u4e00\u4e2a\u7ed3\u70b9\u8868\u793a\uff0c\u5b83\u7531\u5982\u4e0b\u6240\u793a\u7684\u4e24\u4e2a\u57df\u7ec4\u6210</p> <p>\u5176\u4e2d\uff0cdata \u57df\u5b58\u50a8\u8be5\u9876\u70b9\u7684\u76f8\u5173\u4fe1\u606f\uff0cfirstedge \u57df\u6307\u793a\u7b2c\u4e00\u6761\u4f9d\u9644\u4e8e\u8be5\u9876\u70b9\u7684\u8fb9</p> <p></p> <p>\u6211\u4eec\u5f00\u59cb\u8fde\u7ebf\uff0c\u5982\u56fe\uff0c\u9996\u5148\u8fde\u7ebf\u7684\u2460\u2461\u2462\u2463\u5c31\u662f\u5c06\u9876\u70b9\u7684firstedge\u6307\u5411\u4e00\u6761\u8fb9\uff0c\u9876\u70b9\u4e0b\u6807\u8981\u4e0eivex\u7684\u503c\u76f8\u540c,\u8fd9\u5f88\u597d\u7406\u89e3\u3002</p> <p>\u63a5\u7740\uff0c\u7531\u4e8e\u9876\u70b9V0\u7684\uff08V0\uff0cV1\uff09\u7684\u4e34\u8fb9\u7531\uff08V0,V3),(V0,V2),\u56e0\u6b64\u5e8f\u53f75\uff0c6\u7684\u8fde\u7ebf\u5c31\u662f\u6ee1\u8db3\u6307\u5411\u4e0b\u4e00\u6761\u4f9d\u9644\u4e8e\u9876\u70b9V0\u7684\u8fb9\uff0c\u6ce8\u610filink\u6307\u5411\u7684\u7ed3\u70b9\u7684jvex\u4e00\u5b9a\u8981\u548c\u5b83\u672c\u8eab\u7684ivex\u7684\u503c\u76f8\u540c\u3002</p> <p>\u8fde\u7ebf7\uff0c\u5c31\u662f\uff08V1\uff0cV0\uff09\u8fd9\u6761\u8fb9\uff0c\u5b83\u662f\u76f8\u5f53\u4e8e\u9876\u70b9V1\u6307\u5411\uff08V1\uff0cV2\uff09\u8fb9\u540e\u7684\u4e0b\u4e00\u6761\u3002V2\u6709\u4e09\u6761\u8fb9\u4f9d\u9644\uff0c\u6240\u4ee5\u5728\u2462\u4e4b\u540e\u5c31\u6709\u4e86\u2467\u2468\u3002\u8fde\u7ebf\u2463\u7684\u5c31\u662f\u9876\u70b9V3\u5728\u8fde\u7ebf\u2463\u4e4b\u540e\u7684\u4e0b\u4e00\u6761\u8fb9\u3002 \u5de6\u56fe\u4e00\u5171\u67095\u6761\u8fb9\uff0c\u6240\u4ee5\u53f3\u56fe\u670910\u6761\u8fde\u7ebf\uff0c\u5b8c\u5168\u7b26\u5408\u9884\u671f</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#83","title":"8.3 \u62d3\u6251\u6392\u5e8f","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#831","title":"8.3.1 \u5b9a\u4e49","text":"<p>\u5728\u4e00\u4e2a\u8868\u793a\u5de5\u7a0b\u7684\u6709\u5411\u56fe\u4e2d\uff0c\u7528\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u5f27\u8868\u793a\u6d3b\u52a8\u4e4b\u95f4\u7684\u4f18\u5148\u5173\u7cfb\uff0c\u8fd9\u6837\u7684\u6709\u5411\u56fe\u4e3a\u9876\u70b9\u8868\u793a\u6d3b\u52a8\u7684\u7f51\uff0c\u6211\u4eec\u79f0\u4e3aAOV\u7f51( Activity On VertexNetwork)\u3002</p> <p>\u82e5\u7528DAG\u56fe\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\u8868\u793a\u4e00\u4e2a\u5de5\u7a0b\uff0c\u5176\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u6709\u5411\u8fb9\u8868\u793a\u6d3b\u52a8Vi\u5fc5\u987b\u4f18\u5148\u4e8e\u6d3b\u52a8Vj\u3002 <p>\u8bbe\\(G = (V,E)\\),\u662f\u4e00\u4e2a\u5177\u6709n\u4e2a\u9876\u70b9\uff0cV\u4e2d\u7684\u9876\u70b9\u5e8f\u5217\u4e3a\\(V_1,V_2,\\cdots,V_n\\),\u6ee1\u8db3\u82e5\u4ece\u9876\u70b9\\(V_1\\)\u5230\\(V_j\\)\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5219\u9876\u70b9\u5e8f\u5217\u4e2d\u9876\u70b9\\(V_i\\)\u5fc5\u987b\u5728\\(V_j\\)\u4e4b\u524d\uff0c\u79f0\u4e4b\u4e3a\u62d3\u6251\u6392\u5e8f\u3002</p> <p>\u5982\u679c\u56fe\u4e0d\u662f\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\uff0c\u5219\u65e0\u6cd5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u3002\u539f\u56e0\u662f\u627e\u4e0d\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a0\uff08\u73af\uff09\u7684\u70b9\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#832","title":"8.3.2 \u7b97\u6cd5","text":"<ol> <li> <p>\u4eceAOV\u7f51\u4e2d\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u524d\u9a71\u7684\u9876\u70b9\u5e76\u8f93\u51fa\u3002</p> </li> <li> <p>\u4ece\u7f51\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9</p> </li> <li>\u91cd\u590d\u2460\u548c\u2461\u76f4\u5230\u5f53\u524d\u7684AOV\u7f51\u4e3a\u7a7a\u6216\u5f53\u524d\u7f51\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\u3002\u5982\u679c\u8f93\u51fa\u9876\u70b9\u6570\u5c11\u4e86\uff0c\u54ea\u6015\u662f\u5c11\u4e86\u4e00\u4e2a\uff0c\u4e5f\u8bf4\u660e\u8fd9\u4e2a\u7f51\u5b58\u5728\u73af(\u56de\u8def)\uff0c\u4e0d\u662fAOV\u7f51\u3002</li> </ol> <p></p> <p>\u7531\u4e8e\u8f93\u51fa\u6bcf\u4e2a\u9876\u70b9\u7684\u540c\u65f6\u8fd8\u8981\u5220\u9664\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c\u6545\u62d3\u6251\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(V+E)\\)</p> <p>\u82e5\u4e00\u4e2a\u9876\u70b9\u6709\u591a\u4e2a\u76f4\u63a5\u540e\u7ee7\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u901a\u5e38\u4e0d\u552f\u4e00\uff1b\u4f46\u82e5\u5404\u4e2a\u9876\u70b9\u5df2\u7ecf\u6392\u5728\u4e00\u4e2a\u7ebf\u6027\u6709\u5e8f\u7684\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u9876\u70b9\u6709\u552f\u4e00\u7684\u524d\u9a71\u540e\u7ee7\u5173\u7cfb\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u662f\u552f\u4e00\u7684\u3002</p> <p>\u5173\u4e8etopsort\u7684\u7b97\u6cd5\uff0c\u4f46\u90fd\u6709\u5c40\u9650\u6027\uff0c\u53ea\u80fd\u8f93\u51fa\u4e00\u79cd\u62d3\u6251\u6392\u5e8f\uff01\uff01\uff01</p> <pre><code>void Topsort(LGraph G)\n{\n    int i, j;\n    int indegree[MAXVEX]; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    int a[1000];          // \u7528\u4e8e\u5b58\u50a8\u7ed3\u70b9\u662f\u5426\u8f93\u51fa\u8fc7\u7684\u6570\u7ec4\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        indegree[i] = 0; // \u521d\u59cb\u5316\u4e3a0\n        a[i] = 0;        // \u521d\u59cb\u5316\u4e3a0\uff0c\u8868\u793a\u7ed3\u70b9\u6ca1\u6709\u8f93\u51fa\u8fc7\n    }\n    PtrToAdjVNode temp;\n    // \u904d\u5386\u6574\u4e2a\u90bb\u63a5\u8868\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        temp = G-&gt;adjList[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807,\u5bf9\u5e94\u7684\u5c31\u662f\u5165\u5ea6\n            indegree[temp-&gt;adjvex]++;\n            temp = temp-&gt;next;\n        }\n    }\n    // \u5916\u5c42\u5faa\u73af\u4f5c\u7528\u662f\u8f93\u51fa\u5168\u90e8\u7684\u70b9\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        // \u5185\u5c42\u5faa\u73af\u7684\u4f5c\u7528\u662f\u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u7b2c\u4e00\u4e2a\u70b9\n        for (j = 0; j &lt; G-&gt;Vertexnum; j++)\n        {\n            // \u5982\u679c\u5176\u5165\u5ea6\u4e3a0\uff08\u610f\u5473\u7740\u6ca1\u6709\u8fdb\u5165\u7684\u8fb9\uff09\u5e76\u4e14\u4e4b\u524d\u6ca1\u6709\u8f93\u51fa\u8fc7\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa\u8be5\u9876\u70b9\n            // \u5728\u56fe\u4e2d\uff0c\u80af\u5b9a\u5b58\u5728\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5426\u5219\u56fe\u5c31\u6709\u73af\u7684\u5b58\u5728\uff08\u6bcf\u4e00\u4e2a\u70b9\u90fd\u6709\u5165\u5ea6\uff09\n            if (indegree[j] == 0 &amp;&amp; a[j] == 0)\n            {\n                printf(\"%d \", j + 1);\n                // \u6807\u8bb0\u5b83\u5df2\u7ecf\u8f93\u51fa\n                a[j] = 1;\n                temp = G-&gt;adjList[j].FirstEdge;\n                // \u5c06\u8be5\u7ed3\u70b9\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\n                while (temp != NULL)\n                {\n                    indegree[temp-&gt;adjvex]--;\n                    temp = temp-&gt;next;\n                }\n            }\n        }\n    }\n}\n// \u7528\u961f\u5217\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\nvoid Topsort1(LGraph G)\n{\n    // \u7528\u4e00\u4e2a\u961f\u5217\u8868\u793a\u53ef\u4f9b\u8f93\u51fa\u7684\u70b9\n    int Queue[MAXVEX];\n    int cnt = 0;\n    int front = 0, rear = 0;\n    // \u521d\u59cb\u5316\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        Queue[i] = 0;\n    }\n    int indegree[MAXVEX]; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for(int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        indegree[i] = 0; // \u521d\u59cb\u5316\u4e3a0\n    }\n    PtrToAdjVNode temp;\n    // \u904d\u5386\u6574\u4e2a\u90bb\u63a5\u8868\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for (int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        temp = G-&gt;adjList[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\n            indegree[temp-&gt;adjvex]++;\n            temp = temp-&gt;next;\n        }\n    }\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        if(indegree[i] == 0)\n        {\n            Queue[rear++] = i;\n        }\n    }\n    // \u5728while\u5faa\u73af\u4e4b\u524d\uff0c\u8981\u5148\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u5148\u8fdb\u5165\u961f\u5217\n    while(front &lt; rear)\n    {\n        int v = Queue[front++];\n        printf(\"%d \", v + 1);\n        cnt++;\n        temp = G-&gt;adjList[v].FirstEdge;\n        while(temp != NULL)\n        {\n            indegree[temp-&gt;adjvex]--;\n            if(indegree[temp-&gt;adjvex] == 0)\n            {\n                Queue[rear++] = temp-&gt;adjvex;\n            }\n            temp = temp-&gt;next;\n        }\n    }\n    if(cnt != G-&gt;Vertexnum)\n    {\n        printf(\"ERROR! Graph has a cycle!\\n\");\n    }\n}\n</code></pre> <pre><code>bool IsTopSeq(LGraph Graph, Vertex Seq[])\n{\n    int indegree[MaxVertexNum] = {0}; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    int i;\n    PtrToAdjVNode temp;\n    // \u8ba1\u7b97\u7ed9\u5b9a\u56fe\u7684\u6bcf\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\n    for (i = 0; i &lt; Graph-&gt;Nv; i++)\n    {\n        temp = Graph-&gt;G[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\n            indegree[temp-&gt;AdjV]++;\n            temp = temp-&gt;Next;\n        }\n    }\n    // \u5bf9\u8f93\u5165\u7684\u70b9\u4e00\u4e2a\u4e00\u4e2a\u904d\u5386\u8fc7\u53bb\uff0c\u8981\u6c42\u6bcf\u4e00\u6b21\uff0c\u8be5\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u4e0d\u4e3a0\u76f4\u63a5\uff0creturn fabreak\n    for(i = 0; i &lt; Graph-&gt;Nv; i++)\n    {\n        Seq[i]--;\n        if(indegree[Seq[i]] != 0)\n        {\n            return false;\n        }\n        temp = Graph-&gt;G[Seq[i]].FirstEdge;\n        // \u5c06\u8be5\u7ed3\u70b9\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\n        while (temp != NULL)\n        {\n            indegree[temp-&gt;AdjV]--;\n            temp = temp-&gt;Next;\n        }\n    }\n    return true;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAXVEX 10        // \u56fe\u4e2d\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\ntypedef char VertexType; // \u9876\u70b9\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int WeightType;  // \u8fb9\u4e0a\u7684\u6743\u503c\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int Vertex;      // \u7528\u4e8e\u5b58\u50a8\u4e0b\u6807\u7684\u7c7b\u578b\n/* vertices are numbered from 1 to MaxVertexNum */\n\n/*\u8fb9\u8868\u7ed3\u70b9*/\ntypedef struct AdjVNode\n{\n    int adjvex;            // \u8be5\u5f27\u6240\u6307\u5411\u7684\u9876\u70b9\u7684\u4e0b\u6807\u6216\u8005\u4f4d\u7f6e\n    WeightType weight;     // \u6743\u503c\uff0c\u5bf9\u4e8e\u975e\u7f51\u56fe\u53ef\u4ee5\u4e0d\u9700\u8981\n    struct AdjVNode *next; // \u6307\u5411\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\n} AdjVNode;\ntypedef struct AdjVNode *PtrToAdjVNode;\n\n/*\u9876\u70b9\u8868\u7ed3\u70b9*/\ntypedef struct VertexNode\n{\n    VertexType data;         // \u9876\u70b9\u57df\uff0c\u5b58\u50a8\u9876\u70b9\u4fe1\u606f\n    PtrToAdjVNode FirstEdge; // \u8fb9\u8868\u5934\u6307\u9488\n} AdjList[MAXVEX];\n\n/*\u90bb\u63a5\u8868*/\ntypedef struct\n{\n    AdjList adjList;\n    int Vertexnum;\n    int Edgenum; // \u56fe\u4e2d\u5f53\u524d\u9876\u70b9\u6570\u548c\u8fb9\u6570\n} GNode;\ntypedef GNode *PtrToGNode;\ntypedef PtrToGNode LGraph; // \u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u5b58\u50a8\u7684\u56fe\u7c7b\u578b\n\nLGraph ReadG()\n{\n    int i;\n    LGraph LG = (LGraph)malloc(sizeof(GNode));\n    for (i = 0; i &lt; MAXVEX; i++)\n    {\n        LG-&gt;adjList[i].FirstEdge = NULL;\n    }\n    scanf(\"%d %d\", &amp;LG-&gt;Vertexnum, &amp;LG-&gt;Edgenum);\n    for (i = 0; i &lt; LG-&gt;Edgenum; i++)\n    {\n        int p1, p2;\n        scanf(\"%d %d\", &amp;p1, &amp;p2);\n        PtrToAdjVNode adj = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        p1--;\n        p2--;\n        adj-&gt;adjvex = p2;\n        adj-&gt;next = NULL;\n        if (LG-&gt;adjList[p1].FirstEdge == NULL)\n        {\n            LG-&gt;adjList[p1].FirstEdge = adj;\n        }\n        else\n        {\n            adj-&gt;next = LG-&gt;adjList[p1].FirstEdge;\n            LG-&gt;adjList[p1].FirstEdge = adj;\n        }\n    }\n    return LG;\n}\nint IsTopSeq(LGraph Graph, Vertex Seq[])\n{\n    int a[MAXVEX]; // \u7528\u4e8e\u5b58\u50a8\u7ed3\u70b9\u662f\u5426\u8f93\u51fa\u8fc7\u7684\u6570\u7ec4\n    int i, j;\n    for (i = 0; i &lt; MAXVEX; i++)\n    {\n        a[i] = 0; // \u521d\u59cb\u5316\u4e3a0\uff0c\u8868\u793a\u7ed3\u70b9\u6ca1\u6709\u8f93\u51fa\u8fc7\n    }\n    PtrToAdjVNode temp;\n    for (i = 0; i &lt; Graph-&gt;Vertexnum; i++)\n    {\n        Seq[i]--;\n        for (j = 0; j &lt; Graph-&gt;Vertexnum; j++)\n        {\n            if (Seq[i] == j || a[j] == 1)\n            {\n                continue;\n            }\n            else\n            {\n                temp = Graph-&gt;adjList[j].FirstEdge;\n                while (temp != NULL)\n                {\n                    if (temp-&gt;adjvex == Seq[i])\n                    {\n                        return 0;\n                    }\n                    temp = temp-&gt;next;\n                }\n            }\n        }\n        a[Seq[i]] = 1;\n    }\n    return 1;\n}\nint IsTopSort1(LGraph G, Vertex Seq[])\n{\n    int indegree[MAXVEX] = {0}; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    int i;\n    PtrToAdjVNode temp;\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        temp = G-&gt;adjList[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\n            indegree[temp-&gt;adjvex]++;\n            temp = temp-&gt;next;\n        }\n    }\n    for(i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        Seq[i]--;\n        if(indegree[Seq[i]] != 0)\n        {\n            return 0;\n        }\n        temp = G-&gt;adjList[Seq[i]].FirstEdge;\n        // \u5c06\u8be5\u7ed3\u70b9\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\n        while (temp != NULL)\n        {\n            indegree[temp-&gt;adjvex]--;\n            temp = temp-&gt;next;\n        }\n    }\n    return 1;\n}\n// \u8f93\u51fa\u6240\u6709\u7684\u62d3\u6251\u6392\u5e8f\nvoid Topsort(LGraph G)\n{\n    int i, j;\n    int indegree[MAXVEX]; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    int a[1000];          // \u7528\u4e8e\u5b58\u50a8\u7ed3\u70b9\u662f\u5426\u8f93\u51fa\u8fc7\u7684\u6570\u7ec4\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        indegree[i] = 0; // \u521d\u59cb\u5316\u4e3a0\n        a[i] = 0;        // \u521d\u59cb\u5316\u4e3a0\uff0c\u8868\u793a\u7ed3\u70b9\u6ca1\u6709\u8f93\u51fa\u8fc7\n    }\n    PtrToAdjVNode temp;\n    // \u904d\u5386\u6574\u4e2a\u90bb\u63a5\u8868\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        temp = G-&gt;adjList[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\n            indegree[temp-&gt;adjvex]++;\n            temp = temp-&gt;next;\n        }\n    }\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        for (j = 0; j &lt; G-&gt;Vertexnum; j++)\n        {\n            // \u5982\u679c\u5176\u5165\u5ea6\u4e3a0\uff08\u610f\u5473\u7740\u6ca1\u6709\u8fdb\u5165\u7684\u8fb9\uff09\u5e76\u4e14\u4e4b\u524d\u6ca1\u6709\u8f93\u51fa\u8fc7\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa\u8be5\u9876\u70b9\n            if (indegree[j] == 0 &amp;&amp; a[j] == 0)\n            {\n                printf(\"%d \", j + 1);\n                // \u6807\u8bb0\u5b83\u5df2\u7ecf\u8f93\u51fa\n                a[j] = 1;\n                temp = G-&gt;adjList[j].FirstEdge;\n                // \u5c06\u8be5\u7ed3\u70b9\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\n                while (temp != NULL)\n                {\n                    indegree[temp-&gt;adjvex]--;\n                    temp = temp-&gt;next;\n                }\n            }\n        }\n    }\n}\n// \u7528\u961f\u5217\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\nvoid Topsort1(LGraph G)\n{\n    int Queue[MAXVEX];\n    int cnt = 0;\n    int front = 0, rear = 0;\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        Queue[i] = 0;\n    }\n    int indegree[MAXVEX]; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for(int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        indegree[i] = 0; // \u521d\u59cb\u5316\u4e3a0\n    }\n    PtrToAdjVNode temp;\n    // \u904d\u5386\u6574\u4e2a\u90bb\u63a5\u8868\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for (int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        temp = G-&gt;adjList[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\n            indegree[temp-&gt;adjvex]++;\n            temp = temp-&gt;next;\n        }\n    }\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        if(indegree[i] == 0)\n        {\n            Queue[rear++] = i;\n        }\n    }\n    while(front &lt; rear)\n    {\n        int v = Queue[front++];\n        printf(\"%d \", v + 1);\n        cnt++;\n        temp = G-&gt;adjList[v].FirstEdge;\n        while(temp != NULL)\n        {\n            indegree[temp-&gt;adjvex]--;\n            if(indegree[temp-&gt;adjvex] == 0)\n            {\n                Queue[rear++] = temp-&gt;adjvex;\n            }\n            temp = temp-&gt;next;\n        }\n    }\n    if(cnt != G-&gt;Vertexnum)\n    {\n        printf(\"ERROR! Graph has a cycle!\\n\");\n    }\n}\nint main()\n{\n    LGraph G;\n    G = ReadG();\n    // Topsort(G);\n    // printf(\"\\n---------\\n\");\n    // Topsort1(G);\n    // printf(\"\\n---------\\n\");\n    Vertex Seq[MAXVEX];\n    int i, j, N;\n    scanf(\"%d\", &amp;N);\n    for (i = 0; i &lt; N; i++)\n    {\n        for (j = 0; j &lt; G-&gt;Vertexnum; j++)\n        {\n            scanf(\"%d\", &amp;Seq[j]);\n        }\n        if (IsTopSort1(G, Seq) == 1)\n        {\n            printf(\"Yes\\n\");\n        }\n        else\n        {\n            printf(\"No\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#84","title":"8.4 \u56fe\u7684\u904d\u5386","text":"<p>\u56fe\u7684\u904d\u5386\u548c\u6811\u7684\u904d\u5386\u76f8\u4f3c\uff0c\u4ece\u56fe\u7684\u67d0\u4e00\u9876\u70b9\u51fa\u53d1\u4eff\u904d\u56fe\u4e2d\u6240\u6709\u7684\u9876\u70b9\uff0c\u4e14\u4f7f\u6bcf\u4e00\u4e2a\u9876\u70b9\u53ea\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u56fe\u7684\u904d\u5386</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#841","title":"8.4.1 \u6df1\u5ea6\u4f18\u5148\u904d\u5386","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u4e5f\u79f0\u4e4b\u4e3a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u7b80\u79f0\u4e3aDFS</p> <p><code>\u5b83\u7684\u57fa\u672c\u601d\u60f3\u5982\u4e0b:\u9996\u5148\u8bbf\u95ee\u56fe\u4e2d\u67d0\u4e00\u8d77\u59cb\u9876\u70b9v\uff0c\u7136\u540e\u7531v\u51fa\u53d1\uff0c\u8bbf\u95ee\u4e0ev\u90bb\u63a5\u4e14\u672a\u88ab\u8bbf\u95ee\u7684\u4efb\u4e00\u9876\u70b9w1, \u518d\u8bbf\u95ee\u4e0ew1\u90bb\u63a5\u4e14\u672a\u88ab\u8bbf\u95ee\u7684\u4efb\u4e00\u9876\u70b9\u2026\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u3002\u5f53\u4e0d\u80fd\u518d\u7ee7\u7eed\u5411\u4e0b\u8bbf\u95ee\u65f6\uff0c\u4f9d\u6b21\u9000\u56de\u5230\u6700\u8fd1\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\uff0c\u82e5\u5b83\u8fd8\u6709\u90bb\u63a5\u9876\u70b9\u672a\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u4ece\u8be5\u70b9\u5f00\u59cb\u7ee7\u7eed\u4e0a\u8ff0\u641c\u7d22\u8fc7\u7a0b\uff0c\u76f4\u81f3\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u5747\u88ab\u8bbf\u95ee\u8fc7\u4e3a\u6b62.</code></p> <p></p> <p></p> <p></p> <pre><code>LGraph ReadG()\n{\n    int i;\n    LGraph LG = (LGraph)malloc(sizeof(GNode));\n    for (i = 0; i &lt; MAXVEX; i++)\n    {\n        LG-&gt;adjList[i].FirstEdge = NULL;\n    }\n    scanf(\"%d %d\", &amp;LG-&gt;Vertexnum, &amp;LG-&gt;Edgenum);\n    for (i = 0; i &lt; LG-&gt;Edgenum; i++)\n    {\n        int p1, p2;\n        scanf(\"%d %d\", &amp;p1, &amp;p2);\n        PtrToAdjVNode adj = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        p1--;\n        p2--;\n        adj-&gt;adjvex = p2;\n        adj-&gt;next = NULL;\n        if (LG-&gt;adjList[p1].FirstEdge == NULL)\n        {\n            LG-&gt;adjList[p1].FirstEdge = adj;\n        }\n        else \n        {\n            // \u6b64\u5904\u91c7\u7528\u7684\u662f\u5934\u63d2\u6cd5\n            // adj-&gt;next = LG-&gt;adjList[p1].FirstEdge;\n            // LG-&gt;adjList[p1].FirstEdge = adj;\n            //\u5c3e\u63d2\u6cd5\n            PtrToAdjVNode temp = LG-&gt;adjList[p1].FirstEdge;\n            while(temp-&gt;next != NULL)\n            {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = adj;\n        }\n    }\n    return LG;\n}\n// \u4f7f\u7528\u7684\u524d\u63d0\u6761\u4ef6\u662f\u56fe\u662f\u8fde\u901a\u7684\nvoid DFS(LGraph G, Vertex v, int visited[])\n{\n    PtrToAdjVNode temp;\n    visited[v] = 1;\n    printf(\"%d \", v + 1);\n    for(temp = G-&gt;adjList[v].FirstEdge; temp; temp = temp-&gt;next)\n    {\n        // \u5982\u679ctemp-&gt;adjvex\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u5c06\u5b83\u6240\u5728\u7684\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u7ee7\u7eed\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u76f8\u5f53\u4e8e\u8f93\u51fa\u4ee5\u5b83\u4e3a\u9876\u70b9\u7684\u4e00\u5217\n        if(!visited[temp-&gt;adjvex])\n        {\n            DFS(G, temp-&gt;adjvex, visited);\n        }\n    }\n    // \u5bf9\u4e8e\u975e\u8fde\u901a\u56fe\uff0c\u9700\u8981\u4e0b\u9762\u7684\u4ee3\u7801\n    for(int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        if(!visited[i])\n        {\n            DFS(G, i, visited);\n        }\n    }\n}\nint main()\n{\n    //          1\n    //      2       3\n    //  4       5       6\n    //      7              8\n    LGraph G;\n    G = ReadG();\n    int visited[MAXVEX] = {0};\n    DFS(G, 0, visited);\n}\n</code></pre> <p>\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u56fe\uff0c\u8be5\u5982\u4f55\u5904\u7406</p> <p></p> <p>\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e00\u4e2a\u70b9\uff08\u6ca1\u6709\u88abvisit\uff09\u90fd\u6267\u884c\u4e00\u904dDFS\u641c\u7d22</p> <p></p> <p>\u9012\u5f52\u7684\u987a\u5e8f\u662f\u904d\u53861-&gt;\u904d\u53862-&gt;\u904d\u53863-&gt;.....-&gt;\u904d\u5386n-&gt;\u8fd4\u56den-&gt;\u8fd4\u56den-1...-&gt;\u8fd4\u56de3-&gt;\u8fd4\u56de2-&gt;\u8fd4\u56de1</p> <p>\u8fd4\u56de\u7684\u65f6\u5019\u6253\u5370\uff0c\u56e0\u6b64\u662f\u4ece\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\u6253\u5370\u5230\u6e90\u70b9\u3002\u662f\u9006\u62d3\u6251\u5e8f\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#tarjan","title":"Tarjan\u7b97\u6cd5\u6c42\u5f3a\u8fde\u901a\u5206\u91cf","text":"<p>Tarjan\u7b97\u6cd5\u4e3b\u4f53\u91c7\u7528DFS\u904d\u5386\uff0c\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u9876\u70b9\uff0c\u7ed9\u8be5\u9876\u70b9\u8d4b\u503c\u4e00\u4e2anum\u5e8f\u53f7\u548clow-link\uff0clow-link\u8868\u793a\u5f53\u524d\u9876\u70b9\u80fd\u5230\u8fbe\u7684\u9876\u70b9\u4e2d\u6700\u5c0f\u7684id\uff08\u5305\u62ec\u5b83\u81ea\u5df1\u7684id)\u3002</p> <p></p> <p>\u53ef\u89c1low-link\u76f8\u540c\u7684\u8282\u70b9\u5c31\u7ec4\u6210\u5f3a\u8054\u901a\u5206\u91cf\u3002\u8be5\u7b97\u6cd5\u6838\u5fc3\u5c31\u662f\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9low-link\u503c\u3002</p> <p>\u8be5\u7b97\u6cd5\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u9632\u6b62\u8de8Sccs\u8ddf\u65b0low-link\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6709\u6548\u7684\u9876\u70b9\u8303\u56f4\u5185\u66f4\u65b0low-link\u3002</p> <p></p> <p>DFS\u6df1\u5ea6\u4f18\u5148\u8bbf\u95ee\u4e00\u4e2a\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u5c31\u5c06\u5176\u52a0\u5165\u5230\u6808stack[]\u4e2d\u3002\u6bcf\u627e\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u5c06\u8fd9\u4e9b\u9876\u70b9\u4ece\u6808stack[]\u4e2d\u5f39\u51fa\u3002</p> <p>\u66f4\u65b0Low\u503c\u7684\u6761\u4ef6</p> <p>if (visited[temp-&gt;adjvex] == 0)      {          // \u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\u8be5\u7ed3\u70b9          Dfs(LG, temp-&gt;adjvex, visit);          low[i] = low[i] &lt; low[temp-&gt;adjvex] ? low[i] : low[temp-&gt;adjvex];      }      else if (instack[temp-&gt;adjvex] == 1)      {          // \u5982\u679c\u8bbf\u95ee\u8fc7\u8be5\u7ed3\u70b9\uff0c\u4e14\u8be5\u7ed3\u70b9\u5728\u6808\u4e2d          low[i] = low[i] &lt; num[temp-&gt;adjvex] ? low[i] : num[temp-&gt;adjvex];      }</p> <p>\u4f7f\u7528\u8282\u70b9v\u7684low-link\u66f4\u65b0\u9876\u70b9u\u7684low-link\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u4eceu\u5230v\u7684\u8fb9\uff0c\u5e76\u4e14\u9876\u70b9v\u5fc5\u987b\u5728\u6808\u4e2d\u3002</p> <p>Tarjan\u7b97\u6cd5\u6982\u89c8\uff1a</p> <ol> <li>\u6807\u8bb0\u6240\u6709\u8282\u70b9\u4e3a\u672a\u8bbf\u95ee\u72b6\u6001\uff08unvisited\uff09\u3002</li> <li>\u5f00\u59cbDFS\uff0c\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u4e3a\u5176\u5206\u914did\u548clow-link\u503c\uff0c\u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff08visited\uff09\uff0c\u5e76\u52a0\u5165\u5230\u6808\u4e2d\u3002</li> <li>\u5f53DFS\u56de\u6eaf\u65f6\uff0c\u5982\u679c\u5148\u524d\u8282\u70b9\u5728\u6808\u4e2d\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u9876\u70b9\u7684\u524d\u4e00\u4e2a\u9876\u70b9\u6765\u66f4\u65b0\u5f53\u524d\u9876\u70b9\u7684low-link\uff08\u53d6\u4e8c\u8005\u6700\u5c0f\u503c\uff09\u3002</li> <li>\u5728\u5b8c\u6210\u5f53\u524d\u9876\u70b9\u7684\u6240\u6709\u90bb\u5c45\u540e\uff0c\u5982\u679c\u4ee5\u5f53\u524d\u9876\u70b9\u4e3a\u8d77\u59cb\u7684\u9876\u70b9\u7ec4\u6210Sccs\uff0c\u5219\u5c06\u6808\u4e2d\u7684\u9876\u70b9\u5f39\u51fa\uff0c\u76f4\u5230\u5f53\u524d\u9876\u70b9\u3002</li> </ol> <p>\u4f8b\u5b50\uff1a</p> <p></p> <p>\u4efb\u610f\u9009\u62e9\u9876\u70b9\u5f00\u59cbDFS\uff0c\u8fd9\u91cc\u9009\u62e9\u9876\u70b90\uff0c\u4f9d\u6b21\u5c06\u9876\u70b90\u30011\u30012\u5165\u6808\uff0c\u5f53\u9876\u70b92\u7ee7\u7eedDFS\u65f6\uff0c\u53d1\u73b0\u9876\u70b90\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c<code>\u4e8e\u662f\u5f00\u59cb\u56de\u6eaf\uff0c\u5e76\u66f4\u65b0\u8ba1\u7b97low-link\u503c</code>\u3002\u5f53\u56de\u6eaf\u5230\u9876\u70b90\u65f6\uff0c\u5176id\u503c\u7b49\u4e8elow-link\u503c\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2aScc\uff0c\u6b64\u65f6\u5c06\u76f8\u5173\u9876\u70b9\u5f39\u51fa\u3002</p> <p>\u5173\u4e8e\u9876\u70b9\uff0c<code>num[i] = low[i],\u5176\u4ed6\u8fde\u901a\u5206\u91cf\u7684\u70b9\u7684low[j] = low[i]</code></p> <p>\u7136\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u7ee7\u7eedDFS\uff0c\u8fd9\u91cc\u9009\u62e9\u9876\u70b93\u3002</p> <p></p> <p>\u5c06\u9876\u70b93\u30014\u30015\u4f9d\u6b21\u5165\u6808\uff0c\u4ece\u9876\u70b95\u7ee7\u7eedDFS\uff0c\u8bbf\u95ee\u9876\u70b90\uff0c\u9876\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u56de\u6eaf\u5230\u9876\u70b95\uff0c\u6b64\u65f6\u4e0d\u66f4\u65b0low-link\uff0c\u56e0\u4e3a\u9876\u70b90\u4e0d\u5728\u6808\u4e2d\u3002\u63a5\u7740\u7ee7\u7eedDFS\u5230\u9876\u70b96\u548c4\uff0c\u5c06\u9876\u70b96\u548c4\u5165\u6808\uff08\u9876\u70b92\u548c\u9876\u70b90\u7684\u60c5\u51b5\u4e00\u6837\uff09\uff0c\u9876\u70b94\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5f00\u59cb\u56de\u6eaf\uff0c\u5e76\u66f4\u65b0low-link\u503c\u3002\u5f53\u56de\u6eaf\u5230\u9876\u70b94\u65f6\uff0c\u5176id\u503c\u548clow-link\u503c\u76f8\u7b49\uff0c\u627e\u5230\u4e00\u4e2aScc\uff0c\u4f9d\u6b21\u5c06\u9876\u70b96\u30015\u30014\u5f39\u51fa\u3002</p> <p></p> <p>\u6b64\u65f6\u6808\u4e2d\u8fd8\u5269\u9876\u70b93\uff0c\u7ee7\u7eedDFS\u5230\u9876\u70b94\uff0c\u8282\u70b94\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u56de\u6eaf\u5230\u9876\u70b93\uff0c\u9876\u70b94\u4e0d\u5728\u6808\u4e2d\uff0c\u4e0d\u66f4\u65b0\u9876\u70b93\u7684low-link\u3002\u6b64\u65f6\u867d\u7136\u9876\u70b93\u7684id\u548clow-link\u76f8\u7b49\uff0c\u4f46\u9876\u70b93\u7684\u90bb\u5c45\u8fd8\u6ca1\u8bbf\u95ee\u5b8c\uff0c\u7ee7\u7eedDFS\u5230\u9876\u70b97\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAXVEX 20        // \u56fe\u4e2d\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\ntypedef char VertexType; // \u9876\u70b9\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int Vertex;      // \u7528\u4e8e\u5b58\u50a8\u4e0b\u6807\u7684\u7c7b\u578b\n/* vertices are numbered from 1 to MaxVertexNum */\n\n/*\u8fb9\u8868\u7ed3\u70b9*/\ntypedef struct AdjVNode\n{\n    int adjvex;            // \u8be5\u5f27\u6240\u6307\u5411\u7684\u9876\u70b9\u7684\u4e0b\u6807\u6216\u8005\u4f4d\u7f6e\n    struct AdjVNode *next; // \u6307\u5411\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\n} AdjVNode;\ntypedef struct AdjVNode *PtrToAdjVNode;\n\n/*\u9876\u70b9\u8868\u7ed3\u70b9*/\ntypedef struct VertexNode\n{\n    VertexType data;         // \u9876\u70b9\u57df\uff0c\u5b58\u50a8\u9876\u70b9\u4fe1\u606f\n    PtrToAdjVNode FirstEdge; // \u8fb9\u8868\u5934\u6307\u9488\n} AdjList[MAXVEX];\n\n/*\u90bb\u63a5\u8868*/\ntypedef struct\n{\n    AdjList adjList;\n    int Vertexnum;\n    int Edgenum; // \u56fe\u4e2d\u5f53\u524d\u9876\u70b9\u6570\u548c\u8fb9\u6570\n} GNode;\ntypedef GNode *PtrToGNode;\ntypedef PtrToGNode LGraph; // \u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u5b58\u50a8\u7684\u56fe\u7c7b\u578b\nint visited[MAXVEX] = {0}; // 0\u8868\u793a\u672a\u8bbf\u95ee\uff0c1\u8868\u793a\u5df2\u8bbf\u95ee\nint num[MAXVEX] = {0};     // \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u65f6\uff0c\u8bb0\u5f55\u8bbf\u95ee\u7684\u987a\u5e8f\nint low[MAXVEX] = {0};     // \u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u80fd\u591f\u8bbf\u95ee\u5230\u7684\u6700\u5c0f\u7684\u9876\u70b9\u7684\u5e8f\u53f7\nint stack[MAXVEX] = {0};   // \u7528\u4e8e\u5b58\u50a8\u9876\u70b9\u7684\u6808\nint instack[MAXVEX] = {0}; // \u7528\u4e8e\u5224\u65ad\u9876\u70b9\u662f\u5426\u5728\u6808\u4e2d\nint top = 0;               // \u6808\u9876\u6307\u9488\nint cnt = 0;               //\n\n\nLGraph ReadG()\n{\n    int i;\n    LGraph LG = (LGraph)malloc(sizeof(GNode));\n    for (i = 0; i &lt; MAXVEX; i++)\n    {\n        LG-&gt;adjList[i].FirstEdge = NULL;\n    }\n    scanf(\"%d %d\", &amp;LG-&gt;Vertexnum, &amp;LG-&gt;Edgenum);\n    for (i = 0; i &lt; LG-&gt;Edgenum; i++)\n    {\n        int p1, p2;\n        scanf(\"%d %d\", &amp;p1, &amp;p2);\n        PtrToAdjVNode adj = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        // p1--;\n        // p2--;\n        adj-&gt;adjvex = p2;\n        adj-&gt;next = NULL;\n        if (LG-&gt;adjList[p1].FirstEdge == NULL)\n        {\n            LG-&gt;adjList[p1].FirstEdge = adj;\n        }\n        else\n        {\n            PtrToAdjVNode temp = LG-&gt;adjList[p1].FirstEdge;\n            while (temp-&gt;next != NULL)\n            {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = adj;\n        }\n    }\n    return LG;\n}\nvoid PrintV(Vertex V)\n{\n    printf(\"%d \", V);\n}\nvoid Dfs(LGraph LG, int i, void (*visit)(Vertex V))\n{\n    // \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n    visited[i] = 1;          // \u8868\u793ai\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\n    num[i] = low[i] = cnt++; // cnt\u8868\u793a\u8bbf\u95ee\u7684\u987a\u5e8f,cnt\u521d\u59cb\u72b6\u6001\u4e3a0\uff0c\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u9876\u70b9\uff0ccnt\u52a01\n    stack[++top] = i;        // \u5c06i\u538b\u5165\u6808\u4e2d\n    instack[i] = 1;          // \u8868\u793ai\u5728\u6808\u4e2d\n    PtrToAdjVNode temp = LG-&gt;adjList[i].FirstEdge;\n    for(; temp != NULL; temp = temp-&gt;next)\n    {\n        if (visited[temp-&gt;adjvex] == 0)\n        {\n            // \u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\u8be5\u7ed3\u70b9\n            Dfs(LG, temp-&gt;adjvex, visit);\n            low[i] = low[i] &lt; low[temp-&gt;adjvex] ? low[i] : low[temp-&gt;adjvex];\n        }\n        else if (instack[temp-&gt;adjvex] == 1)\n        {\n            // \u5982\u679c\u8bbf\u95ee\u8fc7\u8be5\u7ed3\u70b9\uff0c\u4e14\u8be5\u7ed3\u70b9\u5728\u6808\u4e2d\n            low[i] = low[i] &lt; num[temp-&gt;adjvex] ? low[i] : num[temp-&gt;adjvex];\n        }\n    }\n    if (num[i] == low[i])\n    {\n        // \u5982\u679ci\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u7ed3\u70b9\n        // \u9700\u8981\u5c06\u6808\u4e2d\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u5f39\u51fai\u4e3a\u6b62\n        // \u5f39\u51fa\u7684\u5143\u7d20\u5c31\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n        // \u5f39\u51fa\u7684\u5143\u7d20\u7684instack\u503c\u8981\u7f6e\u4e3a0\uff0c \u66f4\u65b0top\u503c\n        while (stack[top] != i)\n        {\n            visit(stack[top]); // \u8f93\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u7ed3\u70b9\n            instack[stack[top]] = 0;\n            top--;\n        }\n        // \u8f93\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u7ed3\u70b9\n        visit(stack[top]);\n        instack[stack[top]] = 0;\n        top--;\n        printf(\"\\n\");\n    }\n}\n\nvoid StronglyConnectedComponents(LGraph LG, void (*visit)(Vertex V))\n{\n    // \u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\n    // \u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u80fd\u627e\u5230\u6211\uff0c\u6211\u4e5f\u80fd\u627e\u5230\u4f60\uff0c\u4e14\u8981\u6c42\u8be5\u5b50\u56fe\u662f\u6700\u5927\u7684\n\n    int i;\n    for (i = 0; i &lt; LG-&gt;Vertexnum; i++)\n    {\n        if (visited[i] == 0)\n        {\n            Dfs(LG, i, visit);\n        }\n    }\n}\n\nint main()\n{\n    LGraph LG = ReadG();\n    StronglyConnectedComponents(LG, PrintV);\n    return 0;\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#842","title":"8.4.2 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5c31\u662f\u66f4\u5927\u8303\u56f4\u5185\u641c\u7d22\uff0c\u5148\u8bbf\u95ee\u5b8c\u5f53\u524d\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\uff0c\u7136\u540e\u518d\u8bbf\u95ee\u4e0b\u4e00\u5c42\u7684\u6240\u6709\u90bb\u63a5\u70b9\uff0c\u8be5\u7b97\u6cd5\u9002\u7528\u4e8e\u89e3\u51b3\u6700\u77ed\u6700\u5c0f\u8def\u5f84\u95ee\u9898\u3002</p> <p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u662f\u4e00\u79cd\u5206\u5c42\u7684\u67e5\u627e\u8fc7\u7a0b\uff0c\u6bcf\u5411\u524d\u8d70\u4e00\u6b65\u53ef\u80fd\u8bbf\u95ee\u4e00\u6279\u9876\u70b9\uff0c\u4e0d\u50cf\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u90a3\u6837\u6709\u5f80\u56de\u9000\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u7b97\u6cd5\u3002\u4e3a\u4e86\u5b9e\u73b0\u9010\u5c42\u7684\u8bbf\u95ee\uff0c\u7b97\u6cd5\u5fc5\u987b\u501f\u52a9\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff0c\u4ee5\u8bb0\u5fc6\u6b63\u5728\u8bbf\u95ee\u7684\u9876\u70b9\u7684\u4e0b\u4e00\u5c42\u9876\u70b9\u3002</p> <pre><code>void BFS(LGraph G, Vertex v, int visited[])\n{\n    PtrToAdjVNode temp;\n    // \u501f\u52a9\u961f\u5217\u5b9e\u73b0\n    Vertex Queue[MAXVEX];\n    // \u961f\u5217\u521d\u59cb\u5316\n    int front = 0, rear = 0;\n    // \u5c06\u9876\u70b9v\u52a0\u5165\u961f\u5217\uff0c\u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\uff0c\u540e\u7eed\u80fd\u591f\u5f97\u5230rear &gt; front\n    Queue[rear++] = v;\n    visited[v] = 1;\n    printf(\"%d \", v + 1);\n    while(rear &gt; front)\n    {\n        // \u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u9876\u70b9\n        Vertex w = Queue[front++];\n        // \u904d\u5386w\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\n        for(temp = G-&gt;adjList[w].FirstEdge; temp; temp = temp-&gt;next)\n        {\n            // \u5982\u679ctemp-&gt;adjvex\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u5c06\u5b83\u6240\u5728\u7684\u9876\u70b9push\u8fdb\u961f\u5217\uff0c\u76f8\u5f53\u4e8e\u8f93\u51fav\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\n            if(!visited[temp-&gt;adjvex])\n            {\n                Queue[rear++] = temp-&gt;adjvex;\n                visited[temp-&gt;adjvex] = 1;\n                printf(\"%d \", temp-&gt;adjvex + 1);\n            }\n        }\n        // \u518d\u6b21\u8fdb\u5165while\u5faa\u73af\u65f6\uff0c\u8981\u4e48\u662f\u540c\u4e00\u884c\u7684\u90bb\u63a5\u70b9\uff0c\u8981\u4e48\u662f\u4e0b\u4e00\u884c\u7684\u90bb\u63a5\u70b9\n    }\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define MAXVEX 10        // \u56fe\u4e2d\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\ntypedef char VertexType; // \u9876\u70b9\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int WeightType;  // \u8fb9\u4e0a\u7684\u6743\u503c\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int Vertex;      // \u7528\u4e8e\u5b58\u50a8\u4e0b\u6807\u7684\u7c7b\u578b\n/* vertices are numbered from 1 to MaxVertexNum */\n\n/*\u8fb9\u8868\u7ed3\u70b9*/\ntypedef struct AdjVNode\n{\n    int adjvex;            // \u8be5\u5f27\u6240\u6307\u5411\u7684\u9876\u70b9\u7684\u4e0b\u6807\u6216\u8005\u4f4d\u7f6e\n    WeightType weight;     // \u6743\u503c\uff0c\u5bf9\u4e8e\u975e\u7f51\u56fe\u53ef\u4ee5\u4e0d\u9700\u8981\n    struct AdjVNode *next; // \u6307\u5411\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\n} AdjVNode;\ntypedef struct AdjVNode *PtrToAdjVNode;\n\n/*\u9876\u70b9\u8868\u7ed3\u70b9*/\ntypedef struct VertexNode\n{\n    VertexType data;         // \u9876\u70b9\u57df\uff0c\u5b58\u50a8\u9876\u70b9\u4fe1\u606f\n    PtrToAdjVNode FirstEdge; // \u8fb9\u8868\u5934\u6307\u9488\n} AdjList[MAXVEX];\n\n/*\u90bb\u63a5\u8868*/\ntypedef struct\n{\n    AdjList adjList;\n    int Vertexnum;\n    int Edgenum; // \u56fe\u4e2d\u5f53\u524d\u9876\u70b9\u6570\u548c\u8fb9\u6570\n} GNode;\ntypedef GNode *PtrToGNode;\ntypedef PtrToGNode LGraph; // \u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u5b58\u50a8\u7684\u56fe\u7c7b\u578b\n\nLGraph ReadG()\n{\n    int i;\n    LGraph LG = (LGraph)malloc(sizeof(GNode));\n    for (i = 0; i &lt; MAXVEX; i++)\n    {\n        LG-&gt;adjList[i].FirstEdge = NULL;\n    }\n    scanf(\"%d %d\", &amp;LG-&gt;Vertexnum, &amp;LG-&gt;Edgenum);\n    for (i = 0; i &lt; LG-&gt;Edgenum; i++)\n    {\n        int p1, p2;\n        scanf(\"%d %d\", &amp;p1, &amp;p2);\n        PtrToAdjVNode adj = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        p1--;\n        p2--;\n        adj-&gt;adjvex = p2;\n        adj-&gt;next = NULL;\n        if (LG-&gt;adjList[p1].FirstEdge == NULL)\n        {\n            LG-&gt;adjList[p1].FirstEdge = adj;\n        }\n        else \n        {\n            // \u6b64\u5904\u91c7\u7528\u7684\u662f\u5934\u63d2\u6cd5\n            // adj-&gt;next = LG-&gt;adjList[p1].FirstEdge;\n            // LG-&gt;adjList[p1].FirstEdge = adj;\n            //\u5c3e\u63d2\u6cd5\n            PtrToAdjVNode temp = LG-&gt;adjList[p1].FirstEdge;\n            while(temp-&gt;next != NULL)\n            {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = adj;\n        }\n    }\n    return LG;\n}\nvoid DFS(LGraph G, Vertex v, int visited[])\n{\n    PtrToAdjVNode temp;\n    visited[v] = 1;\n    printf(\"%d \", v + 1);\n    for(temp = G-&gt;adjList[v].FirstEdge; temp; temp = temp-&gt;next)\n    {\n        // \u5982\u679ctemp-&gt;adjvex\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u5c06\u5b83\u6240\u5728\u7684\u9876\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u7ee7\u7eed\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u76f8\u5f53\u4e8e\u8f93\u51fa\u4ee5\u5b83\u4e3a\u9876\u70b9\u7684\u4e00\u5217\n        if(!visited[temp-&gt;adjvex])\n        {\n            DFS(G, temp-&gt;adjvex, visited);\n        }\n    }\n    for(int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        if(!visited[i])\n        {\n            DFS(G, i, visited);\n        }\n    }\n}\nvoid BFS(LGraph G, Vertex v, int visited[])\n{\n    PtrToAdjVNode temp;\n    // \u501f\u52a9\u961f\u5217\u5b9e\u73b0\n    Vertex Queue[MAXVEX];\n    // \u961f\u5217\u521d\u59cb\u5316\n    int front = 0, rear = 0;\n    // \u5c06\u9876\u70b9v\u52a0\u5165\u961f\u5217\uff0c\u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\uff0c\u540e\u7eed\u80fd\u591f\u5f97\u5230rear &gt; front\n    Queue[rear++] = v;\n    visited[v] = 1;\n    printf(\"%d \", v + 1);\n    while(rear &gt; front)\n    {\n        // \u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u9876\u70b9\n        Vertex w = Queue[front++];\n        // \u904d\u5386w\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\n        for(temp = G-&gt;adjList[w].FirstEdge; temp; temp = temp-&gt;next)\n        {\n            // \u5982\u679ctemp-&gt;adjvex\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u5c06\u5b83\u6240\u5728\u7684\u9876\u70b9push\u8fdb\u961f\u5217\uff0c\u76f8\u5f53\u4e8e\u8f93\u51fav\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\n            if(!visited[temp-&gt;adjvex])\n            {\n                Queue[rear++] = temp-&gt;adjvex;\n                visited[temp-&gt;adjvex] = 1;\n                printf(\"%d \", temp-&gt;adjvex + 1);\n            }\n        }\n        // \u518d\u6b21\u8fdb\u5165while\u5faa\u73af\u65f6\uff0c\u8981\u4e48\u662f\u540c\u4e00\u884c\u7684\u90bb\u63a5\u70b9\uff0c\u8981\u4e48\u662f\u4e0b\u4e00\u884c\u7684\u90bb\u63a5\u70b9\n    }\n}\nint main()\n{\n    //          1\n    //      2       3\n    //  4       5       6\n    //      7              8\n    LGraph G;\n    G = ReadG();\n    int visited1[MAXVEX] = {0};\n    DFS(G, 0, visited1);\n    printf(\"\\n\");\n    int visited2[MAXVEX] = {0};\n    BFS(G, 0, visited2);\n}\ninput:\n8 7\n1 2\n1 3\n2 4\n2 5\n4 7\n3 6\n6 8\noutput:\n1 2 4 7 5 3 6 8\n1 2 3 4 5 6 7 8\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAXVERTEXNUM 20\n#define INF 65535\n\ntypedef char VertexType;\ntypedef int EdgeType;\ntypedef struct point{\n    VertexType Vex[MAXVERTEXNUM];\n    EdgeType Edge[MAXVERTEXNUM][MAXVERTEXNUM];\n    int vexnum;\n    int edgenum;\n}MGraph;\n\nvoid ReadGraph(MGraph *G)\n{\n    int i, j, k;\n    // \u8bfb\u53d6\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    scanf(\"%d %d\",&amp;G-&gt;vexnum,&amp;G-&gt;edgenum);\n    // \u8bfb\u53d6\u9876\u70b9\u4fe1\u606f\n    // \u521d\u59cb\u5316\u90bb\u63a5\u77e9\u9635\n    for(i = 0; i &lt; G-&gt;vexnum; i++)\n    {\n        for(j = 0; j &lt; G-&gt;vexnum; j++)\n        {\n            // \u7531\u4e8e\u56fe\u65e0\u81ea\u73af\uff0c\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\n            if(i == j)\n            {\n                G-&gt;Edge[i][j] = 0;\n            }\n            else\n            {\n                G-&gt;Edge[i][j] = INF;\n            }\n        }\n    }\n    // \u8bfb\u53d6\u8fb9\u4fe1\u606f\uff0c\u5bf9\u4e8e\u6709\u5411\u56fe\n    int v1, v2;\n    for(k = 0; k &lt; G-&gt;edgenum; k++)\n    {\n        scanf(\"%d %d\", &amp;v1, &amp;v2);\n        v1--;\n        v2--;\n        // v1-1,v2-1\u662f\u56e0\u4e3a\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\n        G-&gt;Edge[v1][v2] = 1;\n    }\n}\n// \u7528DFS\u904d\u5386\u56fe\nvoid DFS(MGraph G, int v, int visited[])\n{\n    int i;\n    visited[v] = 1;\n    printf(\"%d \", v + 1);\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        if(G.Edge[v][i] == 1 &amp;&amp; visited[i] == 0)\n        {\n            DFS(G, i, visited);\n        }\n    }\n}\nvoid BFS(MGraph G, int v, int visited[])\n{\n    int i;\n    int queue[MAXVERTEXNUM];\n    int front = 0, rear = 0;\n    queue[rear++] = v;\n    visited[v] = 1;\n    printf(\"%d \", v + 1);\n    while(rear &gt; front)\n    {\n        int u = queue[front++];\n        for(i = 0; i &lt; G.vexnum; i++)\n        {\n            if(G.Edge[u][i] == 1 &amp;&amp; visited[i] == 0)\n            {\n                queue[rear++] = i;\n                visited[i] = 1;\n                printf(\"%d \", i + 1);\n            }\n        }\n    }\n}\nint main()\n{\n    MGraph G;\n    ReadGraph(&amp;G);\n    // \u7528\u4e8e\u6807\u8bb0\u9876\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    int visited1[MAXVERTEXNUM] = {0};\n    // \u4ece\u9876\u70b91\u5f00\u59cb\u904d\u5386\n    DFS(G, 0, visited1);\n    printf(\"\\n\");\n    int visited2[MAXVERTEXNUM] = {0};\n    BFS(G, 0, visited2);\n    return 0;\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_9","title":"\u5173\u8282\u70b9\u4e0e\u53cc\u8fde\u901a\u6027","text":"<p>v is an articulation point if G\u2019 = DeleteVertex( G, v ) has at least 2 connected components</p> <p><code>\u82e5\u8fde\u901a\u56fe\u4e2d\u67d0\u4e2a\u9876\u70b9\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u88ab\u5220\u9664\u540e\uff0c\u8be5\u8fde\u901a\u56fe\u88ab\u5206\u5272\u6210\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8fde\u901a\u5206\u91cf\uff0c\u5219\u79f0\u6b64\u7ed3\u70b9\u4e3a\u5173\u8282\u70b9\u3002</code></p> <p>G is a biconnected graph if G is connected and has no articulation points.</p> <p><code>\u6ca1\u6709\u5173\u8282\u70b9\u7684\u8fde\u901a\u56fe\u6210\u4e3a\u53cc\u8fde\u901a\u56fe</code></p> <p>A biconnected component is a maximal biconnected subgraph.</p> <p></p> <p><code>\u600e\u4e48\u6837\u7684\u56fe\uff0c\u624d\u6709\u53ef\u80fd\u6210\u4e3a\u53cc\u8fde\u901a\u5b50\u56fe\uff1f</code></p> <p><code>1. \u5148\u6392\u9664\u5355\u70b9\u56fe\uff0c\u4e0d\u7b26\u5408\u6700\u5927\u53cc\u8fde\u901a\u5b50\u56fe</code></p> <p><code>2. \u6210\u73af\u7684\u80af\u5b9a\u662f\u53cc\u8fde\u901a\u5b50\u56fe\uff0c\u7279\u6b8a\u60c5\u51b5\uff0c\u5bf9\u4e8e\u4e24\u70b9\u56fe\u4ec5\u6709\u4e00\u6761\u8fb9\u8fdb\u884c\u8fde\u63a5\uff0c\u4e5f\u5c5e\u4e8e\u53cc\u8fde\u901a\u5b50\u56fe</code></p> <p>\u5982\u4f55\u6c42\u53cc\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff0cFinding the biconnected components of a connected undirected G</p> <p></p> <p>\u4ece\u56fe\u4e2d\u4efb\u610f\u9876\u70b9\u5f00\u59cb\uff0c\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5e76\u7ed9\u4ed6\u4eec\u7f16\u53f7\u3002</p> <p>\u800c\u5bf9\u4e8e\u56fe\u4e2d\u5b9e\u9645\u5b58\u5728\u800c\u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\u4e2d\u4e0d\u5b58\u5728\u7684\u8fb9\uff0c\u79f0\u4e3a\u56de\u8fb9(v,w)\u6216\u80cc\u5411\u8fb9(v,w)\u3002\u5982\u4e0a\u4f8b\uff0c\u865a\u7ebf\u90e8\u5206\u8868\u793a\u56de\u8fb9\u3002</p> <p>\u8f6c\u5316\u4e3a\u6c42\u5173\u8282\u70b9\u7684\u4e2a\u6570</p> <p>\u5f15\u5165\uff1a num\u6570\u7ec4\u548clow\u6570\u7ec4</p> <ul> <li> <p>Num\u6570\u7ec4\uff1a\u7b2c\u4e00\u6b21\u5bf9\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u65f6\uff0c\u4f9d\u6b21\u8bbf\u95ee\u7ed3\u70b9\uff0c\u540c\u65f6\u6309\u8bbf\u95ee\u987a\u5e8f\u5bf9\u7ed3\u70b9\u8fdb\u884c\u7f16\u53f7\u3002</p> </li> <li> <p>Low\u6570\u7ec4\uff1a\u6c42\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u5c0f\u7f16\u53f7\u7684\u9876\u70b9</p> </li> </ul> <p>\\(Low (u) = min\\{Num(u),min\\{Low(w)|w \\ is \\ a \\ child \\ of \\ u\\}, min\\{Nuw(w)|(u,w)\\ is\\  a\\ backedge\\}\\}\\)</p> <p>\u89e3\u91ca\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u9876\u70b9V\uff0c\u5176low\u6570\u7ec4\u503c\u4e3a\u81ea\u8eab\u5148\u5e8f\u7f16\u53f7(Num[v]),\u5176\u6240\u6709\u5b69\u5b50\u8282\u70b9\u7684low\u503c\u7684\u6700\u5c0f\u503c\uff0c\u4e0e\u5176\u901a\u8fc7\u56de\u8fb9\u76f8\u8fde\u7684\u7956\u5148\u8282\u70b9K\u7684\u5148\u5e8f\u7f16\u53f7\uff08Num[k]\uff09\u8fd9\u4e09\u8005\u4e2d\u7684\u6700\u5c0f\u503c\u3002</p> <p></p> <p>\u5bf9\u4e8e\u5173\u8282\u70b9\u7684\u5224\u5b9a\uff1a</p> <p>1. \u5bf9\u4e8e\u6839\u7ed3\u70b9\uff0c\u6839\u8282\u70b9\u7684\u513f\u5b50\u5927\u4e8e\u7b49\u4e8e2\uff0c\u5219\u8be5\u7ed3\u70b9\u4e00\u5b9a\u4e3a\u5173\u8282\u70b9</p> <p>2. \u5bf9\u4e8e\u975e\u6839\u7ed3\u70b9u\uff0c\u5b83\u662f\u5173\u8282\u70b9\u5f53\u4e14\u4ec5\u5f53\uff0c\u5b83\u6709\u67d0\u4e00\u4e2a\u513f\u5b50w\uff0c\u4f7f\u5f97Low\uff08w\uff09&gt;= Num\uff08u\uff09\u3002</p> <p><code>\u539f\u56e0\u5728\u4e8e\uff0cLow\uff08w) &gt;= Num(u),\u8bf4\u660e\u4fe1\u606f\u65e0\u6cd5\u4f20\u9012\u4e0a\u53bb\uff0c\u4e5f\u5c31\u662f\u8bf4\u88ab\u7ed3\u70b9u\u963b\u65ad\u4e86\uff0c\u6b64\u65f6u\u662f\u5173\u8282\u70b9\u3002\u5219\u5220\u9664\u8282\u70b9u\u540e\uff0cw\u4e00\u5b9a\u4e0d\u80fd\u4e0eu\u4e4b\u524d\u7684\u8282\u70b9\u76f8\u8fde\uff0c\u5219\u8be5\u56fe\u4e0d\u4e3a\u8fde\u901a\u56fe\u3002</code></p> <p>\u4ee5Vertex 6\u4e3a\u4f8b\uff0cNum(6) = 6,6\u7684\u513f\u5b507\uff0cLow\uff087\uff09 = 5\uff0c\u56e0\u4e3a5\u548c7\u4e4b\u95f4\u6709\u4e00\u6761\u56de\u8fb9\uff0c\u4f7f\u5f977\u80fd\u591f\u8df3\u8fc76\uff0c\u4ece\u800c\u4fe1\u606f\u4f20\u9012\u4e0d\u4f1a\u963b\u65ad\uff0c6\u4e0d\u662f\u5173\u8282\u70b9</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O\uff08V + E\uff09</p> <p></p> <p>v3\u548cv6\u4e4b\u95f4\u4e0d\u53ef\u80fd\u5b58\u5728backedge\uff0c\u5426\u5219\u65e0\u6cd5\u6df1\u5ea6\u641c\u7d22\u5f97\u5230\u4e0a\u8ff0\u56fe</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_10","title":"\u6b27\u62c9\u56de\u8def","text":"<p>An Euler circuit is possible only if the graph is connected and each vertex has an even degree.</p> <p>\u6b27\u62c9\u56de\u8def\uff0c\u6240\u6709\u7684\u70b9\u90fd\u6709\u5076\u6570\u7684\u5ea6\uff0c\u4e00\u6761\u8fb9\u8fdb\u53bb\u5fc5\u7136\u6709\u4e00\u6761\u8fb9\u51fa\u6765</p> <p>An Euler tour is possible if there are exactly two vertices having odd degree. One must start at one of the odd-degree vertices.</p> <p>\u6b27\u62c9\u8def\u5f84\uff0c\u4ec5\u80fd\u5b58\u5728\u4e24\u4e2a\u70b9\u5177\u6709\u5947\u6570\u7684degree\uff0c\u4e14\u8be5\u8def\u5f84\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u4e3a\u8d77\u59cb\u70b9</p> <p>\u4e0a\u8ff0\u4e24\u8005\u7684\u672c\u8d28\u662f\u76f8\u540c\u7684\uff0c\u5f53\u4f60\u5c06\u5269\u4f59\u7684\u4e24\u4e2a\u5947\u6570degree\u7684\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u4fbf\u5f97\u5230\u4e86\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\uff0c\u6b64\u65f6\u6240\u6709\u7684\u70b9\u90fd\u5177\u6709\u5076\u6570\u7684degree</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#85","title":"8.5 \u6700\u77ed\u8def\u5f84","text":"<p>\u5728\u7f51\u56fe\u548c\u975e\u7f51\u56fe\u4e2d\uff0c\u6700\u77ed\u8def\u5f84\u7684\u542b\u4e49\u662f\u4e0d\u540c\u7684\u3002\u7531\u4e8e\u975e\u7f51\u56fe\u5b83\u6ca1\u6709\u6743\u503c\uff0c\u6240\u8c13\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5176\u5b9e\u5c31\u662f\u4e24\u9876\u70b9\u4e4b\u95f4\u7ecf\u8fc7\u7684\u8fb9\u6570\u6700\u5c11\u7684\u8def\u5f84\uff0c\u5bf9\u4e8e\u7f51\u56fe\u6765\u8bf4\uff0c\u6700\u77ed\u8def\u5f84\uff0c\u662f\u6307\u4e24\u9876\u70b9\u4e4b\u95f4\u7ecf\u8fc7\u7684\u8fb9\u4e0a\u6743\u503c\u4e4b\u548c\u6700\u5c11\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u6211\u4eec\u79f0\u8def\u5f84\u4e0a\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\u4e3a\u6e90\u70b9\uff0c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u662f\u7ec8\u70b9\u3002</p> <p>Given a digraph G = ( V, E ), and a cost function c( e ) for e \\(\\in\\)E( G ).  The length of a path P from source to destination is   \\(\\sum_{e_i \\in P} {c(e_i)}\\)      (also called weighted path length).</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#850-bfs","title":"8.5.0 BFS\u5b9e\u73b0\u65e0\u6743\u56fe\u7684\u6700\u77ed\u8def\u5f84","text":"<p>\u7531\u4e8e\u975e\u7f51\u56fe\u5b83\u6ca1\u6709\u6743\u503c\uff0c\u6240\u8c13\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5176\u5b9e\u5c31\u662f\u4e24\u9876\u70b9\u4e4b\u95f4\u7ecf\u8fc7\u7684\u8fb9\u6570\u6700\u5c11\u7684\u8def\u5f84</p> <pre><code>int dist[MAXVERTEXNUM] = {65536};\nint path[MAXVERTEXNUM] = {-1};\nint visited3[MAXVERTEXNUM] = {0};\n// \u90bb\u63a5\u77e9\u9635\u7248\nvoid BFS2(MGraph G, int v, int visited[], int dist[], int path[])\n{\n    int i;\n    int queue[MAXVERTEXNUM];\n    int front = 0, rear = 0;\n    queue[rear++] = v;\n    visited[v] = 1;\n    dist[v] = 0;\n    while(rear &gt; front)\n    {\n        int u = queue[front++];\n        for(i = 0; i &lt; G.vexnum; i++)\n        {\n            if(G.Edge[u][i] == 1 &amp;&amp; visited[i] == 0)\n            {\n                queue[rear++] = i;\n                visited[i] = 1;\n                if(dist[i] &gt; dist[u] + 1)\n                {\n                    dist[i] = dist[u] + 1;\n                    path[i] = u;\n                }\n            }\n        }\n    }\n}\n</code></pre> <p></p> <p>\u5347\u7ea7\u7248\u4f7f\u7528\u961f\u5217\u5b58\u50a8</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#851-dijkstra","title":"8.5.1 Dijkstra\u7b97\u6cd5","text":"<p>Dijkstra\u7b97\u6cd5\u7528\u4e8e\u6784\u5efa\u5355\u6e90\u70b9(single source)\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5373\u56fe\u4e2d\u67d0\u4e00\u70b9\u5230\u4efb\u4f55\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u90fd\u662f\u6700\u77ed\u7684\u3002</p> <p>\u53ef\u4ee5\u8fd0\u7528\u4e8e\u6709\u5411\u56fe\uff0c<code>\u4f46\u662f\u4e0d\u80fd\u5b58\u5728\u8d1f\u6743\u503c</code>\u3002</p> <p>\u901a\u4fd7\u7684\u8bf4\uff0cDijkstra\u7b97\u6cd5\uff0c\u5b83\u5e76\u4e0d\u662f\u4e00\u4e0b\u5b50\u6c42\u51fa\\(V_0\u5230V_8\\)\u7684\u6700\u77ed\u8def\u5f84\uff0c\u800c\u662f\u4e00\u6b65\u6b65\u6c42\u51fa\u5b83\u4eec\u4e4b\u95f4\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u8fc7\u7a0b\u4e2d\u90fd\u662f\u57fa\u4e8e\u5df2\u7ecf\u6c42\u51fa\u7684\u6700\u77ed\u8def\u5f84\u7684\u57fa\u7840\uff0c\u6c42\u51fa\u66f4\u8fdc\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <ul> <li>\u8bbe\u7f6e\u4e00\u4e2a\u96c6\u5408S\uff0c\u8bb0\u5f55\u5df2\u7ecf\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9</li> <li>\u8bbe\u7f6e\u8f85\u52a9\u6570\u7ec4\uff0cdist[ ]\uff1a\u8bb0\u5f55\u4ece\u6e90\u70b9\\(v_0\\)\u5230\u5176\u4ed6\u9876\u70b9\u5f53\u524d\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c<code>\u5b83\u7684\u521d\u6001\u662f\uff0c\u82e5\u4ece$v_0$\u5230$v_i$\u6709\u5f27\uff0c\u5219dist[i]\u4e3a\u5f27\u4e0a\u7684\u6743\u503c\uff0c\u5426\u5219\u8bbe\u7f6edist[i]\u4e3a</code>\\(\\infin\\)</li> </ul> <p></p> <p></p> <p><code>\u96c6\u5408S\u8868\u793a\u5f53\u524d\u5df2\u7ecf\u6c42\u51fa\u6700\u77ed\u8ddd\u79bb\u7684\u70b9\uff0c\u6c42\u66f4\u8fdc\u8ddd\u79bb\u7684\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u9700\u8981\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\uff0c\u4e5f\u5c31\u662f\u4ee5\u96c6\u5408S\u4e2d\u70b9\u4e3a\u4e2d\u95f4\u70b9\uff0c\u4e0d\u80fd\u4f7f\u7528\u96c6\u5408\u5916\u7684\u70b9</code></p> <p></p> <p>\u5728\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6216\u8005\u5e26\u6743\u503c\u7684\u90bb\u63a5\u8868\u8868\u793a\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\(O(V^2)\\)\\)</p> <p>\u5982\u679c\u53d8\u6210\u65e0\u6743\u56fe\uff0c\u53ea\u9700\u8981\u5c06weight\u53d8\u62101\uff0c\u6b64\u65f6\u7684dist\u53d8\u6210\u9876\u70b9v0\u5230\u8be5\u70b9\u7684\u8fb9\u7684\u6570\u91cf</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAXVERTEXNUM 20\n#define INF 65535\n\ntypedef char VertexType;\ntypedef int EdgeType;\ntypedef struct point{\n    VertexType Vex[MAXVERTEXNUM];\n    EdgeType Edge[MAXVERTEXNUM][MAXVERTEXNUM];\n    int vexnum;\n    int edgenum;\n}MGraph;\n\nvoid ReadGraph(MGraph *G)\n{\n    int i, j, k;\n    // \u8bfb\u53d6\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    scanf(\"%d %d\",&amp;G-&gt;vexnum,&amp;G-&gt;edgenum);\n    // \u8bfb\u53d6\u9876\u70b9\u4fe1\u606f\n    // \u521d\u59cb\u5316\u90bb\u63a5\u77e9\u9635\n    for(i = 0; i &lt; G-&gt;vexnum; i++)\n    {\n        for(j = 0; j &lt; G-&gt;vexnum; j++)\n        {\n            // \u7531\u4e8e\u56fe\u65e0\u81ea\u73af\uff0c\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\n            if(i == j)\n            {\n                G-&gt;Edge[i][j] = 0;\n            }\n            else\n            {\n                G-&gt;Edge[i][j] = INF;\n            }\n        }\n    }\n    // \u8bfb\u53d6\u8fb9\u4fe1\u606f\uff0c\u5bf9\u4e8e\u6709\u5411\u56fe\n    int v1, v2, weight;\n    for(k = 0; k &lt; G-&gt;edgenum; k++)\n    {\n        scanf(\"%d %d %d\", &amp;v1, &amp;v2, &amp;weight);\n        v1--;\n        v2--;\n        // v1-1,v2-1\u662f\u56e0\u4e3a\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\n        G-&gt;Edge[v1][v2] = weight;\n    }\n}\nvoid Dijkstra(MGraph G, int v0, int dist[], int path[])\n{\n    int i, j, k;\n    int min; // \u7528\u4e8e\u5b58\u50a8\u4ecev0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n    int flag[MAXVERTEXNUM]; // \u7528\u4e8e\u6807\u8bb0\u9876\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    // \u521d\u59cb\u5316\u56fe\u8868,\u5148\u770b\u9876\u70b9v0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u8ddd\u79bb\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        dist[i] = G.Edge[v0][i];\n        flag[i] = 0; // \u9876\u70b9i\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n        if(dist[i] &lt; INF)\n        {\n            path[i] = v0;\n        }\n        else\n        {\n            path[i] = -1;\n        }\n        // \u9876\u70b9v0\u5230\u9876\u70b9i\u6709\u8fb9\uff0c\u5219\u5c06i\u7684\u524d\u9a71\u7f6e\u4e3av0,\u5426\u5219\u7f6e\u4e3a-1\n    }\n    flag[v0] = 1; // \u9876\u70b9v0\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    path[v0] = -1; // \u9876\u70b9v0\u6ca1\u6709\u524d\u9a71\n    // \u6b63\u5f0f\u5f00\u59cb\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n    // \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u66f4\u65b0dist\u6570\u7ec4\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981G.vexnum - 1\u8f6e\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        min = INF;\n        int u = v0;\n        // \u627e\u5230\u5f53\u524d\u672a\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\u4e2d\u8ddd\u79bbv0\u6700\u8fd1\u7684\u9876\u70b9\n        // \u6bcf\u4e00\u8f6e\u5f00\u59cb\u90fd\u5bfb\u627e\u6700\u77ed\u8def\u5f84\uff0c\u6269\u5145\u5df2\u7ecf\u8bbf\u95ee\u7684\u9876\u70b9\u96c6\u5408\n        // \u7531\u4e8edist\u6570\u7ec4\u5df2\u7ecf\u88ab\u66f4\u65b0\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u904d\u5386\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            if(flag[j] == 0 &amp;&amp; dist[j] &lt; min)\n            {\n                min = dist[j];\n                u = j;\n            }\n        }\n        // \u5c06u\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\uff0c\u5373\u627e\u5230\u4e86\u4ecev0\u5230u\u7684\u6700\u77ed\u8def\u5f84\n        flag[u] = 1;\n        // \u4eceu\u51fa\u53d1\uff0c\u627e\u5230u\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4e5f\u5c31\u662fv0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\n        // \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u66f4\u65b0dist\u6570\u7ec4\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981G.vexnum - 1\u8f6e\n        for(k = 0; k &lt; G.vexnum; k++)\n        {\n            if(flag[k] == 0 &amp;&amp; G.Edge[u][k] &lt; INF &amp;&amp; dist[u] + G.Edge[u][k] &lt; dist[k])\n            {\n                // \u627e\u5230\u4e86\u66f4\u77ed\u7684\u8def\u5f84\uff0c\u66f4\u65b0dist\u6570\u7ec4\n                dist[k] = dist[u] + G.Edge[u][k];\n                path[k] = u;\n            }\n        }\n    }\n}\nint main()\n{\n    MGraph G;\n    ReadGraph(&amp;G);\n    // \u7528\u4e8e\u5b58\u50a8\u4ecev0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n    int dist[MAXVERTEXNUM];\n    // \u7528\u4e8e\u6807\u8bb0\u6700\u77ed\u8def\u5f84\u7684\u524d\u4e00\u4e2a\u9876\u70b9\n    int path[MAXVERTEXNUM];\n    // \u4f7f\u7528Dijkstra\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\n    Dijkstra(G, 0, dist, path);\n    // \u8f93\u51fa\u6700\u77ed\u8def\u5f84\n    for(int i = 0; i &lt; G.vexnum; i++)\n    {\n        printf(\"%d \", dist[i]);\n    }\n    printf(\"\\n\");\n    for(int i = 0; i &lt; G.vexnum; i++)\n    {\n        printf(\"%d \", path[i] + 1);\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#852-floyd","title":"8.5.2 Floyd \u7b97\u6cd5","text":"<p>Floyd \u7b97\u6cd5\u5b9a\u4e49\u4e86\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635</p> <ol> <li>\u77e9\u9635D\u8bb0\u5f55\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84</li> </ol> <p>eg\uff1a D\u30100\u3011\u30103\u3011 = 10\uff0c\u8bf4\u660e\u9876\u70b90\u52303\u7684\u6700\u77ed\u8def\u5f84\u4e3a10</p> <ol> <li>\u77e9\u9635P\u8bb0\u5f55\u9876\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u4e2d\u8f6c\u70b9</li> </ol> <p>eg\uff1a P\u30100\u3011\u30103\u3011 = 1\u8bf4\u660e\uff0c0\u52303\u7684\u6700\u77ed\u8def\u5f84\u8f68\u8ff9\u4e3a0 - &gt; 1 - &gt; 3</p> <ol> <li>\u5b83\u901a\u8fc73\u91cd\u5faa\u73af\uff0ck\u4e3a\u4e2d\u8f6c\u70b9\uff0cv\u4e3a\u8d77\u70b9\uff0cw\u4e3a\u7ec8\u70b9\uff0c\u5faa\u73af\u6bd4\u8f83 \\(D[v][w] \u548c D[v][k] + D[k][w]\\)\u6700\u5c0f\u503c\uff0c\u5982\u679c\\(D[v][k] + D[k][w]\\)\u66f4\u5c0f\uff0c\u5c31\u5c06\\(d[v][k] + D[k][w]\\)\u8986\u76d6\u4fdd\u5b58\u5728\\(D[v][w]\\)\u4e2d</li> </ol> <p>example</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <pre><code>void Floyd(MGraph G, int dist[][MAXVERTEXNUM], int path[][MAXVERTEXNUM])\n{\n    int i, j, k;\n    // \u521d\u59cb\u5316dist\u548cpath\u6570\u7ec4\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            dist[i][j] = G.Edge[i][j];\n            if(i != j &amp;&amp; G.Edge[i][j] &lt; INF)\n            {\n                path[i][j] = i;\n            }\n            else\n            {\n                path[i][j] = -1;\n            }\n        }\n    }\n    // \u6b63\u5f0f\u5f00\u59cb\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n    // \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u66f4\u65b0dist\u6570\u7ec4\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981G.vexnum - 1\u8f6e\n    for(k = 0; k &lt; G.vexnum; k++)\n    {\n        // k\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\n        for(i = 0; i &lt; G.vexnum; i++)\n        {\n            for(j = 0; j &lt; G.vexnum; j++)\n            {\n                if(dist[i][k] + dist[k][j] &lt; dist[i][j])\n                {\n                    // \u627e\u5230\u4e86\u66f4\u77ed\u7684\u8def\u5f84\uff0c\u66f4\u65b0dist\u6570\u7ec4\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                    path[i][j] = path[k][j];\n                }\n            }\n        }\n    }\n}\n\n// \u7528\u4e8e\u5b58\u50a8\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\nint dist2[MAXVERTEXNUM][MAXVERTEXNUM];\n// \u7528\u4e8e\u5b58\u50a8\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\nint path2[MAXVERTEXNUM][MAXVERTEXNUM];\n// \u4f7f\u7528Floyd\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\nFloyd(G, dist2, path2);\n// \u8f93\u51fa\u6700\u77ed\u8def\u5f84\nfor(int i = 0; i &lt; G.vexnum; i++)\n{\n    for(int j = 0; j &lt; G.vexnum; j++)\n    {\n        printf(\"%d \", dist2[i][j]);\n    }\n    printf(\"\\n\");\n}\nprintf(\"\\n\");\nfor(int i = 0; i &lt; G.vexnum; i++)\n{\n    for(int j = 0; j &lt; G.vexnum; j++)\n    {\n        printf(\"%d \", path2[i][j] + 1);\n    }\n    printf(\"\\n\");\n}\nprintf(\"\\n\");\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#853","title":"8.5.3 \u6700\u77ed\u8def\u5f84\u603b\u7ed3","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAXVERTEXNUM 20\n#define INF 65535\n\ntypedef char VertexType;\ntypedef int EdgeType;\ntypedef struct point{\n    VertexType Vex[MAXVERTEXNUM];\n    EdgeType Edge[MAXVERTEXNUM][MAXVERTEXNUM];\n    int vexnum;\n    int edgenum;\n}MGraph;\n\nvoid ReadGraph(MGraph *G)\n{\n    int i, j, k;\n    // \u8bfb\u53d6\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    scanf(\"%d %d\",&amp;G-&gt;vexnum,&amp;G-&gt;edgenum);\n    // \u8bfb\u53d6\u9876\u70b9\u4fe1\u606f\n    // \u521d\u59cb\u5316\u90bb\u63a5\u77e9\u9635\n    for(i = 0; i &lt; G-&gt;vexnum; i++)\n    {\n        for(j = 0; j &lt; G-&gt;vexnum; j++)\n        {\n            // \u7531\u4e8e\u56fe\u65e0\u81ea\u73af\uff0c\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\n            if(i == j)\n            {\n                G-&gt;Edge[i][j] = 0;\n            }\n            else\n            {\n                G-&gt;Edge[i][j] = INF;\n            }\n        }\n    }\n    // \u8bfb\u53d6\u8fb9\u4fe1\u606f\uff0c\u5bf9\u4e8e\u6709\u5411\u56fe\n    int v1, v2, weight;\n    for(k = 0; k &lt; G-&gt;edgenum; k++)\n    {\n        scanf(\"%d %d %d\", &amp;v1, &amp;v2, &amp;weight);\n        v1--;\n        v2--;\n        // v1-1,v2-1\u662f\u56e0\u4e3a\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\n        G-&gt;Edge[v1][v2] = weight;\n    }\n}\nvoid Dijkstra(MGraph G, int v0, int dist[], int path[])\n{\n    int i, j, k;\n    int min; // \u7528\u4e8e\u5b58\u50a8\u4ecev0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n    int flag[MAXVERTEXNUM]; // \u7528\u4e8e\u6807\u8bb0\u9876\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    // \u521d\u59cb\u5316\u56fe\u8868,\u5148\u770b\u9876\u70b9v0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u8ddd\u79bb\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        dist[i] = G.Edge[v0][i];\n        flag[i] = 0; // \u9876\u70b9i\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n        if(dist[i] &lt; INF)\n        {\n            path[i] = v0;\n        }\n        else\n        {\n            path[i] = -1;\n        }\n        // \u9876\u70b9v0\u5230\u9876\u70b9i\u6709\u8fb9\uff0c\u5219\u5c06i\u7684\u524d\u9a71\u7f6e\u4e3av0,\u5426\u5219\u7f6e\u4e3a-1\n    }\n    flag[v0] = 1; // \u9876\u70b9v0\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    path[v0] = -1; // \u9876\u70b9v0\u6ca1\u6709\u524d\u9a71\n    // \u6b63\u5f0f\u5f00\u59cb\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n    // \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u66f4\u65b0dist\u6570\u7ec4\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981G.vexnum - 1\u8f6e\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        min = INF;\n        int u = v0;\n        // \u627e\u5230\u5f53\u524d\u672a\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\u4e2d\u8ddd\u79bbv0\u6700\u8fd1\u7684\u9876\u70b9\n        // \u6bcf\u4e00\u8f6e\u5f00\u59cb\u90fd\u5bfb\u627e\u6700\u77ed\u8def\u5f84\uff0c\u6269\u5145\u5df2\u7ecf\u8bbf\u95ee\u7684\u9876\u70b9\u96c6\u5408\n        // \u7531\u4e8edist\u6570\u7ec4\u5df2\u7ecf\u88ab\u66f4\u65b0\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u904d\u5386\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            if(flag[j] == 0 &amp;&amp; dist[j] &lt; min)\n            {\n                min = dist[j];\n                u = j;\n            }\n        }\n        // \u5c06u\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\uff0c\u5373\u627e\u5230\u4e86\u4ecev0\u5230u\u7684\u6700\u77ed\u8def\u5f84\n        flag[u] = 1;\n        // \u4eceu\u51fa\u53d1\uff0c\u627e\u5230u\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4e5f\u5c31\u662fv0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\n        // \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u66f4\u65b0dist\u6570\u7ec4\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981G.vexnum - 1\u8f6e\n        for(k = 0; k &lt; G.vexnum; k++)\n        {\n            if(flag[k] == 0 &amp;&amp; G.Edge[u][k] &lt; INF &amp;&amp; dist[u] + G.Edge[u][k] &lt; dist[k])\n            {\n                // \u627e\u5230\u4e86\u66f4\u77ed\u7684\u8def\u5f84\uff0c\u66f4\u65b0dist\u6570\u7ec4\n                dist[k] = dist[u] + G.Edge[u][k];\n                path[k] = u;\n            }\n        }\n    }\n}\n// \u4f7f\u7528Floyd\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\nvoid Floyd(MGraph G, int dist[][MAXVERTEXNUM], int path[][MAXVERTEXNUM])\n{\n    int i, j, k;\n    // \u521d\u59cb\u5316dist\u548cpath\u6570\u7ec4\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            dist[i][j] = G.Edge[i][j];\n            if(i != j &amp;&amp; G.Edge[i][j] &lt; INF)\n            {\n                path[i][j] = i;\n            }\n            else\n            {\n                path[i][j] = -1;\n            }\n        }\n    }\n    // \u6b63\u5f0f\u5f00\u59cb\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n    // \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u66f4\u65b0dist\u6570\u7ec4\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981G.vexnum - 1\u8f6e\n    for(k = 0; k &lt; G.vexnum; k++)\n    {\n        // k\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\n        for(i = 0; i &lt; G.vexnum; i++)\n        {\n            for(j = 0; j &lt; G.vexnum; j++)\n            {\n                if(dist[i][k] + dist[k][j] &lt; dist[i][j])\n                {\n                    // \u627e\u5230\u4e86\u66f4\u77ed\u7684\u8def\u5f84\uff0c\u66f4\u65b0dist\u6570\u7ec4\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                    path[i][j] = path[k][j];\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    MGraph G;\n    ReadGraph(&amp;G);\n    // \u7528\u4e8e\u5b58\u50a8\u4ecev0\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n    int dist[MAXVERTEXNUM];\n    // \u7528\u4e8e\u6807\u8bb0\u6700\u77ed\u8def\u5f84\u7684\u524d\u4e00\u4e2a\u9876\u70b9\n    int path[MAXVERTEXNUM];\n    // \u4f7f\u7528Dijkstra\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\n    Dijkstra(G, 0, dist, path);\n    // \u8f93\u51fa\u6700\u77ed\u8def\u5f84\n    for(int i = 0; i &lt; G.vexnum; i++)\n    {\n        printf(\"%d \", dist[i]);\n    }\n    printf(\"\\n\");\n    for(int i = 0; i &lt; G.vexnum; i++)\n    {\n        printf(\"%d \", path[i] + 1);\n    }\n    printf(\"\\n\");\n    // \u7528\u4e8e\u5b58\u50a8\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n    int dist2[MAXVERTEXNUM][MAXVERTEXNUM];\n    // \u7528\u4e8e\u5b58\u50a8\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\n    int path2[MAXVERTEXNUM][MAXVERTEXNUM];\n    // \u4f7f\u7528Floyd\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\n    Floyd(G, dist2, path2);\n    // \u8f93\u51fa\u6700\u77ed\u8def\u5f84\n    for(int i = 0; i &lt; G.vexnum; i++)\n    {\n        for(int j = 0; j &lt; G.vexnum; j++)\n        {\n            printf(\"%d \", dist2[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n    for(int i = 0; i &lt; G.vexnum; i++)\n    {\n        for(int j = 0; j &lt; G.vexnum; j++)\n        {\n            printf(\"%d \", path2[i][j] + 1);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#86","title":"8.6 \u6700\u5c0f\u751f\u6210\u6811","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#861","title":"8.6.1 \u5b9a\u4e49","text":"<ol> <li>Spanning tree \u751f\u6210\u6811\u3002\u4e00\u4e2a\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u4e00\u4e2a\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u5b83\u5305\u542b\u56fe\u4e2d\u5168\u90e8\u7684n\u4e2a\u9876\u70b9\uff0c\u4f46\u662f\u53ea\u6709\u6784\u6210\u4e00\u68f5\u6811\u7684n-1\u6761\u8fb9</li> </ol> <ol> <li> <p>\u751f\u6210\u6811\u7684\u5c5e\u6027    - \u4e00\u4e2a\u8fde\u901a\u56fe\u53ef\u4ee5\u6709\u591a\u4e2a\u751f\u6210\u6811    - \u4e00\u4e2a\u8fde\u901a\u56fe\u7684\u6240\u6709\u751f\u6210\u6811\u90fd\u5305\u542b\u76f8\u540c\u7684\u9876\u70b9\u4e2a\u6570\u548c\u8fb9\u6570    - \u751f\u6210\u6811\u4e0d\u542b\u6709\u73af    - \u79fb\u9664\u751f\u6210\u6811\u7684\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u90fd\u4f1a\u5bfc\u81f4\u56fe\u4e0d\u8fde\u901a    - \u5728\u751f\u6210\u6811\u4e2d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u6784\u6210\u73af    - \u5bf9\u4e8e\u5305\u542bn\u4e2a\u9876\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe\u6700\u591a\u5305\u542b \\(n^{n-2}\\) \u9897\u751f\u6210\u6811\u3002</p> </li> <li> <p>minimum spanning tree \u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09</p> </li> </ol> <p>\u6240\u8c13\u4e00\u4e2a \u5e26\u6743\u56fe \u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u539f\u56fe\u4e2d\u8fb9\u7684\u6743\u503c\u6700\u5c0f\u7684\u751f\u6210\u6811 \uff0c\u6240\u8c13\u6700\u5c0f\u662f\u6307\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u5176\u5b83\u751f\u6210\u6811\u7684\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u3002</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#862-prim","title":"8.6.2 Prim (\u666e\u62c9\u59c6)\u7b97\u6cd5","text":"<p>Prim\u7b97\u6cd5\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u521d\u59cb\u65f6\u4ece\u56fe\u4e2d\u4efb\u53d6\u4e00\u4e2a\u9876\u70b9\uff0c\u5982\u679c\u9876\u70b9\u52a0\u5165\u6811T\uff0c\u6b64\u65f6\u6811\u4e2d\u53ea\u542b\u6709\u4e00\u4e2a\u9876\u70b9\uff0c\u4e4b\u540e\u9009\u62e9\u4e00\u4e2a\u4e0e\u5f53\u524dT\u4e2d\u9876\u70b9\u96c6\u5408\u8ddd\u79bb\u6700\u8fd1\u7684\u9876\u70b9\uff0c\u5e76\u5c06\u8be5\u9876\u70b9\u548c\u76f8\u5e94\u7684\u8fb9\u52a0\u5165T\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540eT\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\u52a01\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u76f4\u5230\u56fe\u4e2d\u6240\u6709\u7684\u9876\u70b9\u52a0\u5165\u5230T\uff0c\u5f97\u5230\u7684T\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002</p> <p>\u901a\u4fd7\u70b9\u8bf4\u5c31\u662f\uff1a\u4ece\u4e00\u4e2a\u9876\u70b9\u51fa\u53d1\uff0c\u5728\u4fdd\u8bc1\u4e0d\u5f62\u6210\u56de\u8def\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u627e\u5230\u5e76\u6dfb\u52a0\u4e00\u6761\u6700\u77ed\u7684\u8fb9\uff0c\u5c31\u628a\u5f53\u524d\u5f62\u6210\u7684\u8fde\u901a\u5206\u91cf\u5f53\u505a\u4e00\u4e2a\u6574\u4f53\u6216\u8005\u4e00\u4e2a\u70b9\u770b\u5f85\uff0c\u7136\u540e\u91cd\u590d\u201c\u627e\u6700\u77ed\u7684\u8fb9\u5e76\u6dfb\u52a0\u201d\u7684\u64cd\u4f5c\u3002</p> <p> $$ Prim \u7b97\u6cd5\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a\\ \u5047\u8bbeG = {V\uff0cE},\u662f\u8fde\u901a\u56fe\uff0c\u5176\u6700\u5c0f\u751f\u6210\u6811T = {U\uff0cE_T},E_T\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8fb9\u7684\u96c6\u5408\u3002\\ 1. \u521d\u59cb\u5316\uff1a\u5411\u7a7a\u6811T = (U\uff0cE_T)\u6dfb\u52a0G\u4e2d\u4efb\u610f\u9876\u70b9v_0,\u4f7f\u5f97U = {v_0},E_T = NULL\\ 2. \u5faa\u73af\u91cd\u590d\u4e0b\u5217\u64cd\u4f5c\u81f3U = V\uff0c\u4ece\u56fe\u4e2d\u9009\u62e9{(u,v)|u \\in U, v \\in V-U}\u4e2d\u5177\u6709\u6700\u5c0f\u6743\u503c\u7684\u8fb9(u,v)\\ \u52a0\u5165\u5230\u6811T\uff0cU = U \\cup {v}, E_T = E_T \\cup {(u,v)} $$ \u7b97\u6cd5\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;math.h&gt;\n\n#define MAXVERTEXNUM 20\n#define INF 65535\n\ntypedef char VertexType;\ntypedef int WeightType;\n\ntypedef struct point{\n    VertexType Vertex[MAXVERTEXNUM];\n    WeightType Edge[MAXVERTEXNUM][MAXVERTEXNUM];\n    int vexnum;\n    int edgenum;\n}MGraph;\n\nvoid ReadGraph(MGraph *G)\n{\n    int i, j, k;\n    // \u8bfb\u53d6\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    scanf(\"%d %d\",&amp;G-&gt;vexnum, &amp;G-&gt;edgenum);\n    // \u521d\u59cb\u5316\u90bb\u63a5\u77e9\u9635\n    for(i = 0; i &lt; G-&gt;vexnum; i++)\n    {\n        for(j = 0; j &lt; G-&gt;vexnum; j++)\n        {\n            // \u5047\u8bbe\u6b64\u5904\u4e3a\u65e0\u5411\u56fe\n            if(i == j)\n            {\n                G-&gt;Edge[i][j] = 0; // \u65e0\u81ea\u73af,\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\n            }\n            else\n            {\n                G-&gt;Edge[i][j] = INF;\n            }\n        }\n    }\n    // \u8bfb\u53d6\u8fb9\u7684\u4fe1\u606f\n    for(k = 0; k &lt; G-&gt;edgenum; k++)\n    {\n        int v1, v2, weight;\n        scanf(\"%d %d %d\",&amp;v1, &amp;v2, &amp;weight);\n        v1--;\n        v2--;\n        // \u8bbe\u7f6e\u90bb\u63a5\u77e9\u9635\u7684\u65f6\u5019\uff0c\u662f\u4ece0\u5f00\u59cb\u7684\n        G-&gt;Edge[v1][v2] = G-&gt;Edge[v2][v1] = weight;\n    }\n}\n// \u4f7f\u7528Prim\u7b97\u6cd5\u5b9e\u73b0\u6700\u5c0f\u751f\u6210\u6811\nvoid Prim(MGraph G, int v0, int dist[], int path[])\n{\n    // v0\u662f\u8d77\u59cb\u9876\u70b9\uff0c\u53ef\u4ee5\u4efb\u610f\u9009\u53d6\n    // \u521d\u59cb\u5316dist\u6570\u7ec4\u548cpath\u6570\u7ec4\n    int i, j, k;\n    int flag[MAXVERTEXNUM]; // \u7528\u4e8e\u6807\u8bb0\u9876\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    v0--;\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        dist[i] = G.Edge[v0][i];\n        path[i] = -1; // -1\u8868\u793a\u6ca1\u6709\u8def\u5f84\n        flag[i] = 0; // \u9876\u70b9i\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n    }\n    flag[v0] = 1; // \u9876\u70b9v0\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    // \u8981\u60f3\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u9700\u8981\u627e\u5230n-1\u6761\u8fb9\uff0cn\u4e3a\u9876\u70b9\u6570\uff0c\u9700\u8981\u6267\u884c\u5faa\u73afn-1\u6b21\n    for(i = 0; i &lt; G.vexnum - 1; i++)\n    {\n        // \u627e\u5230\u5f53\u524d\u672a\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\u4e2d\u8ddd\u79bbv0\u6700\u8fd1\u7684\u9876\u70b9\n        int min = INF;\n        int v0 = -1;\n        int v1 = -1;\n        // v0 \u548c v1 \u5206\u522b\u8868\u793a\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            // \u6b64\u65f6\u6bd4\u8f83\u7684\u662fedge\u7684\u957f\u5ea6\uff0c\u4ee5\u5df2\u7ecf\u88ab\u8bbf\u95ee\u7684\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u672a\u88ab\u8bbf\u95ee\u7684\u70b9\u4f5c\u4e3a\u7ec8\u70b9\n            for(k = 0; k &lt; G.vexnum; k++)\n            {\n                if(flag[j] == 1 &amp;&amp; flag[k] == 0 &amp;&amp; G.Edge[j][k] &lt; min)\n                {\n                    min = G.Edge[j][k];\n                    v1 = k;\n                    v0 = j;\n                }\n            }\n        }\n        flag[v1] = 1; // \u9876\u70b9v1\u5df2\u7ecf\u88ab\u8bbf\u95ee\n        path[v1] = v0; // \u9876\u70b9v1\u7684\u524d\u9a71\u662fv0\n        // \u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\n        printf(\"%d %d %d\\n\", v0+1, v1+1, min);\n        printf(\"%d %d %d\\n\", path[v1]+1, v1+1, G.Edge[path[v1]][v1]);\n    }\n}\n// \u5224\u65ad\u662f\u5426\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u5e8f\u5217\nvoid Is_SpanningTree(MGraph G, int Seq[])\n{\n    int i, j, k;\n    // \u521d\u59cb\u5316\uff0c\u5148\u5c06Seq\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u51cf\u4e00\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        Seq[i]--;\n    }\n    // flag[Seq[0]] = 1; // \u9876\u70b9Seq[0]\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    // \u9664\u53bb\u7b2c\u4e00\u4e2a\u9876\u70b9\uff0c\u5176\u4ed6\u9876\u70b9\u90fd\u9700\u8981\u8fdb\u884c\u5224\u65ad\uff0c\u9700\u8981\u904d\u5386G.vexnum - 1\u6b21\n    // i \u8868\u793a\u4e0b\u6807\uff0c\u4eceSeq[1]\u5f00\u59cb\n    for(i = 1; i &lt; G.vexnum; i++)\n    {\n        // j\u8868\u793a\u7684\u662f\u4e5f\u662f\u4e0b\u6807\uff0c\u662f\u5df2\u7ecf\u88ab\u5224\u65ad\u8fc7\u7684\u9876\u70b9\u7684\u4e0b\u6807\n        // \u9700\u8981\u5224\u65adSeq[i]\u662f\u5426\u662f\u4ee5Seq[0],Seq[1],....Seq[i-1]\u4e3a\u8d77\u70b9\u7684\u6700\u77ed\u8def\u5f84\n        int min = INF;\n        for(j = 0; j &lt; i; j++)\n        {\n            // k\u8868\u793a\u7684\u662f\u6ca1\u88ab\u5224\u65ad\u8fc7\u7684\u9876\u70b9\u7684\u4e0b\u6807\uff0c\u4ecei\u5f00\u59cb\n            for(k = i; k &lt; G.vexnum; k++)\n            {\n                // \u5148\u5bfb\u627e\u6700\u77ed\u957f\u5ea6\u7684\u8fb9\uff0c\u8bb0\u5f55\u524d\u9a71\u548c\u540e\u9a71\n                if(G.Edge[Seq[j]][Seq[k]] &lt; min)\n                {\n                    min = G.Edge[Seq[j]][Seq[k]];\n                    // v0 = Seq[j];\n                }\n            }\n        }\n        // (v0,Seq[i])\u662f\u4e0d\u662f\u6700\u77ed\u7684\u8fb9\n        int flag = 0;\n        for(j = 0; j &lt; i; j++)\n        {\n            if(G.Edge[Seq[j]][Seq[i]] == min)\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            printf(\"No\\n\");\n            return;\n        }\n    }\n    printf(\"Yes\\n\");\n}\nint main()\n{\n    MGraph G;\n    ReadGraph(&amp;G);\n    // int dist[MAXVERTEXNUM];\n    // int path[MAXVERTEXNUM];\n    // Prim(G, 1, dist, path);\n    int Seq[MAXVERTEXNUM];\n    for(int i = 0; i &lt; G.vexnum; i++)\n    {\n        scanf(\"%d\",&amp;Seq[i]);\n    }\n    Is_SpanningTree(G, Seq);\n}\n</code></pre> <p>\u5982\u679c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u8868\u793a\u56fe\uff0cPrim \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O\uff08V^2\uff09\\)\uff0c\u5176\u4e2d V \u4e3a\u9876\u70b9\u6570\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#863-kruskal","title":"8.6.3 Kruskal \uff08\u514b\u9c81\u65af\u5361\u5c14\uff09\u7b97\u6cd5","text":"<p><code>\u4e0ePrim\u7b97\u6cd5\u4ece\u9876\u70b9\u5f00\u59cb\u6269\u5c55\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u540c\uff0cKruskal\u7b97\u6cd5\u662f\u4e00\u79cd\u6309\u7167\u6743\u503c\u7684\u9012\u589e\u6b21\u5e8f\u9009\u62e9\u5408\u9002\u7684\u8fb9\u6765\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u65b9\u6cd5</code></p> <p>Kruskal\u7b97\u6cd5\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u521d\u59cb\u65f6\u53ea\u6709n\u4e2a\u9876\u70b9\u800c\u65e0\u8fb9\u7684\u975e\u8fde\u901a\u56feT = V\uff0c\u6bcf\u4e2a\u9876\u70b9\u81ea\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u6309\u7167\u8fb9\u7684\u6743\u503c\u7531\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u4e0d\u65ad\u5730\u9009\u53d6\u5f53\u524d\u672a\u88ab\u9009\u53d6\u4e14\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u82e5\u6539\u53d8\u4f9d\u9644\u7684\u9876\u70b9\u843d\u5728T\u4e2d\u4e0d\u540c\u7684\u8fde\u901a\u5206\u91cf\u4e0a\uff0c\u5219\u5c06\u6b64\u8fb9\u52a0\u5165T\uff0c\u5426\u5219\u820d\u5f03\u6b64\u8fb9\u9009\u62e9\u4e0b\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u81f3T\u4e2d\u6240\u6709\u7684\u9876\u70b9\u90fd\u8fde\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e0a\u3002</p> <p></p> <pre><code>int Find(int father[], int x)\n{\n    // \u627e\u5230x\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\n    int a = x;\n    while(father[a] != -1)\n    {\n        a = father[a];\n    }\n    // \u8def\u5f84\u538b\u7f29\n    while(x != a)\n    {\n        int temp = father[x];\n        father[x] = a;\n        x = temp;\n    }\n    return a;\n}\n// \u4f7f\u7528Kruskal\u7b97\u6cd5\u5b9e\u73b0\u6700\u5c0f\u751f\u6210\u6811\nvoid Kruskal(MGraph G)\n{\n    // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    int i, j, k;\n    int father[MAXVERTEXNUM];\n    // \u5b9a\u4e49\u4e00\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u9876\u70b9\u7684\u7236\u8282\u70b9\uff0c\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        // \u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u7236\u8282\u70b9\u4e3a-1\n        father[i] = -1;\n    }\n    // \u9700\u8981\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u9700\u8981\u6267\u884cG.edgenum\u6b21\n    // \u5982\u679c\u5355\u7eaf\u7684\u904d\u5386vexnum-1\u6b21\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e2d\u95f4\u6709\u7684\u8fb9\u662f\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e0a\u7684\uff0c\u4e0d\u9700\u8981\n    for(i = 0; i &lt; G.edgenum; i++)\n    {\n        int min = INF;\n        int v0 = -1;\n        int v1 = -1;\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            for(k = 0; k &lt; G.vexnum; k++)\n            {\n                // \u627e\u5230\u6700\u5c0f\u7684\u8fb9\n                // \u7531\u4e8e\u5b9a\u4e49\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65adj\u548ck\u662f\u5426\u76f8\u7b49\n                if( (j != k) &amp;&amp;G.Edge[j][k] &lt; min)\n                {\n                    min = G.Edge[j][k];\n                    v0 = j;\n                    v1 = k;\n                }\n            }\n        }\n        // \u5224\u65adv0\u548cv1\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n        int a = Find(father, v0);\n        int b = Find(father, v1);\n        if(a != b)\n        {\n            // \u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c31\u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\n            father[a] = b;\n            printf(\"%d %d %d\\n\", v0+1, v1+1, min);\n        }\n        // \u5c06\u8fd9\u6761\u8fb9\u4ece\u56fe\u4e2d\u5220\u9664\uff0c\u8fb9\u7684weight\u8bbe\u7f6e\u4e3aINF\uff0c\u540e\u7eed\u5c31\u4e0d\u53ef\u80fd\u5c0f\u4e8emin\u4e86\n        G.Edge[v0][v1] = G.Edge[v1][v0] = INF;\n    }\n}\n\n\n\n#define MAXVEX 500        // \u56fe\u4e2d\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\n#define INF 65535        // \u7528INF(\u221e)\u8868\u793a\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u4e0d\u8fde\u901a\ntypedef char VertexType; // \u9876\u70b9\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int WeightType;  // \u8fb9\u4e0a\u7684\u6743\u503c\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int Vertex;      // \u7528\u4e8e\u5b58\u50a8\u4e0b\u6807\u7684\u7c7b\u578b\n/* vertices are numbered from 1 to MaxVertexNum */\n\n/*\u8fb9\u8868\u7ed3\u70b9*/\ntypedef struct AdjVNode\n{\n    int adjvex;            // \u8be5\u5f27\u6240\u6307\u5411\u7684\u9876\u70b9\u7684\u4e0b\u6807\u6216\u8005\u4f4d\u7f6e\n    WeightType weight;     // \u6743\u503c\uff0c\u5bf9\u4e8e\u975e\u7f51\u56fe\u53ef\u4ee5\u4e0d\u9700\u8981\n    struct AdjVNode *next; // \u6307\u5411\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\n} AdjVNode;\ntypedef struct AdjVNode *PtrToAdjVNode;\n\n/*\u9876\u70b9\u8868\u7ed3\u70b9*/\ntypedef struct VertexNode\n{\n    VertexType data;         // \u9876\u70b9\u57df\uff0c\u5b58\u50a8\u9876\u70b9\u4fe1\u606f\n    PtrToAdjVNode FirstEdge; // \u8fb9\u8868\u5934\u6307\u9488\n} AdjList[MAXVEX];\n\n/*\u90bb\u63a5\u8868*/\ntypedef struct\n{\n    AdjList adjList;\n    int Vertexnum;\n    int Edgenum; // \u56fe\u4e2d\u5f53\u524d\u9876\u70b9\u6570\u548c\u8fb9\u6570\n} GNode;\ntypedef GNode *PtrToGNode;\ntypedef PtrToGNode LGraph; // \u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u5b58\u50a8\u7684\u56fe\u7c7b\u578b\n\n\nint Vex1[MAXVEX] = {0};\nint Vex2[MAXVEX] = {0};\nint Weight1[MAXVEX] = {0};\nint Vex3[MAXVEX] = {0};\nint Vex4[MAXVEX] = {0};\nint Weight2[MAXVEX] = {0};\nGNode ReadG()\n{\n    int i, k = 0;\n    LGraph LG = (LGraph)malloc(sizeof(GNode));\n    for (i = 0; i &lt; MAXVEX; i++)\n    {\n        LG-&gt;adjList[i].FirstEdge = NULL;\n    }\n    scanf(\"%d %d\", &amp;LG-&gt;Vertexnum, &amp;LG-&gt;Edgenum);\n    for (i = 0; i &lt; LG-&gt;Edgenum; i++)\n    {\n        int p1, p2, weight;\n        scanf(\"%d %d %d\", &amp;p1, &amp;p2, &amp;weight);\n        Vex1[k] = --p1;\n        Vex2[k] = --p2;\n        Weight1[k++] = weight;\n        PtrToAdjVNode adj1 = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        adj1-&gt;adjvex = p2;\n        adj1-&gt;weight = weight;\n        adj1-&gt;next = NULL;\n        if (LG-&gt;adjList[p1].FirstEdge == NULL)\n        {\n            LG-&gt;adjList[p1].FirstEdge = adj1;\n        }\n        else \n        {\n            // \u6b64\u5904\u91c7\u7528\u7684\u662f\u5934\u63d2\u6cd5\n            // adj-&gt;next = LG-&gt;adjList[p1].FirstEdge;\n            // LG-&gt;adjList[p1].FirstEdge = adj;\n            //\u5c3e\u63d2\u6cd5\n            PtrToAdjVNode temp = LG-&gt;adjList[p1].FirstEdge;\n            while(temp-&gt;next != NULL)\n            {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = adj1;\n        }\n        PtrToAdjVNode adj2 = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        adj2-&gt;adjvex = p1;\n        adj2-&gt;weight = weight;\n        adj2-&gt;next = NULL;\n        if (LG-&gt;adjList[p2].FirstEdge == NULL)\n        {\n            LG-&gt;adjList[p2].FirstEdge = adj2;\n        }\n        else \n        {\n            PtrToAdjVNode temp = LG-&gt;adjList[p2].FirstEdge;\n            while(temp-&gt;next != NULL)\n            {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = adj2;\n        }\n    }\n    return *LG;\n}\nint Find(int father[], int x)\n{\n    // \u627e\u5230x\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\n    int a = x;\n    while(father[a] != -1)\n    {\n        a = father[a];\n    }\n    // \u8def\u5f84\u538b\u7f29\n    while(x != a)\n    {\n        int temp = father[x];\n        father[x] = a;\n        x = temp;\n    }\n    return a;\n}\nvoid Kruskal(GNode G, int *sum, int *cnt)\n{\n    // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    int i, j;\n    int k = 0;\n    int father[G.Vertexnum];\n    // \u5b9a\u4e49\u4e00\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u9876\u70b9\u7684\u7236\u8282\u70b9\uff0c\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n    for(i = 0; i &lt; G.Vertexnum; i++)\n    {\n        // \u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u7236\u8282\u70b9\u4e3a-1\n        father[i] = -1;\n    }\n    // \u9700\u8981\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u9700\u8981\u6267\u884cG.edgenum\u6b21\n    // \u5982\u679c\u5355\u7eaf\u7684\u904d\u5386vexnum-1\u6b21\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e2d\u95f4\u6709\u7684\u8fb9\u662f\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e0a\u7684\uff0c\u4e0d\u9700\u8981\n    int min = INF;\n    int v1 = -1;\n    int v2 = -1;\n    for(j = 0; j &lt; G.Edgenum; j++)\n    {\n        min = INF;\n        for(i = 0; i &lt; G.Vertexnum; i++)\n        {\n            PtrToAdjVNode temp = G.adjList[i].FirstEdge;\n            while(temp != NULL)\n            {\n                if(temp-&gt;weight &lt; min)\n                {\n                    min = temp-&gt;weight;\n                    v1 = i;\n                    v2 = temp-&gt;adjvex;\n                }\n                temp = temp-&gt;next;\n            }\n        }\n        // \u5224\u65adv0\u548cv1\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n        int a = Find(father, v1);\n        int b = Find(father, v2);\n        if(a != b)\n        {\n            // \u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c31\u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\n            father[a] = b;\n            // printf(\"%d %d %d\\n\", v1+1, v2+1, min);\n            *sum += min;\n            Vex3[k] = v1;\n            Vex4[k++] = v2;\n            Weight2[k] = min;\n\n        }\n        PtrToAdjVNode temp1 = G.adjList[v1].FirstEdge;\n        while(temp1 != NULL)\n        {\n            if(temp1-&gt;adjvex == v2)\n            {\n                temp1-&gt;weight = INF;\n                break;\n            }\n            temp1 = temp1-&gt;next;\n        }\n        PtrToAdjVNode temp2 = G.adjList[v2].FirstEdge;\n        while(temp2 != NULL)\n        {\n            if(temp2-&gt;adjvex == v1)\n            {\n                temp2-&gt;weight = INF;\n                break;\n            }\n            temp2 = temp2-&gt;next;\n        }\n    }\n    // \u5224\u65ad\u662f\u5426\u5b58\u5728MST\n    for(i = 0; i &lt; G.Vertexnum; i++)\n    {\n        if(father[i] == -1)\n        {\n            (*cnt) ++;\n        }\n    }\n\n}\n\nint main()\n{\n    GNode LG = ReadG();\n    int sum = 0;\n    int cnt = 0;\n    Kruskal(LG, &amp;sum, &amp;cnt);\n    printf(\"%d\",sum);\n    if(cnt &gt; 1)\n    {\n        printf(\"No MST\\n\");\n        printf(\"%d\\n\", cnt);\n    }\n}\n</code></pre> <p>\u6574\u5408\u7248</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;math.h&gt;\n\n#define MAXVERTEXNUM 20\n#define INF 65535\n\ntypedef char VertexType;\ntypedef int WeightType;\n\ntypedef struct point{\n    VertexType Vertex[MAXVERTEXNUM];\n    WeightType Edge[MAXVERTEXNUM][MAXVERTEXNUM];\n    int vexnum;\n    int edgenum;\n}MGraph;\n\nvoid ReadGraph(MGraph *G)\n{\n    int i, j, k;\n    // \u8bfb\u53d6\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    scanf(\"%d %d\",&amp;G-&gt;vexnum, &amp;G-&gt;edgenum);\n    // \u521d\u59cb\u5316\u90bb\u63a5\u77e9\u9635\n    for(i = 0; i &lt; G-&gt;vexnum; i++)\n    {\n        for(j = 0; j &lt; G-&gt;vexnum; j++)\n        {\n            // \u5047\u8bbe\u6b64\u5904\u4e3a\u65e0\u5411\u56fe\n            if(i == j)\n            {\n                G-&gt;Edge[i][j] = 0; // \u65e0\u81ea\u73af,\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\n            }\n            else\n            {\n                G-&gt;Edge[i][j] = INF;\n            }\n        }\n    }\n    // \u8bfb\u53d6\u8fb9\u7684\u4fe1\u606f\n    for(k = 0; k &lt; G-&gt;edgenum; k++)\n    {\n        int v1, v2, weight;\n        scanf(\"%d %d %d\",&amp;v1, &amp;v2, &amp;weight);\n        v1--;\n        v2--;\n        // \u8bbe\u7f6e\u90bb\u63a5\u77e9\u9635\u7684\u65f6\u5019\uff0c\u662f\u4ece0\u5f00\u59cb\u7684\n        G-&gt;Edge[v1][v2] = G-&gt;Edge[v2][v1] = weight;\n    }\n}\n// \u4f7f\u7528Prim\u7b97\u6cd5\u5b9e\u73b0\u6700\u5c0f\u751f\u6210\u6811\nvoid Prim(MGraph G, int v0, int dist[], int path[])\n{\n    // v0\u662f\u8d77\u59cb\u9876\u70b9\uff0c\u53ef\u4ee5\u4efb\u610f\u9009\u53d6\n    // \u521d\u59cb\u5316dist\u6570\u7ec4\u548cpath\u6570\u7ec4\n    int i, j, k;\n    int flag[MAXVERTEXNUM]; // \u7528\u4e8e\u6807\u8bb0\u9876\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    v0--;\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        dist[i] = G.Edge[v0][i];\n        path[i] = -1; // -1\u8868\u793a\u6ca1\u6709\u8def\u5f84\n        flag[i] = 0; // \u9876\u70b9i\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n    }\n    flag[v0] = 1; // \u9876\u70b9v0\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    // \u8981\u60f3\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u9700\u8981\u627e\u5230n-1\u6761\u8fb9\uff0cn\u4e3a\u9876\u70b9\u6570\uff0c\u9700\u8981\u6267\u884c\u5faa\u73afn-1\u6b21\n    for(i = 0; i &lt; G.vexnum - 1; i++)\n    {\n        // \u627e\u5230\u5f53\u524d\u672a\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\u4e2d\u8ddd\u79bbv0\u6700\u8fd1\u7684\u9876\u70b9\n        int min = INF;\n        int v0 = -1;\n        int v1 = -1;\n        // v0 \u548c v1 \u5206\u522b\u8868\u793a\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            // \u6b64\u65f6\u6bd4\u8f83\u7684\u662fedge\u7684\u957f\u5ea6\uff0c\u4ee5\u5df2\u7ecf\u88ab\u8bbf\u95ee\u7684\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u672a\u88ab\u8bbf\u95ee\u7684\u70b9\u4f5c\u4e3a\u7ec8\u70b9\n            for(k = 0; k &lt; G.vexnum; k++)\n            {\n                if(flag[j] == 1 &amp;&amp; flag[k] == 0 &amp;&amp; G.Edge[j][k] &lt; min)\n                {\n                    min = G.Edge[j][k];\n                    v1 = k;\n                    v0 = j;\n                }\n            }\n        }\n        flag[v1] = 1; // \u9876\u70b9v1\u5df2\u7ecf\u88ab\u8bbf\u95ee\n        path[v1] = v0; // \u9876\u70b9v1\u7684\u524d\u9a71\u662fv0\n        // \u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\n        printf(\"%d %d %d\\n\", v0+1, v1+1, min);\n        printf(\"%d %d %d\\n\", path[v1]+1, v1+1, G.Edge[path[v1]][v1]);\n    }\n}\n// \u5224\u65ad\u662f\u5426\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u5e8f\u5217\nvoid Is_SpanningTree(MGraph G, int Seq[])\n{\n    int i, j, k;\n    // \u521d\u59cb\u5316\uff0c\u5148\u5c06Seq\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u51cf\u4e00\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        Seq[i]--;\n    }\n    // flag[Seq[0]] = 1; // \u9876\u70b9Seq[0]\u5df2\u7ecf\u88ab\u8bbf\u95ee\n    // \u9664\u53bb\u7b2c\u4e00\u4e2a\u9876\u70b9\uff0c\u5176\u4ed6\u9876\u70b9\u90fd\u9700\u8981\u8fdb\u884c\u5224\u65ad\uff0c\u9700\u8981\u904d\u5386G.vexnum - 1\u6b21\n    // i \u8868\u793a\u4e0b\u6807\uff0c\u4eceSeq[1]\u5f00\u59cb\n    for(i = 1; i &lt; G.vexnum; i++)\n    {\n        // j\u8868\u793a\u7684\u662f\u4e5f\u662f\u4e0b\u6807\uff0c\u662f\u5df2\u7ecf\u88ab\u5224\u65ad\u8fc7\u7684\u9876\u70b9\u7684\u4e0b\u6807\n        // \u9700\u8981\u5224\u65adSeq[i]\u662f\u5426\u662f\u4ee5Seq[0],Seq[1],....Seq[i-1]\u4e3a\u8d77\u70b9\u7684\u6700\u77ed\u8def\u5f84\n        int min = INF;\n        for(j = 0; j &lt; i; j++)\n        {\n            // k\u8868\u793a\u7684\u662f\u6ca1\u88ab\u5224\u65ad\u8fc7\u7684\u9876\u70b9\u7684\u4e0b\u6807\uff0c\u4ecei\u5f00\u59cb\n            for(k = i; k &lt; G.vexnum; k++)\n            {\n                // \u5148\u5bfb\u627e\u6700\u77ed\u957f\u5ea6\u7684\u8fb9\uff0c\u8bb0\u5f55\u524d\u9a71\u548c\u540e\u9a71\n                if(G.Edge[Seq[j]][Seq[k]] &lt; min)\n                {\n                    min = G.Edge[Seq[j]][Seq[k]];\n                    // v0 = Seq[j];\n                }\n            }\n        }\n        // (v0,Seq[i])\u662f\u4e0d\u662f\u6700\u77ed\u7684\u8fb9\n        int flag = 0;\n        for(j = 0; j &lt; i; j++)\n        {\n            if(G.Edge[Seq[j]][Seq[i]] == min)\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            printf(\"No\\n\");\n            return;\n        }\n    }\n    printf(\"Yes\\n\");\n}\nint Find(int father[], int x)\n{\n    // \u627e\u5230x\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\n    int a = x;\n    while(father[a] != -1)\n    {\n        a = father[a];\n    }\n    // \u8def\u5f84\u538b\u7f29\n    while(x != a)\n    {\n        int temp = father[x];\n        father[x] = a;\n        x = temp;\n    }\n    return a;\n}\n// \u4f7f\u7528Kruskal\u7b97\u6cd5\u5b9e\u73b0\u6700\u5c0f\u751f\u6210\u6811\nvoid Kruskal(MGraph G)\n{\n    // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    int i, j, k;\n    int father[MAXVERTEXNUM];\n    // \u5b9a\u4e49\u4e00\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u9876\u70b9\u7684\u7236\u8282\u70b9\uff0c\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        // \u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u7236\u8282\u70b9\u4e3a-1\n        father[i] = -1;\n    }\n    // \u9700\u8981\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u9700\u8981\u6267\u884cG.edgenum\u6b21\n    // \u5982\u679c\u5355\u7eaf\u7684\u904d\u5386vexnum-1\u6b21\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e2d\u95f4\u6709\u7684\u8fb9\u662f\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e0a\u7684\uff0c\u4e0d\u9700\u8981\n    for(i = 0; i &lt; G.edgenum; i++)\n    {\n        int min = INF;\n        int v0 = -1;\n        int v1 = -1;\n        for(j = 0; j &lt; G.vexnum; j++)\n        {\n            for(k = 0; k &lt; G.vexnum; k++)\n            {\n                // \u627e\u5230\u6700\u5c0f\u7684\u8fb9\n                // \u7531\u4e8e\u5b9a\u4e49\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65adj\u548ck\u662f\u5426\u76f8\u7b49\n                if( (j != k) &amp;&amp;G.Edge[j][k] &lt; min)\n                {\n                    min = G.Edge[j][k];\n                    v0 = j;\n                    v1 = k;\n                }\n            }\n        }\n        // \u5224\u65adv0\u548cv1\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n        int a = Find(father, v0);\n        int b = Find(father, v1);\n        if(a != b)\n        {\n            // \u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c31\u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\n            father[a] = b;\n            printf(\"%d %d %d\\n\", v0+1, v1+1, min);\n        }\n        // \u5c06\u8fd9\u6761\u8fb9\u4ece\u56fe\u4e2d\u5220\u9664\uff0c\u8fb9\u7684weight\u8bbe\u7f6e\u4e3aINF\uff0c\u540e\u7eed\u5c31\u4e0d\u53ef\u80fd\u5c0f\u4e8emin\u4e86\n        G.Edge[v0][v1] = G.Edge[v1][v0] = INF;\n    }\n}\nint main()\n{\n    MGraph G;\n    ReadGraph(&amp;G);\n    // int dist[MAXVERTEXNUM];\n    // int path[MAXVERTEXNUM];\n    // Prim(G, 1, dist, path);\n    // int Seq[MAXVERTEXNUM];\n    // for(int i = 0; i &lt; G.vexnum; i++)\n    // {\n    //     scanf(\"%d\",&amp;Seq[i]);\n    // }\n    // Is_SpanningTree(G, Seq);\n    Kruskal(G);\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#87-network-flow-problem","title":"8.7 Network Flow Problem","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#871","title":"8.7.1 \u6700\u5927\u6d41\uff0c\u6700\u5c0f\u5272\u95ee\u9898","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\n#define MAXVERTEXNUM 20\n#define INF 65535\n\ntypedef char VertexType;\ntypedef int WeightType;\n\ntypedef struct point{\n    VertexType Vertex[MAXVERTEXNUM];\n    WeightType Edge[MAXVERTEXNUM][MAXVERTEXNUM];\n    int vexnum;\n    int edgenum;\n}MGraph;\nint path[MAXVERTEXNUM] = {0};\nint d_src = 0, d_des = 0;\nint index = 0;\nint char_to_int(char *s, int map[]) {  \n    int d = 0;  \n    while (*s) {  \n        d = d * 26 + *s - 'A';  \n        s++;  \n    } \n    if(map[d] == 0)\n    {\n        if(d == d_src)\n        {\n            if(index == 0)\n            {\n                index++;\n            }\n            return map[d];\n        }\n        if(d == d_des)\n        {\n            return MAXVERTEXNUM - 1;\n        }\n        map[d] = index++;\n    }\n    return map[d];\n}  \nvoid ReadGraph(MGraph *G)\n{\n    int i, j, k;\n    // \u8bfb\u53d6\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    // scanf(\"%d %d\",&amp;G-&gt;vexnum, &amp;G-&gt;edgenum);\n    // \u521d\u59cb\u5316\u90bb\u63a5\u77e9\u9635\n    int map[10000] = {0};\n    char source[4], destination[4];\n    scanf(\"%s %s %d\", source, destination, &amp;G-&gt;edgenum);\n    for(i = 0; i &lt; 3; i++)\n    {\n\n        d_src = d_src * 26 + source[i] - 'A';\n        d_des = d_des * 26 + destination[i] - 'A';\n    }\n    printf(\"%d %d\\n\", d_src, d_des);\n    G-&gt;vexnum = 20;\n    int src = char_to_int(source ,map);\n    int des = char_to_int(destination, map);\n    //printf(\"%d %d\\n\", src, des);\n    for(i = 0; i &lt; G-&gt;vexnum; i++)\n    {\n        for(j = 0; j &lt; G-&gt;vexnum; j++)\n        {\n            // \u5047\u8bbe\u6b64\u5904\u4e3a\u65e0\u5411\u56fe\n            if(i == j)\n            {\n                G-&gt;Edge[i][j] = 0; // \u65e0\u81ea\u73af,\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\n            }\n            else\n            {\n                G-&gt;Edge[i][j] = 0;\n            }\n        }\n    }\n    // \u8bfb\u53d6\u8fb9\u7684\u4fe1\u606f\n    for(k = 0; k &lt; G-&gt;edgenum; k++)\n    {\n        int v1, v2, weight;\n        scanf(\"%s %s %d\",source, destination, &amp;weight);\n        v1 = char_to_int(source, map);\n        v2 = char_to_int(destination, map);\n        //printf(\"%d %d\\n\", v1, v2);\n        // \u8bbe\u7f6e\u90bb\u63a5\u77e9\u9635\u7684\u65f6\u5019\uff0c\u662f\u4ece0\u5f00\u59cb\u7684\n        G-&gt;Edge[v1][v2] =  weight;\n    }\n}\nint BFS(MGraph G, int src, int des)\n{\n    int i;\n    int Queue[MAXVERTEXNUM] = {0};\n    int front = 0, rear = 0;\n    int visited[MAXVERTEXNUM] = {0};\n    // int dist[MAXVERTEXNUM] = {0};\n    for(i = 0; i &lt; G.vexnum; i++)\n    {\n        path[i] = -1;\n    }\n    Queue[rear++] = src;\n    visited[src] = 1;\n    int flow[MAXVERTEXNUM] = {INF};\n    while(front &lt; rear)\n    {\n        int v = Queue[front++];\n        if(v == des)\n        {\n            // \u627e\u5230\u4e86\u589e\u5e7f\u8def\u5f84\n            break;\n        }\n        for(i = 0; i &lt; G.vexnum; i++)\n        {\n            if(i != src &amp;&amp; path[i] == -1 &amp;&amp; G.Edge[v][i] != INF &amp;&amp; G.Edge[v][i] != 0 &amp;&amp; visited[i] == 0)\n            {\n                // \u5982\u679ci\u4e0d\u662f\u8d77\u59cb\u9876\u70b9\uff0c\u4e14i\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u4e14v\u548ci\u4e4b\u95f4\u6709\u8fb9\n                Queue[rear++] = i;\n                visited[i] = 1;\n                path[i] = v;\n                if(G.Edge[v][i] &lt; flow[v])\n                {\n                    flow[i] = G.Edge[v][i];\n                }\n                else\n                {\n                    flow[i] = flow[v];\n                }\n            }\n        }\n    }\n    if(path[des] == -1)\n    {\n        return -1;\n    }\n    else\n    {\n        return flow[des];\n    }\n}\n// \u4f7f\u7528EK\u7b97\u6cd5\u5b9e\u73b0\u6700\u5927\u6d41\n// v0\u662f\u8d77\u59cb\u9876\u70b9\uff0cv1\u662f\u7ec8\u6b62\u9876\u70b9\nint EK(MGraph G, int src, int des)\n{\n    int increasement = 0;\n    int sumflow = 0;\n    while((increasement = BFS(G, src, des)) != -1)\n    {\n        // \u5982\u679c\u8fd8\u6709\u589e\u5e7f\u8def\u5f84\uff0c\u5c31\u7ee7\u7eed\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\n        // \u4ece\u7ec8\u6b62\u9876\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u589e\u5e7f\u8def\u5f84\uff0c\u66f4\u65b0\u6b8b\u4f59\u7f51\u7edc\n        int k = des;\n        while(k != src)\n        {\n            int j = path[k];\n            G.Edge[j][k] -= increasement; // \u6b63\u5411\u8fb9\u7684\u6b8b\u4f59\u5bb9\u91cf\u51cf\u5c11\n            G.Edge[k][j] += increasement; // \u53cd\u5411\u8fb9\u7684\u6b8b\u4f59\u5bb9\u91cf\u589e\u52a0\n            k = j;\n        }\n        // printf(\"%d\\n\", increasement);\n        sumflow += increasement;\n    }\n    return sumflow;\n}\nint main()\n{\n    MGraph G;\n\n    ReadGraph(&amp;G);\n    int maxflow = EK(G, 0, MAXVERTEXNUM - 1);\n    printf(\"%d\\n\",maxflow);\n}\n</code></pre> <p>\u6700\u5927\u6d41\u4e3a89</p> <p></p> <p>\u6700\u5927\u6d4123</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#_11","title":"\u4e5d. \u6392\u5e8f","text":"<ol> <li>\u9009\u62e9\u6392\u5e8f\u3002\u6bcf\u6b21\u6311\u9009\u6700\u5927\u7684\u5143\u7d20\uff0c\u6362\u5230\u6700\u540e\u4f4d\u7f6e</li> </ol> <ol> <li>\u5192\u6ce1\u6392\u5e8f\u3002\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u6bd4\u8f83</li> </ol> <ol> <li>\u63d2\u5165\u6392\u5e8f</li> </ol> <p>\u7a33\u5b9a\u662f\u6307\u76f8\u540c\u7684\u5143\u7d20\u5728\u6392\u5e8f\u524d\u540e\u7684\u987a\u5e8f\u662f\u4e0d\u53d8\u7684\u3002</p> <p>\u51e1\u662f\u6709\u524d\u540e\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u7684\u7b97\u6cd5\u90fd\u662f\u4e0d\u7a33\u5b9a\u7684\u3002</p> <p>\u5e0c\u5c14\u6392\u5e8fis not stable\uff0c MergSort\u53ea\u6d89\u53ca\u5230\u6309\u987a\u5e8f\u8d4b\u503c\uff0c\u6ca1\u6709\u524d\u540e\u5143\u7d20\u7684\u4ea4\u6362\uff0cis stable\u3002</p> <p></p> <p></p> <p>quicksort \u6700\u5dee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N^2)\\)</p> <p></p> <p>\u9012\u5f52\u7684\u603b\u6570\u4e0d\u53d8</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#91-shell-sort","title":"9.1 Shell Sort \u5e0c\u5c14\u7b97\u6cd5","text":"<p>shell sort \u662f\u5bf9\u63d2\u5165\u6392\u5e8f\u7684\u6539\u8fdb</p> <p>\u5bf9\u4e8en\u4e2a\u5f85\u6392\u5e8f\u7684\u6570\u5217\uff0c\u53d6\u4e00\u4e2a\u5c0f\u4e8en\u7684\u6b63\u6570gap\uff08gap\u79f0\u4e3a\u6b65\u957f\uff09\uff0c\u5c06\u5f85\u6392\u5e8f\u5143\u7d20\u5206\u6210\u82e5\u5e72\u4e2a\u7ec4\u5b50\u5e8f\u5217\uff0c\u6240\u6709\u8ddd\u79bb\u4e3agap\u7684\u500d\u6570\u7684\u8bb0\u5f55\u653e\u5728\u540c\u4e00\u4e2a\u7ec4\u4e2d\uff0c\u7136\u540e\u5bf9\u5404\u7ec4\u5185\u7684\u5143\u7d20\u76f4\u63a5\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 \u8fd9\u4e00\u8d9f\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2a\u7ec4\u7684\u5143\u7d20\u90fd\u662f\u6709\u5e8f\u7684\u3002\u7136\u540e\u51cf\u5c0fgap\u7684\u503c\uff0c\u5e76\u91cd\u590d\u6267\u884c\u4e0a\u8ff0\u7684\u5206\u7ec4\u548c\u6392\u5e8f\u3002\u91cd\u590d\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5f53gap=1\u65f6\uff0c\u6574\u4e2a\u6570\u5217\u5c31\u662f\u6709\u5e8f\u7684\u3002</p> <pre><code>void Shellsort( ElementType A[ ], int N ) \n{ \n      int  i, j, Increment; \n      ElementType  Tmp; \n      for ( Increment = N / 2; Increment &gt; 0; Increment /= 2 )  \n    /*h sequence */\n    for ( i = Increment; i &lt; N; i++ ) { /* insertion sort */\n          Tmp = A[ i ]; \n          for ( j = i; j &gt;= Increment; j - = Increment ) \n        if( Tmp &lt; A[ j - Increment ] ) \n              A[ j ] = A[ j - Increment ]; \n        else \n              break; \n        A[ j ] = Tmp; \n    } /* end for-I and for-Increment loops */\n}\n\nvoid Shellsort(int a[], int n)\n{\n    int i, j, gap;\n    // gap\u4e3a\u6b65\u957f\uff0c\u6bcf\u4e00\u6b21\u51cf\u4e3a\u539f\u6765\u7684\u4e00\u534a\n    for(gap = n / 2; gap &gt; 0; gap /= 2)\n    {\n        // \u6b64\u65f6\u4e00\u5171\u5206\u6210gap\u4e2a\u7ec4\uff0c\u5206\u522b\u662f\uff080\uff0cgap\uff09\uff081\uff0cgap+1\uff09\u2026\u2026\n        // \u5bf9\u5404\u7ec4\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\n        for(i = gap; i &lt; n; i++)\n        {\n            int temp = a[i];\n            for(j = i; j &gt;= gap; j-= gap)\n            {\n                // \u5982\u679c\u5f53\u524d\u7684\u6570a[i]\u6bd4\u5b83\u7ec4\u5185\u7684\u6570\u5c0f\uff0c\u5219\u4ea4\u6362\n                if(temp &lt; a[j - gap])\n                {\n                    // \u76f4\u63a5\u8d4b\u503c\u6cd5\uff0c\u5927\u7684\u6570a[j - gap]\u540e\u79fb\n                    a[j] = a[j - gap];\n                }\n                // \u8be5\u8f6efor\u5faa\u73af\u7ed3\u675f\u540e\uff0cj = j - gap\n                else\n                {\n                    // \u6bd4\u8f83\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4a[j - gap], a[j - 2 * gap]\u2026\u2026\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\n                    // \u5982\u679ca[i]\u6bd4a[j - gap]\u5927\uff0c\u5219a[i]\u4e00\u5b9a\u6bd4a[j - 2 * gap]\u5927\uff0c\u4e0d\u7528\u518d\u6bd4\u8f83\u4e86\n                    break;\n                }\n            }\n            // \u6b64\u65f6j\u7684\u4f4d\u7f6e\u5c31\u662fa[i]\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0cj\u4f4d\u7f6e\u5c31\u662f\u539f\u5148\u7684\u90a3\u4e2aj-gap\u4f4d\u7f6e\n            // \u76f4\u63a5\u8d4b\u503c\u6cd5\uff0c\u5c0f\u7684\u6570\u524d\u79fba[j] = temp\n            a[j] = temp;\n        }\n        printf(\"gap = %d:\\t\", gap);\n        for(i = 0; i &lt; n; i++)\n        {\n            printf(\"%d\\t\", a[i]);\n        }\n        printf(\"\\n\");\n    }\n}\n</code></pre> <p>\u5916\u5c42\u5faa\u73af\u662f\u5206\u7ec4\u7684\u6570\u91cf\uff0c\u5185\u5c42\u5faa\u73af\u662f\u63d2\u5165\u6392\u5e8f</p> <p>\u3010Theorem\u3011The worst-case running time of Shellsort, using Shell\u2019s increments, is Q ( N^2)</p> <p>\u4f8b\u9898</p> <p>To sort { 8, 3, 9, 11, 2, 1, 4, 7, 5, 10, 6 } by Shell Sort, if we obtain ( 4, 2, 1, 8, 3, 5, 10, 6, 9, 11, 7 ) after the first run, and ( 1, 2, 3, 5, 4, 6, 7, 8, 9, 11, 10 ) after the second run, then the increments of these two runs must be __ , respectively.</p> <p></p> <p></p> <p>\u6309\u6b21\u5e8f3\u4e2a3\u4e2a\u6bd4\u8f83\u5373\u53ef</p> <p></p> <p>\u8003\u8651\u8f83\u6781\u7aef\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6709\u5e8f\u6570\u7ec4\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7684\u6bd4\u8f83\u6b21\u6570\u4e3an-1,\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u7684\u6bd4\u8f83\u6b21\u6570\u59cb\u7ec8\u4e3a1+2+\u2026+n-1=n(n-1)/2\uff0cI\u6b63\u786e\u3002\u4e24\u79cd\u6392\u5e8f\u65b9\u6cd5\u7684\u8f85\u52a9\u7a7a\u95f4\u90fd\u662f0(1), \u65e0\u5dee\u522b\uff0cII\u9519\u8bef\u3002\u521d\u59cb\u6709\u5e8f\u65f6\uff0c\u79fb\u52a8\u6b21\u6570\u5747\u4e3a0; \u5bf9\u4e8e\u901a\u5e38\u60c5\u51b5\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u6bcf\u8d9f\u63d2\u5165\u90fd\u9700\u8981\u4f9d\u6b21\u5411\u540e\u632a\u4f4d\uff0c\u800c\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u53ea\u9700\u4e0e\u627e\u5230\u7684\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u540e\u8005\u7684\u79fb\u52a8\u6b21\u6570\u5c11\u5f88\u591a\uff0cIII \u9519\u8bef\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#92-heap-sort","title":"9.2 Heap Sort \u5806\u6392\u5e8f","text":"<pre><code>Algorithm 1:\n{\n     BuildHeap( H );  // O(N)\n     for ( i=0; i&lt;N; i++ ) \n        TmpH[ i ] = DeleteMin( H ); //O(log N)\n     for ( i=0; i&lt;N; i++ ) \n        H[ i ] = TmpH[ i ]; //O(1)\n}\n</code></pre> <p>T ( N ) = O ( N log N )</p> <pre><code>void Heapsort( ElementType A[ ], int N ) \n{   int i; \n    for ( i = N / 2; i &gt;= 0; i - - ) /* BuildHeap */ \n        PercDown( A, i, N ); \n    for ( i = N - 1; i &gt; 0; i - - ) { \n        Swap( &amp;A[ 0 ], &amp;A[ i ] ); /* DeleteMax */ \n        PercDown( A, 0, i ); \n    } \n}\n</code></pre> <pre><code>#include &lt;Stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct HeapStruct{\n    int Capacity;\n    int Size;\n    int *Elements;\n}*MinHeap;\n\nMinHeap Initialize(int MaxSize)\n{\n    MinHeap H = (MinHeap)malloc(sizeof(struct HeapStruct));\n    if(H == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    H-&gt;Elements = (int *)malloc((MaxSize + 1) * sizeof(int));\n    if(H-&gt;Elements == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    H-&gt;Capacity = MaxSize;\n    H-&gt;Size = 0;\n    // \u8bbe\u7f6e\u54e8\u5175\n    H-&gt;Elements[0] = -1;\n    return H;\n}\nvoid PercolateDown(MinHeap H, int n)\n{\n    // \u4ecen\u5143\u7d20\u5f00\u59cb\u4e0b\u6ee4\n    int temp = H-&gt;Elements[n];\n    int i;\n    int child;\n    for(i = n; i * 2 &lt;= H-&gt;Size; i = child)\n    {\n        // \u5982\u679c\u6709\u53f3\u5b69\u5b50\uff0c\u4e14\u53f3\u5b69\u5b50\u6bd4\u5de6\u5b69\u5b50\u5c0f\uff0c\u5219child\u4e3a\u53f3\u5b69\u5b50\n        child = 2 * i;\n        if(child != H-&gt;Size &amp;&amp; H-&gt;Elements[child] &gt; H-&gt;Elements[child + 1])\n        {\n            child++;\n        }\n        // \u5982\u679ctemp\u6bd4child\u5c0f\uff0c\u5219child\u4e0a\u79fb\n        if(temp &gt; H-&gt;Elements[child])\n        {\n            H-&gt;Elements[i] = H-&gt;Elements[child];\n        }\n        // \u5426\u5219\uff0c\u4e0b\u6ee4\u7ed3\u675f\n        else\n        {\n            break;\n        }\n    }\n    // \u5c06temp\u653e\u5728\u6700\u540e\u7684\u4f4d\u7f6e\n    H-&gt;Elements[i] = temp;\n}\nvoid PercolateUp(MinHeap H, int n)\n{\n    // \u4ecen\u5143\u7d20\u5f00\u59cb\u4e0a\u6ee4\n    int temp = H-&gt;Elements[n];\n    int i;\n    for(i = n; i &gt; 1 &amp;&amp; temp &lt; H-&gt;Elements[i / 2]; i /= 2)\n    {\n        // \u5982\u679ctemp\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5219\u7236\u8282\u70b9\u4e0b\u79fb\n        H-&gt;Elements[i] = H-&gt;Elements[i / 2];\n    }\n    // \u5c06temp\u653e\u5728\u6700\u540e\u7684\u4f4d\u7f6e\n    H-&gt;Elements[i] = temp;\n}\nMinHeap BuildHeap(int MaxSize)\n{\n    MinHeap H = Initialize(MaxSize);\n    for(int i = 1; i &lt;= MaxSize; i++)\n    {\n        scanf(\"%d\", &amp;H-&gt;Elements[i]);\n        H-&gt;Size++;\n        PercolateUp(H, i);\n    }\n    return H;\n}\nint DeleteMin(MinHeap H)\n{\n    // \u5220\u9664\u6700\u5c0f\u5143\u7d20\uff0c\u5373\u6839\u5143\u7d20\n    int MinElement = H-&gt;Elements[1];\n    int LastElement = H-&gt;Elements[H-&gt;Size--];\n    // \u7528\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8986\u76d6\u6839\u5143\u7d20\n    H-&gt;Elements[1] = LastElement;\n    // \u4ece\u6839\u5143\u7d20\u5f00\u59cb\u4e0b\u6ee4\n    PercolateDown(H, 1);\n    return MinElement;\n}\nvoid HeapSort(MinHeap H)\n{\n    // \u6839\u636eSize\u7684\u5927\u5c0f\uff0c\u8fdb\u884cDeleteMin\u64cd\u4f5c\n    for(int i = 0; i &lt; H-&gt;Capacity; i++)\n    {\n        printf(\"%d \", DeleteMin(H));\n    }\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&amp;n);\n    MinHeap H;\n    H = BuildHeap(n);\n    HeapSort(H);\n    free(H);\n}\n</code></pre> <p>\u6ce8\u91cd\u6392\u5e8f\u8fc7\u7a0b\u7684Heapsort</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAXSIZE 100\n\nvoid Print2(int a[], int n)\n{\n    for(int i = 1; i &lt; n; i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n    printf(\"%d\\n\", a[n]);\n}\n\n\nvoid Swap(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nvoid PercolateDown(int result[], int i, int n)\n{\n    // \u4ecei\u5143\u7d20\u5f00\u59cb\u4e0b\u6ee4\n    int temp = result[i];\n    int child;\n    // \u4e3a\u4e86\u5f97\u5230\u6700\u5927\u5806\uff0c\u6bcf\u6b21\u5c06temp\u4e0e\u5de6\u53f3\u5b69\u5b50\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\u4ea4\u6362\n    for(; i * 2  &lt;= n; i = child)\n    {\n        // \u5982\u679c\u6709\u53f3\u5b69\u5b50\uff0c\u4e14\u53f3\u5b69\u5b50\u6bd4\u5de6\u5b69\u5b50\u5c0f\uff0c\u5219child\u4e3a\u53f3\u5b69\u5b50\n        child = 2 * i;\n        if(child != n &amp;&amp; result[child] &lt; result[child + 1])\n        {\n            child++;\n        }\n        // \u5982\u679ctemp\u6bd4child\u5c0f\uff0c\u5219child\u4e0a\u79fb\n        if(temp &lt; result[child])\n        {\n            result[i] = result[child];\n        }\n        // \u5426\u5219\uff0c\u4e0b\u6ee4\u7ed3\u675f\n        else\n        {\n            break;\n        }\n    }\n    // \u5c06temp\u653e\u5728\u6700\u540e\u7684\u4f4d\u7f6e\n    result[i] = temp;\n\n}\nvoid HeapSort(int list2[], int result[], int n)\n{\n    int i;\n    // \u5efa\u7acb\u6700\u5927\u5806\n    for(i = n / 2; i &gt;= 1; i--)\n    {\n        PercolateDown(result, i, n);\n    }\n    Print2(result, n);\n    // \u6839\u636eSize\u7684\u5927\u5c0f\uff0c\u8fdb\u884cDeleteMin\u64cd\u4f5c\n    for(i = n ; i &gt; 0; i--)\n    {\n        // \u5220\u9664\u6700\u5927\u5143\u7d20\uff0c\u5373\u6839\u5143\u7d20\n        Swap(&amp;result[1], &amp;result[i]);\n        // \u6b64\u65f6\u6700\u5927\u5143\u7d20\u4f4d\u4e8e\u6700\u540e\uff0c\u4e0d\u518d\u53c2\u4e0e\u4e0b\u6ee4\n        // \u4ece\u6839\u5143\u7d20\u5f00\u59cb\u4e0b\u6ee4\n        PercolateDown(result, 1, i-1);\n        Print2(result, n);\n    }\n\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &amp;n);\n    int list1[n], list2[n];\n    for(int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;list1[i]);\n    }\n    int HeapSortList[n + 1];\n    // \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c06\u5806\u6392\u5e8f\u7684\u6570\u7ec4\u4e0b\u6807\u4ece1\u5f00\u59cb\n    HeapSortList[0] = -1;\n    for(int i = 0; i &lt; n; i++)\n    {\n        HeapSortList[i + 1] = list1[i];\n    }\n    HeapSort(list2, HeapSortList, n);\n}\n</code></pre> <pre><code>10\n123 456 789 753 951 741 852 963 1452 2365\n2365 1452 852 963 951 741 789 123 753 456\n1452 963 852 753 951 741 789 123 456 2365\n963 951 852 753 456 741 789 123 1452 2365\n951 753 852 123 456 741 789 963 1452 2365\n852 753 789 123 456 741 951 963 1452 2365\n789 753 741 123 456 852 951 963 1452 2365\n753 456 741 123 789 852 951 963 1452 2365\n741 456 123 753 789 852 951 963 1452 2365\n456 123 741 753 789 852 951 963 1452 2365\n123 456 741 753 789 852 951 963 1452 2365\n123 456 741 753 789 852 951 963 1452 2365\n</code></pre> <p>\u3010Theorem\u3011The average number of comparisons used to heapsort a random permutation of N distinct items is</p> <p>2N log N - O( N log log N ) .</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#93-mergesort","title":"9.3 MergeSort","text":"<p>divide + conque +  merge</p> <p></p> <p></p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid mergesort(int a[],int low, int high);\nvoid merge(int a[],int low,int mid,int high);\nvoid merge1(int a[], int low, int mid, int high);\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&amp;n);\n    int a[n];\n    for(int i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;a[i]);\n    }\n    mergesort(a,0,n-1);\n    for(int i=0;i&lt;n;i++)\n    {\n        printf(\"%d \",a[i]);\n    }   \n}\nvoid mergesort(int a[],int low,int high)\n{\n    if(high-low&lt;1)        //\u76f8\u5f53\u4e8elow&gt;=high\n    {\n        return;\n    }\n    int mid=(low+high)/2;\n    mergesort(a,low,mid);\n    mergesort(a,mid+1,high);\n    merge(a,low,mid,high);     //\u5148\u5c06\u5de6\u53f3\u4e24\u8fb9\u6309\u987a\u5e8f\u6392\u597d\uff0c\u518d\u7528\n}\nvoid merge(int a[],int low,int mid,int high)\n{\n    int i=low;\n    int j=mid+1;\n    int b[high+1];\n    for(int k=low;k&lt;=high;k++)\n    {\n        if(i&lt;=mid&amp;&amp;(a[i]&lt;a[j]||j&gt;high))\n        {\n            b[k]=a[i++];\n        }\n        else\n        {\n            b[k]=a[j++];\n        }\n    }\n    for(int k=low;k&lt;=high;k++)\n    {\n        a[k]=b[k];\n    }\n}\n\nvoid merge(int a[],int low,int mid,int high)\n{\n    int i =low;\n    int j = mid+1;\n    int b[high+1];\n    int k;\n    for( k = low;k &lt;= high &amp;&amp; i&lt;=mid &amp;&amp;j&lt;=high;k++)\n    {\n        if(a[i] &lt; a[j])\n        {\n            b[k] = a[i];\n            i++;\n        }\n        else\n        {\n            b[k] = a[j];\n            j++;\n        }\n    }\n    for(;i&lt;= mid;i++)\n    {\n        b[k++] = a[i];\n    }\n    for(;j &lt;= high;j++)\n    {\n        b[k++] = a[j];\n    }\n    for(i=low;i&lt;=high;i++)\n    {\n        a[i] = b[i];\n    }\n}\n</code></pre> \\[ \\begin{aligned} T(1) &amp;= 1\\\\ T(N) &amp;= 2T(N/2) + O(N) merge \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N) \\\\     &amp;= 2^kT(N/2^k)+k*O(N)\\\\     &amp;= N * T(1) + log N * O(N)\\\\     &amp;= O(N + NlogN) \\end{aligned} \\]"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#94","title":"9.4 \u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u6240\u91c7\u7528\u7684\u601d\u60f3\u662f\u5206\u6cbb\u7684\u601d\u60f3\u3002\u6240\u8c13\u5206\u6cbb\uff0c\u5c31\u662f\u6307\u4ee5\u4e00\u4e2a\u6570\u4e3a\u57fa\u51c6\uff0c\u5c06\u5e8f\u5217\u4e2d\u7684\u5176\u4ed6\u6570\u5f80\u5b83\u4e24\u8fb9\u201c\u6254\u201d\u3002\u4ee5\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e3a\u4f8b\uff0c\u6bd4\u5b83\u5c0f\u7684\u90fd\u201c\u6254\u201d\u5230\u5b83\u7684\u5de6\u8fb9\uff0c\u6bd4\u5b83\u5927\u7684\u90fd\u201c\u6254\u201d\u5230\u5b83\u7684\u53f3\u8fb9\uff0c\u7136\u540e\u5de6\u53f3\u4e24\u8fb9\u518d\u5206\u522b\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4e0d\u505c\u5730\u5206\uff0c\u76f4\u81f3\u5206\u5230\u6bcf\u4e00\u4e2a\u5206\u533a\u7684\u57fa\u51c6\u6570\u7684\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\u90fd\u53ea\u5269\u4e00\u4e2a\u6570\u4e3a\u6b62\u3002\u8fd9\u65f6\u6392\u5e8f\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002</p> <p>\u5047\u8bbe\u5e8f\u5217\u4e2d\u6709 n \u4e2a\u6570\uff0c\u5c06\u8fd9 n \u4e2a\u6570\u653e\u5230\u6570\u7ec4 A \u4e2d\u3002\u201c\u821e\u52a8\u7b97\u6cd5\u201d\u4e2d\u4e00\u8d9f\u5feb\u901f\u6392\u5e8f\u7684\u7b97\u6cd5\u662f\uff1a</p> <ol> <li>\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf i\u3001j\uff0c\u6392\u5e8f\u5f00\u59cb\u7684\u65f6\u5019\uff1ai=0\uff0cj=n\u20131\u3002</li> <li>\u4ee5\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u5173\u952e\u6570\u636e\uff0c\u8d4b\u7ed9\u53d8\u91cf key\uff0c\u5373 key=A[0]\u3002</li> <li>\u4ece j \u5f00\u59cb\u5411\u524d\u641c\u7d22\uff0c\u5373\u7531\u540e\u5f00\u59cb\u5411\u524d\u641c\u7d22\uff08j--\uff09\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e key \u7684\u503c A[j]\uff0c\u5c06 A[j] \u548c A[i] \u4e92\u6362\u3002</li> <li>\u7136\u540e\u518d\u4ece i \u5f00\u59cb\u5411\u540e\u641c\u7d22\uff0c\u5373\u7531\u524d\u5f00\u59cb\u5411\u540e\u641c\u7d22\uff08++i\uff09\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e key \u7684 A[i]\uff0c\u5c06 A[i] \u548c A[j] \u4e92\u6362\u3002</li> <li>\u91cd\u590d\u7b2c 3\u30014 \u6b65\uff0c\u76f4\u5230 i=j\u3002\u6b64\u65f6\u5c31\u80fd\u786e\u4fdd\u5e8f\u5217\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u4e0e key \u6bd4\u8f83\u8fc7\u4e86\uff0c\u4e14 key \u7684\u5de6\u8fb9\u5168\u90e8\u662f\u6bd4 key \u5c0f\u7684\uff0ckey \u7684\u53f3\u8fb9\u5168\u90e8\u662f\u6bd4 key \u5927\u7684\u3002</li> </ol> <p>\u4e0b\u9762\u5217\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\u5bf9\u5982\u4e0b\u6570\u7ec4 a \u4e2d\u7684\u5143\u7d20\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u5b9e\u73b0\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1a</p> <p>35 12 37 -58 54 76 22</p> <p>1) \u9996\u5148\u5206\u522b\u5b9a\u4e49 low \u548c high \u7528\u4e8e\u5b58\u50a8\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5373 low=0\uff0chigh=6\u3002</p> <p>2) \u7136\u540e\u5b9a\u4e49 key \u7528\u4e8e\u5b58\u653e\u57fa\u51c6\u6570\uff0c\u7406\u8bba\u4e0a\u8be5\u57fa\u51c6\u6570\u53ef\u4ee5\u53d6\u5e8f\u5217\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6570\u3002\u6b64\u5904\u5c31\u53d6\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u628a a[low] \u8d4b\u7ed9 key\u3002</p> <p>3) \u7136\u540e key \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c 22 \u6bd4\u8f83\uff0c35&gt;22\uff0c\u5219\u5b83\u4eec\u4e92\u6362\u4f4d\u7f6e\uff1a</p> <p>22 12 37 -58 54 76 35</p> <p>4) \u7136\u540e low++==1\uff0ckey \u548c a[low] \u6bd4\u8f83\uff0c\u5373 35 \u548c 12 \u6bd4\u8f83\uff0c12&lt;35\uff0c\u5219\u4e0d\u7528\u4e92\u6362\u4f4d\u7f6e\uff1b\u7ee7\u7eed low++==2\uff0c\u7136\u540e key \u548c a[low] \u6bd4\u8f83\uff0c\u5373 35 \u548c 37 \u6bd4\u8f83\uff0c37&gt;35\uff0c\u5219\u5b83\u4eec\u4e92\u6362\u4f4d\u7f6e\uff1a</p> <p>22 12 35 -58 54 76 37</p> <p>5) \u7136\u540e high--==5\uff0ckey \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c 76 \u6bd4\u8f83\uff0c35&lt;76\uff0c\u5219\u4e0d\u7528\u4e92\u6362\u4f4d\u7f6e\uff1b\u7ee7\u7eed high--==4\uff0c\u7136\u540e key \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c 54 \u6bd4\u8f83\uff0c35&lt;54\uff0c\u5219\u4e0d\u7528\u4e92\u6362\u4f4d\u7f6e\uff1b\u7ee7\u7eed high--==3\uff0c\u7136\u540e key \u548c a[high] \u6bd4\u8f83\uff0c\u5373 35 \u548c -58 \u6bd4\u8f83\uff0c35&gt;\u201358\uff0c\u5219\u5b83\u4eec\u4e92\u6362\u4f4d\u7f6e\uff1a</p> <p>22 12 -58 35 54 76 37</p> <p>6) \u7136\u540e low++==3\uff0c\u6b64\u65f6 low==high\uff0c\u7b2c\u4e00\u8f6e\u6bd4\u8f83\u7ed3\u675f\u3002\u4ece\u6700\u540e\u5f97\u5230\u7684\u5e8f\u5217\u53ef\u4ee5\u770b\u51fa\uff0c35 \u5de6\u8fb9\u7684\u90fd\u6bd4 35 \u5c0f\uff0c35 \u53f3\u8fb9\u7684\u90fd\u6bd4 35 \u5927\u3002\u8fd9\u6837\u5c31\u4ee5 35 \u4e3a\u4e2d\u5fc3\uff0c\u628a\u539f\u5e8f\u5217\u5206\u6210\u4e86\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\u3002\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u5206\u522b\u5bf9\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u5c31\u884c\u4e86\u3002</p> <p>\u5176\u4e2d\u6bcf\u4e00\u8f6e\u90fd\u662fkey\u4e0ea[low]\u6216\u8005a[high]\u4ea4\u6362</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#941","title":"9.4.1\u4ea4\u6362\u7248","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid swap(int*a,int*b)\n{\n    int temp;\n    temp=*a;\n    *a=*b;\n    *b=temp;\n}\nvoid quicksort(int a[],int low,int high)\n{\n    int i = low;\n    int j = high;\n    int key = a[i];\n    if(i &gt;= j)\n    {\n        return;\n    }\n    while(i &lt; j)\n    {\n        while(i &lt; j &amp;&amp; a[j]&gt;=key)  \n        {\n            j--;\n        }\n        if(a[j] &lt; key)\n        {\n            swap(&amp;a[i],&amp;a[j]);\n        }\n        while(i &lt; j &amp;&amp; a[i] &lt;= key )\n        {\n            i++;\n        }\n        if(a[i] &gt; key)\n        {\n            swap(&amp;a[i],&amp;a[j]);\n        }\n    }\n    quicksort(a,low,i-1);\n    quicksort(a,i+1,high);\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&amp;n);\n    int i,a[n];\n    for(i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;a[i]);\n    }\n    quicksort(a,0,n-1);\n    for(i=0;i&lt;n;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n}\n</code></pre> <p>\u6ce8\u610f\u70b9\uff1a</p> <ol> <li> <p>\u4e0d\u8981\u5224\u65adif\uff08i &gt;= j) return; \u5426\u5219\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u6301\u7eed\u4e0b\u53bb</p> </li> <li> <p>\u5148\u5bf9j\u8fdb\u884c\u64cd\u4f5c\uff0c\u7b2c\u4e00\u4e2a\u5c0f\u4e8ekey\u7684\u503c\u79fb\u5230\u7b2c\u4e00\u4f4d\u3002\u5426\u5219\uff0c\u5148\u5bf9i\u64cd\u4f5c\u7684\u8bdd\uff0c\u4f1a\u81ea\u7136\u5730\u8df3\u8fc7key\uff0c\u4ece\u800c\u65e0\u6cd5\u5b9e\u73b0\u5206\u5272\u3002</p> </li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#942","title":"9.4.2\u76f4\u63a5\u8d4b\u503c\u7248","text":"<pre><code># include &lt;stdio.h&gt;\nvoid QuickSort(int a[], int low, int high);  /*\u73b0\u5728\u53ea\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570, \u4e0d\u7528\u4ea4\u6362\u8fd8\u7701\u4e86\u4e00\u4e2a\u51fd\u6570, \u51cf\u5c11\u4e86\u4ee3\u7801\u91cf*/\nint main(void)\n{\n    int i;  //\u5faa\u73af\u53d8\u91cf\n    int a[] = {900, 2, -58, 3, 34, 5, 76, 7, 32, 4, 43, 9, 1, 56, 8,-70, 635, -234, 532, 543, 2500};\n    QuickSort(a, 0, 20);  /*\u5f15\u7528\u8d77\u6765\u5f88\u7b80\u5355, 0\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807, 20\u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807*/\n    printf(\"\u6700\u7ec8\u6392\u5e8f\u7ed3\u679c\u4e3a:\\n\");\n    for (i=0; i&lt;21; ++i)\n    {\n        printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\nvoid QuickSort(int *a, int low, int high)\n{\n    int i = low;\n    int j = high;\n    int key = a[low];\n    if (low &gt;= high)  //\u5982\u679clow &gt;= high\u8bf4\u660e\u6392\u5e8f\u7ed3\u675f\u4e86\n    {\n        return ;\n    }\n    while (low &lt; high)  //\u8be5while\u5faa\u73af\u7ed3\u675f\u4e00\u6b21\u8868\u793a\u6bd4\u8f83\u4e86\u4e00\u8f6e\n    {\n        while (low &lt; high &amp;&amp; a[high] &gt;= key)\n        {\n            --high;  //\u5411\u524d\u5bfb\u627e\n        }            //\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4key\u5c0f\u7684\u6570\n        if (key &gt; a[high])\n        {\n            a[low] = a[high];  //\u76f4\u63a5\u8d4b\u503c\uff08a[low]\u521d\u59cb\u503c\u5c31\u662fkey\uff09, \u4e0d\u7528\u4ea4\u6362\n            low++;\n        }\n        while (low &lt; high &amp;&amp; key &gt;= a[low])\n        {\n            ++low;  //\u5411\u540e\u5bfb\u627e\n        }\n        if (key &lt; a[low])\n        {\n            a[high] = a[low];  //\u76f4\u63a5\u8d4b\u503c, \u4e0d\u7528\u4ea4\u6362\n            --high;\n        }\n    }\n    a[low] = key;  //\u67e5\u627e\u5b8c\u4e00\u8f6e\u540ekey\u503c\u5f52\u4f4d, \u4e0d\u7528\u6bd4\u8f83\u4e00\u6b21\u5c31\u4e92\u6362\u4e00\u6b21\u3002\u6b64\u65f6key\u503c\u5c06\u5e8f\u5217\u5206\u6210\u5de6\u53f3\u4e24\u90e8\u5206\n    QuickSort(a, i, low-1);  //\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5bf9\u5206\u51fa\u6765\u7684\u5de6\u8fb9\u7684\u90e8\u5206\u8fdb\u884c\u540c\u4e0a\u7684\u505a\u6cd5\n    QuickSort(a, low+1, j);  //\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5bf9\u5206\u51fa\u6765\u7684\u53f3\u8fb9\u7684\u90e8\u5206\u8fdb\u884c\u540c\u4e0a\u7684\u505a\u6cd5\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#943","title":"9.4.3\u53cc\u6307\u9488\u5d4c\u5957\u4f7f\u7528(\u53d6\u4e2d\u95f4\u6570\u4e3a\u57fa\u51c6\u503c)","text":"<pre><code>int partition(int a[],int low,int high)\n{\n    int i = low-1;               //do while \u5faa\u73af\u4e2d\u5148\u8fdb\u884ci++\uff1ba[i]\u4ecea[0]\u5f00\u59cb\n    int j= high+1;               //\u540c\u7406\uff0ca[j]\u4ecea[n-1]\u5f00\u59cb\n    int mid = (low+high)/2;\n    int key=a[mid];\n    while(low &lt; high)\n    {\n        do\n        {\n            j--;\n        }\n        while(a[j]&gt;key);\n        do\n        {\n            i++;\n        }\n        while(a[i]&lt;key);\n        if(i&gt;=j) return j;//j\u7684\u53cd\u5217\u662fa[j]&lt;=key,\u6545\u4f1a\u5728\u7b49\u4e8e\u7684\u65f6\u5019\u505c\u4f4f\uff0c\u4e5f\u5c31\u662fkey\u7684\u4f4d\u7f6e\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\nvoid quicksort(int a[],int low, int high)\n{\n    if(low&gt;=high)\n    {\n        return;\n    }\n    int pivot=partition(a,low,high);\n    quicksort(a,0,pivot);\n    quicksort(a,pivot+1,high);\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#944","title":"9.4.4\u53cc\u51fd\u6570\u5d4c\u5957\uff08\u53d6\u7b2c\u4e00\u4f4d\u4e3a\u57fa\u51c6\u503c\uff09","text":"<pre><code>fu'zhi\nint partition(int a[],int low,int high)\n{\n    int i=low;\n    int j=high;\n    int key=a[i];\n    while(i&lt;j)\n    {\n        while(a[j]&gt;=key&amp;&amp;j&gt;i)\n        {\n            j--;\n        }\n        a[i]=a[j];\n        while(a[i]&lt;=key&amp;&amp;j&gt;i)\n        {\n            i++;\n        }\n        a[j]=a[i];\n    }\n    a[i]=key;\n    return i;\n}\nvoid quicksort(int a[],int low, int high)\n{\n    if(low&gt;=high)\n    {\n        return;\n    }\n    int pivot=partition(a,low,high);\n    quicksort(a,0,pivot-1);\n    quicksort(a,pivot+1,high);\n}\n\u4ea4\u6362\u6cd5\nnt partition(int a[],int low,int high)\n{\n    int i =low;\n    int j = high;\n    int key = a[low];\n    while(i&lt;j)\n    {\n        while(i&lt;j &amp;&amp; a[j] &gt;= key)\n        {\n            j--;\n        }\n        if(a[j] &lt; key)\n        {\n            int t =a[i];\n            a[i] = a[j];\n            a[j] = t;\n        }\n        while(i &lt; j &amp;&amp;a[i] &lt;= key)\n        {\n            i++;\n        }\n        if(a[i] &gt; key)\n        {\n            int t =a[i];\n            a[i] = a[j];\n            a[j] = t;\n        }\n        if(i &gt;= j)\n        {\n            return i;\n        }\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#945","title":"9.4.5\u5355\u6307\u9488\u5d4c\u5957\uff08\u53bb\u6700\u540e\u4e00\u4f4d\u4e3a\u57fa\u51c6\u503c\uff09","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid swap(int*a,int*b)\n{\n    int temp;\n    temp=*a;\n    *a=*b;\n    *b=temp;\n}\nint partition(int a[],int low,int high)\n{\n    int key=a[high];\n    int i=low;\n    int j;\n    for(j=low;j&lt;=high;j++)\n    {\n        if(a[j]&lt;key)                  //\u7279\u6b8a\u60c5\u51b5\u7b2c\u4e00\u4f4d\u5c31\u5c0f\u4e8ekey\uff0cij\u5206\u522b\u53d8\u6210low+1\uff1b\n        {\n            swap(&amp;a[i],&amp;a[j]);\n            i=i+1;\n        }\n\n    }\n    swap(&amp;a[i],&amp;a[high]);         //\u53ea\u6709a[j]&lt;key\u65f6\u624d\u4f1a\u4e0ea[i]\u4ea4\u6362\uff0c\u5e76\u4e14j\u5fc5\u7136\u5927\u4e8ei\uff0c\u4ece\u800ci\u6240\u5728\u7684\u4f4d\u7f6e\u662f\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey\u7684\u6570\uff0c\u6700\u540ea[i]\u8981\u4e0ea[high](\u4e5f\u5c31\u662fkey)\u4ea4\u6362\n    return i;   //\u6b64\u65f6i\u7684\u4f4d\u7f6e\u5c31\u662fkey\n}\nvoid quicksort(int a[],int low,int high)\n{\n    if(low&gt;=high)\n    {\n        return;\n    }\n    int pivot=partition(a,low,high);\n    quicksort(a,low,pivot-1);\n    quicksort(a,pivot+1,high);\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&amp;n);\n    int i,a[n];\n    for(i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;a[i]);\n    }\n    quicksort(a,0,n-1);\n    for(i=0;i&lt;n;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#946-quicksort-insertsort","title":"9.4.6 Quicksort \u4e0e Insertsort \u7ed3\u5408","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define Cutoff 10\n\nvoid Swap(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint Median3(int temp[], int low, int high)\n{\n    int mid = (low + high)/2;\n    if(temp[low] &gt; temp[mid])\n    {\n        Swap(&amp;temp[low], &amp;temp[mid]);\n    }\n    // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[mid]\n    if(temp[low] &gt; temp[high])\n    {\n        Swap(&amp;temp[low], &amp;temp[high]);\n    }\n    // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[mid] \uff0ctemp[low] &lt;= temp[high]\n    if(temp[mid] &gt; temp[high])\n    {\n        Swap(&amp;temp[mid], &amp;temp[high]);\n    }\n    // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[mid] &lt;= temp[high]\n    Swap(&amp;temp[mid], &amp;temp[high - 1]);\n    // key = temp[high - 1]\n    return temp[high - 1];\n}\nvoid InsertionSort(int temp[], int n)\n{\n    // n \u8868\u793a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\u4e2a\u6570\n    int i, j;\n    int temp1;\n    for(i = 1; i &lt; n; i++)\n    {\n        temp1 = temp[i];\n        for(j = i; j &gt; 0 &amp;&amp; temp1 &lt; temp[j-1]; j--)\n        {\n            temp[j] = temp[j - 1];\n        }\n        temp[j] = temp1;\n    }\n}\nvoid Qsort(int temp[], int low, int high)\n{\n    int i, j;\n    int pivot;\n    // \u5f53\u6570\u7ec4\u957f\u5ea6\u8f83\u5927\u65f6\uff0c\u91c7\u7528\u5feb\u901f\u6392\u5e8f\n    if(low + Cutoff &lt;= high)\n    {\n        // \u7ecf\u8fc7Median3\u64cd\u4f5c\u4e4b\u540e\uff0cpivot\u7684\u4f4d\u7f6e\u548chigh-1\u8fdb\u884c\u4e86\u4e92\u6362\n        // \u5728\u6700\u540e\u65f6\u523b\uff0c\u5e94\u8be5\u5c06pivot\u7684\u4f4d\u7f6e\u548chigh - 1\u8fdb\u884c\u4e92\u6362\n        pivot = Median3(temp, low, high);\n        i = low;\n        j = high - 1; // \u6b64\u65f6\uff0ctemp[high - 1] = pivot\n        while(1)\n        {\n            // \u6b64\u65f6\uff0ctemp[low] &lt;= temp[high - 1]\n            // \u6240\u4ee5\uff0c\u4e0d\u9700\u8981\u8003\u8651temp[low]\u7684\u60c5\u51b5\n            while(temp[++i]  &lt; pivot){}\n            // temp[high - 1] \u521d\u59cb\u72b6\u6001\u4e0b\u662fpivot\uff0c\u81ea\u52a8\u901a\u8fc7\n            while(temp[--j] &gt; pivot){}\n            // \u627e\u5230\u4e00\u5bf9\u9006\u5e8f\u5bf9\uff0c\u4ea4\u6362\n            if(i &lt; j)\n            {\n                Swap(&amp;temp[i], &amp;temp[j]);\n            }\n            else break;\n        }\n        // \u6b64\u65f6temp\u3010i\u3011 &gt;= pivot\n        // temp[high-1] = pivot\n        // \u4ea4\u6362temp[i]\u548ctemp[high-1]\uff0c\u4f7f\u5f97pivot\u4f4d\u4e8e\u4e2d\u95f4\n        Swap(&amp;temp[i], &amp;temp[high - 1]);\n        Qsort(temp, low, i - 1);\n        Qsort(temp, i + 1, high);\n    }\n    else\n    {\n        // \u5f53\u6570\u7ec4\u957f\u5ea6\u8f83\u5c0f\u65f6\uff0c\u91c7\u7528\u63d2\u5165\u6392\u5e8f\n        // \u4ece\u7b2clow\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u5171\u6709high - low + 1\u4e2a\u5143\u7d20\n        InsertionSort(temp + low, high - low + 1);\n    }\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &amp;n);\n    int temp[n];\n    for(int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;temp[i]);\n    }\n    // ElementType A[], int low, int high\n    Qsort(temp, 0, n - 1);\n    for(int i = 0; i &lt; n; i++)\n    {\n        printf(\"%d \", temp[i]);\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#94-bucket-sort","title":"9.4 Bucket Sort","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#941_1","title":"9.4.1 \u6982\u8ff0","text":"<p>\u6876\u6392\u5e8f\uff08Bucket Sort\uff09\u53c8\u79f0\u7bb1\u6392\u5e8f\uff0c\u662f\u4e00\u79cd\u6bd4\u8f83\u5e38\u7528\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5176\u7b97\u6cd5\u539f\u7406\u662f\u5c06\u6570\u7ec4\u5206\u5230\u6709\u9650\u6570\u91cf\u7684\u6876\u91cc\uff0c\u518d\u5bf9\u6bcf\u4e2a\u6876\u5206\u522b\u6392\u597d\u5e8f\uff08\u53ef\u4ee5\u662f\u9012\u5f52\u4f7f\u7528\u6876\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f7f\u7528\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\u5c06\u6bcf\u4e2a\u6876\u5206\u522b\u6392\u597d\u5e8f\uff09\uff0c\u6700\u540e\u4e00\u6b21\u5c06\u6bcf\u4e2a\u6876\u4e2d\u6392\u597d\u5e8f\u7684\u6570\u8f93\u51fa\u3002</p> <p>\u6876\u6392\u5e8f\u7684\u601d\u60f3\u5c31\u662f\u628a\u5f85\u6392\u5e8f\u7684\u6570\u5c3d\u91cf\u5747\u5300\u5730\u653e\u5230\u5404\u4e2a\u6876\u4e2d\uff0c\u518d\u5bf9\u5404\u4e2a\u6876\u8fdb\u884c\u5c40\u90e8\u7684\u6392\u5e8f\uff0c\u6700\u540e\u518d\u6309\u5e8f\u5c06\u5404\u4e2a\u6876\u4e2d\u7684\u6570\u8f93\u51fa\uff0c\u5373\u53ef\u5f97\u5230\u6392\u597d\u5e8f\u7684\u6570\u3002</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u901a\u5e38\u9002\u7528\u4e8e\u8f93\u5165\u6570\u636e\u5747\u5300\u5206\u5e03\u5728\u67d0\u4e2a\u8303\u56f4\u5185\u7684\u60c5\u51b5\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#942_1","title":"9.4.2 \u7b97\u6cd5\u89e3\u6790","text":"<ol> <li>\u521b\u5efa\u6876\uff0c\u9996\u5148\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u8303\u56f4\uff0c\u521b\u5efa\u76f8\u5e94\u6570\u91cf\u7684\u7a7a\u6876\u3002    - \u786e\u5b9a\u6bcf\u4e2a\u6876\u6240\u88c5\u6570\u636e\u7684\u8303\u56f4\u3002\u7ed9\u5b9a\u6570\u636e\u4e2d\u7684\u6700\u5927\u503cmax\u548c\u6700\u5c0f\u503cmin\uff0c\u8f93\u5165\u6570\u636e\u7684\u603b\u6570\u4e3an\u3002\\(size = (max - min) / n + 1\\)    - \u63a5\u4e0b\u6765\u8ba1\u7b97\u6240\u9700\u6876\u7684\u6570\u91cf\u3002\\(\\(cnt = (max - min) / size  + 1\\)\\)    - \\(size \u548c cnt\\)\u786e\u5b9a\u540e\uff0c\u6bcf\u4e2a\u6876\u6240\u5b58\u7684\u6570\u636e\u8303\u56f4\u4e5f\u968f\u4e4b\u786e\u5b9a\u3002\u7b2c\u4e00\u4e2a\u6876\uff08min, min + size\uff09,(min + size , min + 2*size ),\u2026..</li> <li>\u5bf9\u6bcf\u4e2a\u6876\u8fdb\u884c\u6392\u5e8f\uff1a \u5bf9\u6bcf\u4e2a\u975e\u7a7a\u7684\u6876\u5355\u72ec\u8fdb\u884c\u6392\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u9012\u5f52\u5730\u4f7f\u7528\u6876\u6392\u5e8f\u81ea\u8eab\u3002</li> <li> <p>\u5408\u5e76\u6876\uff1a \u6700\u540e\uff0c\u5c06\u6240\u6709\u975e\u7a7a\u6876\u4e2d\u7684\u5143\u7d20\u6309\u987a\u5e8f\u5408\u5e76\u8d77\u6765\uff0c\u5f97\u5230\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002</p> </li> <li> <p>\u590d\u6742\u5ea6\u5206\u6790    - \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\(O(n^2)\\)\\)\uff0c\u5176\u4e2d\\(\\(n\\)\\)\u662f\u5f85\u6392\u5e8f\u5143\u7d20\u7684\u6570\u91cf\u3002\u4f46\u662f\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u6876\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\(O(n+k)\\)\\)\uff0c\u5176\u4e2d\\(\\(k\\)\\)\u662f\u6876\u7684\u6570\u91cf    - \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u6876\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u6876\u7684\u6570\u91cf\uff0c\\(O(N+K)\\)\u3002    - \u7a33\u5b9a\u6027\uff1a\u6876\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff0c\u5373\u76f8\u7b49\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u5728\u6392\u5e8f\u540e\u4e0d\u4f1a\u6539\u53d8\u3002</p> </li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#95-radix-sort","title":"9.5 \u57fa\u6570\u6392\u5e8f Radix Sort","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#951","title":"9.5.1 \u6982\u8ff0","text":"<p>\u539f\u7406\u662f\u5c06\u6574\u6570\u6309\u4f4d\u6570\u5207\u5272\u6210\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u7136\u540e\u6309\u6bcf\u4e2a\u4f4d\u6570\u5206\u522b\u6bd4\u8f83\u3002\u57fa\u6570\u6392\u5e8f\u7684\u65b9\u5f0f\u53ef\u4ee5\u91c7\u7528LSD\uff08Least significant digital\uff09\u6216MSD\uff08Most significant digital\uff09\uff0cLSD\u7684\u6392\u5e8f\u65b9\u5f0f\u7531\u952e\u503c\u7684\u6700\u53f3\u8fb9\u5f00\u59cb\uff0c\u800cMSD\u5219\u76f8\u53cd\uff0c\u7531\u952e\u503c\u7684\u6700\u5de6\u8fb9\u5f00\u59cb\u3002</p> <ul> <li>MSD\uff1a\u5148\u4ece\u9ad8\u4f4d\u5f00\u59cb\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u6bcf\u4e2a\u5173\u952e\u5b57\u4e0a\uff0c\u53ef\u91c7\u7528\u8ba1\u6570\u6392\u5e8f</li> <li>LSD\uff1a\u5148\u4ece\u4f4e\u4f4d\u5f00\u59cb\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u6bcf\u4e2a\u5173\u952e\u5b57\u4e0a\uff0c\u53ef\u91c7\u7528\u6876\u6392\u5e8f</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#952","title":"9.5.2.\u5b9e\u73b0\u903b\u8f91","text":"<p>\u2460 \u5c06\u6240\u6709\u5f85\u6bd4\u8f83\u6570\u503c\uff08\u6b63\u6574\u6570\uff09\u7edf\u4e00\u4e3a\u540c\u6837\u7684\u6570\u4f4d\u957f\u5ea6\uff0c\u6570\u4f4d\u8f83\u77ed\u7684\u6570\u524d\u9762\u8865\u96f6\u3002</p> <p>\u2461 \u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\u3002</p> <p>\u2462 \u8fd9\u6837\u4ece\u6700\u4f4e\u4f4d\u6392\u5e8f\u4e00\u76f4\u5230\u6700\u9ad8\u4f4d\u6392\u5e8f\u5b8c\u6210\u4ee5\u540e, \u6570\u5217\u5c31\u53d8\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002</p> <ol> <li>\u590d\u6742\u5ea6\u5206\u6790\uff1a    - \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u57fa\u6570\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(d(N+K))\\)\uff0c\u5176\u4e2dd\u662f\u6700\u5927\u6574\u6570\u7684\u4f4d\u6570\uff0cN\u662f\u5f85\u6392\u5e8f\u5143\u7d20\u7684\u6570\u91cf\uff0ck\u662f\u57fa\u6570\uff08\u4f8b\u5982\u5341\u8fdb\u5236\u4e2d\u768410\uff09\u3002    - \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u57fa\u6570\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u5b58\u50a8\u6392\u5e8f\u540e\u7ed3\u679c\u7684\u7a7a\u95f4\u4ee5\u53ca\u5b58\u50a8\u6876\u7684\u7a7a\u95f4\uff0c\u4e3a\\(\\(O(N+K)\\)\\)\u3002    - \u7a33\u5b9a\u6027\uff1a\u57fa\u6570\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff0c\u5373\u76f8\u7b49\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u5728\u6392\u5e8f\u540e\u4e0d\u4f1a\u6539\u53d8\u3002</li> </ol> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#hashing","title":"\u5341. Hashing","text":"<p>\u3010\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u301104 \u54c8\u5e0c\u8868 / \u6563\u5217\u8868 \uff08\u54c8\u5e0c\u51fd\u6570\u3001\u54c8\u5e0c\u51b2\u7a81\u3001\u94fe\u5730\u5740\u6cd5\u3001\u5f00\u653e\u5730\u5740\u6cd5\u3001SHA256\uff09-CSDN\u535a\u5ba2</p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#101","title":"10.1 \u57fa\u672c\u601d\u60f3","text":"<p>Symbol Table ADT:</p> <ul> <li> <p>Objects: A set of name-attribute pairs, where the names are unique</p> </li> <li> <p>\u64cd\u4f5c</p> </li> <li>\u521b\u5efa\u6563\u5217\u8868</li> <li>\u67e5\u8be2\u5173\u952e\u5b57\u662f\u5426\u5728\u6563\u5217\u8868\u4e2d</li> <li>\u67e5\u8be2\u5173\u952e\u5b57 Attribute Find(symtab, name) </li> <li>\u63d2\u5165\u5173\u952e\u5b57 SymTab Insert(symtab, name, attr)</li> <li>\u5220\u9664\u5173\u952e\u5b57 SymTab Delete(symtab, name) </li> </ul> <p></p> <p><code>x</code>\u662f\u6807\u8bc6\u7b26\uff0c\u5b9a\u4e49\u4e00\u4e2a\\(\\(hash function\\)\\)\uff0c$$ f(x) = position  of  x  in  ht[] $$\u4e5f\u5c31\u662f\u5305\u542bx\u7684bucket\u7684\u7d22\u5f15</p> <p>\u8fd9\u91cc\u6211\u4eec\u7528 T \u8868\u793a <code>x</code> \u53ef\u80fd\u7684\u4e0d\u540c\u503c; n \u8868\u793a <code>ht[]</code> \u4e2d\u6240\u6709\u4e0d\u540c\u6807\u8bc6\u7b26\u7684\u4e2a\u6570; \u6807\u8bc6\u7b26\u5bc6\u5ea6(identifier density)\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{T}\\); \u88c5\u8f7d\u5bc6\u5ea6(Load density)\u5b9a\u4e49\u4e3a\\(\\lambda = \\dfrac{n}{sb}\\) </p> <ul> <li>\u5f53\u6211\u4eec\u628a\u4e24\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u91cc\u65f6\uff0c\u51b2\u7a81\uff08collision\uff09\u53d1\u751f\u4e86\\(f(i_1) = f(x_2), i_1 != i_2\\)</li> <li>\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u4e00\u4e2a\u6ee1\u7684\u6876\u91cc\u65f6\uff0c\u6ea2\u51fa\uff08overflow\uff09\u53d1\u751f\u4e86</li> <li><code>\u5f53s = 1\uff0c \u51b2\u7a81\u548c\u4e0a\u6ea2\u4f1a\u540c\u65f6\u53d1\u751f</code></li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a</p> <p>Mapping n = 10 C library functions into a hash table ht[ ] with b = 26 buckets and s = 2.</p> <ul> <li>Load density \\(\\lambda  = 10 / 52 = 0.19\\)</li> <li>\u4e3a\u4e86\u5c06\u9996\u5b57\u6bcda-z\u6620\u5c04\u52300-25\uff0c\u5b9a\u4e49\\(f(x) = x[0] - 'a'\\)</li> <li></li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#102-hash-function","title":"10.2 Hash Function","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#1021","title":"10.2.1 \u6c42\u4f59\u6cd5","text":"<p>TableSize \u5e94\u8be5\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u8fd9\u6837\u5bf9\u968f\u673a\u8f93\u5165\uff0c\u5173\u952e\u5b57\u7684\u5206\u5e03\u6bd4\u8f83\u5747\u5300</p> <p></p> <p></p> <p>\u5b9e\u9645\u53ef\u80fd\u7684\u53d6\u503c\u4ec5\u67093000\u79cd\uff0c\u4f1a\u9020\u6210\u6d6a\u8d39</p> <p></p> <p>\\(32^i\\)\u5b9e\u9645\u4e0a\u662f\u8fdb\u884c\u79fb\u4f4d\u64cd\u4f5c</p> <pre><code>Index Hash3( const char *x, int TableSize ) \n{ \n    unsigned  int  HashVal = 0; \n    while( *x != '\\0' ) \n        HashVal = ( HashVal &lt;&lt; 5 ) + *x++; \n    return HashVal % TableSize; \n} \n</code></pre> \\[ abcde\\\\ a * 32^4 + b * 32^3 + c * 32^2 + d * 32 + e \\\\  = (((a * 32 + b) * 32 + c) * 32 + d )*32 + e \\]"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#1022","title":"10.2.2 \u5e73\u65b9\u53d6\u4e2d\u6cd5","text":"\\[ key = 12345\\\\ f(x) = x * x\\\\ \u53d6f(x)\u4e2d\u95f4\u7684\u4e24\u4f4d \\]"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#1023","title":"10.2.3 \u6298\u53e0\u6cd5","text":"\\[ key = 12345\\\\ f(key) = 12 + 34 + 05 = 51 \\]"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#103-separate-chaining","title":"10.3 Separate Chaining \u2014\u2014\u89e3\u51b3\u51b2\u7a81","text":"<p>\u89e3\u51b3\u51b2\u7a81\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u53eb\u4f5c\u5206\u79bb\u94fe\u63a5\u6cd5\u3002\u5176\u505a\u6cd5\u662f\u5c06\u6563\u5217\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u4fdd\u5b58\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u94fe\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u3002</p> <p>\u7ed3\u6784\u4f53\u5b9a\u4e49\uff1a</p> <pre><code>typedef struct point\n{\n    int Data;\n    ListNode *Next;\n}ListNode;\ntypedef ListNode *List;\ntypedef struct point\n{\n    int TableSize;\n    List *TheLists;\n    // \u6b64\u5904List *TheLists\u7b49\u4ef7\u4e8eList TheLists[]\n    // List \u662f struct ListNode *\u7684\u522b\u540d\uff0c\u662f\u6307\u9488\n    // List *TheLists\u662f\u6307\u9488\u7684\u6307\u9488\uff0c\u662f\u4e8c\u7ea7\u6307\u9488\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u7531\u6307\u9488\u6784\u6210\u7684\u6570\u7ec4\n    // \u6240\u4ee5\u80fd\u591f\u6307\u5411\u591a\u6761\u94fe\u8868\n}HashTbl;\ntypedef HashTbl *HashTable;\n</code></pre> <p></p> <p>\u521b\u5efa\u7a7a\u8868\uff1a\u5e26\u5934\u7ed3\u70b9</p> <pre><code>int NextPrime(int n)\n{\n    int flag;\n    if(n % 2 == 0)\n    {\n        // \u5982\u679cn\u662f\u5076\u6570\uff0c\u90a3\u4e48n+1\u662f\u5947\u6570\n        n++;\n    }\n    for(; ; n += 2)\n    {\n        flag = 1;\n        for(int i = 3; i * i &lt;= n; i += 2)\n        {\n            if(n % i == 0)\n            {\n                flag = 0;\n                break;\n            }\n        }\n        if(flag == 1)\n        {\n            return n;\n        }\n    }\n}\n// Create an empty hash table\nHashTable Initialize (int TableSize)\n{\n    HashTable H;\n    // \u5206\u914d\u5185\u5b58\u7a7a\u95f4\n    H = malloc(sizeof(HashTbl));\n    if(H == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        exit(1);\n    }\n    // \u521d\u59cb\u5316HashTable\n    // \u8981\u6c42hash\u8868\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u7d20\u6570\n    H-&gt;TableSize = NextPrime(TableSize);\n    H-&gt;TheLists = malloc(sizeof(List) * H-&gt;TableSize);\n    if(H-&gt;TheLists == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        exit(1);\n    }\n    // \u521d\u59cb\u5316\u6bcf\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n    for(int i = 0; i &lt; H-&gt;TableSize; i++)\n    {\n        // List \u5bf9\u5e94\u7684\u662f ListNode*\uff0c\u662f\u6307\u9488\n        // \u4e00\u6574\u4e2aTheLists[i]\u90fd\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u94fe\u8868\n        H-&gt;TheLists[i] = malloc(sizeof(ListNode));\n        if(H-&gt;TheLists[i] == NULL)\n        {\n            printf(\"Out of space!\\n\");\n            exit(1);\n        }\n        else\n        {\n            H-&gt;TheLists[i]-&gt;Next = NULL;\n        }\n    }\n    return H;\n}\n</code></pre> <p>Find a key from a hash table</p> <pre><code>// Hash function\nint Hash(int key, int TableSize)\n{\n    return key % TableSize;\n}\n// Find a key from a hash table\nListNode * Find(int key, HashTable H)\n{\n    ListNode *p;\n    List L = H-&gt;TheLists[Hash(key, H-&gt;TableSize)];\n    // \u5934\u7ed3\u70b9\u4e0d\u5b58\u50a8\u6570\u636e\n    p = L-&gt;Next;\n    while(p != NULL &amp;&amp; p-&gt;Data != key)\n    {\n        p = p-&gt;Next;\n    }\n    return p;\n}\n</code></pre> <p>Insert a key into a hash table</p> <pre><code>// Insert a key into a hash table\nvoid Insert(int key, HashTable H)\n{\n    ListNode *p, *newcell;\n    p = Find(key, H);\n    if(p == NULL)\n    {\n        // \u4e5f\u5c31\u662f\u8bf4\uff0ckey\u4e0d\u5b58\u5728\n        newcell = malloc(sizeof(ListNode));\n        List L = H-&gt;TheLists[Hash(key, H-&gt;TableSize)];\n        newcell -&gt; Next = L-&gt;Next;\n        L-&gt;Next = newcell;\n        newcell-&gt;Data = key;\n    }\n    // \u5982\u679ckey\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u63d2\u5165\u4e86\n}\n</code></pre> <pre><code>int main()\n{\n    int n;\n    scanf(\"%d\", &amp;n);\n    HashTable H = Initialize(n);\n    int temp;\n    for(int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;temp);\n        Insert(temp, H);\n    }\n    scanf(\"%d\", &amp;temp);\n    ListNode *p = Find(temp, H);\n    if(p == NULL)\n    {\n        printf(\"Not Found\\n\");\n    }\n    else\n    {\n        printf(\"%d\\n\", p-&gt;Data);\n    }\n    for(int i = 0; i &lt; H-&gt;TableSize; i++)\n    {\n        p = H-&gt;TheLists[i]-&gt;Next;\n        while(p != NULL)\n        {\n            printf(\"%d \", p-&gt;Data);\n            p = p-&gt;Next;\n        }\n        printf(\"\\n\");\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/#104-open-addressing-another-way-to-solve-collision","title":"10.4 Open Addressing \u2014\u2014another way to solve collision","text":"<p>\u5f00\u653e\u5730\u5740\u6cd5\uff0c\u5f53\u6709\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u5c1d\u8bd5\u9009\u62e9\u5176\u4ed6\u7684\u5355\u5143\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u7684\u5355\u5143\u4e3a\u6b62\u3002 \u4e00\u822c\u5730, \\(\u210e0(X),\u210e1(X),\u2026,\\) \u5176\u4e2d \\(h_i(X) \\ = \\ (Hash(X)+F(i)) \\ mod \\ TableSize\\)</p> <p>\\(F(i)\\)\u662f\u504f\u79fb\u91cf/\u51b2\u7a81\u91cf</p> <pre><code>Algorithm: insert key into an array of hash table\n{\n    index = hash(key);\n    initialize i = 0 ------ the counter of probing;\n    while ( collision at index ) {\n        index = ( hash(key) + f(i) ) % TableSize;\n        if ( table is full )    break;\n        else    i ++;\n    }\n    if ( table is full )\n        ERROR (\u201cNo space left\u201d);\n    else\n        insert key at index;\n}\n</code></pre> <ol> <li>\u7ebf\u6027\u63a2\u6d4b\u6cd5 Linear Probing</li> </ol> <p></p> <p>Cause primary clustering: any key that hashes into the cluster will add to the cluster after several attempts to resolve the collision.</p> <ol> <li>\u5e73\u65b9\u63a2\u6d4b\u6cd5</li> </ol> <p>\u5e73\u65b9\u63a2\u6d4b\u6cd5\u662f\u6d88\u9664\u7ebf\u6027\u63a2\u6d4b\u4e2d\u4e00\u6b21\u805a\u96c6\u95ee\u9898\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u3002\u51b2\u7a81\u51fd\u6570\u4e3a\u4e8c\u6b21\u51fd\u6570\uff0c\u4e00\u822c\u4e3a \\(F(i) = i^2\\)</p> <p>\u5b9a\u7406: \u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u4e3a\u7a7a\u65f6\uff0c\u603b\u80fd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002</p> <p>\u5bf9\u4e8e\u4efb\u610f\u5143\u7d20 \ufffd, \u5b83\u6709 [TableSize/2\u2309 \u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u53ef\u80fd\u653e\u7f6e\u8fd9\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6700\u591a $\\lfloor TableSize/2 \\rfloor $ \u4f4d\u7f6e\u88ab\u4f7f\u7528\uff0c\u90a3\u4e48\u603b\u80fd\u627e\u5230\u653e x \u7684\u7a7a\u5355\u5143</p> <pre><code>Position  Find ( ElementType Key, HashTable H ) \n{\n    Position  CurrentPos; \n    int  CollisionNum; \n    CollisionNum = 0; \n    CurrentPos = Hash( Key, H-&gt;TableSize ); \n    while( H-&gt;TheCells[ CurrentPos ].Info != Empty &amp;&amp; \n        H-&gt;TheCells[ CurrentPos ].Element != Key ) {\n        // \u8ba1\u7b97\u7b80\u5316H(x) + (i + 1) ^2 = H(x) + i^2 + 2(i +1)-1\n        CurrentPos += 2 * ++CollisionNum \uf02d 1; \n        if ( CurrentPos &gt;= H-&gt;TableSize )  CurrentPos \uf02d = H-&gt;TableSize; \n        } \n    return CurrentPos; \n} \n</code></pre> <pre><code>void  Insert ( ElementType Key, HashTable H ) \n{ \n    Position  Pos; \n    Pos = Find( Key, H ); \n    if ( H-&gt;TheCells[ Pos ].Info != Legitimate ) { /* OK to insert here */ \n    H-&gt;TheCells[ Pos ].Info = Legitimate; \n    H-&gt;TheCells[ Pos ].Element = Key; /* Probably need strcpy */ \n    } \n} \n</code></pre> <p>\u5e73\u5747\u6210\u529f\u67e5\u627e\u548c\u4e0d\u6210\u529f\u67e5\u627e\u6b21\u6570</p> <ol> <li> <p>\u6210\u529f\u67e5\u627e\uff1a\u627e\u5230\u7ed9\u5b9a\u6570\u636e\u6240\u9700\u7684\u65f6\u95f4</p> </li> <li> <p>\u4e0d\u6210\u529f\u67e5\u627e\uff1a\u786e\u5b9a\u7ed9\u5b9a\u6570\u4e0d\u5728Hash\u8868\u4e2d\u6240\u9700\u7684\u65f6\u95f4\uff0c\u6839\u636ehash function \u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002</p> </li> </ol> <p></p> <p></p> <p></p> <p>\u6700\u5c111\u6b21\uff0c\u6700\u591aN\u6b21\uff0c\u5e73\u5747\uff08N+1\uff09/2</p> <p></p> <p></p> <ol> <li>Double Hashing</li> </ol> <p></p> <ol> <li>Rehashing</li> </ol> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/","title":"\u516d. \u5806heap","text":"<p>\u4ec0\u4e48\u662f\u4f18\u5148\u961f\u5217\uff1f</p> <p></p> <ol> <li>\u4f18\u5148\u961f\u5217\u7684\u4e3b\u8981\u64cd\u4f5c</li> </ol> <ul> <li>\\(insert(key, data):\\)\u63d2\u5165\u952e\u503c\u4e3akey\u7684\u6570\u636e\u5230\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u5143\u7d20\u4ee5\u5176key\u8fdb\u884c\u6392\u5e8f</li> <li>\\(deleteMin/deleteMax:\\) \u5220\u9664\u5e76\u8fd4\u56de\u6700\u5c0f\u6700\u5927\u952e\u503c\u7684\u5143\u7d20</li> <li>\\(getMin/getMax:\\)\u8fd4\u56de\u6700\u5c0f\u6700\u5927\u952e\u503c\u7684\u5143\u7d20\uff0c\u5e76\u4e0d\u5220\u9664\u5b83</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/#61","title":"6.1 \u7528\u5806\u5b9e\u73b0\u4f18\u5148\u961f\u5217","text":"<p>\u5148\u660e\u786e\u4e00\u4e0b\u4ec0\u4e48\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff08complete binary tree\uff09 \u548c \u6ee1\u4e8c\u53c9\u6811\u6216\u8005\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff08full binary tree / perfect binary tree\uff09</p> <ul> <li> <p>\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5982\u679c\u6bcf\u4e00\u5c42\u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u90a3\u8fd9\u4e2a\u4e8c\u53c9\u6811\u5c31\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u4e5f\u5c31\u8bf4\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7ed3\u70b9\u7684\u603b\u6570\u4e3a\\(2^k -1\\)</p> </li> <li> <p>```python     #\u4e00\u9897\u6811\u6df1\u5ea6\u4e3ah\uff0c\u6700\u5927\u5c42\u6570\u4e3ak\uff0c\u6df1\u5ea6\u4e0e\u6700\u5927\u5c42\u6570\u76f8\u540c\uff0ck=h;     #\u5b83\u7684\u53f6\u5b50\u6570\u662f\uff1a 2^h\u3000\u3000     #\u7b2ck\u5c42\u7684\u7ed3\u70b9\u6570\u662f\uff1a 2^(k-1)\u3000\u3000     #\u603b\u7ed3\u70b9\u6570\u662f\uff1a 2^k-1 (2\u7684k\u6b21\u65b9\u51cf\u4e00)\u3000\u3000     #\u603b\u8282\u70b9\u6570\u4e00\u5b9a\u662f\u5947\u6570\u3002</p> <pre><code>                                  0\n                        /               \\\n                       1                   2\n                    /      \\            /       \\\n                  3        4         5           6\n                 /  \\    /   \\     /    \\       /   \\\n              7    8  9     10  11     12    13     14\n</code></pre> <p>```</p> </li> <li> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u6570\u662f\u4efb\u610f\u7684\uff0c\u4ece\u5f62\u5f0f\u4e0a\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u4e2a\u7f3a\u5931\u7684\u4e09\u89d2\u5f62\uff0c<code>\u6240\u7f3a\u5931\u7684\u90e8\u5206\u4e00\u5b9a\u662f\u53f3\u4e0b\u89d2\u67d0\u4e2a\u8fde\u7eed\u7684\u90e8\u5206\uff0c\u6700\u540e\u4e00\u884c\u53ef\u80fd\u4e0d\u5b8c\u6574</code></p> </li> <li> <p>\u5bf9\u4e8ek\u5c42\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u7ed3\u70b9\u6570\u7684\u8303\u56f4\u662f\\(2^{k-1}-1 &lt; N &lt; 2^k -1\\)</p> </li> <li> <p>```python     #\u8bbe\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3ah\uff0c\u9664\u7b2c h \u5c42\u5916\uff0c\u5176\u5b83\u5404\u5c42 (1\uff5eh-1) \u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u4e2a\u6570\uff0c\u7b2c h \u5c42\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c</p> <pre><code>                                          0\n                                 /               \\\n                              1                   2\n                          /      \\            /       \\\n                        3        4         5           6\n                      /  \\    /   \\     /    \n                    7    8  9     10  11\n</code></pre> <p>```</p> </li> </ul> <p></p> <p>\u6700\u5c0f\u5806\u7684\u6700\u5927\u503c\u4e00\u5b9a\u5728\u53f6\u8282\u70b9\uff0c\u73b0\u5728\u8f6c\u4e3a\u5224\u65ad\u54ea\u4e2a\u70b9\u4e0d\u662f\u53f6\u7ed3\u70b9\u3002</p> <p>\u5bf9\u4e8e\u53f6\u7ed3\u70b9n\uff0c\u4e0d\u5b58\u5728\u5b50\u7ed3\u70b9\uff0c\u90a3\u4e482n+1\u4e00\u5b9a\u4e0d\u57282333\u4e2d</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/#611-structure-property","title":"6.1.1 Structure Property","text":"<ol> <li>\u5806\u662f\u4e00\u9897\u5177\u6709\u7279\u5b9a\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff0c<code>\u5806\u7684\u57fa\u672c\u8981\u6c42\u662f\u5806\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5fc5\u987b\u5927\u4e8e\u6216\u8005\u7b49\u4e8e\uff08\u5c0f\u4e8e\u7b49\u4e8e\uff09\u5176\u5b69\u5b50\u7ed3\u70b9\u7684\u503c</code>\u3002\u9644\u52a0\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a\u6240\u6709\u7684\u53f6\u5b50\u7ed3\u70b9\u90fd\u5904\u4e8e\u7b2c h \u5c42 \u6216\u8005 h - 1\u5c42\uff0c\uff08\u5373\u6700\u540e\u4e00\u5c42\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c\u4e14\u53ef\u80fd\u4e0d\u5b8c\u6574\uff09</li> </ol> <ol> <li>\u53ef\u4ee5\u7528\u6570\u7ec4\u5f62\u5f0f\u8868\u793a\u5806\uff0c<code>`array representation</code></li> </ol> <p>\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4f9d\u6b21\u6392\u5217\uff0c\u4f46\u662f\u662f\u4eceBT[1]\u5f00\u59cb\uff0cBT[0]\u4f5c\u4e3a\u54e8\u5175</p> <p></p> <p></p> <ol> <li>\u5806\u7684\u5206\u7c7b</li> </ol> <p>A min tree is a tree in which the key value in each node is no larger than the key values in its children (if any).</p> <p>A min heap is a complete binary tree that is also a min tree.</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/#612","title":"6.1.2 \u5806\u7684\u82e5\u5e72\u64cd\u4f5c","text":"<ol> <li>\u5806\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49</li> </ol> <pre><code>typedef struct Heapstruct{\n    int Capacity;\n    int Size;\n    int *Elements;\n}*MinHeap;\n// \u5806\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u7ed3\u6784\u548c\u6570\u7ec4\n</code></pre> <ol> <li>\u5806\u7684\u521d\u59cb\u5316</li> </ol> <pre><code>MinHeap Initialize(int MaxElements)\n{\n    MinHeap H;\n    H = (MinHeap)malloc(sizeof(struct Heapstruct));\n    if(H == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    // Allocate the array plus one extra for sentinel\uff08\u7ed9\u54e8\u5175\u4fdd\u7559\u4e00\u4e2a\u4f4d\u7f6e\uff09\n    H-&gt;Elements = (int *)malloc(sizeof(int) * (MaxElements + 1));\n    // \u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\n    if(H-&gt;Elements == NULL)\n    {\n        printf(\"Out of space!\\n\");\n        return NULL;\n    }\n    // \u521b\u5efa\u7684\u6570\u7ec4\u7684\u5bb9\u91cf\uff0c\u4e0d\u5305\u62ec\u54e8\u5175\n    H-&gt;Capacity = MaxElements;\n    // \u5df2\u6709\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\n    H-&gt;Size = 0;\n    // Set the sentinel;\n    H-&gt;Elements[0] = -1;\n    return H;\n}\n</code></pre> <ol> <li>\u5806\u7684\u63d2\u5165 insertion</li> </ol> <p>\u6bcf\u6b21\u63d2\u5165\u90fd\u662f\u5c06\u5148\u5c06\u65b0\u6570\u636e\u653e\u5728\u6570\u7ec4\u6700\u540e\uff0c\u7531\u4e8e\u4ece\u8fd9\u4e2a\u65b0\u6570\u636e\u7684\u7236\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u5fc5\u7136\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u73b0\u5728\u7684\u4efb\u52a1\u662f\u5c06\u8fd9\u4e2a\u65b0\u6570\u636e\u63d2\u5165\u5230\u8fd9\u4e2a\u6709\u5e8f\u5e8f\u5217\u4e2d\u2014\u2014\u8fd9\u5c31\u7c7b\u4f3c\u4e8e\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u4e2d\u5c06\u4e00\u4e2a\u6570\u636e\u5e76\u5165\u5230\u6709\u5e8f\u533a\u95f4\u4e2d\u3002</p> <p>\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u63d2\u5165\u4f8b\u5b50\u6765\u770b\u770b\u63d2\u5165\u64cd\u4f5c\u7684\u7ec6\u8282\u3002\u6211\u4eec\u5c06\u6570\u5b57 <code>16</code> \u63d2\u5165\u5230\u8fd9\u4e2a\u5806\u4e2d\uff1a</p> <p></p> <p>\u7b2c\u4e00\u6b65\u662f\u5c06\u65b0\u7684\u5143\u7d20\u63d2\u5165\u5230\u6570\u7ec4\u7684\u5c3e\u90e8\uff0c\u6570\u7ec4\u53d8\u6210\uff1a[ 10, 7, 2, 5, 1, 16 ]\uff1b</p> <p>\u76f8\u5e94\u7684\u6811\u53d8\u6210\u4e86\uff1a</p> <p></p> <p>16 \u88ab\u6dfb\u52a0\u6700\u540e\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u3002</p> <p>\u4e0d\u884c\u7684\u662f\uff0c\u73b0\u5728\u5806\u5c5e\u6027\u4e0d\u6ee1\u8db3\uff0c\u56e0\u4e3a 2 \u5728 16 \u7684\u4e0a\u9762\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5927\u7684\u6570\u5b57\u5728\u4e0a\u9762\uff08\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u5806\uff09</p> <p>\u4e3a\u4e86\u6062\u590d\u5806\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u4ea4\u6362 16 \u548c 2\u3002</p> <p></p> <p>\u73b0\u5728\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u56e0\u4e3a 10 \u4e5f\u6bd4 16 \u5c0f\u3002\u6211\u4eec\u7ee7\u7eed\u4ea4\u6362\u6211\u4eec\u7684\u63d2\u5165\u5143\u7d20\u548c\u5b83\u7684\u7236\u8282\u70b9\uff0c\u76f4\u5230\u5b83\u7684\u7236\u8282\u70b9\u6bd4\u5b83\u5927\u6216\u8005\u6211\u4eec\u5230\u8fbe\u6811\u7684\u9876\u90e8\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 shift-up\uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u540e\u90fd\u9700\u8981\u8fdb\u884c\u3002\u5b83\u5c06\u4e00\u4e2a\u592a\u5927\u6216\u8005\u592a\u5c0f\u7684\u6570\u5b57\u201c\u6d6e\u8d77\u201d\u5230\u6811\u7684\u9876\u90e8\u3002</p> <p>\u6700\u540e\u6211\u4eec\u5f97\u5230\u7684\u5806\uff1a</p> <p></p> <p>\u73b0\u5728\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u90fd\u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5927\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a T\uff08N\uff09 = O\uff08\\(log N\\)\uff09</p> <p>4 . \u5806\u6700\u5c0f\u5143\u7d20\u7684\u5220\u9664deleteMin</p> <p>\u5806\u4e2d\u6bcf\u6b21\u90fd\u53ea\u80fd\u5220\u9664\u5806\u9876\u5143\u7d20\u3002\u4e3a\u4e86\u4fbf\u4e8e\u91cd\u5efa\u5806\uff0c\u5b9e\u9645\u7684\u64cd\u4f5c\u662f\u5c06\u6700\u540e\u4e00\u4e2a\u6570\u636e\u7684\u503c\u8d4b\u7ed9\u6839\u7ed3\u70b9\uff0c\u7136\u540e\u518d\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u8fdb\u884c\u4e00\u6b21\u4ece\u4e0a\u5411\u4e0b\u7684\u8c03\u6574\u3002\u8c03\u6574\u65f6\u5148\u5728\u5de6\u53f3\u5b50\u7ed3\u70b9\u4e2d\u627e\u6700\u5c0f\u7684\uff0c\u5982\u679c\u7236\u7ed3\u70b9\u6bd4\u8fd9\u4e2a\u6700\u5c0f\u7684\u5b50\u7ed3\u70b9\u8fd8\u5c0f\u8bf4\u660e\u4e0d\u9700\u8981\u8c03\u6574\u4e86\uff0c\u53cd\u4e4b\u5c06\u7236\u7ed3\u70b9\u548c\u5b83\u4ea4\u6362\u540e\u518d\u8003\u8651\u540e\u9762\u7684\u7ed3\u70b9\u3002\u76f8\u5f53\u4e8e\u6839\u7ed3\u70b9\u6570\u636e\u7684\u201c\u4e0b\u6c89\u201d\u8fc7\u7a0b\u3002</p> <p></p> <p></p> <p></p> <p></p> <ol> <li>\u51cf\u5c0f\u7ed3\u70b9\u7684\u5143\u7d20\uff0c\u518d\u91cd\u65b0\u6392\u5e8f</li> </ol> <p></p> <p>\u5728\u4f4d\u7f6eP\u5904\uff0c\u51cf\u5c0f\\(\\Delta\\)\uff0c\u518d\u8fdb\u884c\u9012\u5f52\uff08\u6216\u8005for\u5faa\u73af\uff09\u4e0e\u7236\u8282\u70b9\u8fdb\u884c\u6bd4\u8f83</p> <pre><code>void DecreaseKey(MinHeap H, int index, int delta)\n{\n    H-&gt;Elements[index] -= delta;\n    PercolateUp(H, index);\n}\nvoid PercolateUp(MinHeap H, int i)\n{\n    int temp = H-&gt;Elements[i];\n    int j;\n    for(j = i; temp &lt; H-&gt;Elements[j/2]; j /= 2)\n    {\n        H-&gt;Elements[j] = H-&gt;Elements[j/2];\n    }\n    H-&gt;Elements[j] = temp;\n}\n</code></pre> <ol> <li>\u589e\u5927\u7ed3\u70b9\u7684\u5143\u7d20\u503c\uff0c\u518d\u91cd\u65b0\u6392\u5e8f</li> </ol> <p></p> <p>\u5728\u4f4d\u7f6eP\u5904\uff0c\u589e\u52a0\\(\\Delta\\)\uff0c\u518d\u8fdb\u884c\u9012\u5f52\uff08\u6216\u8005for\u5faa\u73af\uff09\u4e0e\u7236\u8282\u70b9\u8fdb\u884c\u6bd4\u8f83</p> <ol> <li>\u5220\u53bb\u67d0\u4e00\u7279\u5b9a\u4f4d\u7f6e\u7684\u7ed3\u70b9\u503c</li> </ol> <p><code>\u5728\u8be5\u4f4d\u7f6e\u5904\uff0c\u4e0d\u65ad\u5730\u51cf\u5c0f\uff0c\u76f4\u81f3\u8fbe\u5230MIN\u7684\u4f4d\u7f6e\uff0c\u518d\u5220\u53bbMin</code></p> <p></p> <ol> <li>\u7ed9\u5b9a\u4e00\u7ec4\u6570\uff0c\u987a\u5e8f\u6784\u5efatree\uff0c\u8be5\u5982\u4f55\u6784\u9020\u5806</li> </ol> <p></p> <pre><code>void PercolateUp(MinHeap H, int i)\n{\n    // i \u662f\u5f53\u524d\u65b0\u63d2\u5165\u5143\u7d20\u7684\u4e0b\u6807\n    int x = H-&gt;Elements[i];\n    // \u5f00\u59cb\u4e0a\u6ee4\u64cd\u4f5c\n    for(; H-&gt;Elements[i / 2] &gt; x; i /= 2)\n    {\n        H-&gt;Elements[i] = H-&gt;Elements[i / 2];\n    }\n    H-&gt;Elements[i] = x;\n}\nvoid PercolateDown(MinHeap H, int i)\n{\n    // i \u662f\u5f53\u524d\u65b0\u63d2\u5165\u5143\u7d20\u7684\u4e0b\u6807\n    int x = H-&gt;Elements[i];\n    int j;\n    for(j = i; j * 2 &lt;= H-&gt;Size; j *= 2)\n    {\n        if(x &gt; H-&gt;Elements[j * 2])\n        {\n            H-&gt;Elements[j] = H-&gt;Elements[j * 2];\n        }\n        else\n        {\n            break;\n        }\n    }\n    H-&gt;Elements[j] = x;\n}\n</code></pre> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/#613-d-heaps","title":"6.1.3 d-Heaps","text":"<p>d-Heaps \u662f All nodes have d children</p> <p></p> <p>\u4f8b\u9898\uff1a</p> <p>\u6784\u9020\u4e00\u4e2a\u65e2\u662f\u4e8c\u5206\u641c\u7d22\u6811\uff0c\u53c8\u662fcomplete binary tree</p> <p>Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.</p> <p>Input Specification:</p> <p>Each input file contains one test case. For each case, the first line contains a positive integer N (\u22641000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.</p> <p>Output Specification:</p> <p>For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p> <pre><code>Input:\n10\n1 2 3 4 5 6 7 8 9 0\n\nOutput\n6 3 8 1 5 7 9 0 2 4\n</code></pre> <p><code>\u672c\u9898\u7684\u5173\u952e\u5728\u4e8e\u6784\u9020\uff0c\u5df2\u77e5\u6574\u68f5\u6811\u7684\u8282\u70b9\u6570\u91cf\uff0c\u6839\u636ecomplete binary tree \u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5224\u65ad\u5de6\u5b50\u6811\u3001\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\uff0c\u8fd8\u8981\u5229\u7528 binary search tree \u7684\u6027\u8d28\uff0c\u5de6\u5b50\u6811\u7684\u5143\u7d20\u4e00\u5b9a\u5c0f\u4e8eroot\uff0croot\u5c0f\u4e8e\u53f3\u5b50\u6811\uff0c\u901a\u8fc7\u5bf9\u8f93\u5165\u7684\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u800c\u786e\u5b9aroot\uff0c\u7136\u540e\u91c7\u7528\u9012\u5f52\uff0c\u4e00\u6b21\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684root</code></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/","title":"\u516b. Graph","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#81","title":"8.1 \u56fe\u7684\u57fa\u672c\u6982\u5ff5","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#811","title":"8.1.1 \u56fe\u7684\u5b9a\u4e49\u548c\u76f8\u5173\u672f\u8bed","text":"<p>\u56fe(Graph)\u662f\u7531\u9876\u70b9\u7684\u6709\u7a77\u975e\u7a7a\u96c6\u5408\\(V ( G )\\) \u548c\u9876\u70b9\u4e4b\u95f4\u8fb9\u7684\u96c6\u5408\\(\\(E ( G )\\)\\)\u7ec4\u6210\uff0c\u901a\u5e38\u8868\u793a\u4e3a: \\(G = ( V , E )\\) \uff0c\u5176\u4e2d\uff0c\\(\\(G\\)\\)\u8868\u793a\u4e2a\u56fe\uff0c\\(\\(V\\)\\)\u662f\u56feG \u4e2d\u9876\u70b9\u7684\u96c6\u5408\uff0c\\(\\(E\\)\\)\u662f\u56fe\\(\\(G\\)\\)\u4e2d\u8fb9\u7684\u96c6\u5408\u3002\u82e5\\(\\(V = \\{ v 1 , v 2 , . . . , v n \\}\\)\\) \uff0c\u5219\u7528\\(\\(\u2223 V \u2223\\)\\)\u8868\u793a\u56feG\u4e2d\u9876\u70b9\u7684\u4e2a\u6570\uff0c\u4e5f\u79f0\u56feG\u7684\u9636\uff0c\\(\\(E = { ( u , v ) \u2223 u \u2208 V , v \u2208 V }\\)\\)\uff0c\u7528\\(\\(\u2223 E \u2223\\)\\)\u8868\u793a\u56feG\u4e2d\u8fb9\u7684\u6761\u6570\u3002</p> <p>\u6ce8\u610f:\u7ebf\u6027\u8868\u53ef\u4ee5\u662f\u7a7a\u8868\uff0c\u6811\u53ef\u4ee5\u662f\u7a7a\u6811\uff0c\u4f46\u56fe\u4e0d\u53ef\u4ee5\u662f\u7a7a\u56fe\u3002\u5c31\u662f\u8bf4\uff0c\u56fe\u4e2d\u4e0d\u80fd\u4e00\u4e2a\u9876\u70b9\u4e5f\u6ca1\u6709\uff0c\u56fe\u7684\u9876\u70b9\u96c6V\u4e00\u5b9a\u975e\u7a7a\uff0c\u4f46\u8fb9\u96c6E\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u6b64\u65f6\u56fe\u4e2d\u53ea\u6709\u9876\u70b9\u800c\u6ca1\u6709\u8fb9\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#812","title":"8.1.2 \u76f8\u5173\u672f\u8bed","text":"<ol> <li>\u6709\u5411\u56fe</li> </ol> <p>\u82e5E\u662f\u6709\u5411\u8fb9(\u4e5f\u79f0\u5f27)\u7684\u6709\u9650\u96c6\u5408\u65f6\uff0c\u5219\u56feG\u4e3a\u6709\u5411\u56fe\u3002\u5f27\u662f\u9876\u70b9\u7684\u6709\u5e8f\u5bf9\uff0c\u8bb0\u4e3a <p>\u5176\u4e2dv,w\u662f\u9876\u70b9\uff0cv\u79f0\u4e3a\u5f27\u5c3e\uff08tail\uff09\uff0cw\u79f0\u4e3a\u5f27\u5934\uff08head\uff09\uff0c\u79f0\u4e3a\u4ece\u9876\u70b9v\u5230\u9876\u70b9w\u7684\u5f27\uff0c\u4e5f\u79f0v\u90bb\u63a5\u5230w\uff0c\u6216w\u90bb\u63a5\u81eav\u3002 <p>\\(V_i \\ is \\ adjacent \\ to \\ V_j, \\ V_j \\ is \\ adjacent \\ from \\ V_i\\)</p> <p>\\(&lt;V_i,V_j&gt; != &lt;V_j, V_i&gt;\\)</p> <p></p> <ol> <li>\u65e0\u5411\u56fe</li> </ol> <p>\u82e5E\u662f\u65e0\u5411\u8fb9(\u7b80\u79f0\u8fb9)\u7684\u6709\u9650\u96c6\u5408\u65f6\uff0c\u5219\u56feG\u4e3a\u65e0\u5411\u56fe\u3002\u8fb9\u662f\u9876\u70b9\u7684\u65e0\u5e8f\u5bf9\uff0c\u8bb0\u4e3a(v, w)\u6216(w,v),\u56e0\u4e3a(v,w)=(w,v), \u5176\u4e2dv,w\u662f\u9876\u70b9\u3002\u53ef\u4ee5\u8bf4\u9876\u70b9w\u548c\u9876\u70b9v\u4e92\u4e3a\u90bb\u63a5\u70b9\u3002\u8fb9(v, w)\u4f9d\u9644\u4e8e\u9876\u70b9w\u548cv\uff0c\u6216\u8005\u8bf4\u8fb9(v, w)\u548c\u9876\u70b9v, w\u76f8\u5173\u8054\u3002</p> <p></p> <p>\\((V_i, V_j)\\) \\(V_i \\ and \\ V_j \\ is \\ adjacent\\)</p> <ol> <li>simple graph \u7b80\u5355\u56fe</li> </ol> <p>\u4e00\u4e2a\u56feG\u82e5\u6ee1\u8db3:</p> <p>\u2460<code>\u4e0d\u5b58\u5728\u91cd\u590d\u8fb9;</code></p> <p>\u2461<code>\u4e0d\u5b58\u5728\u9876\u70b9\u5230\u81ea\u8eab\u7684\u8fb9</code>\uff0c\u5219\u79f0\u56feG\u4e3a\u7b80\u5355\u56fe\u3002</p> <p>\u4e0a\u56fe\u4e2d$$G_1 $$ \u548c\\(\\(G_2\\)\\)\u5747\u4e3a\u7b80\u5355\u56fe\u3002\u6570\u636e\u7ed3\u6784\u4e2d\u4ec5\u8ba8\u8bba\u7b80\u5355\u56fe</p> <ol> <li>complete graph \u5b8c\u5168\u56fe</li> </ol> <p>complete  graph \uff1a a graph that has the maximum number of edges</p> <p></p> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u8fb9\u8fdb\u884c\u8fde\u63a5\uff0c\u8be5\u6761\u8fb9\u65e0\u65b9\u5411\u4e4b\u5206\uff0c\u53ef\u4ee5\u5171\u7528\uff0c\u6545\u9700\u8981\\(C_n^2=\\dfrac{n(n-1)}{2}\\)</p> <p>\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u8fb9\u7684\u65b9\u5411\u4e0d\u540c\uff0c\u4fbf\u65e0\u6cd5\u5171\u7528\u8fde\u63a5\uff0c\u6545\u9700\u8981\\(P_n^2 = n(n-1)\\)</p> <ol> <li>Subgraph \u5b50\u56fe</li> </ol> <p>\\(G' \\subset G \u76f8\u5f53\u4e8e V(G') \\subset V(G) \\ and \\ E(G') \\subset E(G)\\)</p> <ol> <li>connected and unconnected</li> </ol> <p>An undirected graph G is connected if every pair of distinct \\(V_i\\) and \\(V_j\\) are connected</p> <p>\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u82e5\u4ece\u9876\u70b9\\(v\\)\u5230\u9876\u70b9\\(w\\)\u6709\u8def\u5f84\u5b58\u5728\uff0c\u5219\u79f0\\(v\u548c\\)w\u662f\u8fde\u901a\u7684\u3002\u82e5\u56fe\\(G\\)\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u90fd\u662f\u8fde\u901a\u7684\uff0c\u5219\u79f0\u56fe\\(G\\)\u4e3a\u8fde\u901a\u56fe\uff0c\u5426\u5219\u79f0\u4e3a\u975e\u8fde\u901a\u56fe\u3002\u65e0\u5411\u56fe\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf()\u3002\u82e5\u4e00\u4e2a\u56fe\u6709\\(n\\)\u4e2a\u9876\u70b9\uff0c\u5e76\u4e14\u8fb9\u6570\u5c0f\u4e8e\\(n \u2212 1\\)\u5219\u6b64\u56fe\u5fc5\u662f\u975e\u8fde\u901a\u56fe\u3002\u5982\u4e0b\u56fe(a)\u6240\u793a\uff0c \u56fe\\(G 4\\)\u67093\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5982\u56fe\uff08b\uff09\u6240\u793a</p> <p></p> <p>Component of an undirected G ::= the <code>maximal</code>connected subgraph</p> <p>Strongly connected component ::= the<code>maximal</code> subgraph that is strongly connected</p> <ol> <li>strongly connected \u5f3a\u8fde\u901a\u7684</li> </ol> <p>\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u82e5\u4ece\u9876\u70b9v \u5230\u9876\u70b9w\u548c\u4ece\u9876\u70b9w\u5230\u9879\u70b9v\u4e4b\u95f4\u90fd\u6709\u8def\u5f84,\u5219\u79f0\u8fd9\u4e24\u4e2a\u9876\u70b9\u662f\u5f3a\u8fde\u901a\u7684\u3002\u82e5\u56fe\u4e2d\u4efb\u4f55\u4e00\u5bf9\u9876\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u5219\u79f0\u6b64\u56fe\u4e3a\u5f3a\u8fde\u901a\u56fe\u3002\u6709\u5411\u56fe\u4e2d\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p> <p>Strongly connected directed graph G ::= for every pair of \\(V_i\\) and \\(V_j\\) in V( G ), there exist directed paths from \\(V_i \\ to \\ V_j\\)and from \\(V_j \\ to \\ V_i\\)</p> <p>If the graph is connected without direction to the edges, then it is said to be weakly connected</p> <p>\u6ce8\u610f:\u5f3a\u8fde\u901a\u56fe\u3001\u5f3a\u8fde\u901a\u5206\u91cf\u53ea\u662f\u9488\u5bf9\u6709\u5411\u56fe\u800c\u8a00\u7684\u3002\u4e00\u822c\u5728\u65e0\u5411\u56fe\u4e2d\u8ba8\u8bba\u8fde\u901a\u6027\uff0c\u5728\u6709\u5411\u56fe\u4e2d\u8003\u8651\u5f3a\u8fde\u901a\u6027\u3002</p> <ol> <li>\u751f\u6210\u6811\u548c\u751f\u6210\u68ee\u6797</li> </ol> <p>A tree ::= a graph that is connected and acyclic \u8fde\u901a\u5e76\u4e14\u65e0\u73af</p> <p>\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u5305\u542b\u56fe\u4e2d\u5168\u90e8\u9876\u70b9\u7684\u4e00\u4e2a\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u3002<code>\u82e5\u56fe\u4e2d\u5b9a\u70b9\u6570\u4e3an\uff0c\u5219\u5b83\u7684\u751f\u6210\u6811\u542b\u6709n-1\u6761\u8fb9\u3002\u5bf9\u4e8e\u751f\u6210\u6811\u800c\u8a00\uff0c\u82e5\u780d\u53bb\u5b83\u7684\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u53d8\u6210\u4e0d\u8fde\u901a\u56fe\uff0c\u82e5\u52a0\u4e0a\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u56de\u8def</code></p> <p>\u5728\u975e\u8fde\u901a\u56fe\u4e2d\uff0c\u8fde\u901a\u5206\u91cf\u7684\u751f\u6210\u6811\u6784\u6210\u4e86\u975e\u8fde\u901a\u56fe\u7684\u751f\u6210\u68ee\u6797\u3002</p> <ol> <li> <p>degree(\u9876\u70b9\u7684\u5ea6)\uff0cin-degree(\u5165\u5ea6) out-degree(\u51fa\u5ea6)    - \u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u9876\u70b9\u7684\u5ea6\u662f\u6307\u4f9d\u9644\u4e8e\u8be5\u9876\u70b9\u7684\u8fb9\u7684\u6761\u6570\uff0c\u8bb0\u4f5cTD\uff08v)    - \u5728\u5177\u6709n\u4e2a\u9876\u70b9\u3001e\u6761\u8fb9\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\\(\\sum_{i =1}^{n}TD(v_i) = 2e\\)\u5373\u65e0\u5411\u56fe\u7684\u5168\u90e8\u9876\u70b9\u7684\u5ea6\u7684\u548c\u7b49\u4e8e\u8fb9\u6570\u76842\u500d\uff0c\u56e0\u4e3a\u6bcf\u6761\u8fb9\u548c\u4e24\u4e2a\u9876\u70b9\u76f8\u5173\u8054\u3002    - \u5bf9\u4e8e\u6709\u5411\u56fe,\u9876\u70b9v\u7684\u5ea6\u5206\u4e3a\u5165\u5ea6\u548c\u51fa\u5ea6,\u5165\u5ea6\u662f\u4ee5\u9876\u70b9v\u4e3a\u7ec8\u70b9\u7684\u6709\u5411\u8fb9\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a\\(I D ( v )\\); \u800c\u51fa\u5ea6\u662f\u4ee5\u9876\u70b9v\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a\\(O D ( v )\\)\u3002    - \u9876\u70b9v\u7684\u5ea6\u7b49\u4e8e\u5176\u5165\u5ea6\u548c\u51fa\u5ea6\u4e4b\u548c\uff0c\u5373\\(T D ( v ) = I D ( v ) + O D ( v )\\) \u3002    - \u5728\u5177\u6709n\u4e2a\u9876\u70b9\uff0ce\u6761\u8fb9\u7684\u6709\u5411\u56fe\u4e2d\uff0c\\(\\sum_{i = 1}^n ID(v_i) = \\sum_{i = 1}^n OD(v_i) = e\\)\u5373\u6709\u5411\u56fe\u7684\u5168\u90e8\u9876\u70b9\u7684\u5165\u5ea6\u4e4b\u548c\u4e0e\u51fa\u5ea6\u4e4b\u548c\u76f8\u7b49\uff0c\u5e76\u4e14\u7b49\u4e8e\u8fb9\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6761\u6709\u5411\u8fb9\u90fd\u6709\u4e00\u4e2a\u8d77\u70b9\u548c\u7ec8\u70b9\u3002</p> </li> <li> <p>\u8fb9\u7684\u6743\u91cd\u548c\u7f51</p> </li> </ol> <p>\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u6bcf\u6761\u8fb9\u90fd\u53ef\u4ee5\u6807\u4e0a\u5177\u6709\u67d0\u79cd\u542b\u4e49\u7684\u6570\u503c\uff0c\u8be5\u6570\u503c\u79f0\u4e3a\u8be5\u8fb9\u7684\u6743\u503c\u3002\u8fd9\u79cd\u8fb9\u4e0a\u5e26\u6709\u6743\u503c\u7684\u56fe\u79f0\u4e3a\u5e26\u6743\u56fe\uff0c\u4e5f\u79f0\u7f51\u3002</p> <ol> <li>Path from \\(V_p \\ to \\ V_q\\)(\u8def\u5f84)\u3001length of a path(\u8def\u5f84\u957f\u5ea6)\u548ccycle(\u56de\u8def)</li> </ol> <p>\u9876\u70b9\\(V_p\\)\u5230\u9876\u70b9\\(V_q\\)\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\u662f\u6307\u9876\u70b9\u5e8f\u5217\\(V_p,V_{i1},V_{i2},\\cdots,V_q\\),\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee\u79f0\u4e3a\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u76f8\u540c\u7684\u8def\u5f84\u79f0\u4e3a\u56de\u8def\u6216\u73af\u3002\u82e5\u4e00\u4e2a\u56fe\u6709n\u4e2a\u9876\u70b9\uff0c\u5e76\u4e14\u6709\u5927\u4e8en \u2212 1\u6761\u8fb9\uff0c\u5219\u6b64\u56fe\u4e00\u5b9a\u6709\u73af\u3002</p> <ol> <li>simple path(\u7b80\u5355\u8def\u5f84)\u3001simple cycle(\u7b80\u5355\u56de\u8def)</li> </ol> <p>\u5728\u8def\u5f84\u5e8f\u5217\u4e2d\uff0c\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\u7684\u8def\u5f84\u79f0\u4e3a\u7b80\u5355\u8def\u5f84\u3002\u9664\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\u7684\u56de\u8def\u79f0\u4e3a\u7b80\u5355\u56de\u8def\u3002</p> <ol> <li>\u8ddd\u79bb</li> </ol> <p>\u4ece\u9876\u70b9u\u51fa\u53d1\u5230\u9876\u70b9v\u7684\u6700\u77ed\u8def\u5f84\u82e5\u5b58\u5728\uff0c\u5219\u6b64\u8def\u5f84\u7684\u957f\u5ea6\u79f0\u4e3a\u4eceu\u5230v\u7684\u8ddd\u79bb\u3002\u82e5\u4eceu\u5230v\u6839\u672c\u4e0d\u5b58\u5728\u8def\u5f84\uff0c\u5219\u8bb0\u8be5\u8ddd\u79bb\u4e3a\u65e0\u7a77( \u221e ) </p> <p>\u8865\u5145\u4e00\u4e2a\uff1a DAG\uff1a a directed acyclic graph \u6709\u5411\u65e0\u73af\u56fe</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#_1","title":"<code>\u533a\u5206\u6781\u5927\u8fde\u901a\u5b50\u56fe\u548c\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u6781\u5927\u8fde\u901a\u5b50\u56fe\u662f\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u8981\u6c42\u8fde\u901a\u5b50\u56fe\u5305\u542b\u5176\u6240\u6709\u7684\u8fb9\uff0c\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u662f\u65e2\u8981\u4fdd\u6301\u56fe\u8fde\u901a\u53c8\u8981\u4f7f\u8fb9\u7684\u6570\u91cf\u6700\u5c11</code>","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#82","title":"8.2 \u56fe\u7684\u5b58\u50a8\u7ed3\u6784\uff08\u5982\u4f55\u8868\u793a\u56fe\uff09","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#821","title":"8.2.1 \u90bb\u63a5\u77e9\u9635","text":"<p>\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff08adjacency Matrix\uff09\u5b58\u50a8\u65b9\u5f0f\u4f7f\u7528\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u56fe\uff0c\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u9876\u70b9\u4fe1\u606f\uff0c\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u7684\u8fb9\u7684\u4fe1\u606f</p> <p>\u8bbe\u56feG\u6709n\u4e2a\u9876\u70b9\uff0c\u5219\u90bb\u63a5\u77e9\u9635A\u662f\u4e00\u4e2an*n\u7684\u77e9\u9635 $$ A[i][j] =  \\begin{cases} 0 &amp; \\text{\u82e5(Vi,Vj)\u6216\u8005\u4e0d\u662fE\uff08G\uff09\u7684\u8fb9} \\ 1 &amp; \\text{\u82e5(Vi,Vj)\u6216\u8005\u662fE\uff08G\uff09\u7684\u8fb9} \\end{cases} $$"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#_2","title":"\u65e0\u5411\u56fe","text":"<ul> <li> <p><code>\u65e0\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u4e00\u5b9a\u662f\u4e00\u4e2a\u5bf9\u79f0\u77e9\u9635</code>(\u5373\u4ece\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u4e3b\u5bf9\u89d2\u7ebf\u4e3a\u8f74\uff0c\u53f3\u4e0a\u89d2\u7684\u5143\u4e0e\u5de6\u4e0b\u89d2\u76f8\u5bf9\u5e94\u7684\u5143\u5168\u90fd\u662f\u76f8\u7b49\u7684)\u3002<code>\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u5b58\u50a8\u90bb\u63a5\u77e9\u9635\u65f6\u53ea\u9700\u5b58\u50a8\u4e0a(\u6216\u4e0b)\u4e09\u89d2\u77e9\u9635\u7684\u5143\u7d20\u3002</code></p> </li> <li> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u90bb\u63a5\u77e9\u9635\u7684\u7b2ci\u884c(\u6216\u7b2ci\u5217)\u975e\u96f6\u5143\u7d20(\u6216\u975e\u221e\u5143\u7d20)\u7684\u4e2a\u6570\u6b63\u597d\u662f\u7b2ci\u4e2a\u9876\u70b9\u7684\u5ea6$T D ( v i ) $\u3002\u6bd4\u5982\u9876\u70b9v 1 \u7684\u5ea6\u5c31\u662f1 + 0 + 1 + 0 =2\u3002</p> </li> <li>\u6c42\u9876\u70b9$$v i $$\u7684\u6240\u6709\u90bb\u63a5\u70b9\u5c31\u662f\u5c06\u77e9\u9635\u4e2d\u7b2ci\u884c\u5143\u7d20\u626b\u63cf\u4e00\u904d\uff0c \\(A [ i ] [ j ]\\)\u4e3a 1\u5c31\u662f\u90bb\u63a5\u70b9\u3002</li> </ul> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#_3","title":"\u6709\u5411\u56fe","text":"<p>\u5bf9\u4e8e\u6709\u5411\u56fe\u548c\u5b83\u7684\u90bb\u63a5\u77e9\u9635</p> <ul> <li>\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u6570\u503c\u4f9d\u7136\u4e3a0\uff0c\u5e76\u4e14\u90bb\u63a5\u77e9\u9635\u4e0d\u662f\u4e00\u4e2a\u5bf9\u79f0\u77e9\u9635</li> <li>\u6709\u5411\u56fe\u7684\u5165\u5ea6\uff0c\\(v_i\\)\u7684\u5165\u5ea6\u5c31\u662f\u7b2ci\u5217\u5404\u6570\u4e4b\u548c\u3002\u6709\u5411\u56fe\u7684\u51fa\u5ea6\uff0c\\(v_i\\)\u7684\u51fa\u5ea6\u5c31\u662f\u7b2ci\u884c\u5404\u6570\u4e4b\u548c</li> <li>\u5224\u65ad\u9876\u70b9\\(v_i,v_j\\)\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u5f27\uff0c\u53ea\u9700\u67e5\u627e\u77e9\u9635A[i][j]\u662f\u5426\u7b49\u4e8e1</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#_4","title":"\u6709\u6743\u56fe","text":"<p>\u5bf9\u4e8e\u5e26\u6743\u56fe\uff0c\u82e5\u9876\u70b9\\(v_i,v_j\\)\u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\uff0c\u5219\u90bb\u63a5\u77e9\u9635\u5bf9\u5e94\u9879\u5b58\u653e\u7740\u8be5\u8fb9\u7684\u6743\u503c $$ A[i][j] =  \\begin{cases} W_{ij} &amp; \u82e5(v_i,v_j)\\in E \u6216\u8005 \\in E\\ 0 &amp; \u82e5 i = j\\ \\infty &amp; \u5176\u4ed6 \\end{cases} $$ <pre><code>// \u5b9a\u4e49\u90bb\u63a5\u77e9\u9635\u7684\u5b58\u50a8\u7ed3\u6784\n//\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff08adjacency Matrix\uff09\u5b58\u50a8\u65b9\u5f0f\u4f7f\u7528\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u56fe\n//\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u9876\u70b9\u4fe1\u606f\n//\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u7684\u8fb9\u7684\u4fe1\u606f\n#define MAXVERTEXNUM 100    //\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\u662f100\ntypedef char VertexType;    //\u9876\u70b9\u7684\u6570\u636e\u7c7b\u578b\ntypedef int EdgeType;       //\u5e26\u6743\u56fe\u4e2d\u8fb9\u4e0a\u6743\u503c\u7684\u6570\u636e\u7c7b\u578b\ntypedef struct{\n    VertexType Vex[MAXVERTEXNUM];   //\u9876\u70b9\u8868\n    EgdeType Edge[MAXVERTEXNUM][MAXVERTEXNUM]; // \u90bb\u63a5\u77e9\u9635\uff0c\u8fb9\u8868\n    int vexnum, arcnum;     //\u56fe\u7684\u5f53\u524d\u5b9a\u70b9\u6570\u548c\u5f27\u6811\n}MGraph;\n</code></pre> <p>\u6ce8\u610f\uff1a</p> <ol> <li>\u5728\u7b80\u5355\u5e94\u7528\u4e2d\uff0c\u53ef\u76f4\u63a5\u7528\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635(\u9876\u70b9\u4fe1\u606f\u7b49\u5747\u53ef\u7701\u7565)\u3002</li> <li>\u65e0\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u662f\u5bf9\u79f0\u77e9\u9635\uff0c\u5bf9\u89c4\u6a21\u7279\u5927\u7684\u90bb\u63a5\u77e9\u9635\u53ef\u91c7\u7528\u538b\u7f29\u5b58\u50a8\u3002\u4e0a\u4e09\u89d2\u77e9\u9635/\u4e0b\u4e09\u89d2\u77e9\u9635</li> <li>\u90bb\u63a5\u77e9\u9635\u8868\u793a\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n^2)\\),n\u4e3a\u56fe\u7684\u9876\u70b9\u6570</li> <li>\u7a20\u5bc6\u56fe\u9002\u5408\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u7684\u5b58\u50a8\u8868\u793a</li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#822","title":"8.2.2 \u90bb\u63a5\u8868","text":"<p>\u5f53\u4e00\u4e2a\u56fe\u4e3a\u7a00\u758f\u56fe\u65f6\uff08\u8fb9\u6570\u76f8\u5bf9\u9876\u70b9\u6570\u8f83\u5c11\uff09\uff0c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6cd5\u663e\u7136\u8981\u6d6a\u8d39\u5927\u91cf\u7684\u5b58\u50a8\u7a7a\u95f4</p> <p>\u800c\u56fe\u7684\u90bb\u63a5\u8868\u7ed3\u5408\u4e86\u987a\u5e8f\u5b58\u50a8\u548c\u94fe\u5f0f\u5b58\u50a8\u65b9\u6cd5\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u8fd9\u79cd\u4e0d\u5fc5\u8981\u7684\u6d6a\u8d39</p> <ol> <li>\u6240\u8c13\u90bb\u63a5\u8868\uff0c\u662f\u6307\u5bf9\u56feG\u4e2d\u6bcf\u4e00\u4e2a\u9876\u70b9\\(v_i\\)\u5efa\u7acb\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u7b2c i \u4e2a\u5355\u94fe\u8868\u7684\u7ed3\u70b9\u8868\u793a\u4f9d\u9644\u4e8e\u7ed3\u70b9\\(v_i\\)\u7684\u8fb9</li> </ol> <p><code>\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u5219\u662f\u4ee5\u9876\u70b9$v_i$\u4e3a\u5934\u7684\u5f27</code>\uff0c\u8fd9\u4e2a\u5355\u94fe\u8868\u5c31\u6210\u4e3a\u9876\u70b9\\(v_i\\)\u7684\u8fb9\u8868\u3002</p> <ol> <li>\u8fb9\u8868\u7684\u5934\u6307\u9488\u548c\u9876\u70b9\u7684\u6570\u636e\u4fe1\u606f\u91c7\u7528\u987a\u5e8f\u5b58\u50a8\uff0c\u6240\u4ee5\u5728\u90bb\u63a5\u8868\u4e2d\u5b58\u5728\u4e24\u79cd\u8282\u70b9\uff1a\u9876\u70b9\u8868\u7ed3\u70b9\u548c\u8fb9\u8868\u7ed3\u70b9</li> </ol> <p></p> <p>\u9876\u70b9\u8868\u7ed3\u70b9\u7531\u9876\u70b9\u57df(data)\u548c\u6307\u5411\u7b2c\u4e00\u6761\u90bb\u63a5\u8fb9\u7684\u6307\u9488(firstarc) \u6784\u6210\uff0c\u8fb9\u8868(\u90bb\u63a5\u8868)\u7ed3\u70b9\u7531\u90bb\u63a5\u70b9\u57df(adjvex)\u548c\u6307\u5411\u4e0b\u4e00\u6761\u90bb\u63a5\u8fb9\u7684\u6307\u9488\u57df(nextarc) \u6784\u6210\u3002</p> <p><code>\u9876\u70b9\u5148\u6307\u5411\u8fb9\u8868</code>\uff0c\u8fb9\u8868\u5411\u540e\u4f9d\u6b21\u8fde\u63a5</p> <p>\u65e0\u5411\u56fe\u7684\u90bb\u63a5\u8868\u5b9e\u4f8b\u5982\u4e0b\uff1a</p> <p></p> <p>\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868\u5b9e\u4f8b\u5982\u4e0b\uff1a</p> <p>1\u4e0e2\u548c5\u8fde\u63a5\uff0c2\u548c5\u6ca1\u6709\u5148\u540e\u987a\u5e8f\u4e4b\u5206</p> <p></p> <p>\u5bf9\u4e8e\u6709\u6743\u56fe\uff0c\u53ef\u4ee5\u5728\u8fb9\u8868\u7ed3\u70b9\u7684\u5b9a\u4e49\u4e2d\u589e\u52a0\u4e00\u4e2aweight\u7684\u6570\u636e\u57df\uff0c\u5b58\u50a8\u6743\u503c\u4fe1\u606f\u3002</p> <pre><code>#define MAXVEX 10               //\u56fe\u4e2d\u9876\u70b9\u6570\u76ee\u7684\u6700\u5927\u503c\ntypedef char VertexType;        //\u9876\u70b9\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int WeightType;         //\u8fb9\u4e0a\u7684\u6743\u503c\u7c7b\u578b\u5e94\u7531\u7528\u6237\u5b9a\u4e49\ntypedef int Vertex;             //\u7528\u4e8e\u5b58\u50a8\u4e0b\u6807\u7684\u7c7b\u578b\n/* vertices are numbered from 1 to MaxVertexNum */\n\n/*\u8fb9\u8868\u7ed3\u70b9*/\ntypedef struct AdjVNode{\n    int adjvex;                 //\u8be5\u5f27\u6240\u6307\u5411\u7684\u9876\u70b9\u7684\u4e0b\u6807\u6216\u8005\u4f4d\u7f6e\n    WeightType weight;          //\u6743\u503c\uff0c\u5bf9\u4e8e\u975e\u7f51\u56fe\u53ef\u4ee5\u4e0d\u9700\u8981\n    struct AdjVNode *next;      //\u6307\u5411\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\n}AdjVNode;\ntypedef struct AdjVNode *PtrToAdjVNode;\n\n/*\u9876\u70b9\u8868\u7ed3\u70b9*/\ntypedef struct VertexNode{\n    VertexType data;            //\u9876\u70b9\u57df\uff0c\u5b58\u50a8\u9876\u70b9\u4fe1\u606f\n    PtrToAdjVNode FirstEdge;    //\u8fb9\u8868\u5934\u6307\u9488\n}AdjList[MAXVEX];\n\n/*\u90bb\u63a5\u8868*/\ntypedef struct{\n    AdjList adjList;\n    int Vertexnum;\n    int Edgenum;                //\u56fe\u4e2d\u5f53\u524d\u9876\u70b9\u6570\u548c\u8fb9\u6570\n}GNode;\ntypedef  GNode *PtrToGNode;\ntypedef PtrToGNode LGraph;      //\u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u5b58\u50a8\u7684\u56fe\u7c7b\u578b\n\nLGraph ReadG()\n{\n    int i;\n    // \u521b\u5efa\u4e00\u4e2a\u56fe\u8868\n    LGraph LG = (LGraph)malloc(sizeof(GNode));\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        LG-&gt;adjlist[i].FirstEdge = NULL;    // \u5c06\u8fb9\u8868\u7f6e\u4e3a\u7a7a\u8868\n    }\n    // \u8f93\u51fa\u56fe\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\n    scanf(\"%d %d\", &amp;LG-&gt;Vertexnum, &amp;LG-&gt;Edgenum);\n    for(i = 0; i &lt; LG-&gt;Edgenum; i++)\n    {\n        int v1, v2;\n        // \u4e00\u6b21\u8f93\u5165\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\n        scanf(\"%d %d\", &amp;v1, &amp;v2);\n        // \u5f00\u59cb\u521b\u5efaAdjVNode\n        PtrToAdjVNode adj = (PtrToAdjVNode)malloc(sizeof(AdjVNode));\n        adj-&gt;adjvex = v2;       // \u90bb\u63a5\u5e8f\u53f7\u4e3av2,\u8be5\u8fb9\u6240\u6307\u5411\u7684\u9876\u70b9\n        adj-&gt;next = NULL;\n        // FirstEdge\u662f\u9876\u70b9\u6307\u5411\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5c31\u7528adj\u8fdb\u884c\u66ff\u4ee3\n        if(LG-&gt;adjlist[v1].FirstEdge == NULL)\n        {\n            LG-&gt;adjlist[v1].FirstEdge = adj;\n        }\n        else\n        {\n            // \u6b64\u5904\u4e3a\u5728\u672b\u5c3e\u6dfb\u52a0\u7ed3\u70b9\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u91c7\u7528\u5934\u63d2\u6cd5\n            PtrToAdjVNode temp = LG-&gt;adjlist[v1].FirstEdge;\n            while(temp-&gt;next != NULL)\n            {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = adj;\n        }\n    }\n    return LG;\n}\n</code></pre> <p>\u56fe\u7684\u90bb\u63a5\u8868\u5b58\u50a8\u65b9\u6cd5\u5177\u6709\u4ee5\u4e0b\u7684\u7279\u70b9\uff1a</p> <ol> <li>\u82e5G\u4e3a\u65e0\u5411\u56fe\uff0c\u5219\u6240\u9700\u7684\u5b58\u50a8\u7a7a\u95f4\u4e3a\\(\\(O(|V|+2|E|)\\)\\),\u5bf9\u4e8e\u9876\u70b9\u8868\u9700\u8981\\(\\(|V|\\)\\)\uff0c\u5bf9\u4e8e\u90bb\u63a5\u8868\u9700\u8981\\(O(|V|+2|E|)\\)</li> </ol> <p>\u524d\u8005\u7684\u500d\u65702\u662f\u7531\u4e8e\u65e0\u5411\u56fe\u4e2d,\u6bcf\u6761\u8fb9\u5728\u90bb\u63a5\u8868\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21</p> <ol> <li> <p>\u5bf9\u4e8e\u7a00\u758f\u56fe\uff0c\u91c7\u7528\u90bb\u63a5\u8868\u53ef\u4ee5\u6781\u5927\u5730\u8282\u7701\u5b58\u50a8\u7a7a\u95f4</p> </li> <li> <p>\u5728\u90bb\u63a5\u8868\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u9876\u70b9\uff0c\u53ea\u9700\u8981\u8bfb\u53d6\u5b83\u5730\u90bb\u63a5\u8868\uff0c\u5c31\u80fd\u627e\u5230\u5b83\u7684\u6240\u6709\u90bb\u8fb9\u3002\u5728\u90bb\u63a5\u77e9\u9635\u4e2d\uff0c\u76f8\u540c\u7684\u64cd\u4f5c\u5219\u9700\u8981\u626b\u63cf\u4e00\u884c\uff0c\u82b1\u8d39\u7684\u65f6\u95f4\u4e3aO ( n )\u3002\u4f46\u662f\uff0c\u82e5\u8981\u786e\u5b9a\u7ed9\u5b9a\u7684\u4e24\u4e2a\u9876\u70b9\u95f4\u662f\u5426\u5b58\u5728\u8fb9\uff0c\u5219\u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u53ef\u4ee5\u7acb\u523b\u67e5\u5230\uff0c\u800c\u5728\u90bb\u63a5\u8868\u4e2d\u5219\u9700\u8981\u5728\u76f8\u5e94\u7ed3\u70b9\u5bf9\u5e94\u7684\u8fb9\u8868\u4e2d\u67e5\u627e\u53e6\u4e00\u7ed3\u70b9\uff0c\u6548\u7387\u8f83\u4f4e\u3002</p> </li> <li> <p>\u5728\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a\u4e2d\uff0c\u6c42\u4e00\u4e2a\u7ed9\u5b9a\u9876\u70b9\u7684\u51fa\u5ea6\uff0c\u53ea\u9700\u8ba1\u7b97\u5b83\u5728\u90bb\u63a5\u8868\u4e2d\u7684\u7ed3\u70b9\u6570\u3002<code>\u4f46\u6c42\u7ed3\u70b9\u7684\u5165\u5ea6\uff0c\u9700\u8981\u904d\u5386\u5168\u90e8\u7684\u90bb\u63a5\u8868\uff0c\u56e0\u6b64\u540e\u9762\u5f15\u5165\u9006\u90bb\u63a5\u8868\u7684\u5b58\u50a8\u65b9\u5f0f\u6765\u52a0\u901f\u6c42\u89e3\u7ed9\u5b9a\u9876\u70b9\u7684\u5165\u5ea6\u3002</code></p> </li> <li> <p>\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a\u5e76\u4e0d\u552f\u4e00\uff0c\u56e0\u4e3a\u5728\u6bcf\u4e2a\u9876\u70b9\u5bf9\u5e94\u7684\u5355\u94fe\u8868\u4e2d\uff0c\u5404\u8fb9\u7ed3\u70b9\u7684\u94fe\u63a5\u6b21\u5e8f\u53ef\u4ee5\u662f\u4efb\u610f\u7684\uff0c\u5b83\u53d6\u51b3\u4e8e\u5efa\u7acb\u90bb\u63a5\u8868\u7684\u7b97\u6cd5\u53ca\u8fb9\u7684\u8f93\u5165\u6b21\u5e8f\u3002</p> </li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#823","title":"8.2.3 \u5341\u5b57\u94fe\u8868","text":"<ol> <li>\u5341\u5b57\u94fe\u8868\u662f\u6709\u5411\u56fe\u7684\u4e00\u79cd\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784</li> </ol> <p>\u5bf9\u4e8e\u6709\u5411\u56fe\u6765\u8bf4\uff0c\u90bb\u63a5\u8868\u662f\u6709\u7f3a\u9677\u7684\uff0c\u56e0\u4e3a\u65e0\u6cd5\u5feb\u901f\u8ba1\u7b97\u5165\u5ea6\uff0c\u9700\u8981\u904d\u5386\u4e00\u6574\u4e2a\u56fe\u3002</p> <p><code>\u4f46\u662f\u9006\u90bb\u63a5\u8868\u80fd\u591f\u89e3\u51b3\u5165\u5ea6\u95ee\u9898\uff0c\u4f46\u662f\u65e0\u6cd5\u89e3\u51b3\u51fa\u5ea6\u3002</code>\u6240\u4ee5\u6211\u4eec\u5c06\u90bb\u63a5\u8868\u548c\u9006\u90bb\u63a5\u8868\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5f97\u5230\u5341\u5b57\u94fe\u8868</p> <ol> <li>\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u9876\u70b9\u8868\u7ed3\u70b9\u7ed3\u6784\uff1a</li> </ol> <p></p> <p>\u5176\u4e2d\\(firstin\\)\u8868\u793a\u5165\u8fb9\u8868\u5934\u6307\u9488\uff0c\u6307\u5411\u8be5\u9876\u70b9\u7684\u5165\u8fb9\u8868\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\uff0c\\(firstout\\)\u8868\u793a\u51fa\u8fb9\u8868\u5934\u6307\u9488\uff0c\u6307\u5411\u8be5\u9876\u70b9\u7684\u51fa\u8fb9\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u3002</p> <ol> <li>\u91cd\u65b0\u5b9a\u4e49\u7684\u8fb9\u8868\u7ed3\u70b9\u7ed3\u6784\u5982\u4e0b\u8868\u6240\u793a\uff1a</li> </ol> <p></p> <p>tailvex \u662f\u6307\u8fb9\u8d77\u70b9\u5728\u9876\u70b9\u8868\u7684\u4e0b\u6807\uff0ctaillink\u662f\u6307\u8fb9\u8868\u6307\u9488\u57df\uff0c\u6307\u5411\u8d77\u70b9\u76f8\u540c\u7684\u4e0b\u4e00\u6761\u8fb9\u3002</p> <p>headvex \u662f\u6307\u5f27\u7ec8\u70b9\u5728\u9876\u70b9\u8868\u4e2d\u7684\u4e0b\u6807\uff0cheadlink\u662f\u6307\u5165\u8fb9\u8868\u6307\u9488\u57df\uff0c\u6307\u5411\u7ec8\u70b9\u76f8\u540c\u7684\u4e0b\u4e00\u6761\u8fb9</p> <p>\u5982\u679c\u6709\u9700\u6c42\uff0c\u53ef\u4ee5\u6dfb\u52a0weight</p> <ol> <li>\u4f8b\u5b50\uff1a</li> </ol> <p>\u9876\u70b9\u5b58\u5165\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4{\\(V_0,V_1,V_2,V_3\\)},\u5b9e\u7ebf\u7bad\u5934\u6307\u9488\u7684\u56fe\u793a\u4e0e\u90bb\u63a5\u8868\u76f8\u540c\uff0c\u4e5f\u5c31\u662f\u6307\u5411\u51fa\u8fb9\u8868\u3002</p> <p>\u4ee5\u9876\u70b9\\(V_0\\)\u4e3a\u4f8b\uff0cfisetout\u6307\u5411\u7684\u662f\u51fa\u8fb9\u8868\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\\(V_3\\),\u6240\u4ee5\\(V_0\\)\u8fb9\u8868\u7684headvex = 3\uff0ctailvex \u4e5f\u5c31\u662f\u5f53\u524d\u9876\u70b9\\(V_0\\)\u7684\u4e0b\u68070\uff0c\u7531\u4e8e\\(V_0\\)\u53ea\u6709\u4e00\u4e2a\u51fa\u8fb9\u9876\u70b9\uff0c\u6240\u4ee5headlink\u548ctaillink\u90fd\u662f\u7a7a</p> <p></p> <p><code>\u4ee5\u4e0b\u91cd\u70b9\u4ecb\u7ecd\u865a\u7ebf\u7bad\u5934\u7684\u542b\u4e49\uff1a\u4e5f\u5c31\u662f\u6b64\u56fe\u7684\u9006\u90bb\u63a5\u8868\u7684\u8868\u793a\u3002\u5bf9\u4e8eV0\u800c\u8a00\uff0c\u5b83\u6709\u9876\u70b9V1\u548cV2\u7684\u5165\u8fb9\u3002\u56e0\u6b64V0\u7684firstin\u6307\u5411\u9876\u70b9V1\u7684\u8fb9\u8868\u7ed3\u70b9\u4e2dheadvex = 0\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u4e0a\u56fe\u4e2d\u7684\u5e8f\u53f71\u3002\u63a5\u7740\u7531\u5165\u8fb9\u7ed3\u70b9\u7684headlink\u6307\u5411\u4e0b\u4e00\u4e2a\u5165\u8fb9\u9876\u70b9V2\uff0c\u4e5f\u5c31\u662f\u5e8f\u53f72\u3002</code></p> <p>\u5bf9\u4e8e\u9876\u70b9V1\u800c\u8a00\uff0c\u5b83\u6709\u4e00\u4e2a\u5165\u8fb9\u9876\u70b9V2\uff0c\u6240\u4ee5\u5b83\u7684firstin\u6307\u5411V2\u7684\u8fb9\u8868\u7ed3\u70b9\u4e2dheadvex = 1\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u5e8f\u53f73.</p> <p>\u9876\u70b9V2\u548cV3\uff0c\u4e5f\u662f\u540c\u6837\u6709\u4e00\u4e2a\u5165\u8fb9\u9876\u70b9\uff0c\u89c1\u56fe\u4e2d\u7684\u5e8f\u53f74.5</p> <p>\u5341\u5b57\u94fe\u8868\u7684\u597d\u5904\u5c31\u662f\u56e0\u4e3a\u628a\u90bb\u63a5\u8868\u548c\u9006\u90bb\u63a5\u8868\u6574\u5408\u5728\u4e86\u4e00\u8d77\uff0c \u8fd9\u6837\u65e2\u5bb9\u6613\u627e\u5230\u4ee5V1\u4e3a\u5c3e\u7684\u5f27\uff0c\u4e5f\u5bb9\u6613\u627e\u5230\u4ee5V1 \u4e3a\u5934\u7684\u5f27\uff0c\u56e0\u800c\u5bb9\u6613\u6c42\u5f97\u9876\u70b9\u7684\u51fa\u5ea6\u548c\u5165\u5ea6\u3002\u800c\u4e14\u5b83\u9664\u4e86\u7ed3\u6784\u590d\u6742\u4e00\u70b9\u5916\uff0c\u5176\u5b9e\u521b\u5efa\u56fe\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u548c\u90bb\u63a5\u8868\u76f8\u540c\u7684\uff0c\u56e0\u6b64\uff0c\u5728\u6709\u5411\u56fe\u7684\u5e94\u7528\u4e2d\uff0c\u5341\u5b57\u94fe\u8868\u662f\u975e\u5e38\u597d\u7684\u6570\u636e\u7ed3\u6784\u6a21\u578b\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#824","title":"8.2.4 \u90bb\u63a5\u591a\u91cd\u8868","text":"<p>\u91cd\u65b0\u5b9a\u4e49\u7684\u8fb9\u8868\u7ed3\u70b9\u7ed3\u6784\u4e3a\uff1a</p> <p></p> <p>\u5176\u4e2divex\u548cjvex\u662f\u4e0e\u67d0\u6761\u8fb9\u4f9d\u9644\u7684\u4e24\u4e2a\u9876\u70b9\u5728\u9876\u70b9\u8868\u4e2d\u4e0b\u6807\u3002ilink \u6307\u5411\u4f9d\u9644\u9876\u70b9ivex\u7684\u4e0b\u4e00\u6761\u8fb9\uff0cjlink \u6307\u5411\u4f9d\u9644\u9876\u70b9jvex\u7684\u4e0b\u4e00\u6761\u8fb9\u3002\u8fd9\u5c31\u662f\u90bb\u63a5\u591a\u91cd\u8868\u7ed3\u6784\u3002</p> <p>\u6bcf\u4e2a\u9876\u70b9\u4e5f\u7528\u4e00\u4e00\u4e2a\u7ed3\u70b9\u8868\u793a\uff0c\u5b83\u7531\u5982\u4e0b\u6240\u793a\u7684\u4e24\u4e2a\u57df\u7ec4\u6210</p> <p>\u5176\u4e2d\uff0cdata \u57df\u5b58\u50a8\u8be5\u9876\u70b9\u7684\u76f8\u5173\u4fe1\u606f\uff0cfirstedge \u57df\u6307\u793a\u7b2c\u4e00\u6761\u4f9d\u9644\u4e8e\u8be5\u9876\u70b9\u7684\u8fb9</p> <p></p> <p>\u6211\u4eec\u5f00\u59cb\u8fde\u7ebf\uff0c\u5982\u56fe\uff0c\u9996\u5148\u8fde\u7ebf\u7684\u2460\u2461\u2462\u2463\u5c31\u662f\u5c06\u9876\u70b9\u7684firstedge\u6307\u5411\u4e00\u6761\u8fb9\uff0c\u9876\u70b9\u4e0b\u6807\u8981\u4e0eivex\u7684\u503c\u76f8\u540c,\u8fd9\u5f88\u597d\u7406\u89e3\u3002</p> <p>\u63a5\u7740\uff0c\u7531\u4e8e\u9876\u70b9V0\u7684\uff08V0\uff0cV1\uff09\u7684\u4e34\u8fb9\u7531\uff08V0,V3),(V0,V2),\u56e0\u6b64\u5e8f\u53f75\uff0c6\u7684\u8fde\u7ebf\u5c31\u662f\u6ee1\u8db3\u6307\u5411\u4e0b\u4e00\u6761\u4f9d\u9644\u4e8e\u9876\u70b9V0\u7684\u8fb9\uff0c\u6ce8\u610filink\u6307\u5411\u7684\u7ed3\u70b9\u7684jvex\u4e00\u5b9a\u8981\u548c\u5b83\u672c\u8eab\u7684ivex\u7684\u503c\u76f8\u540c\u3002</p> <p>\u8fde\u7ebf7\uff0c\u5c31\u662f\uff08V1\uff0cV0\uff09\u8fd9\u6761\u8fb9\uff0c\u5b83\u662f\u76f8\u5f53\u4e8e\u9876\u70b9V1\u6307\u5411\uff08V1\uff0cV2\uff09\u8fb9\u540e\u7684\u4e0b\u4e00\u6761\u3002V2\u6709\u4e09\u6761\u8fb9\u4f9d\u9644\uff0c\u6240\u4ee5\u5728\u2462\u4e4b\u540e\u5c31\u6709\u4e86\u2467\u2468\u3002\u8fde\u7ebf\u2463\u7684\u5c31\u662f\u9876\u70b9V3\u5728\u8fde\u7ebf\u2463\u4e4b\u540e\u7684\u4e0b\u4e00\u6761\u8fb9\u3002 \u5de6\u56fe\u4e00\u5171\u67095\u6761\u8fb9\uff0c\u6240\u4ee5\u53f3\u56fe\u670910\u6761\u8fde\u7ebf\uff0c\u5b8c\u5168\u7b26\u5408\u9884\u671f</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#83","title":"8.3 \u62d3\u6251\u6392\u5e8f","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#831","title":"8.3.1 \u5b9a\u4e49","text":"<p>\u5728\u4e00\u4e2a\u8868\u793a\u5de5\u7a0b\u7684\u6709\u5411\u56fe\u4e2d\uff0c\u7528\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u5f27\u8868\u793a\u6d3b\u52a8\u4e4b\u95f4\u7684\u4f18\u5148\u5173\u7cfb\uff0c\u8fd9\u6837\u7684\u6709\u5411\u56fe\u4e3a\u9876\u70b9\u8868\u793a\u6d3b\u52a8\u7684\u7f51\uff0c\u6211\u4eec\u79f0\u4e3aAOV\u7f51( Activity On VertexNetwork)\u3002</p> <p>\u82e5\u7528DAG\u56fe\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\u8868\u793a\u4e00\u4e2a\u5de5\u7a0b\uff0c\u5176\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u6709\u5411\u8fb9\u8868\u793a\u6d3b\u52a8Vi\u5fc5\u987b\u4f18\u5148\u4e8e\u6d3b\u52a8Vj\u3002 <p>\u8bbe\\(G = (V,E)\\),\u662f\u4e00\u4e2a\u5177\u6709n\u4e2a\u9876\u70b9\uff0cV\u4e2d\u7684\u9876\u70b9\u5e8f\u5217\u4e3a\\(V_1,V_2,\\cdots,V_n\\),\u6ee1\u8db3\u82e5\u4ece\u9876\u70b9\\(V_1\\)\u5230\\(V_j\\)\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5219\u9876\u70b9\u5e8f\u5217\u4e2d\u9876\u70b9\\(V_i\\)\u5fc5\u987b\u5728\\(V_j\\)\u4e4b\u524d\uff0c\u79f0\u4e4b\u4e3a\u62d3\u6251\u6392\u5e8f\u3002</p> <p>\u5982\u679c\u56fe\u4e0d\u662f\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\uff0c\u5219\u65e0\u6cd5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u3002\u539f\u56e0\u662f\u627e\u4e0d\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a0\uff08\u73af\uff09\u7684\u70b9\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#832","title":"8.3.2 \u7b97\u6cd5","text":"<ol> <li> <p>\u4eceAOV\u7f51\u4e2d\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u524d\u9a71\u7684\u9876\u70b9\u5e76\u8f93\u51fa\u3002</p> </li> <li> <p>\u4ece\u7f51\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9</p> </li> <li>\u91cd\u590d\u2460\u548c\u2461\u76f4\u5230\u5f53\u524d\u7684AOV\u7f51\u4e3a\u7a7a\u6216\u5f53\u524d\u7f51\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\u3002\u5982\u679c\u8f93\u51fa\u9876\u70b9\u6570\u5c11\u4e86\uff0c\u54ea\u6015\u662f\u5c11\u4e86\u4e00\u4e2a\uff0c\u4e5f\u8bf4\u660e\u8fd9\u4e2a\u7f51\u5b58\u5728\u73af(\u56de\u8def)\uff0c\u4e0d\u662fAOV\u7f51\u3002</li> </ol> <p></p> <p>\u7531\u4e8e\u8f93\u51fa\u6bcf\u4e2a\u9876\u70b9\u7684\u540c\u65f6\u8fd8\u8981\u5220\u9664\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c\u6545\u62d3\u6251\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(V+E)\\)</p> <p>\u82e5\u4e00\u4e2a\u9876\u70b9\u6709\u591a\u4e2a\u76f4\u63a5\u540e\u7ee7\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u901a\u5e38\u4e0d\u552f\u4e00\uff1b\u4f46\u82e5\u5404\u4e2a\u9876\u70b9\u5df2\u7ecf\u6392\u5728\u4e00\u4e2a\u7ebf\u6027\u6709\u5e8f\u7684\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u9876\u70b9\u6709\u552f\u4e00\u7684\u524d\u9a71\u540e\u7ee7\u5173\u7cfb\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u662f\u552f\u4e00\u7684\u3002</p> <p>\u5173\u4e8etopsort\u7684\u7b97\u6cd5\uff0c\u4f46\u90fd\u6709\u5c40\u9650\u6027\uff0c\u53ea\u80fd\u8f93\u51fa\u4e00\u79cd\u62d3\u6251\u6392\u5e8f\uff01\uff01\uff01</p> <pre><code>void Topsort(LGraph G)\n{\n    int i, j;\n    int indegree[MAXVEX]; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    int a[1000];          // \u7528\u4e8e\u5b58\u50a8\u7ed3\u70b9\u662f\u5426\u8f93\u51fa\u8fc7\u7684\u6570\u7ec4\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        indegree[i] = 0; // \u521d\u59cb\u5316\u4e3a0\n        a[i] = 0;        // \u521d\u59cb\u5316\u4e3a0\uff0c\u8868\u793a\u7ed3\u70b9\u6ca1\u6709\u8f93\u51fa\u8fc7\n    }\n    PtrToAdjVNode temp;\n    // \u904d\u5386\u6574\u4e2a\u90bb\u63a5\u8868\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        temp = G-&gt;adjList[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807,\u5bf9\u5e94\u7684\u5c31\u662f\u5165\u5ea6\n            indegree[temp-&gt;adjvex]++;\n            temp = temp-&gt;next;\n        }\n    }\n    // \u5916\u5c42\u5faa\u73af\u4f5c\u7528\u662f\u8f93\u51fa\u5168\u90e8\u7684\u70b9\n    for (i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        // \u5185\u5c42\u5faa\u73af\u7684\u4f5c\u7528\u662f\u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u7b2c\u4e00\u4e2a\u70b9\n        for (j = 0; j &lt; G-&gt;Vertexnum; j++)\n        {\n            // \u5982\u679c\u5176\u5165\u5ea6\u4e3a0\uff08\u610f\u5473\u7740\u6ca1\u6709\u8fdb\u5165\u7684\u8fb9\uff09\u5e76\u4e14\u4e4b\u524d\u6ca1\u6709\u8f93\u51fa\u8fc7\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa\u8be5\u9876\u70b9\n            // \u5728\u56fe\u4e2d\uff0c\u80af\u5b9a\u5b58\u5728\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5426\u5219\u56fe\u5c31\u6709\u73af\u7684\u5b58\u5728\uff08\u6bcf\u4e00\u4e2a\u70b9\u90fd\u6709\u5165\u5ea6\uff09\n            if (indegree[j] == 0 &amp;&amp; a[j] == 0)\n            {\n                printf(\"%d \", j + 1);\n                // \u6807\u8bb0\u5b83\u5df2\u7ecf\u8f93\u51fa\n                a[j] = 1;\n                temp = G-&gt;adjList[j].FirstEdge;\n                // \u5c06\u8be5\u7ed3\u70b9\u6307\u5411\u7684\u7ed3\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\n                while (temp != NULL)\n                {\n                    indegree[temp-&gt;adjvex]--;\n                    temp = temp-&gt;next;\n                }\n            }\n        }\n    }\n}\n// \u7528\u961f\u5217\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\nvoid Topsort1(LGraph G)\n{\n    // \u7528\u4e00\u4e2a\u961f\u5217\u8868\u793a\u53ef\u4f9b\u8f93\u51fa\u7684\u70b9\n    int Queue[MAXVEX];\n    int cnt = 0;\n    int front = 0, rear = 0;\n    // \u521d\u59cb\u5316\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        Queue[i] = 0;\n    }\n    int indegree[MAXVEX]; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for(int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        indegree[i] = 0; // \u521d\u59cb\u5316\u4e3a0\n    }\n    PtrToAdjVNode temp;\n    // \u904d\u5386\u6574\u4e2a\u90bb\u63a5\u8868\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5165\u5ea6\n    for (int i = 0; i &lt; G-&gt;Vertexnum; i++)\n    {\n        temp = G-&gt;adjList[i].FirstEdge;\n        while (temp != NULL)\n        {\n            // ajdvex\u662f\u6307\u5411\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\n            indegree[temp-&gt;adjvex]++;\n            temp = temp-&gt;next;\n        }\n    }\n    for(int i = 0; i &lt; MAXVEX; i++)\n    {\n        if(indegree[i] == 0)\n        {\n            Queue[rear++] = i;\n        }\n    }\n    // \u5728while\u5faa\u73af\u4e4b\u524d\uff0c\u8981\u5148\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u5148\u8fdb\u5165\u961f\u5217\n    while(front &lt; rear)\n    {\n        int v = Queue[front++];\n        printf(\"%d \", v + 1);\n        cnt++;\n        temp = G-&gt;adjList[v].FirstEdge;\n        while(temp != NULL)\n        {\n            indegree[temp-&gt;adjvex]--;\n            if(indegree[temp-&gt;adjvex] == 0)\n            {\n                Queue[rear++] = temp-&gt;adjvex;\n            }\n            temp = temp-&gt;next;\n        }\n    }\n    if(cnt != G-&gt;Vertexnum)\n    {\n        printf(\"ERROR! Graph has a cycle!\\n\");\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#84","title":"8.4 \u56fe\u7684\u904d\u5386","text":"<p>\u56fe\u7684\u904d\u5386\u548c\u6811\u7684\u904d\u5386\u76f8\u4f3c\uff0c\u4ece\u56fe\u7684\u67d0\u4e00\u9876\u70b9\u51fa\u53d1\u4eff\u904d\u56fe\u4e2d\u6240\u6709\u7684\u9876\u70b9\uff0c\u4e14\u4f7f\u6bcf\u4e00\u4e2a\u9876\u70b9\u53ea\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u56fe\u7684\u904d\u5386</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#841","title":"8.4.1 \u6df1\u5ea6\u4f18\u5148\u904d\u5386","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u4e5f\u79f0\u4e4b\u4e3a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u7b80\u79f0\u4e3aDFS</p> <p><code>\u5b83\u7684\u57fa\u672c\u601d\u60f3\u5982\u4e0b:\u9996\u5148\u8bbf\u95ee\u56fe\u4e2d\u67d0\u4e00\u8d77\u59cb\u9876\u70b9v\uff0c\u7136\u540e\u7531v\u51fa\u53d1\uff0c\u8bbf\u95ee\u4e0ev\u90bb\u63a5\u4e14\u672a\u88ab\u8bbf\u95ee\u7684\u4efb\u4e00\u9876\u70b9w1, \u518d\u8bbf\u95ee\u4e0ew1\u90bb\u63a5\u4e14\u672a\u88ab\u8bbf\u95ee\u7684\u4efb\u4e00\u9876\u70b9\u2026\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u3002\u5f53\u4e0d\u80fd\u518d\u7ee7\u7eed\u5411\u4e0b\u8bbf\u95ee\u65f6\uff0c\u4f9d\u6b21\u9000\u56de\u5230\u6700\u8fd1\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\uff0c\u82e5\u5b83\u8fd8\u6709\u90bb\u63a5\u9876\u70b9\u672a\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u4ece\u8be5\u70b9\u5f00\u59cb\u7ee7\u7eed\u4e0a\u8ff0\u641c\u7d22\u8fc7\u7a0b\uff0c\u76f4\u81f3\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u5747\u88ab\u8bbf\u95ee\u8fc7\u4e3a\u6b62.</code></p> <p></p> <p></p> <p></p> <p>\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u56fe\uff0c\u8be5\u5982\u4f55\u5904\u7406</p> <p></p> <p>\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e00\u4e2a\u70b9\uff08\u6ca1\u6709\u88abvisit\uff09\u90fd\u6267\u884c\u4e00\u904dDFS\u641c\u7d22</p> <p></p> <p>\u9012\u5f52\u7684\u987a\u5e8f\u662f\u904d\u53861-&gt;\u904d\u53862-&gt;\u904d\u53863-&gt;.....-&gt;\u904d\u5386n-&gt;\u8fd4\u56den-&gt;\u8fd4\u56den-1...-&gt;\u8fd4\u56de3-&gt;\u8fd4\u56de2-&gt;\u8fd4\u56de1</p> <p>\u8fd4\u56de\u7684\u65f6\u5019\u6253\u5370\uff0c\u56e0\u6b64\u662f\u4ece\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\u6253\u5370\u5230\u6e90\u70b9\u3002\u662f\u9006\u62d3\u6251\u5e8f\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#tarjan","title":"Tarjan\u7b97\u6cd5\u6c42\u5f3a\u8fde\u901a\u5206\u91cf","text":"<p>Tarjan\u7b97\u6cd5\u4e3b\u4f53\u91c7\u7528DFS\u904d\u5386\uff0c\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u9876\u70b9\uff0c\u7ed9\u8be5\u9876\u70b9\u8d4b\u503c\u4e00\u4e2anum\u5e8f\u53f7\u548clow-link\uff0clow-link\u8868\u793a\u5f53\u524d\u9876\u70b9\u80fd\u5230\u8fbe\u7684\u9876\u70b9\u4e2d\u6700\u5c0f\u7684id\uff08\u5305\u62ec\u5b83\u81ea\u5df1\u7684id)\u3002</p> <p></p> <p>\u53ef\u89c1low-link\u76f8\u540c\u7684\u8282\u70b9\u5c31\u7ec4\u6210\u5f3a\u8054\u901a\u5206\u91cf\u3002\u8be5\u7b97\u6cd5\u6838\u5fc3\u5c31\u662f\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9low-link\u503c\u3002</p> <p>\u8be5\u7b97\u6cd5\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u9632\u6b62\u8de8Sccs\u8ddf\u65b0low-link\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6709\u6548\u7684\u9876\u70b9\u8303\u56f4\u5185\u66f4\u65b0low-link\u3002</p> <p></p> <p>DFS\u6df1\u5ea6\u4f18\u5148\u8bbf\u95ee\u4e00\u4e2a\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u5c31\u5c06\u5176\u52a0\u5165\u5230\u6808stack[]\u4e2d\u3002\u6bcf\u627e\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u5c06\u8fd9\u4e9b\u9876\u70b9\u4ece\u6808stack[]\u4e2d\u5f39\u51fa\u3002</p> <p>\u66f4\u65b0Low\u503c\u7684\u6761\u4ef6</p> <p>if (visited[temp-&gt;adjvex] == 0)   {       // \u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\u8be5\u7ed3\u70b9       Dfs(LG, temp-&gt;adjvex, visit);       low[i] = low[i] &lt; low[temp-&gt;adjvex] ? low[i] : low[temp-&gt;adjvex];   }   else if (instack[temp-&gt;adjvex] == 1)   {       // \u5982\u679c\u8bbf\u95ee\u8fc7\u8be5\u7ed3\u70b9\uff0c\u4e14\u8be5\u7ed3\u70b9\u5728\u6808\u4e2d       low[i] = low[i] &lt; num[temp-&gt;adjvex] ? low[i] : num[temp-&gt;adjvex];   }</p> <p>\u4f7f\u7528\u8282\u70b9v\u7684low-link\u66f4\u65b0\u9876\u70b9u\u7684low-link\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u4eceu\u5230v\u7684\u8fb9\uff0c\u5e76\u4e14\u9876\u70b9v\u5fc5\u987b\u5728\u6808\u4e2d\u3002</p> <p>Tarjan\u7b97\u6cd5\u6982\u89c8\uff1a</p> <ol> <li>\u6807\u8bb0\u6240\u6709\u8282\u70b9\u4e3a\u672a\u8bbf\u95ee\u72b6\u6001\uff08unvisited\uff09\u3002</li> <li>\u5f00\u59cbDFS\uff0c\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u4e3a\u5176\u5206\u914did\u548clow-link\u503c\uff0c\u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff08visited\uff09\uff0c\u5e76\u52a0\u5165\u5230\u6808\u4e2d\u3002</li> <li>\u5f53DFS\u56de\u6eaf\u65f6\uff0c\u5982\u679c\u5148\u524d\u8282\u70b9\u5728\u6808\u4e2d\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u9876\u70b9\u7684\u524d\u4e00\u4e2a\u9876\u70b9\u6765\u66f4\u65b0\u5f53\u524d\u9876\u70b9\u7684low-link\uff08\u53d6\u4e8c\u8005\u6700\u5c0f\u503c\uff09\u3002</li> <li>\u5728\u5b8c\u6210\u5f53\u524d\u9876\u70b9\u7684\u6240\u6709\u90bb\u5c45\u540e\uff0c\u5982\u679c\u4ee5\u5f53\u524d\u9876\u70b9\u4e3a\u8d77\u59cb\u7684\u9876\u70b9\u7ec4\u6210Sccs\uff0c\u5219\u5c06\u6808\u4e2d\u7684\u9876\u70b9\u5f39\u51fa\uff0c\u76f4\u5230\u5f53\u524d\u9876\u70b9\u3002</li> </ol> <p>\u4f8b\u5b50\uff1a</p> <p></p> <p>\u4efb\u610f\u9009\u62e9\u9876\u70b9\u5f00\u59cbDFS\uff0c\u8fd9\u91cc\u9009\u62e9\u9876\u70b90\uff0c\u4f9d\u6b21\u5c06\u9876\u70b90\u30011\u30012\u5165\u6808\uff0c\u5f53\u9876\u70b92\u7ee7\u7eedDFS\u65f6\uff0c\u53d1\u73b0\u9876\u70b90\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c<code>\u4e8e\u662f\u5f00\u59cb\u56de\u6eaf\uff0c\u5e76\u66f4\u65b0\u8ba1\u7b97low-link\u503c</code>\u3002\u5f53\u56de\u6eaf\u5230\u9876\u70b90\u65f6\uff0c\u5176id\u503c\u7b49\u4e8elow-link\u503c\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2aScc\uff0c\u6b64\u65f6\u5c06\u76f8\u5173\u9876\u70b9\u5f39\u51fa\u3002</p> <p>\u5173\u4e8e\u9876\u70b9\uff0c<code>num[i] = low[i],\u5176\u4ed6\u8fde\u901a\u5206\u91cf\u7684\u70b9\u7684low[j] = low[i]</code></p> <p>\u7136\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u7ee7\u7eedDFS\uff0c\u8fd9\u91cc\u9009\u62e9\u9876\u70b93\u3002</p> <p></p> <p>\u5c06\u9876\u70b93\u30014\u30015\u4f9d\u6b21\u5165\u6808\uff0c\u4ece\u9876\u70b95\u7ee7\u7eedDFS\uff0c\u8bbf\u95ee\u9876\u70b90\uff0c\u9876\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u56de\u6eaf\u5230\u9876\u70b95\uff0c\u6b64\u65f6\u4e0d\u66f4\u65b0low-link\uff0c\u56e0\u4e3a\u9876\u70b90\u4e0d\u5728\u6808\u4e2d\u3002\u63a5\u7740\u7ee7\u7eedDFS\u5230\u9876\u70b96\u548c4\uff0c\u5c06\u9876\u70b96\u548c4\u5165\u6808\uff08\u9876\u70b92\u548c\u9876\u70b90\u7684\u60c5\u51b5\u4e00\u6837\uff09\uff0c\u9876\u70b94\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5f00\u59cb\u56de\u6eaf\uff0c\u5e76\u66f4\u65b0low-link\u503c\u3002\u5f53\u56de\u6eaf\u5230\u9876\u70b94\u65f6\uff0c\u5176id\u503c\u548clow-link\u503c\u76f8\u7b49\uff0c\u627e\u5230\u4e00\u4e2aScc\uff0c\u4f9d\u6b21\u5c06\u9876\u70b96\u30015\u30014\u5f39\u51fa\u3002</p> <p></p> <p>\u6b64\u65f6\u6808\u4e2d\u8fd8\u5269\u9876\u70b93\uff0c\u7ee7\u7eedDFS\u5230\u9876\u70b94\uff0c\u8282\u70b94\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u56de\u6eaf\u5230\u9876\u70b93\uff0c\u9876\u70b94\u4e0d\u5728\u6808\u4e2d\uff0c\u4e0d\u66f4\u65b0\u9876\u70b93\u7684low-link\u3002\u6b64\u65f6\u867d\u7136\u9876\u70b93\u7684id\u548clow-link\u76f8\u7b49\uff0c\u4f46\u9876\u70b93\u7684\u90bb\u5c45\u8fd8\u6ca1\u8bbf\u95ee\u5b8c\uff0c\u7ee7\u7eedDFS\u5230\u9876\u70b97\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#842","title":"8.4.2 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5c31\u662f\u66f4\u5927\u8303\u56f4\u5185\u641c\u7d22\uff0c\u5148\u8bbf\u95ee\u5b8c\u5f53\u524d\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\uff0c\u7136\u540e\u518d\u8bbf\u95ee\u4e0b\u4e00\u5c42\u7684\u6240\u6709\u90bb\u63a5\u70b9\uff0c\u8be5\u7b97\u6cd5\u9002\u7528\u4e8e\u89e3\u51b3\u6700\u77ed\u6700\u5c0f\u8def\u5f84\u95ee\u9898\u3002</p> <p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u662f\u4e00\u79cd\u5206\u5c42\u7684\u67e5\u627e\u8fc7\u7a0b\uff0c\u6bcf\u5411\u524d\u8d70\u4e00\u6b65\u53ef\u80fd\u8bbf\u95ee\u4e00\u6279\u9876\u70b9\uff0c\u4e0d\u50cf\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u90a3\u6837\u6709\u5f80\u56de\u9000\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u7b97\u6cd5\u3002\u4e3a\u4e86\u5b9e\u73b0\u9010\u5c42\u7684\u8bbf\u95ee\uff0c\u7b97\u6cd5\u5fc5\u987b\u501f\u52a9\u4e00\u4e2a\u8f85\u52a9\u961f\u5217\uff0c\u4ee5\u8bb0\u5fc6\u6b63\u5728\u8bbf\u95ee\u7684\u9876\u70b9\u7684\u4e0b\u4e00\u5c42\u9876\u70b9\u3002</p> <pre><code>void BFS(LGraph G, Vertex v, int visited[])\n{\n    PtrToAdjVNode temp;\n    // \u501f\u52a9\u961f\u5217\u5b9e\u73b0\n    Vertex Queue[MAXVEX];\n    // \u961f\u5217\u521d\u59cb\u5316\n    int front = 0, rear = 0;\n    // \u5c06\u9876\u70b9v\u52a0\u5165\u961f\u5217\uff0c\u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\uff0c\u540e\u7eed\u80fd\u591f\u5f97\u5230rear &gt; front\n    Queue[rear++] = v;\n    visited[v] = 1;\n    printf(\"%d \", v + 1);\n    while(rear &gt; front)\n    {\n        // \u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u9876\u70b9\n        Vertex w = Queue[front++];\n        // \u904d\u5386w\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\n        for(temp = G-&gt;adjList[w].FirstEdge; temp; temp = temp-&gt;next)\n        {\n            // \u5982\u679ctemp-&gt;adjvex\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u5c06\u5b83\u6240\u5728\u7684\u9876\u70b9push\u8fdb\u961f\u5217\uff0c\u76f8\u5f53\u4e8e\u8f93\u51fav\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\n            if(!visited[temp-&gt;adjvex])\n            {\n                Queue[rear++] = temp-&gt;adjvex;\n                visited[temp-&gt;adjvex] = 1;\n                printf(\"%d \", temp-&gt;adjvex + 1);\n            }\n        }\n        // \u518d\u6b21\u8fdb\u5165while\u5faa\u73af\u65f6\uff0c\u8981\u4e48\u662f\u540c\u4e00\u884c\u7684\u90bb\u63a5\u70b9\uff0c\u8981\u4e48\u662f\u4e0b\u4e00\u884c\u7684\u90bb\u63a5\u70b9\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#_5","title":"\u5173\u8282\u70b9\u4e0e\u53cc\u8fde\u901a\u6027","text":"<p>v is an articulation point if G\u2019 = DeleteVertex( G, v ) has at least 2 connected components</p> <p><code>\u82e5\u8fde\u901a\u56fe\u4e2d\u67d0\u4e2a\u9876\u70b9\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u88ab\u5220\u9664\u540e\uff0c\u8be5\u8fde\u901a\u56fe\u88ab\u5206\u5272\u6210\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8fde\u901a\u5206\u91cf\uff0c\u5219\u79f0\u6b64\u7ed3\u70b9\u4e3a\u5173\u8282\u70b9\u3002</code></p> <p>G is a biconnected graph if G is connected and has no articulation points.</p> <p><code>\u6ca1\u6709\u5173\u8282\u70b9\u7684\u8fde\u901a\u56fe\u6210\u4e3a\u53cc\u8fde\u901a\u56fe</code></p> <p>A biconnected component is a maximal biconnected subgraph.</p> <p></p> <p><code>\u600e\u4e48\u6837\u7684\u56fe\uff0c\u624d\u6709\u53ef\u80fd\u6210\u4e3a\u53cc\u8fde\u901a\u5b50\u56fe\uff1f</code></p> <p><code>1. \u5148\u6392\u9664\u5355\u70b9\u56fe\uff0c\u4e0d\u7b26\u5408\u6700\u5927\u53cc\u8fde\u901a\u5b50\u56fe</code></p> <p><code>2. \u6210\u73af\u7684\u80af\u5b9a\u662f\u53cc\u8fde\u901a\u5b50\u56fe\uff0c\u7279\u6b8a\u60c5\u51b5\uff0c\u5bf9\u4e8e\u4e24\u70b9\u56fe\u4ec5\u6709\u4e00\u6761\u8fb9\u8fdb\u884c\u8fde\u63a5\uff0c\u4e5f\u5c5e\u4e8e\u53cc\u8fde\u901a\u5b50\u56fe</code></p> <p>\u5982\u4f55\u6c42\u53cc\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff0cFinding the biconnected components of a connected undirected G</p> <p></p> <p>\u4ece\u56fe\u4e2d\u4efb\u610f\u9876\u70b9\u5f00\u59cb\uff0c\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5e76\u7ed9\u4ed6\u4eec\u7f16\u53f7\u3002</p> <p>\u800c\u5bf9\u4e8e\u56fe\u4e2d\u5b9e\u9645\u5b58\u5728\u800c\u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\u4e2d\u4e0d\u5b58\u5728\u7684\u8fb9\uff0c\u79f0\u4e3a\u56de\u8fb9(v,w)\u6216\u80cc\u5411\u8fb9(v,w)\u3002\u5982\u4e0a\u4f8b\uff0c\u865a\u7ebf\u90e8\u5206\u8868\u793a\u56de\u8fb9\u3002</p> <p>\u8f6c\u5316\u4e3a\u6c42\u5173\u8282\u70b9\u7684\u4e2a\u6570</p> <p>\u5f15\u5165\uff1a num\u6570\u7ec4\u548clow\u6570\u7ec4</p> <ul> <li> <p>Num\u6570\u7ec4\uff1a\u7b2c\u4e00\u6b21\u5bf9\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u65f6\uff0c\u4f9d\u6b21\u8bbf\u95ee\u7ed3\u70b9\uff0c\u540c\u65f6\u6309\u8bbf\u95ee\u987a\u5e8f\u5bf9\u7ed3\u70b9\u8fdb\u884c\u7f16\u53f7\u3002</p> </li> <li> <p>Low\u6570\u7ec4\uff1a\u6c42\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u5c0f\u7f16\u53f7\u7684\u9876\u70b9</p> </li> </ul> <p>\\(Low (u) = min\\{Num(u),min\\{Low(w)|w \\ is \\ a \\ child \\ of \\ u\\}, min\\{Nuw(w)|(u,w)\\ is\\  a\\ backedge\\}\\}\\)</p> <p>\u89e3\u91ca\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u9876\u70b9V\uff0c\u5176low\u6570\u7ec4\u503c\u4e3a\u81ea\u8eab\u5148\u5e8f\u7f16\u53f7(Num[v]),\u5176\u6240\u6709\u5b69\u5b50\u8282\u70b9\u7684low\u503c\u7684\u6700\u5c0f\u503c\uff0c\u4e0e\u5176\u901a\u8fc7\u56de\u8fb9\u76f8\u8fde\u7684\u7956\u5148\u8282\u70b9K\u7684\u5148\u5e8f\u7f16\u53f7\uff08Num[k]\uff09\u8fd9\u4e09\u8005\u4e2d\u7684\u6700\u5c0f\u503c\u3002</p> <p></p> <p>\u5bf9\u4e8e\u5173\u8282\u70b9\u7684\u5224\u5b9a\uff1a</p> <p>1. \u5bf9\u4e8e\u6839\u7ed3\u70b9\uff0c\u6839\u8282\u70b9\u7684\u513f\u5b50\u5927\u4e8e\u7b49\u4e8e2\uff0c\u5219\u8be5\u7ed3\u70b9\u4e00\u5b9a\u4e3a\u5173\u8282\u70b9</p> <p>2. \u5bf9\u4e8e\u975e\u6839\u7ed3\u70b9u\uff0c\u5b83\u662f\u5173\u8282\u70b9\u5f53\u4e14\u4ec5\u5f53\uff0c\u5b83\u6709\u67d0\u4e00\u4e2a\u513f\u5b50w\uff0c\u4f7f\u5f97Low\uff08w\uff09&gt;= Num\uff08u\uff09\u3002</p> <p><code>\u539f\u56e0\u5728\u4e8e\uff0cLow\uff08w) &gt;= Num(u),\u8bf4\u660e\u4fe1\u606f\u65e0\u6cd5\u4f20\u9012\u4e0a\u53bb\uff0c\u4e5f\u5c31\u662f\u8bf4\u88ab\u7ed3\u70b9u\u963b\u65ad\u4e86\uff0c\u6b64\u65f6u\u662f\u5173\u8282\u70b9\u3002\u5219\u5220\u9664\u8282\u70b9u\u540e\uff0cw\u4e00\u5b9a\u4e0d\u80fd\u4e0eu\u4e4b\u524d\u7684\u8282\u70b9\u76f8\u8fde\uff0c\u5219\u8be5\u56fe\u4e0d\u4e3a\u8fde\u901a\u56fe\u3002</code></p> <p>\u4ee5Vertex 6\u4e3a\u4f8b\uff0cNum(6) = 6,6\u7684\u513f\u5b507\uff0cLow\uff087\uff09 = 5\uff0c\u56e0\u4e3a5\u548c7\u4e4b\u95f4\u6709\u4e00\u6761\u56de\u8fb9\uff0c\u4f7f\u5f977\u80fd\u591f\u8df3\u8fc76\uff0c\u4ece\u800c\u4fe1\u606f\u4f20\u9012\u4e0d\u4f1a\u963b\u65ad\uff0c6\u4e0d\u662f\u5173\u8282\u70b9</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O\uff08V + E\uff09</p> <p></p> <p>v3\u548cv6\u4e4b\u95f4\u4e0d\u53ef\u80fd\u5b58\u5728backedge\uff0c\u5426\u5219\u65e0\u6cd5\u6df1\u5ea6\u641c\u7d22\u5f97\u5230\u4e0a\u8ff0\u56fe</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#_6","title":"\u6b27\u62c9\u56de\u8def","text":"<p>An Euler circuit is possible only if the graph is connected and each vertex has an even degree.</p> <p>\u6b27\u62c9\u56de\u8def\uff0c\u6240\u6709\u7684\u70b9\u90fd\u6709\u5076\u6570\u7684\u5ea6\uff0c\u4e00\u6761\u8fb9\u8fdb\u53bb\u5fc5\u7136\u6709\u4e00\u6761\u8fb9\u51fa\u6765</p> <p>An Euler tour is possible if there are exactly two vertices having odd degree. One must start at one of the odd-degree vertices.</p> <p>\u6b27\u62c9\u8def\u5f84\uff0c\u4ec5\u80fd\u5b58\u5728\u4e24\u4e2a\u70b9\u5177\u6709\u5947\u6570\u7684degree\uff0c\u4e14\u8be5\u8def\u5f84\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u4e3a\u8d77\u59cb\u70b9</p> <p>\u4e0a\u8ff0\u4e24\u8005\u7684\u672c\u8d28\u662f\u76f8\u540c\u7684\uff0c\u5f53\u4f60\u5c06\u5269\u4f59\u7684\u4e24\u4e2a\u5947\u6570degree\u7684\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u4fbf\u5f97\u5230\u4e86\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\uff0c\u6b64\u65f6\u6240\u6709\u7684\u70b9\u90fd\u5177\u6709\u5076\u6570\u7684degree</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#85","title":"8.5 \u6700\u77ed\u8def\u5f84","text":"<p>\u5728\u7f51\u56fe\u548c\u975e\u7f51\u56fe\u4e2d\uff0c\u6700\u77ed\u8def\u5f84\u7684\u542b\u4e49\u662f\u4e0d\u540c\u7684\u3002\u7531\u4e8e\u975e\u7f51\u56fe\u5b83\u6ca1\u6709\u6743\u503c\uff0c\u6240\u8c13\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5176\u5b9e\u5c31\u662f\u4e24\u9876\u70b9\u4e4b\u95f4\u7ecf\u8fc7\u7684\u8fb9\u6570\u6700\u5c11\u7684\u8def\u5f84\uff0c\u5bf9\u4e8e\u7f51\u56fe\u6765\u8bf4\uff0c\u6700\u77ed\u8def\u5f84\uff0c\u662f\u6307\u4e24\u9876\u70b9\u4e4b\u95f4\u7ecf\u8fc7\u7684\u8fb9\u4e0a\u6743\u503c\u4e4b\u548c\u6700\u5c11\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u6211\u4eec\u79f0\u8def\u5f84\u4e0a\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\u4e3a\u6e90\u70b9\uff0c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u662f\u7ec8\u70b9\u3002</p> <p>Given a digraph G = ( V, E ), and a cost function c( e ) for e \\(\\in\\)E( G ).  The length of a path P from source to destination is   \\(\\sum_{e_i \\in P} {c(e_i)}\\)      (also called weighted path length).</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#850-bfs","title":"8.5.0 BFS\u5b9e\u73b0\u65e0\u6743\u56fe\u7684\u6700\u77ed\u8def\u5f84","text":"<p>\u7531\u4e8e\u975e\u7f51\u56fe\u5b83\u6ca1\u6709\u6743\u503c\uff0c\u6240\u8c13\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5176\u5b9e\u5c31\u662f\u4e24\u9876\u70b9\u4e4b\u95f4\u7ecf\u8fc7\u7684\u8fb9\u6570\u6700\u5c11\u7684\u8def\u5f84</p> <pre><code>int dist[MAXVERTEXNUM] = {65536};\nint path[MAXVERTEXNUM] = {-1};\nint visited3[MAXVERTEXNUM] = {0};\n// \u90bb\u63a5\u77e9\u9635\u7248\nvoid BFS2(MGraph G, int v, int visited[], int dist[], int path[])\n{\n    int i;\n    int queue[MAXVERTEXNUM];\n    int front = 0, rear = 0;\n    queue[rear++] = v;\n    visited[v] = 1;\n    dist[v] = 0;\n    while(rear &gt; front)\n    {\n        int u = queue[front++];\n        for(i = 0; i &lt; G.vexnum; i++)\n        {\n            if(G.Edge[u][i] == 1 &amp;&amp; visited[i] == 0)\n            {\n                queue[rear++] = i;\n                visited[i] = 1;\n                if(dist[i] &gt; dist[u] + 1)\n                {\n                    dist[i] = dist[u] + 1;\n                    path[i] = u;\n                }\n            }\n        }\n    }\n}\n</code></pre> <p></p> <p>\u5347\u7ea7\u7248\u4f7f\u7528\u961f\u5217\u5b58\u50a8</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#851-dijkstra","title":"8.5.1 Dijkstra\u7b97\u6cd5","text":"<p>Dijkstra\u7b97\u6cd5\u7528\u4e8e\u6784\u5efa\u5355\u6e90\u70b9(single source)\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5373\u56fe\u4e2d\u67d0\u4e00\u70b9\u5230\u4efb\u4f55\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u90fd\u662f\u6700\u77ed\u7684\u3002</p> <p>\u53ef\u4ee5\u8fd0\u7528\u4e8e\u6709\u5411\u56fe\uff0c<code>\u4f46\u662f\u4e0d\u80fd\u5b58\u5728\u8d1f\u6743\u503c</code>\u3002</p> <p>\u901a\u4fd7\u7684\u8bf4\uff0cDijkstra\u7b97\u6cd5\uff0c\u5b83\u5e76\u4e0d\u662f\u4e00\u4e0b\u5b50\u6c42\u51fa\\(V_0\u5230V_8\\)\u7684\u6700\u77ed\u8def\u5f84\uff0c\u800c\u662f\u4e00\u6b65\u6b65\u6c42\u51fa\u5b83\u4eec\u4e4b\u95f4\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u8fc7\u7a0b\u4e2d\u90fd\u662f\u57fa\u4e8e\u5df2\u7ecf\u6c42\u51fa\u7684\u6700\u77ed\u8def\u5f84\u7684\u57fa\u7840\uff0c\u6c42\u51fa\u66f4\u8fdc\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <ul> <li>\u8bbe\u7f6e\u4e00\u4e2a\u96c6\u5408S\uff0c\u8bb0\u5f55\u5df2\u7ecf\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9</li> <li>\u8bbe\u7f6e\u8f85\u52a9\u6570\u7ec4\uff0cdist[ ]\uff1a\u8bb0\u5f55\u4ece\u6e90\u70b9\\(v_0\\)\u5230\u5176\u4ed6\u9876\u70b9\u5f53\u524d\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c<code>\u5b83\u7684\u521d\u6001\u662f\uff0c\u82e5\u4ece$v_0$\u5230$v_i$\u6709\u5f27\uff0c\u5219dist[i]\u4e3a\u5f27\u4e0a\u7684\u6743\u503c\uff0c\u5426\u5219\u8bbe\u7f6edist[i]\u4e3a</code>\\(\\infin\\)</li> </ul> <p></p> <p></p> <p><code>\u96c6\u5408S\u8868\u793a\u5f53\u524d\u5df2\u7ecf\u6c42\u51fa\u6700\u77ed\u8ddd\u79bb\u7684\u70b9\uff0c\u6c42\u66f4\u8fdc\u8ddd\u79bb\u7684\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u9700\u8981\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\uff0c\u4e5f\u5c31\u662f\u4ee5\u96c6\u5408S\u4e2d\u70b9\u4e3a\u4e2d\u95f4\u70b9\uff0c\u4e0d\u80fd\u4f7f\u7528\u96c6\u5408\u5916\u7684\u70b9</code></p> <p></p> <p>\u5728\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6216\u8005\u5e26\u6743\u503c\u7684\u90bb\u63a5\u8868\u8868\u793a\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\(O(V^2)\\)\\)</p> <p>\u5982\u679c\u53d8\u6210\u65e0\u6743\u56fe\uff0c\u53ea\u9700\u8981\u5c06weight\u53d8\u62101\uff0c\u6b64\u65f6\u7684dist\u53d8\u6210\u9876\u70b9v0\u5230\u8be5\u70b9\u7684\u8fb9\u7684\u6570\u91cf</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#852-floyd","title":"8.5.2 Floyd \u7b97\u6cd5","text":"<p>Floyd \u7b97\u6cd5\u5b9a\u4e49\u4e86\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635</p> <ol> <li>\u77e9\u9635D\u8bb0\u5f55\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84</li> </ol> <p>eg\uff1a D\u30100\u3011\u30103\u3011 = 10\uff0c\u8bf4\u660e\u9876\u70b90\u52303\u7684\u6700\u77ed\u8def\u5f84\u4e3a10</p> <ol> <li>\u77e9\u9635P\u8bb0\u5f55\u9876\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u4e2d\u8f6c\u70b9</li> </ol> <p>eg\uff1a P\u30100\u3011\u30103\u3011 = 1\u8bf4\u660e\uff0c0\u52303\u7684\u6700\u77ed\u8def\u5f84\u8f68\u8ff9\u4e3a0 - &gt; 1 - &gt; 3</p> <ol> <li>\u5b83\u901a\u8fc73\u91cd\u5faa\u73af\uff0ck\u4e3a\u4e2d\u8f6c\u70b9\uff0cv\u4e3a\u8d77\u70b9\uff0cw\u4e3a\u7ec8\u70b9\uff0c\u5faa\u73af\u6bd4\u8f83 \\(D[v][w] \u548c D[v][k] + D[k][w]\\)\u6700\u5c0f\u503c\uff0c\u5982\u679c\\(D[v][k] + D[k][w]\\)\u66f4\u5c0f\uff0c\u5c31\u5c06\\(d[v][k] + D[k][w]\\)\u8986\u76d6\u4fdd\u5b58\u5728\\(D[v][w]\\)\u4e2d</li> </ol> <p>example</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#86","title":"8.6 \u6700\u5c0f\u751f\u6210\u6811","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#861","title":"8.6.1 \u5b9a\u4e49","text":"<ol> <li>Spanning tree \u751f\u6210\u6811\u3002\u4e00\u4e2a\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u4e00\u4e2a\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u5b83\u5305\u542b\u56fe\u4e2d\u5168\u90e8\u7684n\u4e2a\u9876\u70b9\uff0c\u4f46\u662f\u53ea\u6709\u6784\u6210\u4e00\u68f5\u6811\u7684n-1\u6761\u8fb9</li> </ol> <ol> <li> <p>\u751f\u6210\u6811\u7684\u5c5e\u6027    - \u4e00\u4e2a\u8fde\u901a\u56fe\u53ef\u4ee5\u6709\u591a\u4e2a\u751f\u6210\u6811    - \u4e00\u4e2a\u8fde\u901a\u56fe\u7684\u6240\u6709\u751f\u6210\u6811\u90fd\u5305\u542b\u76f8\u540c\u7684\u9876\u70b9\u4e2a\u6570\u548c\u8fb9\u6570    - \u751f\u6210\u6811\u4e0d\u542b\u6709\u73af    - \u79fb\u9664\u751f\u6210\u6811\u7684\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u90fd\u4f1a\u5bfc\u81f4\u56fe\u4e0d\u8fde\u901a    - \u5728\u751f\u6210\u6811\u4e2d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u6784\u6210\u73af    - \u5bf9\u4e8e\u5305\u542bn\u4e2a\u9876\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe\u6700\u591a\u5305\u542b \\(n^{n-2}\\) \u9897\u751f\u6210\u6811\u3002</p> </li> <li> <p>minimum spanning tree \u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09</p> </li> </ol> <p>\u6240\u8c13\u4e00\u4e2a \u5e26\u6743\u56fe \u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u539f\u56fe\u4e2d\u8fb9\u7684\u6743\u503c\u6700\u5c0f\u7684\u751f\u6210\u6811 \uff0c\u6240\u8c13\u6700\u5c0f\u662f\u6307\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u5176\u5b83\u751f\u6210\u6811\u7684\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u3002</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#862-prim","title":"8.6.2 Prim (\u666e\u62c9\u59c6)\u7b97\u6cd5","text":"<p>Prim\u7b97\u6cd5\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u521d\u59cb\u65f6\u4ece\u56fe\u4e2d\u4efb\u53d6\u4e00\u4e2a\u9876\u70b9\uff0c\u5982\u679c\u9876\u70b9\u52a0\u5165\u6811T\uff0c\u6b64\u65f6\u6811\u4e2d\u53ea\u542b\u6709\u4e00\u4e2a\u9876\u70b9\uff0c\u4e4b\u540e\u9009\u62e9\u4e00\u4e2a\u4e0e\u5f53\u524dT\u4e2d\u9876\u70b9\u96c6\u5408\u8ddd\u79bb\u6700\u8fd1\u7684\u9876\u70b9\uff0c\u5e76\u5c06\u8be5\u9876\u70b9\u548c\u76f8\u5e94\u7684\u8fb9\u52a0\u5165T\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540eT\u7684\u9876\u70b9\u6570\u548c\u8fb9\u6570\u52a01\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u76f4\u5230\u56fe\u4e2d\u6240\u6709\u7684\u9876\u70b9\u52a0\u5165\u5230T\uff0c\u5f97\u5230\u7684T\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002</p> <p>\u901a\u4fd7\u70b9\u8bf4\u5c31\u662f\uff1a\u4ece\u4e00\u4e2a\u9876\u70b9\u51fa\u53d1\uff0c\u5728\u4fdd\u8bc1\u4e0d\u5f62\u6210\u56de\u8def\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u627e\u5230\u5e76\u6dfb\u52a0\u4e00\u6761\u6700\u77ed\u7684\u8fb9\uff0c\u5c31\u628a\u5f53\u524d\u5f62\u6210\u7684\u8fde\u901a\u5206\u91cf\u5f53\u505a\u4e00\u4e2a\u6574\u4f53\u6216\u8005\u4e00\u4e2a\u70b9\u770b\u5f85\uff0c\u7136\u540e\u91cd\u590d\u201c\u627e\u6700\u77ed\u7684\u8fb9\u5e76\u6dfb\u52a0\u201d\u7684\u64cd\u4f5c\u3002</p> <p> $$ Prim \u7b97\u6cd5\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a\\ \u5047\u8bbeG = {V\uff0cE},\u662f\u8fde\u901a\u56fe\uff0c\u5176\u6700\u5c0f\u751f\u6210\u6811T = {U\uff0cE_T},E_T\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8fb9\u7684\u96c6\u5408\u3002\\ 1. \u521d\u59cb\u5316\uff1a\u5411\u7a7a\u6811T = (U\uff0cE_T)\u6dfb\u52a0G\u4e2d\u4efb\u610f\u9876\u70b9v_0,\u4f7f\u5f97U = {v_0},E_T = NULL\\ 2. \u5faa\u73af\u91cd\u590d\u4e0b\u5217\u64cd\u4f5c\u81f3U = V\uff0c\u4ece\u56fe\u4e2d\u9009\u62e9{(u,v)|u \\in U, v \\in V-U}\u4e2d\u5177\u6709\u6700\u5c0f\u6743\u503c\u7684\u8fb9(u,v)\\ \u52a0\u5165\u5230\u6811T\uff0cU = U \\cup {v}, E_T = E_T \\cup {(u,v)} $$</p> <p>\u5982\u679c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u8868\u793a\u56fe\uff0cPrim \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O\uff08V^2\uff09\\)\uff0c\u5176\u4e2d V \u4e3a\u9876\u70b9\u6570\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#863-kruskal","title":"8.6.3 Kruskal \uff08\u514b\u9c81\u65af\u5361\u5c14\uff09\u7b97\u6cd5","text":"<p><code>\u4e0ePrim\u7b97\u6cd5\u4ece\u9876\u70b9\u5f00\u59cb\u6269\u5c55\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u540c\uff0cKruskal\u7b97\u6cd5\u662f\u4e00\u79cd\u6309\u7167\u6743\u503c\u7684\u9012\u589e\u6b21\u5e8f\u9009\u62e9\u5408\u9002\u7684\u8fb9\u6765\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u65b9\u6cd5</code></p> <p>Kruskal\u7b97\u6cd5\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u521d\u59cb\u65f6\u53ea\u6709n\u4e2a\u9876\u70b9\u800c\u65e0\u8fb9\u7684\u975e\u8fde\u901a\u56feT = V\uff0c\u6bcf\u4e2a\u9876\u70b9\u81ea\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u6309\u7167\u8fb9\u7684\u6743\u503c\u7531\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u4e0d\u65ad\u5730\u9009\u53d6\u5f53\u524d\u672a\u88ab\u9009\u53d6\u4e14\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u82e5\u6539\u53d8\u4f9d\u9644\u7684\u9876\u70b9\u843d\u5728T\u4e2d\u4e0d\u540c\u7684\u8fde\u901a\u5206\u91cf\u4e0a\uff0c\u5219\u5c06\u6b64\u8fb9\u52a0\u5165T\uff0c\u5426\u5219\u820d\u5f03\u6b64\u8fb9\u9009\u62e9\u4e0b\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u81f3T\u4e2d\u6240\u6709\u7684\u9876\u70b9\u90fd\u8fde\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e0a\u3002</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#87-network-flow-problem","title":"8.7 Network Flow Problem","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/#871","title":"8.7.1 \u6700\u5927\u6d41\uff0c\u6700\u5c0f\u5272\u95ee\u9898","text":"<p>\u6700\u5927\u6d41\u4e3a89</p> <p></p> <p>\u6700\u5927\u6d4123</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/","title":"\u4e03.Union and Find \u5e76\u67e5\u96c6","text":"<p>\u5e76\u67e5\u96c6\u7684\u57fa\u672c\u6982\u5ff5\uff1a</p> <ol> <li>\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u5f62\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u7684\u5408\u5e76\u53ca\u67e5\u8be2\u95ee\u9898\uff08\u6240\u8c13\u7684\u5e76\u548c\u67e5\uff09</li> <li>\u5e76\u67e5\u96c6\u4e3b\u8981\u7531\u4e00\u4e2a\u6574\u578b\u6570\u7ec4root[ ], \u4e24\u4e2a\u51fd\u6570find\uff08\uff09\u548cunion\uff08\uff09\u6784\u6210    - root[ ]\u7528\u4e8e\u77e5\u9053\u6bcf\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\uff0c\u524d\u9a71\u8282\u70b9    - find\uff08x\uff09\u7528\u4e8e\u67e5\u627e\u6307\u5b9a\u7ed3\u70b9x\u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408    - union\uff08x\uff0cy\uff09\u7528\u4e8e\u5408\u5e76\u7ed3\u70b9</li> </ol>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#71-relation","title":"7.1 Relation","text":"<p>Relation is symmetric, If \\((a, b) \u2208 R\\), then \\((b, a) \u2208 R\\).</p> <p>Relation is transitive, If \\((a, b) \u2208 R\\) &amp; \\((b, c) \u2208 R\\), then \\((a, c) \u2208 R\\).</p> <p>Relflexive Relation is relflexive, If \\((a, a) \u2208 R\\). </p> <p>Consistent Relation is symmetric and relflexive.</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#72-implement","title":"7.2 Implement","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#721-initialize","title":"7.2.1 Initialize","text":"<pre><code>Algorithm: Initialize\n{   /* step 1: read the relations in */\n    Initialize N disjoint sets;\n    while ( read in a ~ b ) {\n        if ( ! (Find(a) == Find(b)) ) // Find\u7528\u4e8e\u627e\u81ea\u5df1\u7684\u6839\u7ed3\u70b9\n    Union the two sets;\n    } /* end-while */\n    /* step 2: decide if a ~ b */\n    while ( read in a and b ) \n        if ( Find(a) == Find(b) )   output( true );// \u5982\u679c\u4e24\u4e2a\u7684\u6839\u76f8\u540c\uff0c\u5219\u8f93\u51faTrue\n        else   output( false );\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#722-unioni-j","title":"7.2.2 Union(i, j)","text":"<p>\u6c42\u5e76\u8fd0\u7b97\uff0c\u5c06\u542b\u6709 a \u548c b \u7684\u4e24\u4e2a\u7b49\u4ef7\u7c7b\u5408\u5e76\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7c7b</p> <p>\u60f3\u6cd5\uff1amake \\(S_i\\) a subtree of \\(S_j\\),. That is ,we can set the parent pointer of one of the roots to the other root.</p> <p>\u5c06\u4e00\u4e2a\u6839\u7ed3\u70b9\u8fde\u63a5\u5230\u53e6\u4e00\u68f5\u6811\u7684\u6839\u7ed3\u70b9\u4e0a\uff0c\u5f80\u5f80\u540e\u8005\u8fde\u63a5\u5230\u524d\u8005\u3002</p> <p></p> <p><code>Array Data Stucture Implementation</code></p> <ul> <li>S[element] = the parent of element</li> <li>S[root] = - 1</li> <li>set name  = root index</li> </ul> <p></p> <p></p> <pre><code>void SetUnion(DisjSet S, SetType Rt1, SetType Rt2)\n{\n    S[Rt2] = Rt1;\n    // \u76f8\u5f53\u4e8e\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u7ed3\u70b9\uff0c\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u7ed3\u70b9\u4e0a\u53bb\n}\n// \u5177\u4f53\u6837\u4f8b\nvoid Union(int S[], int x1, int x2)\n{\n    S[x2] = x1;\n}\n</code></pre> <pre><code>// Union-by-Size,Always change the smaller tree\n\n// S [ Root ] = \u2013 size;  /* initialized to be \u20131 */\n// \u6309\u7167\u96c6\u5408\u7684\u5927\u5c0f\u8fdb\u884cUnion\nvoid Union_by_size(int x1, int x2\uff0c int S[])\n{\n    int root1 = Find(x1);\n    int root2 = FInd(x2);\n    // \u9996\u5148\u5f97\u5224\u65ad\u662f\u5426\u9700\u8981Union\n    if(root1 == root2)\n    {\n        return;\n    }\n    else\n    {\n        //root1 is bigger than root2,so we Union root2 to root1\n        if(S[root1] &lt;= S[root2])\n        {\n            S[root2] = root1; //\u5c06\u7b2c\u4e8c\u4e2a\u96c6\u5408\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u96c6\u5408\n            S[root1] += S[root2]; // S[root]\u8868\u793a\u7684\u662f\u7ed3\u5408\u7684\u5927\u5c0f\n        }\n        else // root2 is bigger than root1\n        {\n            S[root1] = root2;\n            S[root2] += S[root1];\n        }\n    }\n}\nvoid Union_by_height(int x1, int x2, int S[])\n{\n    int root1 = Find(x1);\n    int root2 = FInd(x2);\n    // \u9996\u5148\u5f97\u5224\u65ad\u662f\u5426\u9700\u8981Union\n    if(root1 == root2)\n    {\n        return;\n    }\n    else\n    {\n        // \u96c6\u54081\u7684\u9ad8\u5ea6\u66f4\u5927\uff0c\u96c6\u5408\u4e8c\u63a5\u52301\u8eab\u4e0a\n        if(rank[root1] &gt; rank[root2])\n        {\n            pre[root2] = root1;\n        }\n        else if(rank[root1] &lt; rank[root2])\n        {\n            pre[root1] = root2;\n            // \u5728\u9ad8\u5ea6\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u77ed\u7684\u96c6\u5408\u63a5\u5230\u957f\u7684\u96c6\u5408\uff0c\u96c6\u5408\u7684\u957f\u5ea6\u4ecd\u7136\u662f\u539f\u5148\u957f\u7684\u96c6\u5408\uff0c\u77ed\u7684\u96c6\u5408height+1 &lt;= \u957f\u7684\u96c6\u5408height\n        }\n        // \u5982\u679c\u4e24\u8005\u9ad8\u5ea6\u76f8\u7b49\uff0c\u5219\u9ed8\u8ba4\u96c6\u5408\u4e8c\u63a5\u5230\u96c6\u54081shen\n        else\n        {\n            pre[root2] = root1;\n            rank[root1]++;\n            //\u53ea\u6709\u4e24\u4e2a\u9ad8\u5ea6\u76f8\u7b49\u65f6\uff0cheigtht\u624d\u4f1a\u589e\u52a0\n        }\n    }\n}\n</code></pre> <p>In Union/Find algorithm, if Unions are done by size, the depth of any node must be no more than \\(N/2\\), but not (\\(O(logN).\\)\\)</p> <p>\u6bcf\u505a\u4e00\u6b21\u5f52\u5e76\uff0c\u90fd\u4f1a\u4f7f\u5c0f\u7684\u96c6\u5408\u6df1\u5ea6+1\uff0c\u4f46\u662f\u603b\u7684\u6df1\u5ea6\u8fd8\u662f\u770b\u5927\u7684\u96c6\u5408\u3002\u6240\u4ee5\u53ea\u6709\u6df1\u5ea6\u76f8\u540c\u7684\u5f52\u5e76\u624d\u80fd\u4f7f\u603b\u7684\u6df1\u5ea6+1.</p> <p><code>\u56e0\u6b64\u6df1\u5ea6\u6700\u5927\u4e3alog_2{N}+1\uff0c\u539f\u56e0\u5728\u4e8e\uff0c\u5c06\u96c6\u5408\u5747\u5206\u4e3a\u4e24\u7b49\u4efd\uff0c\u6bcf\u4e00\u4efd\u7684\u6df1\u5ea6\u5c31\u662flog_2{N},\u5f52\u5e76\u540e+1.</code></p> <p>Time complexity of N Union and M Find operations is now \\(O( N + M log_2 N ).\\)</p> <p>Union \u65f6\u95f4\u590d\u6742\u5ea6\u662fO\uff081\uff09\uff0c\u628a\u4e00\u4e2a\u96c6\u5408\u7684root\u53d8\u4e00\u4e0b\u5c31\u597d\u4e86</p> <p>Find\uff0c\u6d89\u53ca\u5230\u627eroot\u548c\u8def\u5f84\u538b\u7f29\uff0c\u6240\u4ee5\u9700\u8981logN</p> <p>Let T be a tree created by union-by-size with N nodes, then \\(height(T)&lt;=(log2N)+1;\\)</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#723-find","title":"7.2.3 Find()","text":"<p>\u8fd4\u56de\u7ed9\u5b9a\u5143\u7d20\u7684\u6240\u5728\u7684\u96c6\u5408\uff08\u7b49\u4ef7\u7c7b\uff09</p> <p></p> <pre><code>//Recursive Version\nint Find(int x)\n{\n    // \u5148\u5224\u65ad\u81ea\u5df1\u662f\u4e0d\u662froot\n    if(root[x] &lt; 0)\n    {\n        return x;\n    }\n    else // \u82e5\u4e0d\u662f\u5219\u5f00\u59cb\u5bfb\u627e\u5e76\u8def\u5f84\u538b\u7f29\n    {\n        return root[x] = Find(root[x]);\n        // \u76f8\u5f53\u4e8e\u5148\u8ba1\u7b97Find(root[x]),\u518d\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\n    }\n}\n// Iterative Version\nint Find(int x, int S[])\n{\n    int root, trail, lead;\n    for(root = x; S[root] &gt;= 0; root = S[root]);\n    // \u5148\u627e\u5230\u96c6\u5408S\u7684root\n    for(trail = x; trail != root; trail = lead)\n    {\n        lead = S[trail];\n        S[trail] = root;//\u76f8\u5f53\u4e8e\u591a\u5c42\u7ed3\u6784\uff0c\u5c06\u6bcf\u4e00\u5c42\u7684\u7236\u8282\u70b9\u90fd\u6539\u4e3a\u6700\u7ec8\u7684\u6839\u7ed3\u70b9root\n    }// \u518d\u627e\u4e00\u904d\uff0c\u627e\u7684\u65f6\u5019\u5c06\u6bcf\u4e00\u5c42\u8ddf\u7684\u6700\u7ec8\u8ddf\u90fd\u6539\u6389\n    return root;\n}\n</code></pre> <p>\u8def\u5f84\u538b\u7f29\u7684\u6548\u679c\u662f\uff0c\u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5b83\u7684\u7236\u8282\u70b9\u53d8\u6210\u6839\u3002</p> <p>\u8def\u5f84\u538b\u7f29\u4e0e\u6309\u5927\u5c0f\u6c42\u5e76\u5b8c\u5168\u517c\u5bb9\uff0c\u53ef\u4ee5\u540c\u65f6\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u4e0e\u6309\u9ad8\u5ea6\u6c42\u5e76\uff08\u6709\u65f6\u79f0\u4e3a\u79e9\uff09</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%881/","title":"\u4e09. \u6808","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%881/#31","title":"3.1 \u6808\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>1\u3001\u6808\u7684\u5b9a\u4e49</p> <p>\u6808\uff08Stack\uff09\uff1a\u662f\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u7684\u7ebf\u6027\u8868\u3002\u9996\u5148\u6808\u662f\u4e00\u79cd\u7ebf\u6027\u8868\uff0c\u4f46\u9650\u5b9a\u8fd9\u79cd\u7ebf\u6027\u8868\u53ea\u80fd\u5728\u67d0\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002</p> <p></p> <p>\u6808\u9876\uff08Top\uff09\uff1a\u7ebf\u6027\u8868\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u5220\u9664\u7684\u90a3\u4e00\u7aef\u3002</p> <p>\u6808\u5e95\uff08Bottom)\uff1a\u56fa\u5b9a\u7684\uff0c\u4e0d\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u7684\u53e6\u4e00\u7aef\u3002</p> <p>\u7a7a\u6808\uff1a\u4e0d\u542b\u4efb\u4f55\u5143\u7d20\u7684\u7a7a\u8868\u3002</p> <p>\u6808\u53c8\u79f0\u4e3a\u540e\u8fdb\u5148\u51fa\uff08Last In First Out\uff09\u7684\u7ebf\u6027\u8868\uff0c\u7b80\u79f0LIFO\u7ed3\u6784</p> <p>2\u3001\u6808\u7684\u5e38\u89c1\u57fa\u672c\u64cd\u4f5c</p> <ul> <li>InitStack(&amp;S)\uff1a\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u6808S\u3002</li> <li>StackEmpty(S)\uff1a\u5224\u65ad\u4e00\u4e2a\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u6808\u4e3a\u7a7a\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002</li> <li>Push(&amp;S, x)\uff1a\u8fdb\u6808\uff08\u6808\u7684\u63d2\u5165\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u6808\u9876\u3002</li> <li>Pop(&amp;S, &amp;x)\uff1a\u51fa\u6808\uff08\u6808\u7684\u5220\u9664\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de\u3002</li> <li>GetTop(S, &amp;x)\uff1a\u8bfb\u6808\u9876\u5143\u7d20\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u7528x\u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>DestroyStack(&amp;S)\uff1a\u6808\u9500\u6bc1\uff0c\u5e76\u91ca\u653eS\u5360\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\uff08\u201c&amp;\u201d\u8868\u793a\u5f15\u7528\u8c03\u7528\uff09\u3002</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%881/#32","title":"3.2 \u6808\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784","text":"<p>\u91c7\u7528\u987a\u5e8f\u5b58\u50a8\u7684\u6808\u79f0\u4e3a\u987a\u5e8f\u6808\uff0c\u4ed6\u5229\u7528\u4e00\u7ec4\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u5b58\u653e\u81ea\u6808\u5e95\u5230\u6808\u9876\u7684\u987a\u5e8f\u5143\u7d20\uff0c\u540c\u65f6\u9644\u8bbe\u4e00\u4e2a\u6307\u9488\uff08top)\u6307\u793a\u5f53\u524d\u6808\u9876\u7684\u4f4d\u7f6e\u3002</p> <p>\u82e5\u5b58\u50a8\u6808\u7684\u957f\u5ea6\u4e3aStackSize\uff0c\u5219\u6808\u9876\u4f4d\u7f6etop\u5fc5\u987b\u5c0f\u4e8eStackSize\u3002</p> <p><code>\u5f53\u6808\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\u65f6\uff0ctop\u7b49\u4e8e0\uff0c\u56e0\u6b64\u901a\u5e38\u628a\u7a7a\u6808\u7684\u5224\u65ad\u6761\u4ef6\u5b9a\u4f4d\u4e3a-1.</code></p> <pre><code>#define MAXSIZE 50  //\u5b9a\u4e49\u6808\u4e2d\u5143\u7d20\u7684\u6700\u5927\u4e2a\u6570\ntypedef int ElemType; // ElemType \u7684\u7c7b\u578b\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\uff0c\u6b64\u5904\u5047\u5b9a\u4e3aint\ntypedef struct{\n    ElemType data[MAXSIZE];\n    int top;                 //\u6808\u9876\u6307\u9488\n}Stack;\n\n//\u6216\u8005\nstruct point{\n    int Capacity;           // size of stack\n    int Top;                // the top pointer\n    // push ++, pop --, empty stack -1\n    ElemType *Array;        // array for stack elements\n}\n</code></pre> <p></p> <p>\u6808\u7684\u5e38\u89c1\u57fa\u672c\u64cd\u4f5c</p> <ul> <li>InitStack(&amp;S)\uff1a\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u6808S\u3002</li> <li>StackEmpty(S)\uff1a\u5224\u65ad\u4e00\u4e2a\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u6808\u4e3a\u7a7a\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002</li> <li>Push(&amp;S, x)\uff1a\u8fdb\u6808\uff08\u6808\u7684\u63d2\u5165\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u672a\u6ee1\uff0c\u5219\u5c06x\u52a0\u5165\u4f7f\u4e4b\u6210\u4e3a\u65b0\u6808\u9876\u3002</li> <li>Pop(&amp;S, &amp;x)\uff1a\u51fa\u6808\uff08\u6808\u7684\u5220\u9664\u64cd\u4f5c\uff09\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de\u3002</li> <li>GetTop(S, &amp;x)\uff1a\u8bfb\u6808\u9876\u5143\u7d20\uff0c\u82e5\u6808S\u975e\u7a7a\uff0c\u5219\u7528x\u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>DestroyStack(&amp;S)\uff1a\u6808\u9500\u6bc1\uff0c\u5e76\u91ca\u653eS\u5360\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\uff08\u201c&amp;\u201d\u8868\u793a\u5f15\u7528\u8c03\u7528\uff09\u3002</li> </ul> <p>\uff081\uff09\u521d\u59cb\u5316</p> <pre><code>void InitStack(Stack *S)\n{\n    S-&gt;top = -1; //\u521d\u59cb\u5316\u6808\u9876\u6307\u9488\n}\n</code></pre> <p>\uff082\uff09\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a</p> <pre><code>bool StackEmpty(Stack S)\n{\n    if(S.top == -1)\n    {\n        return True;\n    }\n    return False;\n}\n</code></pre> <p>(3)\u8fdb\u6808 push</p> <pre><code>void Push(Stack *S, ElemType x)\n{\n    //\u5148\u5224\u65ad\u6808\u662f\u5426\u4e3a\u6ee1\n    if(S-&gt;top == MAXSIZE - 1)\n    {\n        printf(\"The stack is full!\");\n        return;\n    }\n    S-&gt;top ++;\n    S-&gt;data[S-&gt;top] = x;\n}\n</code></pre> <p>(4)\u51fa\u6808 pop</p> <pre><code>void pop(Stack *S,ElemType *x)\n{\n    //\u5148\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\n    if(S-&gt;top == -1)\n    {\n        printf(\"The stack is empty!\");\n        return;\n    }\n    *x = S-&gt;data[S-&gt;top]; //\u5c06\u8981\u5220\u9664\u7684\u6808\u9876\u5143\u7d20\u8d4b\u503c\u7ed9x\n    S-&gt;top --; //\u6808\u9876\u6307\u9488\u51cf1\n}\n</code></pre> <p>\uff085\uff09\u8bfb\u53d6\u6808\u9876\u5143\u7d20</p> <pre><code>void Gettop(Stack *S, ElemType *x)\n{\n    if(S-&gt;top == -1)\n    {\n        printf(\"The stack is empty!\");\n        return;\n    }\n    *x = S-&gt;data[S-&gt;top];\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%881/#33","title":"3.3 \u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784","text":"<ol> <li>\u94fe\u6808</li> </ol> <p>\u91c7\u7528\u94fe\u5f0f\u5b58\u50a8\u7684\u6808\u79f0\u4e3a\u94fe\u6808\uff0c\u94fe\u6808\u7684\u4f18\u70b9\u662f\u4fbf\u4e8e\u591a\u4e2a\u6808\u5171\u4eab\u5b58\u50a8\u7a7a\u95f4\u548c\u63d0\u9ad8\u6548\u7387\uff0c\u4e14\u4e0d\u5b58\u5728\u6808\u6ee1\u4e0a\u6ea2\u7684\u60c5\u51b5\u3002</p> <p>\u901a\u5e38\u91c7\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff0c\u5e76\u89c4\u5b9a\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5728\u5355\u94fe\u8868\u7684\u8868\u5934\u8fdb\u884c\u3002</p> <p><code>\u8fd9\u91cc\u89c4\u5b9a\u94fe\u6808\u6ca1\u6709\u5934\u7ed3\u70b9\uff0cLhead \u6307\u5411\u6808\u9876\u5143\u7d20\u3002</code></p> <p>\u5bf9\u4e8e\u7a7a\u6808\u6765\u8bf4\uff0c\u94fe\u8868\u539f\u5b9a\u4e49\u662f\u5934\u6307\u9488\u6307\u5411\u7a7a\uff0c\u90a3\u4e48\u94fe\u6808\u7684\u7a7a\u5176\u5b9e\u5c31\u662ftop=NULL\u7684\u65f6\u5019\u3002</p> <p></p> <pre><code>typedef struct StackNode\n{\n    ElemType data;\n    struck StackNode *next;\n}StackNode,*LinkStackPrt;\n\ntypedef struct LinkStack\n{\n    StackNode *top;   //\u7ed3\u6784\u6307\u9488\uff0ctop\u5bf9\u5e94\u7684\u662f\u6808\u9876\u7ed3\u70b9\n    int count;      \n}LinkStack;\n</code></pre> <ol> <li>\u94fe\u6808\u7684\u57fa\u672c\u7b97\u6cd5</li> </ol> <p>\uff081\uff09 \u94fe\u6808\u7684\u8fdb\u6808 push</p> <p>\u5bf9\u4e8e\u94fe\u6808\u7684\u8fdb\u6808push\u64cd\u4f5c\uff0c\u5047\u8bbe\u5143\u7d20\u503c\u4e3ae\u7684\u65b0\u8282\u70b9\u662fs\uff0ctop\u4e3a\u6808\u9876\u6307\u9488\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <pre><code>void push(LinkStack *S, ElemType e)\n{\n    StackNode *p = (StackNode*)malloc(sizeof(StackNode))\n    //LinkStackPrt p = (LinkStackPrt)malloc(sizeof(StackNode));\n    p-&gt;data = e;\n    p-&gt;next = S-&gt;top;  //\u63d2\u5165\u7ed3\u70b9\n    S-&gt;top = p;        //\u5c06\u65b0\u7684\u7ed3\u70b9\u8d4b\u503c\u7ed9\u6808\u9876\u6307\u9488\n    S-&gt;count ++;       //\u6808\u4e2d\u5143\u7d20\u7684\u4e2a\u6570+1\n}\n</code></pre> <p>\uff082\uff09 \u94fe\u8868\u7684\u51fa\u6808 pop</p> <p>\u94fe\u6808\u7684\u51fa\u6808pop\u64cd\u4f5c\uff0c\u4e5f\u662f\u5f88\u7b80\u5355\u7684\u4e09\u53e5\u64cd\u4f5c\u3002\u5047\u8bbe\u53d8\u91cfp\u7528\u6765\u5b58\u50a8\u8981\u5220\u9664\u7684\u6808\u9876\u7ed3\u70b9\uff0c\u5c06\u6808\u9876\u6307\u9488\u4e0b\u79fb\u4ee5\u4e3a\uff0c\u6700\u540e\u91ca\u653ep\u5373\u53ef\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <pre><code>void pop(LinkStack *S, ElemType *e)\n{\n    StackNode *p;\n    if(S-&gt;count == 0)    //\u901a\u8fc7\u5224\u65adcount== 0\uff1f\n    {\n        printf(\"The stack is empty!\")\n    }\n    *e = S-&gt;top-&gt;data;      //pop\u8fd4\u56de\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u503c\n    p = S-&gt;top;          //\u5c06\u6808\u9876\u6307\u9488\u8d4b\u503c\u7ed9p\uff0c\u7528\u4e8e\u6700\u540e\u7684free\n    S-&gt;top = S-&gt;top-&gt;next; // \u6808\u9876\u6307\u9488\u4e0b\u79fb\u4e00\u4f4d\uff0c\u6307\u5411\u540e\u4e00\u4e2a\u7ed3\u70b9\n    free(p);\n    S-&gt;count--;\n}\n</code></pre> <p>\u94fe\u6808\u7684\u8fdb\u6808push\u548c\u51fa\u6808pop\u64cd\u4f5c\u90fd\u5f88\u7b80\u5355\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3aO(1)\u3002</p> <p>\u5bf9\u6bd4\u4e00\u4e0b\u987a\u5e8f\u6808\u4e0e\u94fe\u6808,\u5b83\u4eec\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u662f\u4e00\u6837\u7684,\u5747\u4e3aO(1)\u3002\u5bf9\u4e8e\u7a7a\u95f4\u6027\u80fd,\u987a\u5e8f\u6808\u9700\u8981\u4e8b\u5148\u786e\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u957f\u5ea6,\u53ef\u80fd\u4f1a\u5b58\u5728\u5185\u5b58\u7a7a\u95f4\u6d6a\u8d39\u7684\u95ee\u9898,\u4f46\u5b83\u7684\u4f18\u52bf\u662f\u5b58\u53d6\u65f6\u5b9a\u4f4d\u5f88\u65b9\u4fbf,\u800c\u94fe\u6808\u5219\u8981\u6c42\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u6307\u9488\u57df,\u8fd9\u540c\u65f6\u4e5f\u589e\u52a0\u4e86\u4e00\u4e9b\u5185\u5b58\u5f00\u9500,\u4f46\u5bf9\u4e8e\u6808\u7684\u957f\u5ea6\u65e0\u9650\u5236\u3002</p> <p>\u6240\u4ee5\u5b83\u4eec\u7684\u533a\u522b\u548c\u7ebf\u6027\u8868\u4e2d\u8ba8\u8bba\u7684\u4e00\u6837,\u5982\u679c\u6808\u7684\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u5143\u7d20\u53d8\u5316\u4e0d\u53ef\u9884\u6599,\u6709\u65f6\u5f88\u5c0f,\u6709\u65f6\u975e\u5e38\u5927,\u90a3\u4e48\u6700\u597d\u662f\u7528\u94fe\u6808,\u53cd\u4e4b,\u5982\u679c\u5b83\u7684\u53d8\u5316\u5728\u53ef\u63a7\u8303\u56f4\u5185,\u5efa\u8bae\u4f7f\u7528\u987a\u5e8f\u6808\u4f1a\u66f4\u597d\u4e00\u4e9b\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%881/#34","title":"3.4 \u6808\u7684\u5e94\u7528\u2014\u2014\u56db\u5219\u8fd0\u7b97\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<ol> <li>\u540e\u7f00\u8868\u8fbe\u5f0f\u8ba1\u7b97\u7ed3\u679c</li> </ol> <p>\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u7b26\u5728\u64cd\u4f5c\u6570\u540e\u9762\uff0c\u5728\u540e\u7f00\u8868\u8fbe\u5f0f\u4e2d\u5df2\u8003\u8651\u4e86\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7,\u6ca1\u6709\u62ec\u53f7,\u53ea\u6709\u64cd\u4f5c\u6570\u548c\u8fd0\u7b97\u7b26\u3002\u4f8b\u5982\u4e2d\u7f00\u8868\u8fbe\u5f0f\\(A + B \u2217 ( C \u2212 D ) \u2212 E / F A\\)\u6240\u5bf9\u5e94\u7684\u540e\u7f00\u8868\u8fbe\u5f0f\u4e3a$A B C D \u2212 \u2217 + E F / \u2212 $</p> <p>\u540e\u7f00\u8868\u8fbe\u5f0f\u8ba1\u7b97\u89c4\u5219\uff1a\u4ece\u5de6\u5230\u53f3\u904d\u5386\u8868\u8fbe\u5f0f\u7684\u6bcf\u4e2a\u6570\u5b57\u548c\u7b26\u53f7\uff0c\u9047\u5230\u662f\u6570\u5b57\u5c31\u8fdb\u6808\uff0c\u9047\u5230\u662f\u7b26\u53f7\uff0c\u5c31\u5c06\u5904\u4e8e\u6808\u9876\u4e24\u4e2a\u6570\u5b57\u51fa\u6808\uff0c\u8fdb\u9879\u8fd0\u7b97\uff0c\u8fd0\u7b97\u7ed3\u679c\u8fdb\u6808\uff0c\u4e00\u76f4\u5230\u6700\u7ec8\u83b7\u5f97\u7ed3\u679c\u3002</p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/","title":"\u4e94.\u6811","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#51","title":"5.1 \u6811\u7684\u5b9a\u4e49\u548c\u6027\u8d28","text":"<ol> <li>\u6811\u7684\u5b9a\u4e49\uff1a A tree is a colection of nodes.</li> </ol> <ul> <li>(1) a distinguished node r, called the root;</li> <li>(2) zero or more nonempty (sub)tree T1,\u2026Tk.</li> </ul> <p><code>\u6ce8\u610f\uff1a</code></p> <ol> <li> <p>Subtrees must not connect together. Therefore every node in the tree is the root of some subtree.</p> </li> <li> <p>There are N -1  edges in a tree with N nodes.</p> </li> <li> <p>Normally the root is drawn at the top.</p> </li> </ol> <ol> <li>\u5176\u4ed6\u5b9a\u4e49</li> </ol> <p></p> <ul> <li><code>degree of a node</code> : number of subtrees of the node. For example degree(A) = 3, degree(F) =  0.</li> <li><code>degree of a tree</code>: \\(= max_{node \\in tree}{degree(node)}\\).For example, degree of this tree = 3</li> <li><code>parent</code>: a node that has  subtrees</li> <li><code>children</code>: the roots of the subtrees of a parents</li> <li><code>siblings</code>: children of the same parent</li> <li><code>leaf</code> : a node with degree 0</li> <li><code>path from n1 to nk</code>: a <code>unique(\u552f\u4e00\u7684)</code>sequence of nodes \\(n_1, n_2, \\cdots n_k\\),such that \\(n_i\\) is the parent of  \\(n_{i+1}\\) </li> <li><code>length of path</code>: number of edges on the path</li> <li><code>depth of n_i</code>:length of the unique path from the root to \\(n_i\\) Depth(root) = 0.</li> <li><code>height of n_i</code>:length of the longest path from \\(n_i\\) to a leaf. Height(leaf) = 0, and height(D) = 2.</li> </ul> <p>\u6df1\u5ea6depth \u4ece root \u5f00\u59cb\u8ba1\u7b97\uff0c \u9ad8\u5ea6height \u4ece leaf \u5f00\u59cb\u8ba1\u7b97</p> <ul> <li><code>height(depth) of a tree:</code>height(root) = depth(deepest leaf).</li> <li><code>ancestors of a node:</code>all the nodes along the path from the node up to the root</li> <li><code>descendants of a node:</code> all the nodes in its subtrees.</li> </ul> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#52-implementation","title":"5.2 Implementation","text":"<p>\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 <code>FirstChild-NextSibling Representation</code></p> <p>\u5c06\u7ed3\u70b9\u7684\u5b69\u5b50\u653e\u5728\u5de6\u5b50\u6811</p> <p>\u5c06\u7ed3\u70b9\u7684\u5144\u5f1f\u653e\u5728\u53f3\u5b50\u6811</p> <p>\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u6811</p> <p>Note: The representation is not unique since the children in a tree can be of any order.</p> <pre><code>typedef struct TreeNode *PrtToNode;\nstruct TreeNode{\n    ElementType Element;\n    PrtToNode FirstChild;\n    PrtToNode NextSibling;\n}Tree;\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#53","title":"5.3 \u4e8c\u53c9\u6811","text":"<p>\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u4e0d\u80fd\u591a\u4e8e\u4e24\u4e2a</p> <p></p> \\[ \\begin{aligned} &amp;\u8bbe\u5177\u6709\u4e24\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u91cf\u4e3an2\uff0c\u4e00\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u91cf\u4e3an1\uff0cleaf\u7684\u6570\u91cf\u4e3an0\\\\ &amp; N(\u7ed3\u70b9\u603b\u6570) = n2 + n1 + n0\\\\ &amp; N-1(\u8fb9\u603b\u6570) = 2 * n2 + n1 \\\\ &amp;\u5f97\u5230n0 = n2 + 1\\\\ &amp;\u6b64\u59042015 = 2 * n2 + 16,\u663e\u7136\u4e0d\u5bf9 \\end{aligned} \\]"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#531","title":"5.3.1 \u8868\u8fbe\u5f0f\u6811","text":"<p>\u8868\u8fbe\u5f0f\u6811\u7684\u6811\u53f6\u662f\u64cd\u4f5c\u6570\uff0c\u6bd4\u5982\u5e38\u6570\u6216\u53d8\u91cf\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u4e3a\u64cd\u4f5c\u7b26\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u64cd\u4f5c\u7b26\u4e00\u822c\u662f\u4e8c\u5143\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u5982\u679c\u6709\u5355\u76ee\u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u8282\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002</p> <p></p> <p>\u6811\u53c8\u662f\u5982\u4f55\u5b58\u50a8\u7684\u5462\uff1f $$ (a+b) * (c(d+e)) = ab+cde+*\\ \u4e2d\u7f00\u8868\u8fbe\u5f0f\u548c\u540e\u7f00\u8868\u8fbe\u5f0f $$ </p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#532","title":"5.3.2 \u6811\u7684\u904d\u5386","text":"<ol> <li>\u524d\u5e8f\u904d\u5386</li> </ol> <pre><code>void preorder(tree_ptr tree)\n{\n    if(tree)\n    {\n        visit(tree);     //\u5148\u83b7\u53d6\u6839\u7ed3\u70b9root\n        for(each child C of tree) // \u4f9d\u6b21\u9012\u5f52\u5b50\u6811\n            preorder(C);\n    }\n}\n</code></pre> <ol> <li>\u540e\u5e8f\u904d\u5386</li> </ol> <pre><code>void postorder(tree_ptr tree)\n{\n    if(tree)\n    {\n        for(each child C of tree) //\u5148\u9012\u5f52\u5b50\u6811\n            postorder(C);\n        visit(tree);              //\u6700\u540e\u83b7\u53d6\u6839\u7ed3\u70b9\n    }\n}\n</code></pre> <ol> <li>\u5c42\u5e8f\u904d\u5386</li> </ol> <pre><code>void levelorder(tree_ptr tree)\n{\n    enqueue(tree);\n    while(queue is not empty)\n    {\n        visit(T = dequeue());\n        for(each child C of T)\n            enqueue(C);\n    }\n}\n</code></pre> <p><code>\u6309\u7167\u5c42\u6570\uff0c\u4f9d\u6b21\u8f93\u51fanode</code></p> <ol> <li>\u4e2d\u5e8f\u904d\u5386</li> </ol> <pre><code>// \u9012\u5f52\u7248\u672c\nvoid inorder(tree_ptr tree)\n{\n    if(tree)\n    {\n        inorder(tree-&gt;left);\n        visit(tree-&gt;element);\n        inorder(tree-&gt;right);\n    }\n}\n// \u904d\u5386\u7248\u672c(\u4e0d\u4fdd\u771f)\nvoid iter_inorder(tree_ptr tree)\n{\n    Stack S = CreateStack(MAX_SIZE);\n    for(;;)\n    {\n        for(;tree;tree = tree-&gt;left)\n        {\n            Push(tree,S);\n        }\n        tree = Top(S);\n        Pop(S);\n        if(!tree) break;\n        visit(tree-&gt;element);\n        for(;tree;tree = tree-&gt;left)\n        {\n            Push(tree,S);\n        }\n        tree = Top(S);\n        Pop(S);\n    }\n}\n</code></pre> <p></p> <p></p> <p>\u8f6c\u6362\u540e\uff0c T\u7684preorder = BT\u7684preorder(preorder\u4e0d\u53d8) </p> <p>T\u7684postorder = BT\u7684inorder</p> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#54","title":"5.4 \u7ebf\u7d22\u4e8c\u53c9\u6811","text":"<p>\u89c4\u5219\uff1a</p> <ul> <li>\u5982\u679c <code>Tree-&gt;Left</code> \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u7684\u6307\u9488\u4ee3\u66ff\u5b83</li> <li>\u5982\u679c <code>Tree-&gt;Right</code> \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u540e\u7ee7\u7684\u6307\u9488\u4ee3\u66ff\u5b83</li> <li>\u8fd9\u91cc\u6ca1\u6709\u7a7a\u95f2\u7684\u6307\u9488\uff0c\u56e0\u6b64\u4e00\u68f5\u7ebf\u7d22\u4e8c\u53c9\u6811\u9700\u8981\u6709\u4e00\u4e2a\u5de6\u513f\u5b50\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5934\u8282\u70b9\u3002</li> </ul> <p></p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u542bn\u4e2a\u7ed3\u70b9\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\uff0c\u5171\u6709n+1\u4e2anull\u7ed3\u70b9</p> \\[ \u5bf9\u4e8en\u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6539\u53d8\u5b83\u7684\u5f62\u72b6\uff0c\u4f7f\u5f97leaf\u7ed3\u70b9\u96c6\u4e2d\u5728\u6700\u540e\u4e00\u884c\u3002\\\\ \u4e0d\u59a8\u8bbe\uff0c\u8be5\u6811\u5b8c\u5168\u5e73\u94fak\u884c\uff0c\u4e5f\u5c31\u662f2^k -1 &lt;= n &lt; 2^{k+1} -1\\\\ \u6b64\u65f6\u6700\u540e\u4e00\u884c\u4e00\u5171n-2^k+1\u4e2a\u7ed3\u70b9\uff0c\\\\ \u6b64\u65f6\u6700\u540e\u4e00\u884c\u4ea7\u751f\u7684NULL\u7ed3\u70b9\u4e00\u5171\u67092*(n-2^k+1) = 2n-2^{k+1}+2\\\\ \u6700\u7ec8\u7684\u8ba1\u7b97\u7406\u89e3\u4e3a\uff0c\u7b2ck\u884c\u539f\u672c\u5e94\u8be5\u6709\u7684NULL\u7ed3\u70b9\u6570 - \u7b2ck+1\u884c\u7684\u7ed3\u70b9\u6570 + \u7b2ck+1\u884c\u4ea7\u751f\u7684NULL\u7ed3\u70b9\u6570\\\\ \u6700\u7ec8\uff0c2*(2^{k-1})+n-2^k+1 = n+1 \\] <p>Among the following threaded binary trees (the threads are represented by dotted curves), which one is the postorder threaded tree?</p> <p></p> <p><code>\u8c41\u7136\u5f00\u6717\u7248\uff1a\u7ebf\u7d22\u4e8c\u53c9\u6811\u4e5f\u6709\u5f88\u591a\u54c1\u79cd\uff0c\u6bd4\u5982inorder threaded tree\uff0cpostorder threaded tree\uff0c\u6839\u636e\u4e0d\u540c\u7684\u904d\u5386\u987a\u5e8f\uff0c\u4fee\u6539\u5b9a\u4e49\u3002</code></p> <p><code>\u6bd4\u5982\uff0c\u6b64\u5904\u4e3a\u540e\u5e8f\u7684\u7ebf\u7d22\u6811\uff0c\u90a3\u4e48\u5b9a\u4e49\u4e3a\uff0c\u5982\u679c\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c31\u7528\u865a\u7ebf\u6307\u5411\u81ea\u5df1postorder\u524d\u9762\u7684\u7ed3\u70b9\uff0c\u5982\u679c\u524d\u9762\u6ca1\u6709\uff0c\u5c31\u662fNULL\u3002\u5982\u679c\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c31\u7528\u865a\u7ebf\u6307\u5411\u81ea\u5df1postorder\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u662fNULL</code></p> <p>\u4e0b\u9762\u8fd9\u4e2a\u6811\uff0c\u540e\u5e8f\u6392\u5e8f\u662f\uff1adbca \u524d\u9a71\u5c31\u662f\u524d\u9762\u7684\uff0c\u6bd4\u5982b\u7684\u524d\u9a71\u662fd, d\u7684\u524d\u9a71\u662fNull \u540e\u9a71\u5c31\u662f\u540e\u9762\u7684\uff0c\u6bd4\u5982d\u7684\u540e\u9a71\u662fb\uff0ca\u7684\u540e\u9a71\u662fNull d\u6709\u4e24\u4e2a\u6307\u9488\u6ca1\u6709\u7528\uff0c\u5de6\u8fb9\u6307\u5411\u524d\u9a71Null\uff0c\u53f3\u8fb9\u6307\u5411b\uff08\u7136\u540e\u5c31\u9009\u51fa\u6765B\u4e86\uff09 b\u7684\u53f3\u8282\u70b9\u6709\u7528\u7684\uff08\u5df2\u7ecf\u6307\u5411d\u4e86\uff09\uff0c\u5de6\u8282\u70b9\u6307\u5411\u5176\u524d\u9a71\uff0c\u4e5f\u5c31\u662fd c\u524d\u9a71\u662fb\uff0c\u540e\u9a71\u662fa\uff0c\u6240\u4ee5\u5de6\u6307\u5411b\uff0c\u53f3\u6307\u5411a a\u6ca1\u6709\u6307\u9488\u53ef\u7528\u4e86\uff08\u5df2\u7ecf\u5de6\u4e3ab\u53f3\u4e3ac\uff09\u4e86 \u6240\u4ee5\u9009B\u3002</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#55-complete-binary-tree","title":"5.5 complete binary tree","text":"<p>skewed binary tree \u659c\u4e8c\u53c9\u6811</p> <p></p> <p>\u5bf9\u4e8ecomplete binary tree\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0cleaf\u96c6\u4e2d\u5728\u5012\u6570\u4e24\u884c\uff0c\u4e14leaf\u7684\u6392\u5217\u9700\u8981\u4f18\u5148\u6ee1\u8db3\u5de6\u5b50\u6811\uff0c\u4e5f\u5c31\u662f\u5f97\u5148\u94fa\u6ee1\u5de6\u5b50\u6811\uff0c\u518d\u94fa\u53f3\u5b50\u6811\u3002\u6700\u540e\u4e00\u884cleaf\u7684\u6392\u5217\u65b9\u5f0f\u4e3a\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u6392\u5217\u3002</p> <p><code>For any nonempty binary tree, $n_0 = n_2+1$where $n_0$ is thr number of leaf nodes and $n_2$ the number of nodes of degree 2.</code></p> <p>\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684\u6027\u8d28\uff1a\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u6570\u91cf\u7b49\u4e8edegree\u4e3a2\u7684\u7ed3\u70b9\u6570\u91cf\uff08\u6709\u4e24\u4e2a\u5b69\u5b50\uff09+1</p> <p> $$ \\begin{aligned} &amp;\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a\\ &amp;\u4e24\u79cd\u65b9\u5f0f\u7406\u89e3\u6811\u7684\u7ed3\u70b9\u6570\u91cf\uff1a\\ &amp;\u7b2c\u4e00\u79cd\u4ece\u7ed3\u70b9\u7684\u7c7b\u578b\u548c\u6570\u91cf\u5165\u624b\uff0c\u9996\u5148\u5728\u4e00\u68f5\u4e8c\u53c9\u6811\u4e2d\uff0c\u7ed3\u70b9\u7684\u79cd\u7c7b\u53ea\u6709leaf\uff0cnodes of  degree1\uff0c \\ &amp;nodes  of  degree2\uff0c\u4e0d\u59a8\u8bbe\u5b83\u4eec\u7684\u6570\u91cf\u5206\u522b\u4e3an_0,n_1,n_2.\u4e8e\u662f\u603b\u6570n = n_0+n_1+n_2\\ &amp;\u7b2c\u4e8c\u79cd\u4ece\u8fb9\u7684\u6570\u91cf\u548c\u8fb9\u662f\u600e\u4e48\u4ea7\u751f\u5165\u624b\uff0c\u9996\u5148e = n - 1\uff0c\u8fb9\u7684\u6570\u91cf\u7b49\u4e8e\u7ed3\u70b9\u6570\u51cf\u4e00\\ &amp;leaf \u4ea7\u751f\u7684\u8fb9\u7684\u6570\u91cf\u4e3a0\uff0cdegree \u4e3a1 \u7684nodes\u4ea7\u751f\u7684\u8fb9\u6570\u91cf\u4e3an_1, \\ &amp;degree \u4e3a2\u7684nodes\u4ea7\u751f\u7684\u8fb9\u7684\u6570\u91cf\u4e3a2n_2\uff0c\u4e8e\u662f\u8fb9\u7684\u603b\u6570\u4e3ae = n_1 + 2n_2\\ &amp; \u8054\u7acb\u65b9\u7a0b\u7ec4\uff1a n_1 + 2n_2 = e = n-1 = n_0 + n_1 + n_2 - 1,\u5f97\u5230n_0 = n_2 + 1 \\end{aligned} $$ </p> <p>If a general tree T is converted into a binary tree BT, then which of the following BT traversals gives the same sequence as that of the post-order traversal of T?</p> <p>\u5c06\u4e00\u68f5\u666e\u901a\u6811\u8f6c\u5316\u4e3a\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u7684\u4ec0\u4e48\u904d\u5386\u65b9\u5f0f\u76f8\u5f53\u4e8e\u539f\u6570\u7684\u540e\u5e8f\u904d\u5386</p> <p>A. Pre-order traversal</p> <p>B. In-order traversal</p> <p>C. Post-order traversal</p> <p>D. Level-order traversal</p> <p>\u8f6c\u4e3a\u7684\u65b9\u5f0f\u4e3a\uff1a\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\uff0c\u6b64\u5904\u7684\u5144\u5f1f\u662f\u7236\u4eb2\u7684\u5144\u5f1f\uff0c\u5343\u4e07\u6ce8\u610f</p> <p> </p> <p>\u4ece\u5b9e\u9645\u4f8b\u5b50\u51fa\u53d1\uff0c\u6613\u5f97inorder</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#56-binary-search-tree","title":"5.6 Binary Search Tree","text":"<p>\u5b9a\u4e49\uff1a A binary search tree is a binary tree. It may be empty. If it is not empty, it satisfies the following properties:</p> <p>(1) Every node has a key which is an integer, and the keys are    distinct.</p> <p>(2) The keys in a nonempty left subtree must be smaller than the key in the root of the subtree.</p> <ul> <li>\u82e5\u5b83\u7684\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u3002</li> </ul> <p>(3) The keys in a nonempty right subtree must be larger than the key in the root of the subtree.</p> <ul> <li>\u82e5\u5b83\u7684\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7684\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u3002</li> </ul> <p>(4) The left and right subtrees are also binary search trees.</p> <p><code>\u53f3\u8fb9\u7684\u4efb\u610f\u7ed3\u70b9\u5927\u4e8e\u5de6\u8fb9\u7684\u7ed3\u70b9</code></p> <p></p> <p></p> <p>\u8fd9\u4e2a\u4e5f\u662f\u4e8c\u5206\u67e5\u627e\u6811\uff0c\u5de6\u5b50\u6811\u5c0f\u4e8eroot\u540c\u6837\u9002\u7528\u4e8e\u53f3\u8fb9\u7684\u6811</p> <p>SearchTree MakeEmpty( SearchTree T ); </p> <p>Position Find( ElementType X, SearchTree T ); </p> <p>Position FindMin( SearchTree T ); </p> <p>Position FindMax( SearchTree T ); </p> <p>SearchTree Insert( ElementType X, SearchTree T ); </p> <p>SearchTree Delete( ElementType X, SearchTree T ); </p> <p>ElementType Retrieve(Position P ); </p> <p></p> <ol> <li> <p>\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(depth),\u4e5f\u5c31\u662fO\uff08logN\uff09</p> </li> <li> <p>\u6700\u5927\u503c\u4e0d\u4e00\u5b9a\u5728\u53f6\u7ed3\u70b9\u4e0a\uff0c\u56e0\u4e3a\u5b83\u7684\u5de6\u513f\u5b50\u53ef\u80fd\u5b58\u5728\uff0c\u4f46\u662f\u53f3\u513f\u5b50\u4e0d\u5b58\u5728\uff0c\u4f9d\u7136\u662f\u6700\u5927\u503c</p> </li> <li> <p>\u4f46\u662f\u6700\u5c0f\u503c\u4e00\u5b9a\u5728\u53f6\u7ed3\u70b9\u4e0a\uff0c\u56e0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5de6\u513f\u5b50\u4e0d\u5b58\u5728\uff0c\u5219\u8be5\u8282\u70b9\u4e3a\u6700\u5c0f\u503c\uff0c\u5de6\u513f\u5b50\u5b58\u5728\uff0c\u5219\u5de6\u513f\u5b50\u662f\u6700\u5c0f\u503c</p> </li> <li> <p><code>\u770b\u524d\u63d0\u6761\u4ef6\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5de6\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u4e00\u5b9a\u6bd4\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u591a</code>\uff0c\u6240\u4ee5\u4e2d\u4f4d\u6570\u4e00\u5b9a\u5728\u6839\u7ed3\u70b9\uff08\u5de6\u53f3\u5b57\u6811\u7ed3\u70b9\u6570\u76f8\u540c\uff09\u6216\u8005\u5de6\u5b50\u6811</p> </li> </ol> <p>3.\u5728\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u67e5\u627e63\uff0c\u5e8f\u521739\u3001101\u300125\u300180\u300170\u300159\u300163\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u67e5\u627e\u65f6\u7684\u7ed3\u70b9\u503c\u6bd4\u8f83\u5e8f\u5217\u3002</p> <p>F \u00d7</p> <p>\u4e00\u4e2a\u6bd4\u8f83\u5b9e\u7528\u7684\u5224\u65ad\u65b9\u6cd5\u662f\u5982\u679c\u5e8f\u5217\u524d\u4e00\u4e2a\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48\u66f4\u65b0\u533a\u95f4\u7684\u6700\u5927\u503c\u4e3a\u5f53\u524d\u5143\u7d20\uff1b\u5982\u679c\u5e8f\u5217\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5927\uff0c\u90a3\u4e48\u66f4\u65b0\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4e3a\u5f53\u524d\u5143\u7d20\u3002\u4e4b\u540e\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5fc5\u987b\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u3002\u6839\u636e\u8fd9\u4e2a\u89c4\u5219\uff0c\u5f53\u8fd0\u884c\u523070\u7684\u65f6\u5019\u533a\u95f4\u5df2\u7ecf\u662f(70,80)\uff0c\u800c\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f59\u3002</p> <p>\\((39, +\\infty),(39,101)\\)\u6b64\u65f6\u51fa\u73b025\uff0c\u4e0d\u5728\u533a\u95f4\u8303\u56f4\u5185\uff0c\u51fa\u73b0\u9519\u8bef</p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#560","title":"5.6.0 \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49","text":"<pre><code>//\u5b9a\u4e49\u4e8c\u5206\u641c\u7d22\u6811\u7ed3\u6784\u4f53\ntypedef struct TreeNode* Tree; // tree \u4ee3\u8868struct TreeNode*\nstruct TreeNode{\n    int data;\n    Tree left;\n    Tree right;\n}TreeNode;\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#561-insert","title":"5.6.1 Insert \u6dfb\u52a0\u7ed3\u70b9","text":"<pre><code>Tree Insert(Tree T, int value)\n{\n    if(T == NULL)\n    {\n        T = (Tree)malloc(sizeof(TreeNode));\n        T-&gt;data = value;\n        T-&gt;left = NULL;\n        T-&gt;right = NULL;\n        return T;\n    }\n    else\n    {\n        if(value &lt; T-&gt;data)\n        {\n            T-&gt;left = Insert(T-&gt;left, value);\n        }\n        else if(value &gt; T-&gt;data)\n        {\n            T-&gt;right = Insert(T-&gt;right, value);\n        }\n        return T;\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#562-findmin-findmax","title":"5.6.2 Findmin \u548c Findmax","text":"<pre><code>int Findmin(Tree T)\n{\n    if(T == NULL)\n    {\n        return -1;\n    }\n    else if(T-&gt;left == NULL)\n    {\n        return T-&gt;data;\n    }\n    else\n    {\n        return Findmin(T-&gt;left);\n    }\n}\nTree Findmin1(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else if(T-&gt;left == NULL)\n    {\n        return T;\n    }\n    else\n    {\n        return Findmin1(T-&gt;left);\n    }\n}\nint Iter_Findmin(Tree T)\n{\n    if(T != NULL)\n    {\n        int min = T-&gt;data;\n        while(T-&gt;left != NULL)\n        {\n            T = T-&gt;left;\n            min = T-&gt;data;\n        }\n        return min;\n    }\n    return -1;\n}\n// Findmax \u627e\u5230\u6811\u7684\u6700\u5927\u503c\nint Findmax(Tree T)\n{\n    if(T == NULL)\n    {\n        return -1;\n    }\n    else if(T-&gt;right == NULL)\n    {\n        return T-&gt;data;\n    }\n    else\n    {\n        return Findmax(T-&gt;right);\n    }\n}\nTree Findmax1(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else if(T-&gt;right == NULL)\n    {\n        return T;\n    }\n    else\n    {\n        return Findmax1(T-&gt;right);\n    }\n}\nint Iter_Findmax(Tree T)\n{\n    if(T != NULL)\n    {\n        int max = T-&gt;data;\n        while(T-&gt;right != NULL)\n        {\n            T = T-&gt;right;\n            max = T-&gt;data;\n        }\n        return max;\n    }\n    return -1;\n}\n// \u5220\u9664\u6700\u5c0f\u503c\u7684\u7ed3\u70b9\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#563","title":"5.6.3 \u904d\u5386","text":"<pre><code>void Preorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        printf(\"%d \", T-&gt;data);\n        Preorder(T-&gt;left);\n        Preorder(T-&gt;right);\n    }\n}\n// \u4e2d\u5e8f\u904d\u5386\uff0c left --- root --- right\nvoid Inorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        Inorder(T-&gt;left);\n        printf(\"%d \", T-&gt;data);\n        Inorder(T-&gt;right);\n    }\n}\n// \u540e\u5e8f\u904d\u5386\uff0c left --- right --- root\nvoid Postorder(Tree T)\n{\n    if(T == NULL)\n    {\n        return;\n    }\n    else\n    {\n        Postorder(T-&gt;left);\n        Postorder(T-&gt;right);\n        printf(\"%d \", T-&gt;data);\n    }\n}\n// \u5c42\u5e8f\u904d\u5386\nvoid Levelorder(Tree T)\n{\n    if(T)\n    {\n        Tree queue[100];\n        int front = 0, rear = 0;\n        queue[rear++] = T;\n        while(front != rear)\n        {\n            Tree temp = queue[front++];\n            printf(\"%d \", temp-&gt;data);\n            if(temp-&gt;left)\n            {\n                queue[rear++] = temp-&gt;left;\n            }\n            if(temp-&gt;right)\n            {\n                queue[rear++] = temp-&gt;right;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/#564-delete","title":"5.6.4 Delete","text":"<p>Delete a leaf node : Reset its parent link to NULL.</p> <p>Delete a degree 1 node : Replace the node by its single child.</p> <p>Delete a degree 2 node :</p> <ul> <li>Replace the node by the largest one in its left subtree or the smallest one in its right subtree.</li> </ul> <p>\u7528\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6216\u8005\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\u8fdb\u884c\u66ff\u6362</p> <ul> <li>Delete the replacing node from the subtree.</li> </ul> <p>\u518d\u5c06\u66ff\u6362\u7528\u7684\u6570\u8fdb\u884c\u5220\u9664</p> <pre><code>Tree DeleteMin(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;left == NULL)\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            T-&gt;left = DeleteMin(T-&gt;left);\n            return T;\n        }\n    }\n}\nTree DeleteMin_Iter(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;left == NULL)\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            Tree parent = T;\n            Tree child = T-&gt;left;\n            while(child-&gt;left != NULL)\n            {\n                parent = child;\n                child = child-&gt;left;\n            }\n            // now child is the min node\n            // \u5982\u679cchild-&gt;right \u5b58\u5728\uff0c\u90a3\u4e48\u7528child-&gt;right\u9876\u66ffchild\u7684\u4f4d\u7f6e\n            parent-&gt;left = child-&gt;right;\n            free(child);\n            return T;\n        }\n    }\n}\n// \u5220\u9664\u6700\u5927\u503c\u7684\u7ed3\u70b9\nTree DeleteMax(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;right == NULL)\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            T-&gt;right = DeleteMax(T-&gt;right);\n            return T;\n        }\n    }\n}\nTree DeleteMax_Iter(Tree T)\n{\n    if(T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if(T-&gt;right == NULL)\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else\n        {\n            Tree parent = T;\n            Tree child = T-&gt;right;\n            while(child-&gt;right != NULL)\n            {\n                parent = child;\n                child = child-&gt;right;\n            }\n            parent-&gt;right = child-&gt;left;\n            free(child);\n            return T;\n\n        }\n    }\n}\n</code></pre> <pre><code>// \u5220\u9664\u6307\u5b9a\u503c\u7684\u7ed3\u70b9\n// Delete a leaf node :  Reset its parent link to NULL.\n// Delete a degree 1 node :  Replace the node by its single child.\n// Delete a degree 2 node :  Replace the node by the largest one in its left subtree or the smallest one in its right subtree.\n// Delete the replacing node from the subtree.\nTree Delete(Tree T, int value)\n{\n    if(T == NULL)\n    {\n        printf(\"Element not found\\n\");\n        return NULL;\n    }\n    else if(value &lt; T-&gt;data)\n    {\n        T-&gt;left = Delete(T-&gt;left, value);\n        return T;\n    }\n    else if(value &gt; T-&gt;data)\n    {\n        T-&gt;right = Delete(T-&gt;right, value);\n        return T;\n    }\n    else // value == T-&gt;data  \u5206leaf,degree = 1, degree = 2 \u8fdb\u884c\u8ba8\u8bba\n    {   \n        if(T-&gt;left == NULL &amp;&amp; T-&gt;right == NULL) // leaf\n        {\n            free(T);\n            return NULL;\n        }\n        else if(T-&gt;left == NULL) // degree = 1;\n        {\n            Tree temp = T-&gt;right;\n            free(T);\n            return temp;\n        }\n        else if(T-&gt;right == NULL) // degree = 1;\n        {\n            Tree temp = T-&gt;left;\n            free(T);\n            return temp;\n        }\n        else // degree = 2;\n        {\n            // replace the node by the smallest one in its right subtree\n            // Tree temp = Findmin1(T-&gt;right);\n            // T-&gt;data = temp-&gt;data;\n            // T-&gt;right = Delete(T-&gt;right, temp-&gt;data);\n            // return T;\n            // replace the node by the largest one in its left subtree\n            Tree temp = Findmax1(T-&gt;left);\n            T-&gt;data = temp-&gt;data;\n            T-&gt;left = Delete(T-&gt;left, temp-&gt;data);\n            return T;\n        }\n    }\n}\n</code></pre> <ul> <li></li> </ul> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/","title":"\u56db. \u961f\u5217","text":""},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#41","title":"4.1 \u961f\u5217\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u961f\u5217\uff08queue\uff09\u662f\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u64cd\u4f5c\uff0c\u800c\u5728\u53e6\u4e00\u7aef\u8fdb\u884c\u5220\u9664\u64cd\u4f5c\u7684\u7ebf\u6027\u8868\u3002 \u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08First In First Out\uff09\u7684\u7ebf\u6027\u8868\uff0c\u7b80\u79f0FIFO\u3002\u5141\u8bb8\u63d2\u5165\u7684\u4e00\u7aef\u79f0\u4e3a\u961f\u5c3e\uff0c\u5141\u8bb8\u5220\u9664\u7684\u4e00\u7aef\u79f0\u4e3a\u961f\u5934\u3002</p> <p></p> <p>\u961f\u5934\uff08Front\uff09\uff1a\u5141\u8bb8\u5220\u9664\u7684\u4e00\u7aef\uff0c\u53c8\u79f0\u961f\u9996\u3002</p> <p>\u961f\u5c3e\uff08Rear\uff09\uff1a\u5141\u8bb8\u63d2\u5165\u7684\u4e00\u7aef\u3002</p> <p>\u7a7a\u961f\u5217\uff1a\u4e0d\u5305\u542b\u4efb\u4f55\u5143\u7d20\u7684\u7a7a\u8868\u3002</p> <ol> <li>\u961f\u5217\u7684\u5e38\u89c1\u57fa\u672c\u64cd\u4f5c</li> </ol> <ul> <li>InitQueue(&amp;Q)\uff1a\u521d\u59cb\u5316\u961f\u5217\uff0c\u6784\u9020\u4e00\u4e2a\u7a7a\u961f\u5217Q\u3002</li> <li>QueueEmpty(Q)\uff1a\u5224\u961f\u5217\u7a7a\uff0c\u82e5\u961f\u5217Q\u4e3a\u7a7a\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002</li> <li>EnQueue(&amp;Q, x)\uff1a\u5165\u961f\uff0c\u82e5\u961f\u5217Q\u672a\u6ee1\uff0c\u5c06x\u52a0\u5165\uff0c\u4f7f\u4e4b\u6210\u4e3a\u65b0\u7684\u961f\u5c3e\u3002</li> <li>DeQueue(&amp;Q, &amp;x)\uff1a\u51fa\u961f\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5220\u9664\u961f\u5934\u5143\u7d20\uff0c\u5e76\u7528x\u8fd4\u56de\u3002</li> <li>GetHead(Q, &amp;x)\uff1a\u8bfb\u961f\u5934\u5143\u7d20\uff0c\u82e5\u961f\u5217Q\u975e\u7a7a\uff0c\u5219\u5c06\u961f\u5934\u5143\u7d20\u8d4b\u503c\u7ed9x\u3002</li> </ul>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#42","title":"4.2 \u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784","text":"<p>\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff1a</p> <pre><code>#define MAXSIZE 50 //\u5b9a\u4e49\u961f\u5217\u4e2d\u5143\u7d20\u7684\u6700\u5927\u4e2a\u6570\ntypedef struct{\n    ElemTpye data[MAXSIZE];\n    int front,rear;\n}Queue;\n\n// \u6216\u8005\nstruct point{\n    int Capacity;       //max size of queue\n    int Front;          // the front pointer\n    int Rear;           // the rear pointer\n    int Count;          // the current size of queue\n    ElemType *Array;    // array\n}Queue;\n</code></pre> <ul> <li>\u521d\u59cb\u72b6\u6001\uff08\u961f\u5217\u4e3a\u7a7a\uff09\uff1a \\(Q-&gt;front == Q-&gt;rear == 0\\)</li> <li>\u8fdb\u961f\u64cd\u4f5c\uff1a \u961f\u5217\u4e0d\u6ee1\u65f6\uff0c\u5148\u5c06\u503c\u5b58\u50a8\u5230rear\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u518d\u961f\u5c3e\u6307\u9488\u52a01</li> <li>\u51fa\u961f\u64cd\u4f5c\uff1a\u961f\u5217\u975e\u7a7a\u65f6\uff0c\u5148\u53d6\u51fafront \u5bf9\u5e94\u7684\u5143\u7d20\u503c\uff0c\u518d\u961f\u5934\u6307\u9488\u52a01</li> </ul> <p></p>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#43","title":"4.3 \u5faa\u73af\u961f\u5217","text":"<p>\u6211\u4eec\u628a\u961f\u5217\u7684\u8fd9\u79cd\u5934\u5c3e\u76f8\u63a5\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u79f0\u4e3a\u5faa\u73af\u961f\u5217\u3002</p> <p>\u5f53\u961f\u9996\u6307\u9488<code>Q-&gt;front = MAXSIZE-1</code>\u540e\uff0c\u518d\u524d\u8fdb\u4e00\u4e2a\u4f4d\u7f6e\u5c31\u81ea\u52a8\u52300\uff0c\u8fd9\u53ef\u4ee5\u5229\u7528\u9664\u6cd5\u53d6\u4f59\u8fd0\u7b97\uff08%\uff09\u6765\u5b9e\u73b0\u3002</p> <ul> <li>\u521d\u59cb\u72b6\u6001\u65f6 \\(Q-&gt;front = Q-&gt;rear = 0\\)</li> <li>\u961f\u9996\u6307\u9488\u8fdb\u4e00\uff08\u51fa\u961f\uff09\uff1a \\(Q-&gt;front = (Q-&gt;front + 1) \\% MAXSIZE\\)</li> <li>\u961f\u5c3e\u6307\u9488\u8fdb\u4e00\uff08\u5165\u961f\uff09\uff1a \\(Q-&gt;rear = (Q-&gt;rear + 1) \\% MAXSIZE\\)</li> <li>\u961f\u5217\u957f\u5ea6\uff1a\\((Q-&gt;rear - Q-&gt;front + MAXSIZE) / \\% MAXSIZE\\)</li> </ul> <p></p> <p>\u90a3\u4e48\uff0c\u5faa\u73af\u961f\u5217\u961f\u7a7a\u548c\u961f\u6ee1\u7684\u5224\u65ad\u6761\u4ef6\u662f\u4ec0\u4e48\u5462\uff1f</p> <p>\u663e\u7136\uff0c\u961f\u7a7a\u7684\u6761\u4ef6\u662f Q-&gt;front == Q-&gt;rear \u3002\u82e5\u5165\u961f\u5143\u7d20\u7684\u901f\u5ea6\u5feb\u4e8e\u51fa\u961f\u5143\u7d20\u7684\u901f\u5ea6\uff0c\u5219\u961f\u5c3e\u6307\u9488\u5f88\u5feb\u5c31\u4f1a\u8d76\u4e0a\u961f\u9996\u6307\u9488\uff0c\u5982\u56fe( d1 \uff09\u6240\u793a\uff0c\u6b64\u65f6\u53ef\u4ee5\u770b\u51fa\u961f\u6ee1\u65f6\u4e5f\u6709 Q -&gt;front == Q -&gt; rear \u3002 \u4e3a\u4e86\u533a\u5206\u961f\u7a7a\u8fd8\u662f\u961f\u6ee1\u7684\u60c5\u51b5\uff0c\u6709\u4e09\u79cd\u5904\u7406\u65b9\u5f0f\uff1a</p> <p>\uff081\uff09\u727a\u7272\u4e00\u4e2a\u5355\u5143\u6765\u533a\u5206\u961f\u7a7a\u548c\u961f\u6ee1\uff0c\u5165\u961f\u65f6\u5c11\u7528\u4e00\u4e2a\u961f\u5217\u5355\u5143\uff0c\u8fd9\u662f\u79cd\u8f83\u4e3a\u666e\u904d\u7684\u505a\u6cd5\uff0c<code>`\u7ea6\u5b9a\u4ee5\u201c\u961f\u5934\u6307\u9488\u5728\u961f\u5c3e\u6307\u9488\u7684\u4e0b\u4e00\u4f4d\u7f6e\u4f5c\u4e3a\u961f\u6ee1\u7684\u6807\u5fd7\u201d\uff0c</code>\u5982\u56fe ( d2 \uff09\u6240\u793a\u3002</p> <p>rear \u4f4d\u7f6e\u8868\u793a\uff0c\u8be5\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u63d2\u5165\uff0cfront\u4f4d\u7f6e\u8868\u793a\u8be5\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u79bb\u5f00</p> <ul> <li>\u961f\u6ee1\u6761\u4ef6\uff1a (Q-&gt;rear + 1)%Maxsize == Q-&gt;front\uff085+1 % 6 = 0\uff09</li> <li>\u961f\u7a7a\u6761\u4ef6\u4ecd\uff1a Q-&gt;front == Q-&gt;rear</li> <li>\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\uff1a (Q-&gt;rear - Q -&gt;front + Maxsize)% Maxsize</li> </ul> <p>\uff082\uff09\u7c7b\u578b\u4e2d\u589e\u8bbe\u8868\u793a\u5143\u7d20\u4e2a\u6570\u7684\u6570\u636e\u6210\u5458\u3002\u8fd9\u6837\uff0c\u961f\u7a7a\u7684\u6761\u4ef6\u4e3a Q-&gt;size == O \uff1b\u961f\u6ee1\u7684\u6761\u4ef6\u4e3a Q-&gt;size == Maxsize \u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u6709 Q-&gt;front == Q-&gt;rear</p> <p>\uff083\uff09\u7c7b\u578b\u4e2d\u589e\u8bbetag \u6570\u636e\u6210\u5458\uff0c\u4ee5\u533a\u5206\u662f\u961f\u6ee1\u8fd8\u662f\u961f\u7a7a\u3002tag \u7b49\u4e8e0\u65f6\uff0c\u82e5\u56e0\u5220\u9664\u5bfc\u81f4 Q-&gt;front == Q-&gt;rear \uff0c\u5219\u4e3a\u961f\u7a7a\uff1btag \u7b49\u4e8e 1 \u65f6\uff0c\u82e5\u56e0\u63d2\u5165\u5bfc\u81f4 Q -&gt;front == Q-&gt;rear \uff0c\u5219\u4e3a\u961f\u6ee1\u3002</p> <p><code>\u4ee5\u4e0b\u9488\u5bf9\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u4ecb\u7ecd\u5faa\u73af\u961f\u5217\u7684\u5e38\u89c1\u57fa\u672c\u7b97\u6cd5\uff08\u7a7a\u4f59\u4e00\u4e2a\u4f4d\u7f6e\uff09</code></p> <p>\uff081\uff09\u5faa\u73af\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784</p> <pre><code>typedef int ElemType;              //ElemType\u7684\u7c7b\u578b\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\uff0c\u8fd9\u91cc\u5047\u5b9a\u4e3aint\n#define MAXSIZE 50\ntypedef struct{\n    ElemType data[MAXSIZE];\n    int front;\n    int rear;                     //\u5c3e\u6307\u9488,\u82e5\u961f\u5217\u4e0d\u7a7a\uff0c\u6307\u5411\u961f\u5217\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n}Queue;\n</code></pre> <p>\uff082\uff09 \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316</p> <pre><code>void InitQueue(Queue * Q)\n{\n    Q-&gt;front = 0;\n    Q-&gt;rear = 0;\n}\n</code></pre> <p>\uff083\uff09\u5faa\u73af\u961f\u5217\u5224\u65ad\u662f\u5426\u4e3a\u7a7a</p> <pre><code>Bool Isempty(Queue Q)\n{\n    if(Q.rear == Q.front)\n    {\n        return True;\n    }\n    return False;\n}\n</code></pre> <p>\uff084\uff09 \u6c42\u5faa\u73af\u961f\u5217\u7684\u957f\u5ea6</p> <pre><code>int Queuelength(Queue Q)\n{\n    return (Q.rear - Q.front + MAXSIZE) % MAXSIZE;\n    // \u4e4b\u6240\u4ee5\u8981\u52a0MAXSIZE\uff0c\u662f\u56e0\u4e3a\u5f53front = rear + 1\u65f6\uff0c\u6b64\u65f6\u7ed3\u679c\u4e3aMAXSIZE - 1\n}\n</code></pre> <p>\uff085\uff09 \u5faa\u73af\u961f\u5217\u5165\u961f</p> <pre><code>/*\u82e5\u961f\u5217\u672a\u6ee1\uff0c\u5219\u63d2\u5165\u5143\u7d20e\u4e3aQ\u65b0\u7684\u961f\u5c3e\u5143\u7d20*/\nvoid EnQueue(Queue *Q, ElemType e)\n{\n    // \u5148\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u6ee1\n    if((Q-&gt;rear + 1) % MAXSIZE == Q-&gt;front)\n    {\n        printf(\"The queue is full!\");\n    }\n    else\n    {\n        Q-&gt;data[Q-&gt;rear] = e;\n        Q-&gt;rear = (Q-&gt;rear + 1) % MAXSIZE;//rear\u6307\u9488\u5411\u540e\u79fb\u4e00\u4f4d\u7f6e\uff0c\u82e5\u5230\u6700\u540e\u5219\u8f6c\u5230\u6570\u7ec4\u5934\u90e8\n    }\n}\n</code></pre> <p>\uff086\uff09\u5faa\u73af\u961f\u5217\u51fa\u961f</p> <pre><code>void DeQueue(Queue *Q, ElemType *e)\n{\n    if(Q-&gt;rear == Q-&gt;front)\n    {\n        printf(\"The queue is empty!\");\n    }\n    else\n    {\n        *e = Q-&gt;data[Q-&gt;front];\n        Q-&gt;front = (Q-&gt;front + 1) % MAXSIZE;//rear\u6307\u9488\u5411\u540e\u79fb\u4e00\u4f4d\u7f6e\uff0c\u82e5\u5230\u6700\u540e\u5219\u8f6c\u5230\u6570\u7ec4\u5934\u90e8\n}\n</code></pre>"},{"location":"course/fds/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#44","title":"4.4 \u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784","text":"<p>\u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u8868\u793a\u4e3a\u94fe\u961f\u5217\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u540c\u65f6\u5e26\u6709\u961f\u5934\u6307\u9488\u548c\u961f\u5c3e\u6307\u9488\u7684\u5355\u94fe\u8868\uff0c\u53ea\u4e0d\u8fc7\u5b83\u53ea\u80fd\u5c3e\u8fdb\u5934\u51fa\u800c\u5df2</p> <p></p> <p></p> <p>\uff081\uff09\u94fe\u961f\u5217\u5b58\u50a8\u7c7b\u578b</p> <pre><code>typedef struct{\n    ELemType data;\n    struct LinkNode *next;\n}LinkNode;\n// \u5bf9\u4e8e\u961f\u5217\uff0c\u521b\u5efa\u7684\u662f\u4e00\u4e2a\u53cc\u5934\u94fe\u8868\uff0cfront\u548crear\ntypedef struct{\n    LinkNode *front;\n    LinkNode *rear;\n}LinkQueue;\n</code></pre> <p>\uff082\uff09\u94fe\u961f\u5217\u7684\u521d\u59cb\u5316</p> <pre><code>void InitQueue(LinkQueue *Q)\n{\n    //\u6b64\u5904\u7684\u94fe\u8868\u5e26\u5934\u7ed3\u70b9\uff0c\u5934\u7ed3\u70b9\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u521d\u59cb\u72b6\u6001\u5747\u6307\u5411NULL\n    Q-&gt;front = Q-&gt;rear = (LinkNode*)malloc(sizeof(LinkNode));//\u5efa\u7acb\u5934\u7ed3\u70b9\n    Q-&gt;front-&gt;next = Q-&gt;rear-&gt;next = NULL;//\u521d\u59cb\u4e3a\u7a7a\n}\n</code></pre> <p>\uff083\uff09\u94fe\u961f\u5217\u5165\u961f</p> <p></p> <pre><code>void EnQueue(LinkQueue *Q,ElemType e)\n{\n    LinkNode *s = (LinkNode *)malloc(sizeof(LinkNode));\n    s-&gt;data = e;\n    s-&gt;next = NULL;\n    Q-&gt;rear-&gt;next = s; //\u628a\u62e5\u6709\u5143\u7d20e\u65b0\u7ed3\u70b9s\u8d4b\u503c\u7ed9\u539f\u961f\u5c3e\u7ed3\u70b9\u7684\u540e\u7ee7\n    Q-&gt;rear = s;       //\u628a\u5f53\u524d\u7684s\u8bbe\u7f6e\u4e3a\u65b0\u7684\u961f\u5c3e\u7ed3\u70b9\n    // \u4e5f\u5c31\u662f\u8bf4rear\u7ed3\u70b9\u662f\u5e26\u6570\u636e\u7684\n}\n</code></pre> <p>\uff084\uff09\u94fe\u961f\u5217\u51fa\u961f</p> <p>\u51fa\u961f\u64cd\u4f5c\u65f6\uff0c\u5c31\u662f\u5934\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u51fa\u961f\uff0c\u5c06\u5934\u7ed3\u70b9\u7684\u540e\u7ee7\u6539\u4e3a\u5b83\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u82e5\u94fe\u8868\u9664\u5934\u7ed3\u70b9\u5916\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u5219\u9700\u5c06rear\u6307\u5411\u5934\u7ed3\u70b9\u3002</p> <p></p> <pre><code>void Dequeue(LinkQueue *Q,ElemType *e)\n{\n    LinkNode *p;\n    if(Q-&gt;front == Q-&gt;rear)\n    {\n        printf(\"The Queue is empty\");\n    }\n    else\n    {\n        *p = Q-&gt;front-&gt;next;      //\u5c06\u6b32\u5220\u9664\u7684\u961f\u5934\u7ed3\u70b9\u6682\u5b58\u7ed9p\n        *e = p -&gt; data;           \n        Q-&gt;front-&gt;next = p-&gt;next;\n        if(Q-&gt;rear == p)          //\u82e5\u5220\u9664\u7684\u961f\u5934\u662f\u961f\u5c3e\uff0c\u5219\u5220\u9664\u540e\u5c06rear\u6307\u5411\u5934\u7ed3\u70b9\n        {\n            Q-&gt;rear = Q-&gt;front;\n        }\n        // \u5728\u961f\u5217\u5143\u7d20\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0crear\u7ed3\u70b9\u4e0d\u9700\u8981\u6539\u53d8\n        free(p);\n    }\n}\n</code></pre>"},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E5%85%B7%E4%BD%93%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/","title":"\u5177\u4f53\u95ee\u9898\u5206\u6790","text":""},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E5%85%B7%E4%BD%93%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/#13","title":"1.3 \u5177\u4f53\u95ee\u9898\u5206\u6790","text":"<p>Given (possibly negative) integers \\(A_1, A_2,\\cdots,A_N\\),<code>find the maximum value</code> of \\(\\sum_{k=i}^{j}A_k\\)</p> <p>\u5373\u7ed9\u5b9a\u4e00\u4e32\u6574\u6570\uff0c\u6c42\u6574\u6570\u5b57\u4e32\u7684\u6700\u5927\u503c</p> <pre><code>int MaxSubsequenceSum(int A[], int N)\n{\n    int sum, i, j, k;\n    int maxsum = 0;\n    for(i = 0; i &lt; N; i++)\n    {\n        for(j = i; j &lt; N; j++)\n        {\n            sum = 0;\n            for(k = i; k &lt;= j; k++)\n            {\n                sum += A[k];\n            }\n            if(sum &gt; maxsum)\n            {\n                sum = maxsum;\n            }\n        }\n    }\n    return maxsum\n}\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08N^3\uff09\n</code></pre> <pre><code>int MaxSubsequenceSum(int A[], int N)\n{\n    int sum, i, j, k;\n    int maxsum;\n    for(i = 0; i &lt; N; i++)\n    {\n        sum = 0;\n        for(j = i; j &lt; N; j++)\n        {\n            sum += A[j];\n            if(sum &gt; maxsum)\n            {\n                sum = maxsum;\n            }\n        }\n    }\n    return maxsum;\n}\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n</code></pre> <p></p> <pre><code>// Algorithm 4\nint MaxSubsequenceSum(int A[], int N)\n{\n    int sum, maxsum, i;\n    sum = maxsum = 0;\n    for(i = 0; i &lt; N; i++)\n    {\n        sum += A[i];\n        if(sum &gt; maxsum)\n        {\n            maxsum = sum;\n        }\n        else if(sum &lt; 0)\n        {\n            sum = 0;\n        }\n    }\n    return maxsum;\n}\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08N\uff09\n</code></pre> <p></p> <p>\u95ee\u9898\uff1a\u5982\u4f55\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f\u590d\u6742\u5ea6\u53c8\u662f\u591a\u5c11\uff1f</p> <p></p> <p>\u81f3\u4e8e\u7a7a\u95f4\u590d\u6742\u5ea6</p> <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u9012\u5f52\u7b97\u6cd5\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6216\u5faa\u73af\u6765\u8ba1\u7b97\u3002 </p> <ul> <li>\u5982\u679c\u4f7f\u7528\u9012\u5f52\u65b9\u5f0f\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO (n)\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u9012\u5f52\u8c03\u7528\u90fd\u4f1a\u5360\u7528\u4e00\u5b9a\u7684\u6808\u7a7a\u95f4\uff0c\u800c\u9012\u5f52\u6df1\u5ea6\u5c31\u662fn\u3002 (recursively)</li> <li>\u5982\u679c\u4f7f\u7528\u5faa\u73af\u65b9\u5f0f\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5219\u53ea\u9700\u8981\u5e38\u6570\u7ea7\u522b\u7684\u7a7a\u95f4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO (1)\u3002(iteratively)</li> </ul> <p></p> <p></p> <ol> <li>The Fibonacci number sequence \\({F_N}\\) is defined as: \\(F_0=0, F_1=1, F_N=F_{N-1}+F_{N-2}, N = 2, 3, ....\\) The time complexity of the function which calculates \\(F_N\\) recursively is \\(\u0398(N!)\\). </li> </ol> <p>False,\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6307\u6570\u578b\u589e\u957f</p> <ol> <li>\u66f4\u591a\u9898\u76ee\u89c1\uff1a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\uff08\u5468\u6d4b1-\u7b97\u6cd5\u5206\u6790\uff09 - nonlinearthink - \u535a\u5ba2\u56ed (cnblogs.com)</li> </ol> \\[ \\begin{aligned} T(N) &amp;= 2T(N/2) + N \\\\ &amp;= 2(2T(N/4) + N/2)+N \\\\ &amp;= 2^{log_2N}T(1) + log_2N * N \\\\ &amp;= N + NlogN \\end{aligned} \\] <ol> <li>The recurrent equations for the time complexities of programs P1 and P2 are:</li> </ol> <ul> <li> <p>\\(P1: T(1)=1,T(N)=T(N/3)+1\\)</p> </li> <li> <p>\\(P2: T(1)=1,T(N)=3T(N/3)+1\\)</p> </li> </ul> <p>Then the correct conclusion about their time complexities is:</p> \\[ \\begin{aligned} &amp;T(N) = T(N/3) + 1 = T(N/3^2) + 2 = \\cdots = T(1) + log_3N\\\\ \\\\ &amp;T(N) + \\dfrac{1}{2} = 3(T(N/3) + \\dfrac{1}{2}) = 3^{log_3N}(T(1) + \\dfrac{1}{2}) = N\\\\ \\end{aligned} \\] <p></p>"},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95/","title":"\u5206\u6790\u5185\u5bb9","text":""},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95/#11","title":"1.1 \u5206\u6790\u5185\u5bb9","text":"<ul> <li>\u8fd0\u884c\u65f6\u95f4\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u6709\u5173</li> <li>\u65f6\u95f4 &amp; \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u65e0\u5173</li> </ul> <p>\u5047\u8bbe\uff1a</p> <ul> <li>\u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c</li> <li>\u6bcf\u6761\u6307\u4ee4\u662f\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u5355\u4f4d\u6267\u884c</li> <li>\u6570\u636e\u89c4\u6a21\u662f\u7ed9\u5b9a\u7684\uff0c\u800c\u7a7a\u95f4\u662f\u65e0\u9650\u7684</li> </ul> <p>\u901a\u5e38\u6211\u4eec\u9700\u8981\u5206\u6790$T_{avg}(N),T_{worst}(N), N $\u662f\u8f93\u5165\u89c4\u6a21\uff08\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165\uff09</p>"},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/","title":"\u6e10\u8fdb\u7b26\u53f7","text":""},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/#12","title":"1.2 \u6e10\u8fdb\u7b26\u53f7","text":""},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/#121","title":"1.2.1 \u5b9a\u4e49","text":"<p>\u8bb0\u53f7\uff1a\\(O,\\Omega,\\Theta,o\\)</p> <ul> <li>\u4e0a\u754c\uff1a\\(T(N)=O(f(N))\\Leftrightarrow \\exists c,n_0&gt;0,\\forall N\\geqslant n_0, T(N)\\leqslant c\\cdot f(N)\\)</li> <li>\u4e0b\u754c\uff1a\\(T(N)=\\Omega(f(N))\\Leftrightarrow \\exists c,n_0&gt;0,\\forall N\\geqslant n_0, T(N)\\geqslant c\\cdot f(N)\\)</li> <li>\u4e0a\u4e0b\u754c\uff1a\\(T(N)=\\Theta(f(N))\\Leftrightarrow T(N)=O(f(N))\\land T(N)=\\Omega(f(N))\\)</li> <li>\u771f\u4e0a\u754c\uff1a\\(T(N)=o(f(N))\\Leftrightarrow T(N)=O(f(N))\\land T(N)\\not=\\Omega(f(N))\\)</li> </ul>"},{"location":"course/fds/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/#122","title":"1.2.2 \u8fd0\u7b97\u89c4\u5219","text":"<ul> <li> <p>\u58f0\u660e\u7684\u8d4b\u503c\u5ea6\uff1a \u65e0</p> </li> <li> <p>\u6bcf\u6761\u8d4b\u503c\u7684\u590d\u6742\u5ea6\uff1a1</p> </li> <li> <p>\u6bcf\u6761\u5224\u65ad\u7684\u590d\u6742\u5ea6\uff1a1</p> </li> <li> <p>\u5224\u65ad\u7684\u5206\u652f\uff1a\u8ba1\u7b97\u6240\u6709\u60c5\u51b5\u4e2d\u590d\u6742\u5ea6\u8f83\u5927\u8005</p> </li> <li> <p>\u8fd4\u56dereturn\u7684\u590d\u6742\u5ea6\uff1a1</p> </li> <li> \\[   \\begin{aligned}   &amp; T_1(N) = O(f(N)),T_2(N) = O(g(N))\\\\   &amp; T_1(N) + T_2(N) = max(O(f(N)),O(g(N)))\\\\   &amp; T_1(N) * T_2(N) = O(f(N) * g(N))    \\end{aligned}   \\] </li> <li> <p>\u82e5\\(T(N)\\)\u662f\u6700\u9ad8\u6b21\u6570\u4e3ak\u6b21\u7684\u591a\u9879\u5f0f\uff0c\u90a3\u4e48$ T(N) = \\Theta((N^k))$</p> </li> <li> <p>\u5bf9\u4e8e\u4efb\u610f\u5e38\u6570 k, \u90fd\u6709 \\(log^kN = O(N)\\)\uff0c\u8fd9\u8bf4\u660e\u5bf9\u589e\u957f\u975e\u5e38\u7f13\u6162\u3002</p> </li> <li> <p>\u5206\u6790\u65f6\u7684\u89c4\u5219</p> </li> <li> <p>for loop     \u8fd0\u884c\u65f6\u95f4\u662f\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u7684\u6700\u957f\u65f6\u95f4\uff08\u5305\u62ec for \u8fb9\u754c\u5224\u65ad\uff09\u4e58\u5faa\u73af\u7684\u6b21\u6570</p> </li> <li>\u5d4c\u5957 for loop     \u8fd0\u884c\u65f6\u95f4\u662f\u5404\u4e2a for loop \u7684\u8fd0\u884c\u65f6\u95f4\u9010\u6b21\u76f8\u4e58</li> <li>\u8fde\u7eed\u6267\u884c\u7684\u8bed\u53e5     \u76f8\u52a0</li> <li>if else     \u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u5224\u65ad\u65f6\u95f4\u52a0\u4e0a\u7528\u65f6\u6700\u591a\u7684\u8bed\u53e5\u5757\u7684\u65f6\u95f4</li> </ul> <p></p> <p>if\u4e2d\u590d\u6742\u5ea6\u4e3aN^3\uff0c\u6ce8\u610fN2\u4e0d\u662fN\u5e73\u65b9\uff0celse\u590d\u6742\u5ea6\u4e3aN * N * N(\u5f53i\u5230n\u7684\u65f6\u5019\u5c31\u4e0d\u8fdb\u53bb\u4e86\uff0c\u56e0\u6b64\u5916\u5faa\u73af\u6309N\u7b97\uff0c\u7b54\u6848\u4e3aT)*</p> <p><code>\u5bf9\u4e8efor\u5faa\u73af\u4ece0\u5230n\uff0c\u5faa\u73af\u4f53\u4e2d\u7684\u5185\u5bb9\u6267\u884cn\u6b21\uff0cfor\u8bed\u53e5\u7684\u5faa\u73af\u53d8\u91cf\u6267\u884cn+1\u6b21</code></p> <p><code>\u6545\u603b\u6267\u884c\u6b21\u6570 = n+1+n*(\u5faa\u73af\u4f53\u4e2d\u8bed\u53e5\u6267\u884c\u6b21\u6570)</code></p> <pre><code>void  add ( int  a[ ][ MAX_SIZE ], \n                   int  b[ ][ MAX_SIZE ], \n                   int  c[ ][ MAX_SIZE ],\n                   int  rows,  int  cols )\n{\n    int  i,  j ;//\u58f0\u660e\u590d\u6742\u5ea6\u65e0\n    for ( i = 0; i &lt; rows; i++ )//\u5bf9\u4e8e\u8be5\u5faa\u73af\u4f53\uff0c\u590d\u6742\u5ea6\u4e3arows+1+rows(i\u7684\u5185\u90e8)\n          for ( j = 0; j &lt; cols; j++ )//\u5bf9\u4e8ei\u7684\u5185\u90e8\uff0c\u590d\u6742\u5ea6\u4e3acols+1+cols(j\u7684\u5185\u90e8)\n                c[ i ][ j ] = a[ i ][ j ] + b[ i ][ j ];//j\u7684\u5185\u90e8=1\n}\n// \u603b\u7684\u590d\u6742\u5ea6\u4e3a\uff1arows+ 1 + rows(cols + 1 + cols * 1) = 2 rows * cols + 2rows + 1\n</code></pre>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","title":"\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u8bfb\u4e66\u7b14\u8bb0","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b\u3010\u674e\u6c90 \u7b49\u8457\u3011\u7684\u8bfb\u4e66\u7b14\u8bb0 </p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u673a\u5668\u5b66\u4e60\uff1a\u4e00\u7c7b\u5f3a\u5927\u7684\u53ef\u4ee5\u4ece\u7ecf\u9a8c\u4e2d\u5b66\u4e60\u7684\u6280\u672f</p> <ul> <li>\u6570\u636e\u96c6</li> <li>\u53c2\u6570</li> <li>\u6a21\u578b\uff1a\u4efb\u4e00\u8c03\u6574\u53c2\u6570\u540e\u7684\u7a0b\u5e8f</li> <li>\u5b66\u4e60\u7b97\u6cd5\uff1a\u4f7f\u7528\u6570\u636e\u96c6\u6765\u9009\u62e9\u53c2\u6570\u7684\u5143\u7a0b\u5e8f</li> </ul> <p>\u95ee\u9898\u5b9a\u4e49\uff1a\u8f93\u5165 / \u8f93\u51fa</p> <p>\u6a21\u578b\u8bad\u7ec3\uff1a</p> <ul> <li>\u6b65\u9aa4\uff1a </li> <li>\u7528\u6570\u636e\u7f16\u7a0b\uff1a\u901a\u8fc7\u7528\u6570\u636e\u96c6\u6765\u786e\u5b9a\u7a0b\u5e8f\u884c\u4e3a</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/","title":"\u5b66\u4e60\u95ee\u9898\u5206\u7c7b","text":""},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_1","title":"\u76d1\u7763\u5b66\u4e60","text":"<p>\u9002\u7528\u7c7b\u578b\uff1a\u5728\u7ed9\u5b9a\u8f93\u5165\u7279\u5f81\u7684\u60c5\u51b5\u4e0b\u9884\u6d4b\u6807\u7b7e\uff08\u6bcf\u4e2a\u201c\u7279\u5f81-\u6807\u7b7e\u201d\u5bf9\u79f0\u4e3a\u4e00\u4e2a\u6837\u672c\uff09</p> <p>\u95ee\u9898\u63cf\u8ff0\uff1a\u5728\u7ed9\u5b9a\u4e00\u7ec4\u7279\u5b9a\u7684\u53ef\u7528\u6570\u636e\u7684\u60c5\u51b5\u4e0b\uff0c\u4f30\u8ba1\u672a\u77e5\u4e8b\u7269\u7684\u6982\u7387</p> <p>\u76ee\u6807\uff1a\u751f\u6210\u4e00\u4e2a\u6a21\u578b\uff0c\u80fd\u591f\u5c06\u4efb\u4f55\u8f93\u5165\u7279\u5f81\u6620\u5c04\u5230\u6807\u7b7e\uff08\u9884\u6d4b\uff09</p> <p>\u6b65\u9aa4\uff1a </p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_2","title":"\u56de\u5f52","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a\u6709\u5173\u201c\u6709\u591a\u5c11\u201d\u7684\u95ee\u9898</p> <p>\u6570\u636e\uff1a\u6807\u7b7e\u4e3a\u4efb\u610f\u6570\u503c</p> <p>\u6a21\u578b\uff1a\u56de\u5f52\u51fd\u6570\uff0c\u8f93\u51fa\u4e3a\u6570\u503c</p> <p>\u76ee\u6807\u51fd\u6570\uff1a\u5e73\u65b9\u8bef\u5dee\u635f\u5931\u51fd\u6570</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_3","title":"\u5206\u7c7b","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a\u9884\u6d4b\u6837\u672c\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b\uff08\u201c\u54ea\u4e00\u4e2a\u201d\uff09</p> <p>\u95ee\u9898\u7c7b\u578b\uff1a</p> <ul> <li>\u4e8c\u9879\u5206\u7c7b\uff1a\u53ea\u6709\u4e24\u7c7b\u7684\u6700\u7b80\u5355\u7684\u5206\u7c7b\u95ee\u9898</li> <li>\u591a\u9879\u5206\u7c7b\uff1a\u5177\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7c7b\u522b\u7684\u5206\u7c7b\u95ee\u9898</li> <li>\u5c42\u6b21\u5206\u7c7b\uff1a\u5bfb\u627e\u5c42\u6b21\u7ed3\u6784\uff08\u5206\u7c7b\u9519\u8bef\u4e0d\u5747\u7b49\uff09</li> </ul> <p>\u5206\u7c7b\u9884\u6d4b\u523b\u753b\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6837\u672c\u7279\u5f81\uff0c\u6a21\u578b\u4e3a\u6bcf\u4e2a\u53ef\u80fd\u7684\u7c7b\u5206\u914d\u4e00\u4e2a\u6982\u7387\uff1b\u9884\u6d4b\u7c7b\u522b\u6982\u7387\u7684\u5927\u5c0f\u4f20\u8fbe\u4e86\u4e00\u79cd\u6a21\u578b\u7684\u4e0d\u786e\u5b9a\u6027</p> <p>\u6a21\u578b\uff1a\u5206\u7c7b\u5668\uff0c\u8f93\u51fa\u4e3a\u9884\u6d4b\u7684\u7c7b\u522b</p> <p>\u76ee\u6807\u51fd\u6570\uff1a\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570</p> <p>\u6700\u5e38\u89c1\u7684\u7c7b\u522b\u4e0d\u4e00\u5b9a\u662f\u6700\u7ec8\u7528\u4e8e\u51b3\u7b56\u7684\u7c7b\u522b\uff0c\u5f53\u4e0d\u786e\u5b9a\u98ce\u9669\u8fdc\u8fdc\u5927\u4e8e\u6536\u76ca\u65f6\uff0c\u5c06\u9884\u671f\u98ce\u9669\u4f5c\u4e3a\u635f\u5931\u51fd\u6570</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_4","title":"\u6807\u8bb0","text":"<p>\u95ee\u9898\u7c7b\u578b\uff1a</p> <ul> <li>\u591a\u6807\u7b7e\u5206\u7c7b\uff1a\u5b66\u4e60\u9884\u6d4b\u4e0d\u4e92\u76f8\u6392\u65a5\u7c7b\u522b\u7684\u95ee\u9898</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_5","title":"\u641c\u7d22","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a\u68c0\u7d22\u76f8\u5173\u6027\u5206\u6570\u6700\u9ad8\u7684\u90e8\u5206\u7ed3\u679c\uff0c\u5e76\u5bf9\u641c\u7d22\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_6","title":"\u63a8\u8350\u7cfb\u7edf","text":"<p>\u76ee\u6807\uff1a\u5411\u7279\u5b9a\u7528\u6237\u8fdb\u884c\u201c\u4e2a\u6027\u5316\u201d\u63a8\u8350\uff0c\u4e3a\u7ed9\u5b9a\u7528\u6237\u548c\u7269\u54c1\u7684\u5339\u914d\u6027\u6253\u5206\uff0c\u4ece\u800c\u68c0\u7d22\u5f97\u5206\u6700\u9ad8\u7684\u5bf9\u8c61\u96c6\uff0c\u5c06\u5176\u63a8\u8350\u7ed9\u7528\u6237</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_7","title":"\u5e8f\u5217\u5b66\u4e60","text":"<p>\u7279\u70b9\uff1a</p> <ul> <li>\u5177\u6709\u201c\u8bb0\u5fc6\u201d\u529f\u80fd</li> <li>\u8f93\u5165\u3001\u8f93\u51fa\u90fd\u662f\u957f\u5ea6\u53ef\u53d8\u7684\u5e8f\u5217</li> </ul> <p>\u95ee\u9898\u7c7b\u578b\uff1a</p> <ul> <li>\u6807\u8bb0\u548c\u89e3\u6790\uff1a\u57fa\u4e8e\u7ed3\u6784\u548c\u8bed\u6cd5\u5047\u8bbe\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u89e3\u548c\u6ce8\u91ca\uff0c\u4ee5\u83b7\u5f97\u4e00\u4e9b\u6ce8\u91ca</li> <li>\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\uff1a\u8f93\u5165\u8bf4\u8bdd\u4eba\u7684\u5f55\u97f3\uff0c\u8f93\u51fa\u6240\u8bf4\u5185\u5bb9\u7684\u6587\u672c\u8bb0\u5f55</li> <li>\u6587\u672c\u5230\u8bed\u97f3</li> <li>\u673a\u5668\u7ffb\u8bd1</li> <li>\u4e8c\u7ef4\u5e03\u5c40\u5206\u6790</li> <li>\u5bf9\u8bdd\u95ee\u9898</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_8","title":"\u65e0\u76d1\u7763\u5b66\u4e60","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a\u6570\u636e\u4e2d\u4e0d\u542b\u6709\u201c\u76ee\u6807\u201d\u7684\u673a\u5668\u5b66\u4e60\u95ee\u9898</p> <p>\u95ee\u9898\u7c7b\u578b\uff1a</p> <ul> <li>\u805a\u7c7b\uff1a\u5728\u6ca1\u6709\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\u5bf9\u6570\u636e\u5206\u7c7b</li> <li>\u4e3b\u6210\u5206\u5206\u6790\uff1a\u627e\u5230\u5c11\u91cf\u7684\u53c2\u6570\u6765\u51c6\u786e\u6355\u6349\u6570\u636e\u7684\u7ebf\u6027\u76f8\u5173\u5c5e\u6027</li> <li>\u56e0\u679c\u5173\u7cfb / \u6982\u7387\u56fe\u6a21\u578b\uff1a\u63cf\u8ff0\u89c2\u5bdf\u5230\u7684\u8bb8\u591a\u6570\u636e\u7684\u6839\u672c\u539f\u56e0</li> <li>\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff1a\u5229\u7528\u6f5c\u5728\u7684\u7edf\u8ba1\u673a\u5236\u68c0\u67e5\u771f\u5b9e\u548c\u865a\u5047\u6570\u636e\u662f\u5426\u76f8\u540c\uff0c\u4ee5\u5408\u6210\u6570\u636e</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB/#_9","title":"\u5f3a\u5316\u5b66\u4e60","text":"<p>\u7279\u70b9\uff1a\u4e0e\u73af\u5883\u4e92\u52a8</p> <p>\u4e0e\u73af\u5883\u4e92\u52a8 VS \u79bb\u7ebf\u5b66\u4e60\uff1a</p> <ul> <li>\u79bb\u7ebf\u5b66\u4e60\uff1a\u5b66\u4e60\u5728\u7b97\u6cd5\u4e0e\u73af\u5883\u65ad\u5f00\u540e\u8fdb\u884c\uff08\u201c\u9884\u6d4b\u6a21\u578b\u201d\uff09<ul> <li>\u4f18\u52bf\uff1a\u53ef\u5b64\u7acb\u5730\u8fdb\u884c\u6a21\u5f0f\u8bc6\u522b\uff0c\u65e0\u9700\u8003\u8651\u5176\u4ed6\u95ee\u9898</li> <li>\u7f3a\u9677\uff1a\u53ef\u89e3\u51b3\u7684\u95ee\u9898\u6709\u9650</li> </ul> </li> <li>\u4e0e\u73af\u5883\u4e92\u52a8\uff1a\u4e92\u52a8\u4f1a\u5f71\u54cd\u73af\u5883\uff08\u201c\u667a\u80fd\u4ee3\u7406\u201d\uff09 <p>\u5206\u5e03\u504f\u79fb\uff1a\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u4e0d\u540c</p> </li> </ul> <p>\u5b66\u4e60\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u76ee\u6807\uff1a\u4ea7\u751f\u597d\u7684\u7b56\u7565\uff08\u667a\u80fd\u4f53\u9009\u62e9\u7684\u52a8\u4f5c\u53d7\u7b56\u7565\u63a7\u5236\uff1b\u4ece\u73af\u5883\u89c2\u5bdf\u6620\u5c04\u5230\u884c\u52a8\u7684\u529f\u80fd\uff09</p> <p>\u901a\u7528\u6027\uff1a</p> <ul> <li>\u76d1\u7763\u5b66\u4e60 \\(\\to\\) \u5f3a\u5316\u5b66\u4e60\uff1a\u667a\u80fd\u4f53\u8f93\u51fa\u5bf9\u5e94\u4e00\u4e2a\u52a8\u4f5c\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u73af\u5883\u7ed9\u4e88\u667a\u80fd\u4f53\u5956\u52b1\uff0c\u5956\u52b1\u4e0e\u635f\u5931\u51fd\u6570\u4e00\u81f4</li> </ul> <p>\u95ee\u9898\uff1a</p> <ul> <li>\u5b66\u5206\u5206\u914d\uff1a\u51b3\u5b9a\u54ea\u4e9b\u884c\u4e3a\u503c\u5f97\u5956\u52b1\uff0c\u54ea\u4e9b\u884c\u4e3a\u9700\u8981\u4e58\u6cd5</li> <li>\u53ef\u89c2\u6d4b\u6027\uff1a\u5f53\u524d\u89c2\u6d4b\u7ed3\u679c\u53ef\u80fd\u65e0\u6cd5\u9610\u8ff0\u6709\u5173\u5f53\u524d\u72b6\u6001\u7684\u4fe1\u606f</li> <li>\u7b56\u7565\u9009\u62e9\uff1a\u5229\u7528\u5f53\u524d\u6700\u597d\u7684\u7b56\u7565\uff0c\u8fd8\u662f\u63a2\u7d22\u65b0\u7684\u7b56\u7565\u7a7a\u95f4</li> </ul> <p>\u95ee\u9898\u7c7b\u578b\uff1a</p> <ul> <li>\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\uff1a\u73af\u5883\u53ef\u88ab\u5b8c\u5168\u89c2\u5bdf\u5230</li> <li>\u4e0a\u4e0b\u6587\u8d4c\u535a\u673a\uff1a\u72b6\u6001\u4e0d\u4f9d\u8d56\u4e8e\u4e4b\u524d\u7684\u64cd\u4f5c</li> <li>\u591a\u81c2\u8d4c\u535a\u673a\uff1a\u6ca1\u6709\u72b6\u6001\uff0c\u53ea\u6709\u4e00\u7ec4\u6700\u521d\u672a\u77e5\u56de\u62a5\u7684\u53ef\u7528\u52a8\u4f5c</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/","title":"\u6838\u5fc3\u7ec4\u4ef6","text":""},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/#_1","title":"\u6570\u636e","text":"<p>\u6570\u636e\u96c6\uff1a\u7531\u4e00\u4e2a\u4e2a\u6837\u672c\u7ec4\u6210\uff0c\u9075\u5faa\u72ec\u7acb\u540c\u5206\u5e03</p> <p>\u6837\u672c\uff08\u6570\u636e\u70b9 / \u6570\u636e\u793a\u4f8b\uff09\uff1a\u7531\u4e00\u7ec4\u79f0\u4e3a\u7279\u5f81\uff08\u534f\u53d8\u91cf\uff09\u7684\u5c5e\u6027\u6784\u6210</p> <p>\u6807\u7b7e\uff08\u76ee\u6807\uff09\uff1a\u5f85\u9884\u6d4b\u7684\u5c5e\u6027</p> <p>\u7ef4\u5ea6\uff1a\u5f53\u6bcf\u4e2a\u6837\u672c\u7684\u7279\u5f81\u7c7b\u522b\u6570\u91cf\u76f8\u540c\u65f6\uff0c\u5176\u7279\u5f81\u5411\u91cf\u957f\u5ea6</p> <p>\u56fa\u5b9a\u957f\u5ea6\u7684\u7279\u5f81\u5411\u91cf\u4fbf\u4e8e\u91cf\u5316\u5b66\u4e60\u5927\u91cf\u6837\u672c</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/#_2","title":"\u6a21\u578b","text":"<p>\u4f5c\u7528\uff1a\u8f6c\u6362\u6570\u636e</p> <p>\u6df1\u5ea6\u5b66\u4e60\u4e0e\u7ecf\u5178\u65b9\u6cd5\u7684\u533a\u522b\uff1a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7531\u795e\u7ecf\u7f51\u7edc\u9519\u7efc\u590d\u6742\u4ea4\u7ec7\u5728\u4e00\u8d77\uff0c\u5305\u542b\u5c42\u5c42\u6570\u636e\u8f6c\u6362</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/#_3","title":"\u76ee\u6807\u51fd\u6570","text":"<p>\u6982\u5ff5\uff1a\u6a21\u578b\u4f18\u52a3\u7a0b\u5ea6\u7684\u53ef\u89c6\u5316\u5ea6\u91cf</p> <p>\u901a\u5e38\u5b9a\u4e49\u4e00\u4e2a\u76ee\u6807\u51fd\u6570\u4ee5\u671f\u4f18\u5316\u81f3\u6700\u4f4e\u70b9\uff08\u6545\u53c8\u79f0\u635f\u5931\u51fd\u6570\uff09</p> <p>\u5e38\u89c1\u76ee\u6807\u51fd\u6570\uff1a</p> <ul> <li>\u5e73\u65b9\u8bef\u5dee</li> <li>\u9519\u8bef\u7387</li> </ul> <p>\u6570\u636e\u96c6\u5206\u7c7b\uff1a</p> <ul> <li>\u8bad\u7ec3\u96c6\uff1a\u7528\u4e8e\u62df\u5408\u6a21\u578b\u53c2\u6570</li> <li>\u6d4b\u8bd5\u96c6\uff1a\u7528\u4e8e\u8bc4\u4f30\u62df\u5408\u7684\u6a21\u578b</li> </ul> <p>\u8fc7\u62df\u5408\uff1a\u4e00\u4e2a\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u8868\u73b0\u826f\u597d\uff0c\u4f46\u4e0d\u80fd\u63a8\u5e7f\u5230\u6d4b\u8bd5\u96c6</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/#_4","title":"\u4f18\u5316\u7b97\u6cd5","text":"<p>\u4f5c\u7528\uff1a\u641c\u7d22\u51fa\u6700\u4f73\u53c2\u6570\uff0c\u4ee5\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570</p> <p>\u57fa\u672c\u65b9\u6cd5\uff1a\u68af\u5ea6\u4e0b\u964d</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BC%95%E8%A8%80/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/","title":"\u6df1\u5ea6\u5b66\u4e60","text":"<p>\u6982\u5ff5\uff1a\\(\\text{\u6df1\u5ea6\u5b66\u4e60}\\subset\\text{\u673a\u5668\u5b66\u4e60}\\subset\\text{\u4eba\u5de5\u667a\u80fd}\\)</p> <p>\u7279\u70b9\uff1a</p> <ul> <li> <p>\u6df1\u5ea6\uff1a\u6a21\u578b\u5b66\u4e60\u4e86\u8bb8\u591a\u201c\u5c42\u201d\u7684\u8f6c\u6362\uff0c\u6bcf\u4e00\u5c42\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c42\u6b21\u7684\u8868\u793a</p> <p>\u9760\u8fd1\u8f93\u5165\u7684\u5c42\u8868\u793a\u6570\u636e\u7684\u4f4e\u7ea7\u7ec6\u8282\uff0c\u63a5\u8fd1\u5206\u7c7b\u8f93\u51fa\u7684\u5c42\u53ef\u4ee5\u8868\u793a\u7528\u4e8e\u533a\u5206\u7684\u66f4\u62bd\u8c61\u7684\u6982\u5ff5 </p> </li> <li> <p>\u591a\u7ea7\u8868\u793a\u5b66\u4e60\uff1a\u8868\u793a\u5b66\u4e60\u7684\u76ee\u7684\u662f\u5bfb\u627e\u8868\u793a\u672c\u8eab</p> </li> <li>\u7aef\u5230\u7aef\u8bad\u7ec3\uff1a\u53d6\u4ee3\u4f20\u7edf\u5b66\u4e60\u7ba1\u9053\u672b\u7aef\u7684\u6d45\u5c42\u6a21\u578b\uff0c\u53d6\u4ee3\u52b3\u52a8\u5bc6\u96c6\u578b\u7684\u7279\u5f81\u5de5\u7a0b\u8fc7\u7a0b\uff1b\u901a\u8fc7\u53d6\u4ee3\u5927\u90e8\u5206\u7279\u5b9a\u9886\u57df\u7684\u9884\u5904\u7406\uff0c\u6d88\u9664\u5e94\u7528\u9886\u57df\u7684\u754c\u9650\uff0c\u4e3a\u89e3\u51b3\u5404\u79cd\u95ee\u9898\u63d0\u4f9b\u7edf\u4e00\u7684\u5de5\u5177</li> <li>\u5b8c\u5168\u975e\u53c2\u6570\uff1a\u5229\u7528\u6570\u503c\u6a21\u62df\u5f97\u5230\u66f4\u7cbe\u786e\u7684\u6a21\u578b\uff0c\u727a\u7272\u53ef\u89e3\u91ca\u6027</li> <li>\u63a5\u53d7\u6b21\u4f18\u89e3\uff1a\u5904\u7406\u975e\u51f8\u975e\u7ebf\u6027\u4f18\u5316\u95ee\u9898</li> <li>\u793e\u533a\u5f00\u6e90\u7cbe\u795e</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/softmax%E5%9B%9E%E5%BD%92/","title":"softmax\u56de\u5f52","text":"<p>\u5206\u7c7b\u95ee\u9898\uff1a\u8be2\u95ee\u201c\u54ea\u4e00\u4e2a\u201d</p> <p>\u901a\u5e38\u4e0d\u533a\u5206\u786c\u7c7b\u522b(\u6837\u672c\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b)\u548c\u8f6f\u7c7b\u522b(\u6837\u672c\u5c5e\u4e8e\u6bcf\u4e2a\u7c7b\u522b\u7684\u6982\u7387)\uff1a\u5c06\u786c\u7c7b\u522b\u5f53\u4f5c\u8f6f\u7c7b\u522b\u5904\u7406</p> <p>\u5206\u7c7b\u6570\u636e\u8868\u793a\uff1aone-hot\u7f16\u7801</p> <ul> <li>\u7c7b\u522b\u5bf9\u5e94\u7684\u5206\u91cf\u8bbe\u4e3a1\uff0c\u5176\u4f59\u5206\u91cf\u8bbe\u4e3a0</li> </ul> <p>\u7f51\u7edc\u67b6\u6784\uff1a\\(\\mathbf o=\\mathbf {Wx}+\\mathbf b\\)</p> <p></p> <ul> <li>\u95ee\u9898\uff1a\u8f93\u51fa\u65e0\u6cd5\u76f4\u63a5\u4f5c\u4e3a\u6982\u7387\u4f7f\u7528</li> <li>\u89e3\u51b3\uff1asoftmax <p>softmax\u56de\u5f52\u7684\u8f93\u51fa\u5c42\u4e5f\u662f\u5168\u8fde\u63a5\u5c42 \u5bf9\u4e8ed\u8f93\u5165q\u8f93\u51fa\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u5f00\u9500\u4e3a\\(O(dq)\\)</p> </li> </ul> <p>softmax\u51fd\u6570\uff1a\u5c06\u8f93\u51fa\\(\\hat y_j\\)\u8f6c\u5316\u4e3a\u53ef\u89c6\u4e3a\u5c5e\u4e8e\u7c7b\\(j\\)\u7684\u6982\u7387\uff0c\u9009\u62e9\\(\\mathop{\\arg\\max}\\limits_jy_j\\)\u4f5c\u4e3a\u9884\u6d4b</p> <ul> <li>\u5b9a\u4e49\uff1a\\(\\mathbf{\\hat y}=\\text{softmax}(\\mathbf o)\\quad y_j=\\dfrac{\\exp(o_j)}{\\sum_k\\exp(o_k)}\\)</li> <li>\u6027\u8d28\uff1a<ul> <li>\u5f52\u4e00\u5316\uff0c\u975e\u8d1f\u6027\uff0c\u53ef\u5bfc</li> <li>\\(\\mathop{\\arg\\max}\\limits_j\\hat y_j=\\mathop{\\arg\\max}\\limits_jo_j\\)</li> </ul> </li> <li>\u4f18\u5316\uff1a\u5c0f\u6279\u91cf\u6837\u672c\u6807\u51c6\u5316<ul> <li>\u8bbe\u6279\u91cf\u5927\u5c0f\u4e3a\\(n\\), \\(\\mathbf X\\in\\mathbb R^{n\\times d},\\mathbf W\\in\\mathbb R^{d\\times q},\\mathbf b\\in\\mathbb R^{1\\times q}\\)\uff0c\\(\\mathbf{O=XW+b}\\)\uff0c\\(\\hat{\\mathbf Y}=\\text{softmax}(\\mathbf O)\\)</li> <li>\u5bf9\\(\\mathbf O\\)\u7684\u6bcf\u4e00\u884c\uff0c\u5148\u5bf9\u6240\u6709\u9879\u8fdb\u884c\u5e42\u8fd0\u7b97\uff0c\u518d\u6c42\u548c\u6807\u51c6\u5316 <p>softmax\u56de\u5f52\u662f\u7ebf\u6027\u6a21\u578b</p> </li> </ul> </li> </ul> <p>\u635f\u5931\u51fd\u6570\uff1a\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570</p> <ul> <li>\u71b5\uff1a\\(H[P]=\\sum\\limits_j-P(j)\\ln P(j)\\)</li> </ul> <p>\u68af\u5ea6\uff1a\\(\\partial_{o_j}l(\\mathbf y,\\hat{\\mathbf y})=\\text{softmax}(\\mathbf o)_j-y_j\\)\uff0c\u5373\u6a21\u578b\u5206\u914d\u7684\u6982\u7387\u4e0e\u5b9e\u9645\u53d1\u751f\u7684\u60c5\u51b5\u95f4\u7684\u5dee\u5f02</p> <ul> <li>\u63a8\u5bfc\uff1a</li> </ul> \\[ \\begin{array}{ll} l(\\mathbf y,\\hat{\\mathbf y})&amp;=-\\sum\\limits_{j=1}^qy_j\\ln\\dfrac{\\exp(o_j)}{\\sum_{k=1}^q\\exp(o_k)}\\\\ &amp;=\\sum\\limits_{j=1}^qy_j\\ln\\sum\\limits_{k=1}^q\\exp(o_k)-\\sum\\limits_{j=1}^qy_jo_j\\\\ &amp;=\\ln\\sum\\limits_{k=1}^q\\exp(o_k)-\\sum\\limits_{j=1}^qy_jo_j \\end{array} \\] \\[ \\partial_{o_j}l(\\mathbf y,\\hat{\\mathbf y})=\\dfrac{\\exp(o_j)}{\\sum_{k=1}^q\\exp(o_k)}-y_j=\\text{softmax}(\\mathbf o)_j-y_j \\] <p>\u9884\u6d4b\uff1a\u9884\u6d4b\u6982\u7387\u6700\u9ad8\u7684\u7c7b\u522b\u4f5c\u4e3a\u8f93\u51fa\u7c7b\u522b</p> <p>\u8bc4\u4f30\uff1a\u7cbe\u5ea6</p> <ul> <li>\\(\\text{\u7cbe\u5ea6}=\\dfrac{\\text{\u6b63\u786e\u9884\u6d4b\u6570}}{\\text{\u9884\u6d4b\u603b\u6570}}\\)</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/","title":"\u635f\u5931\u51fd\u6570","text":"<p>\u4f5c\u7528\uff1a\u91cf\u5316\u76ee\u6807\u7684\u5b9e\u9645\u503c\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u5dee\u8ddd</p> <p>\u901a\u5e38\u9009\u62e9\u975e\u8d1f\u6570\u4f5c\u4e3a\u635f\u5931\uff0c\u6570\u503c\u8d8a\u5c0f\u635f\u5931\u8d8a\u5c0f\uff0c\u5b8c\u7f8e\u9884\u6d4b\u65f6\u8bef\u5dee\u4e3a0</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/#_1","title":"\u5e73\u65b9\u8bef\u5dee\u51fd\u6570","text":"<p>\u5b9a\u4e49\uff1a\u6837\u672c\\(i\\)\u9884\u6d4b\u503c\u4e3a\\(\\hat{y}^{(i)}\\)\uff0c\u5176\u5bf9\u5e94\u7684\u771f\u5b9e\u6807\u7b7e\u4e3a\\(y^{(i)}\\)\uff0c\u5e73\u65b9\u8bef\u5dee\u4e3a $$ l^{(i)}(\\mathbf w,b)=\\dfrac{1}{2}\\left(\\hat{y}^{(i)}-y^{(i)}\\right)^2 $$ </p> <p>\u5e38\u6570\\(\\dfrac{1}{2}\\)\u4f7f\u5f97\u6c42\u5bfc\u540e\u7cfb\u6570\u5316\u4e3a1\uff0c\u7b80\u5316\u5f62\u5f0f</p> <p>\u63a8\u5e7f\uff1a\u6a21\u578b\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e0a\u7684\u8d28\u91cf\uff1a\u8bad\u7ec3\u96c6\u6837\u672c\u4e0a\u7684\u635f\u5931\u5747\u503c $$ L(\\mathbf w,b)=\\dfrac{1}{n}\\sum_{i=1}^nl^{(i)}(\\mathbf w,b) $$</p> <p>\u63a8\u5bfc\uff1a</p> <ul> <li>\u6b63\u6001\u5206\u5e03\uff1a $$ X\\sim N(\\mu,\\sigma^2)\\Rightarrow P(X=x)=\\dfrac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left(-\\dfrac{1}{2\\sigma^2}(x-\\mu)^2\\right) $$</li> <li>\u566a\u58f0\uff1a\\(y=\\mathbf {w^\\mathsf Tx}+b+\\epsilon\\qquad\\epsilon\\sim N(0,\\sigma^2)\\)</li> <li>\u4f3c\u7136\uff1a</li> </ul> \\[ \\begin{array}{l} L(\\mathbf x^{(i)},y^{(i)};\\mathbf w,b)=P(\\epsilon=y^{(i)}-\\mathbf{w^\\mathsf Tx}^{(i)}-b)=\\dfrac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left(-\\dfrac{1}{2\\sigma^2}(y^{(i)}-\\mathbf{w^\\mathsf Tx}^{(i)}-b)^2\\right)\\\\ L(\\mathbf X,\\mathbf y;\\mathbf w,b)=\\prod\\limits_{i=1}^nL(\\mathbf x^{(i)},y^{(i)};\\mathbf w,b) \\end{array} \\] <ul> <li>\u6781\u5927\u4f3c\u7136\uff1a\u6700\u5c0f\u5316\u8d1f\u5bf9\u6570\u4f3c\u7136\uff08\u4f18\u5316\u4e00\u822c\u6307\u6700\u5c0f\u5316\uff09 $$ -\\ln L(\\mathbf X,\\mathbf y;\\mathbf w,b)=\\sum_{i=1}^n\\dfrac{1}{2}\\ln(2\\pi\\sigma^2)+\\dfrac{1}{2\\sigma^2}(y^{(i)}-\\mathbf{w^\\mathsf Tx}^{(i)}-b)^2 $$ <p>\u5728\u9ad8\u65af\u566a\u58f0\u5047\u8bbe\u4e0b\uff0c\u6700\u5c0f\u5316\u5747\u65b9\u8bef\u5dee \\(\\Leftrightarrow\\) \u7ebf\u6027\u6a21\u578b\u6781\u5927\u4f3c\u7136\u4f30\u8ba1</p> </li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/#_2","title":"\u4ea4\u53c9\u71b5\u635f\u5931","text":"<p>\u5b9a\u4e49\uff1a\u5bf9\u4e8e\u4efb\u4f55\u6807\u7b7e\\(\\mathbf y\\)\u548c\u6a21\u578b\u9884\u6d4b\\(\\hat{\\mathbf y}\\)\uff0c\u635f\u5931\u51fd\u6570\u4e3a $$ l(\\mathbf y,\\hat{\\mathbf y})=-\\sum_{j=1}^qy_j\\log \\hat{y_j} $$</p> <p>\u63a8\u5bfc\uff1a</p> <ul> <li>\u6a21\u578b\u5b9a\u4e49\uff1a\\(\\hat y=P(y=1|x),\\ 1-\\hat y=P(y=0|x)\\)</li> <li>\u4f3c\u7136\uff1a\\(\\hat y\\)\u4e3a\u5173\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u51fd\u6570\uff0c\u4f3c\u7136\u51fd\u6570\u503c\u4e3a\u5f97\u5230\u8be5\u9884\u6d4b\u7ed3\u679c\u7684\u6982\u7387 $$ L(y^{(i)},\\hat y_j)=P(y_j|x^{(i)})={\\hat y_j}^{y_j}\\cdot{(1-\\hat y_j)}^{1-y_j}\\quad y_j\\in\\set{0,1} $$ $$ L(\\mathbf y,\\hat{\\mathbf y})=P(\\mathbf Y|\\mathbf X)=\\prod_{i=1}^q{\\hat y_j}^{y_j}\\cdot{(1-\\hat y_j)}^{1-y_j} $$</li> <li>\u6781\u5927\u4f3c\u7136\uff1a $$ -\\ln L(\\mathbf y,\\hat{\\mathbf y})=\\sum_{i=1}^nl(\\mathbf y^{(i)},\\hat{\\mathbf y}^{(i)}) $$ <p>\\(P(\\mathbf y|\\mathbf x)=1\\)\uff0c\u5373\u6b63\u786e\u9884\u6d4b\u65f6\u635f\u5931\u51fd\u6570\u4e0d\u80fd\u8fdb\u4e00\u6b65\u6700\u5c0f\u5316\uff0c\u4f46\u7531\u4e8e\u6807\u7b7e\u4e2d\u566a\u58f0\u7684\u5b58\u5728\u6216\u8f93\u5165\u7279\u5f81\u4e0d\u591f\u800c\u4e0d\u53ef\u80fd\u5b8c\u7f8e\u5206\u7c7b</p> </li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/","title":"\u7ebf\u6027\u56de\u5f52","text":"<p>\u56de\u5f52\uff1a\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u5efa\u6a21\u7684\u4e00\u7c7b\u65b9\u6cd5</p> <p>\u5e94\u7528\uff1a\u9884\u6d4b\u95ee\u9898</p> <p>\u5047\u8bbe\uff1a</p> <ul> <li>\u81ea\u53d8\u91cf\\(\\mathbf x\\)\u548c\u56e0\u53d8\u91cf\\(y\\)\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u5448\u7ebf\u6027\u7684</li> <li>\u4efb\u4f55\u566a\u58f0\u6bd4\u8f83\u6b63\u5e38\uff08\u9075\u5faa\u6b63\u6001\u5206\u5e03\uff09</li> </ul> <p>\u6982\u5ff5\uff1a</p> <ul> <li>\u8bad\u7ec3\uff08\u6570\u636e\uff09\u96c6</li> <li>\u6837\u672c / \u6570\u636e\u70b9 / \u6570\u636e\u5b9e\u4f8b</li> <li>\u6807\u7b7e / \u76ee\u6807</li> <li>\u7279\u5f81 / \u534f\u53d8\u91cf</li> </ul> <p>\u8868\u793a\uff1a</p> <ul> <li>\u6837\u672c\u6570\\(n\\)</li> <li>\u7d22\u5f15\u4e3a\\(i\\)\u7684\u6837\u672c\uff1a\\(\\mathbf x^{(i)}=[x_1^{(i)},x_2^{(i)}]^\\mathsf{T}\\mapsto y^{(i)}\\)</li> </ul> <p>\u57fa\u672c\u5143\u7d20\uff1a</p> <ol> <li>\u7ebf\u6027\u6a21\u578b\uff1a\\(\\mathbf{\\hat y}=\\mathbf{Xw}+b\\)</li> <li>\u635f\u5931\u51fd\u6570\uff1a\u6a21\u578b\u8d28\u91cf\u7684\u5ea6\u91cf\u65b9\u5f0f</li> </ol> \\[ L(\\mathbf w,b)=\\dfrac{1}{n}\\sum_{i=1}^n\\dfrac{1}{2}\\left(w^{\\mathsf T}\\mathbf x^{(i)}+b-y^{(i)}\\right)^2 \\] <p>\u6a21\u578b\u8bad\u7ec3\u65f6\uff0c\u671f\u671b\u5bfb\u627e\\((\\mathbf w^*,b^*)\\)\u6700\u5c0f\u5316\u603b\u635f\u5931\uff0c\u5373</p> \\[ \\mathbf w^*,b^*=\\mathop{\\arg\\!\\min}\\limits_{\\mathbf w,b}\\ L(\\mathbf w,b) \\] <ol> <li>\u89e3\u6790\u89e3\uff1a\u5f53\u4f18\u5316\u95ee\u9898\u7b80\u5355\u65f6\uff0c\u53ef\u7528\u516c\u5f0f\u7b80\u5355\u5730\u8868\u8fbe\u8be5\u4f18\u5316\u95ee\u9898\u7684\u89e3</li> </ol> <p>\u4ee4\\(X\\leftarrow\\begin{bmatrix}X&amp;1\\end{bmatrix},\\mathbf w\\leftarrow\\begin{bmatrix}\\mathbf{w}\\\\b\\end{bmatrix}\\)</p> \\[ \\begin{array}{l} L(\\mathbf X,\\mathbf y,\\mathbf w)=\\dfrac{1}{2n}\\left\\Vert\\mathbf y-\\mathbf {Xw}\\right\\Vert^2\\\\ \\dfrac{\\partial}{\\partial\\mathbf w}L(\\mathbf X,\\mathbf y,\\mathbf w)=-\\dfrac{1}{n}(\\mathbf{y-Xw})^{\\mathsf T}\\mathbf X\\\\ \\dfrac{\\partial}{\\partial\\mathbf w}L(\\mathbf X,\\mathbf y,\\mathbf w)=0\\Rightarrow \\mathbf w^*=(\\mathbf{X^{\\mathsf T}X})^{-1}\\mathbf{Xy} \\end{array} \\] <p>\u5e76\u975e\u6240\u6709\u95ee\u9898\u90fd\u5b58\u5728\u89e3\u6790\u89e3</p> <ol> <li>\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff1a\u51e0\u4e4e\u53ef\u4ee5\u4f18\u5316\u6240\u6709\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b</li> </ol> \\[ \\begin{array}{l} \\mathbf w\\leftarrow\\mathbf w-\\dfrac{\\eta}{|B|}\\sum\\limits_{i\\in B}\\partial_{\\mathbf w}l^{(i)}(\\mathbf w,b)=\\mathbf w-\\dfrac{\\eta}{|B|}\\sum\\limits_{i\\in B}x^{(i)}(\\mathbf w^{\\mathsf T}\\mathbf x^{(i)}+b-y^{(i)})\\\\ b\\leftarrow b-\\dfrac{\\eta}{|B|}\\sum\\limits_{i\\in B}\\partial_{b}l^{(i)}(\\mathbf w,b)=b-\\dfrac{\\eta}{|B|}\\sum\\limits_{i\\in B}(\\mathbf w^{\\mathsf T}\\mathbf x^{(i)}+b-y^{(i)}) \\end{array} \\] <ol> <li>\u9884\u6d4b\uff08\u63a8\u65ad\uff09\uff1a\u7ed9\u5b9a\u7279\u5f81\u7684\u60c5\u51b5\u4e0b\uff0c\u5229\u7528\u5df2\u5b66\u4e60\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b\\(\\mathbf{\\hat w^{\\mathsf T}x}+\\hat b\\)\u4f30\u8ba1\u76ee\u6807</li> </ol> <p>\u795e\u7ecf\u7f51\u7edc\u63cf\u8ff0\uff1a\u5355\u5c42\u795e\u7ecf\u7f51\u7edc</p> <p></p> <ul> <li>\u8f93\u5165\uff1a\\(x_1,\\cdots,x_d\\)    \u7279\u5f81\u7ef4\u5ea6 / \u8f93\u5165\u6570\uff1a\\(d\\)</li> <li>\u8f93\u51fa\uff1a\\(o_1\\)    \u8f93\u51fa\u6570\uff1a1</li> <li>\u5c42\u6570\uff1a\u4e0d\u8003\u8651\u8f93\u5165\u5c42\uff0c\u5c42\u6570\u4e3a1</li> <li>\u5168\u8fde\u63a5\u5c42 / \u7a20\u5bc6\u5c42\uff1a\u6bcf\u4e2a\u8f93\u5165\u90fd\u4e0e\u6bcf\u4e2a\u8f93\u51fa\u76f8\u8fde</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/","title":"\u7ebf\u6027\u6a21\u578b","text":"<p>\u6982\u5ff5\uff1a\u76ee\u6807\u53ef\u8868\u793a\u4e3a\u7279\u5f81\u7684\u52a0\u6743\u548c</p> \\[ \\hat y=w_1x_1+\\cdots+w_dx_d+b \\] <p>\u5176\u4e2d</p> <ul> <li>\\(\\mathbf w\\)\uff1a\u6743\u91cd</li> <li>\\(b\\)\uff1a\u504f\u7f6e / \u504f\u79fb\u91cf / \u622a\u8ddd</li> <li>\\(\\hat y\\)\uff1a\u4f30\u8ba1\u503c <p>\u8f93\u5165\u7279\u5f81\u7684\u4eff\u5c04\u53d8\u6362\uff08\u7ebf\u6027\u53d8\u6362 + \u5e73\u79fb\uff09</p> </li> </ul> <p>\u4ee4\\(\\mathbf x\\in\\mathbb{R}^d,\\mathbf w\\in\\mathbb{R}^d\\)</p> \\[ \\hat y=\\mathbf w^\\mathsf{T}\\mathbf x+b \\] <p>\u4ee4\\(\\mathbf X\\in\\mathbb{R}^{n\\times d}\\)\u4e3a\u6574\u4e2a\u6570\u636e\u96c6\u7684\\(n\\)\u4e2a\u6837\u672c\u7684\u7279\u5f81\u96c6\uff0c\\(\\mathbf{\\hat y}\\in\\mathbb{R}^n\\)</p> \\[ \\mathbf{\\hat y}=\\mathbf{Xw}+b \\] <p>\u76ee\u6807\uff1a\u7ed9\u5b9a\\(\\mathbf{X}\\)\u53ca\u5176\u5bf9\u5e94\u6807\u7b7e\\(\\mathbf{y}\\)\uff0c\u6c42\u6a21\u578b\u53c2\u6570\\(\\mathbf w,b\\) s.t. \u4ece\\(\\mathbf X\\)\u7684\u540c\u5206\u5e03\u4e2d\u62bd\u6837\u65b0\u6837\u672c\u7279\u5f81\u65f6\uff0c\u65b0\u6837\u672c\u9884\u6d4b\u6807\u7b7e\u8bef\u5dee\u5c3d\u53ef\u80fd\u5c0f</p> <p>\u56f0\u96be\uff1a\u5b58\u5728\u89c2\u6d4b\u8bef\u5dee\uff0c\u627e\u4e0d\u5230\\(n\\)\u6837\u672c\u771f\u5b9e\u6570\u636e\u96c6 s.t. \\(\\forall 1\\leqslant i\\leqslant n:y^{(i)}=\\mathbf{w}^\\mathsf{T}\\mathbf{x}^{(i)}+b\\)</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/","title":"\u968f\u673a\u68af\u5ea6\u4e0b\u964d","text":"<p>\u4f5c\u7528\uff1a\u5728\u65e0\u6cd5\u5f97\u5230\u89e3\u6790\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u6548\u5730\u8bad\u7ec3\u6a21\u578b</p> <p>\u96be\u4ee5\u4f18\u5316\u7684\u6a21\u578b\u6548\u679c\u5f80\u5f80\u66f4\u597d</p> <p>\u68af\u5ea6\u4e0b\u964d\uff1a\u4e0d\u65ad\u5730\u5728\u635f\u5931\u51fd\u6570\u9012\u51cf\u7684\u65b9\u5411\u4e0a\u66f4\u65b0\u53c2\u6570\u6765\u964d\u4f4e\u8bef\u5dee</p> <p>\u64cd\u4f5c\uff1a\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6</p> <p>\u95ee\u9898\uff1a\u6267\u884c\u901f\u5ea6\u6162\uff0c\u6bcf\u6b21\u66f4\u65b0\u53c2\u6570\u524d\u9700\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6</p> <p>\u89e3\u51b3\uff1a\u968f\u673a\u68af\u5ea6\u4e0b\u964d</p> <ul> <li>\u601d\u60f3\uff1a\u5728\u6bcf\u6b21\u9700\u8981\u8ba1\u7b97\u66f4\u65b0\u65f6\u968f\u673a\u62bd\u53d6\u4e00\u5c0f\u6279\u91cf\u6837\u672c</li> <li>\u6b65\u9aa4\uff1a<ol> <li>\u968f\u673a\u62bd\u53d6\u5c0f\u6279\u91cf\\(B\\)\uff08\u7531\u56fa\u5b9a\u6570\u91cf\u7684\u8bad\u7ec3\u6837\u672c\u7ec4\u6210\uff09</li> <li>\u8ba1\u7b97\u5c0f\u6279\u91cf\u7684\u635f\u5931\u51fd\u6570\u5173\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6</li> <li>\u5f53\u524d\u53c2\u6570\u51cf\u53bb\u68af\u5ea6\u4e58\u4ee5\u5b66\u4e60\u7387\\(\\eta\\)</li> <li>\u8bad\u7ec3\u82e5\u5e72\u6b21\u540e\u8bb0\u5f55\u6a21\u578b\u53c2\u6570\u4f30\u8ba1\u503c\\(\\hat w,\\hat b\\) $$ (\\mathbf w,b)\\leftarrow(\\mathbf w,b)-\\dfrac{\\eta}{|B|}\\sum_{i\\in B}\\partial_{\\mathbf (w,b)}l^{(i)}(\\mathbf w,b) $$ \u5176\u4e2d\\(|B|\\)\u4e3a\u6279\u91cf\u5927\u5c0f</li> </ol> </li> </ul> <p>\u8d85\u53c2\u6570\uff1a\u9884\u5148\u8bbe\u5b9a\u800c\u975e\u6a21\u578b\u8bad\u7ec3\u5f97\u5230\uff08\u5982\u6279\u91cf\u5927\u5c0f\u548c\u5b66\u4e60\u7387\uff09</p> <p>\u8c03\u53c2\uff1a\u9009\u62e9\u8d85\u53c2\u6570\u7684\u8fc7\u7a0b\uff0c\u6839\u636e\u8bad\u7ec3\u8fed\u4ee3\u7ed3\u679c\uff08\u5728\u9a8c\u8bc1\u6570\u636e\u96c6\u4e0a\u8bc4\u4f30\u5f97\u5230\uff09\u8c03\u6574</p> <p>\u96be\u70b9\uff1a</p> <ul> <li>\u7b97\u6cd5\u4f1a\u4f7f\u635f\u5931\u51fd\u6570\u5411\u6700\u5c0f\u503c\u7f13\u6162\u6536\u655b\uff0c\u4f46\u4e0d\u80fd\u5728\u6709\u9650\u7684\u6b65\u6570\u5185\u975e\u5e38\u7cbe\u786e\u5730\u8fbe\u5230\u6700\u5c0f\u503c</li> <li>\u635f\u5931\u5e73\u9762\u4e0a\u901a\u5e38\u5305\u542b\u591a\u4e2a\u6781\u5c0f\u503c</li> <li>\u6cdb\u5316\uff1a\u96be\u4ee5\u627e\u5230\u4e00\u7ec4\u53c2\u6570\uff0c\u5728\u4ece\u672a\u89c1\u8fc7\u7684\u6570\u636e\u4e0a\u5b9e\u73b0\u8f83\u5c0f\u7684\u635f\u5931</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86/","title":"\u77e9\u9635\u5fae\u5206","text":""},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86/#_1","title":"\u68af\u5ea6","text":"<p>\u5b9a\u4e49\uff1a\\(\\nabla_\\textbf xf(\\textbf x)=\\left[\\dfrac{\\partial f(\\textbf x)}{\\partial x_1},\\dfrac{\\partial f(\\textbf x)}{\\partial x_2},\\cdots,\\dfrac{\\partial f(\\textbf x)}{\\partial x_n}\\right]^\\mathsf{T}\\)</p> <p>\u6027\u8d28\uff1a</p> <ul> <li>\\(\\nabla_\\mathbf x\\mathbf {Ax}=\\mathbf{A}^\\mathsf T\\)</li> <li>\\(\\nabla_\\mathbf x\\mathbf x^\\mathsf T\\mathbf A=\\mathbf A\\)</li> <li>\\(\\nabla_\\mathbf x\\mathbf x^\\mathsf T\\mathbf{Ax}=(\\mathbf A+\\mathbf A^\\mathsf T)\\mathbf x\\)</li> <li>\\(\\nabla_\\mathbf x\\Vert\\mathbf x\\Vert^2=\\nabla_\\mathbf x\\mathbf x^\\mathsf T\\mathbf x=2\\mathbf x\\)</li> <li>\\(\\nabla_\\mathbf X\\Vert\\mathbf X\\Vert^2_F=2\\mathbf X\\)</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86/#_2","title":"\u6807\u91cf\u5bf9\u5411\u91cf\u6c42\u5bfc","text":"<p>\u516c\u5f0f\uff1a\\(\\mathbf x=\\begin{bmatrix}x_1\\\\x_2\\\\\\vdots\\\\x_n\\end{bmatrix}\\qquad\\dfrac{\\partial y}{\\partial\\mathbf x}=\\begin{bmatrix}\\dfrac{\\partial y}{\\partial x_1}\\ \\dfrac{\\partial y}{\\partial x_2}\\ \\cdots\\dfrac{\\partial y}{\\partial x_n}\\end{bmatrix}\\)</p> <p>\u8be5\u7b26\u53f7\u79f0\u4e3a\u5206\u5b50\u5e03\u5c40\u7b26\u53f7</p> <p>\u6027\u8d28\uff1a</p> <ul> <li>\\(\\dfrac{\\partial (u+v)}{\\partial\\mathbf x}=\\dfrac{\\partial u}{\\partial\\mathbf x}+\\dfrac{\\partial v}{\\partial\\mathbf x}\\)</li> <li>\\(\\dfrac{\\partial(uv)}{\\partial\\mathbf x}=\\dfrac{\\partial u}{\\partial\\mathbf x}v+\\dfrac{\\partial v}{\\partial\\mathbf x}u\\)</li> <li>\\(\\dfrac{\\partial\\braket\\mathbf{u,v}}{\\partial\\mathbf x}=\\mathbf u^\\mathsf T\\dfrac{\\partial\\mathbf v}{\\partial\\mathbf x}+\\partial\\mathbf v^\\mathsf T\\dfrac{\\partial\\mathbf u}{\\partial\\mathbf x}\\)</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86/#_3","title":"\u5411\u91cf\u5bf9\u6807\u91cf\u6c42\u5bfc","text":"<p>\u516c\u5f0f\uff1a\\(\\mathbf y=\\begin{bmatrix}y_1\\\\y_2\\\\\\vdots\\\\y_n\\end{bmatrix}\\qquad\\dfrac{\\partial\\mathbf y}{\\partial x}=\\begin{bmatrix}\\dfrac{\\partial y_1}{\\partial x}\\\\\\dfrac{\\partial y_2}{\\partial x}\\\\\\vdots\\\\\\dfrac{\\partial y_m}{\\partial x}\\end{bmatrix}\\)</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86/#_4","title":"\u5411\u91cf\u5bf9\u5411\u91cf\u6c42\u5bfc","text":"<p>\u516c\u5f0f\uff1a\\(\\mathbf x=\\begin{bmatrix}x_1\\\\x_2\\\\\\vdots\\\\x_n\\end{bmatrix}\\qquad\\mathbf y=\\begin{bmatrix}y_1\\\\y_2\\\\\\vdots\\\\y_n\\end{bmatrix}\\) \\(\\dfrac{\\partial\\mathbf y}{\\partial\\mathbf x}=\\begin{bmatrix}\\dfrac{\\partial y_1}{\\partial\\mathbf x}\\\\\\dfrac{\\partial y_2}{\\partial\\mathbf x}\\\\\\vdots\\\\\\dfrac{\\partial y_m}{\\partial\\mathbf x}\\end{bmatrix}=\\begin{bmatrix}\\dfrac{\\partial y_1}{\\partial x_1}&amp;\\dfrac{\\partial y_1}{\\partial x_2}&amp;\\cdots&amp;\\dfrac{\\partial y_1}{\\partial x_n}\\\\\\dfrac{\\partial y_2}{\\partial x_1}&amp;\\dfrac{\\partial y_2}{\\partial x_2}&amp;\\cdots&amp;\\dfrac{\\partial y_2}{\\partial x_n}\\\\&amp;&amp;\\ddots&amp;\\\\\\dfrac{\\partial y_m}{\\partial x_1}&amp;\\dfrac{\\partial y_m}{\\partial x_2}&amp;\\cdots&amp;\\dfrac{\\partial y_m}{\\partial x_n}\\end{bmatrix}\\)</p> <p>\u6027\u8d28\uff1a</p> <ul> <li>\\(\\dfrac{\\partial(a\\mathbf u)}{\\partial\\mathbf x}=a\\dfrac{\\partial\\mathbf u}{\\partial\\mathbf x}\\)</li> <li>\\(\\dfrac{\\partial(\\mathbf{Au})}{\\partial\\mathbf x}=\\mathbf A\\dfrac{\\partial\\mathbf u}{\\partial\\mathbf x}\\)</li> <li>\\(\\dfrac{\\partial (\\mathbf u+\\mathbf v)}{\\partial\\mathbf x}=\\dfrac{\\partial\\mathbf u}{\\partial\\mathbf x}+\\dfrac{\\partial\\mathbf v}{\\partial\\mathbf x}\\)</li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86/#_5","title":"\u603b\u7ed3","text":"<p> \u89c4\u5f8b\uff1a\u6c42\u5bfc\u540e\uff0c\u5206\u6bcdshape\u4e0d\u53d8\uff0c\u5206\u5b50shape\u98a0\u5012\uff0c\u5c3e\u90e81\u7565\u53bb</p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/","title":"\u81ea\u52a8\u5fae\u5206","text":""},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/#_1","title":"\u8ba1\u7b97\u56fe","text":"<p>\u6982\u5ff5\uff1a\u5c06\u8ba1\u7b97\u6d41\u7a0b\u8868\u793a\u4e3a\u6811\u7ed3\u6784\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fd0\u7b97\uff0c\u5177\u6709\u82e5\u5e72\u4e2a\u8f93\u5165\\(x_1,\\cdots,x_n\\)\u548c\u4e00\u4e2a\u8f93\u51fa\\(y=f(x_1,\\cdots,x_n)\\)</p> <p></p> <p>\u6b63\u5411\u4f20\u64ad\uff1a\u7531\u8f93\u5165\u5411\u8f93\u51fa\u65b9\u5411\u8fdb\u884c\u8ba1\u7b97</p> <p>\u53cd\u5411\u4f20\u64ad\uff1a\u5229\u7528\u94fe\u5f0f\u6cd5\u5219\\(\\dfrac{\\partial y}{\\partial x}=\\left(\\left(\\dfrac{\\partial y}{\\partial u_n}\\dfrac{\\partial u_n}{\\partial u_{n-1}}\\right)\\cdots\\right)\\dfrac{\\partial u_1}{\\partial x}\\)\uff0c\u4ece\u8f93\u51fa\u65b9\u5411\u5411\u8f93\u5165\u65b9\u5411\u7d2f\u8ba1\u68af\u5ea6</p> <ul> <li>\\(\\dfrac{\\partial y}{\\partial x_i}=f(x_1,\\cdots,x_n,y)\\)\uff0c\u5728\u6b63\u5411\u4f20\u64ad\u65f6\u9700\u8bb0\u5f55\u5e76\u66f4\u65b0\u8be5\u8282\u70b9\u5904\\(\\dfrac{\\partial y}{\\partial x_i}\\)\u7684\u503c <p>\u53cd\u5411\u4f20\u64ad\u9700\u5b58\u50a8\u68af\u5ea6\u662f\u795e\u7ecf\u7f51\u7edc\u5bf9\u663e\u5b58\u8981\u6c42\u9ad8\u7684\u6839\u672c\u539f\u56e0</p> </li> </ul>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/#_2","title":"\u5b9e\u73b0","text":"<p>\u6846\u67b6\uff1a <pre><code>class Layer:\n    def __init__(self):\n        self.x1, self.x2 = None\n        self.y = None\n\n    def forward(self, x1, x2):\n        self.x1 = x1, self.x2 = x2\n        self.y = f(x1, x2)\n        return self.y\n\n    def backward(self, dy):\n        dx1 = dy * g(self.x1, self.x2, self.y)\n        dx2 = dy * g(self.x1, self.x2, self.y)\n        return dx1, dx2\n</code></pre></p> <p>\\(\\text{dx}:=\\dfrac{\\partial z}{\\partial x}\\)\uff0c\u7531\u4e8e\u88ab\u6c42\u5bfc\u53d8\u91cf\\(z\\)\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u4e0d\u53d8\uff0c\u6545\u5229\u7528\u81ea\u53d8\u91cf\\(x\\)\u6807\u8bb0\u504f\u5bfc\u6570 \u53cd\u5411\u4f20\u64ad\u6c42\u5f97<code>dx1, dx2</code>\u540e\u66f4\u65b0<code>x1.grad, x2.grad = dx1, dx2</code></p> <p>\u4f8b\uff1aSigmoid Layer    \\(y=\\dfrac{1}{1+e^{-x}}\\)</p> <p>\u63a8\u5bfc\uff1a\\(\\dfrac{\\partial y}{\\partial x}=\\dfrac{e^{-x}}{(1+e^{-x})^2}=y(1-y)\\)</p> <p>\u56fe\u793a\uff1a</p> <p></p> <p>\u5b9e\u73b0\uff1a <pre><code>import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\nclass Sigmoid:\n    def __init__(self):\n        self.y = None\n\n    def forward(self, x):\n        self.y = sigmoid(x)\n        return self.y\n\n    def backward(self, dy):\n        dx = dy * (1.0 - self.y) * self.y\n        return dx\n</code></pre></p>"},{"location":"machine%20learning/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/#_3","title":"\u5206\u79bb\u8ba1\u7b97","text":"<p>\u80cc\u666f\uff1a\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u67d0\u4e9b\u53d8\u91cf\u65e0\u9700\u6c42\u504f\u5bfc\uff0c\u5219\u53ef\u4e0d\u7528\u8bb0\u5f55\u5176\u504f\u5bfc\u6570\uff0c\u5c06\u5176\u4ece\u8ba1\u7b97\u56fe\u4e2d\u79fb\u9664\uff0c\u4ece\u800c\u8282\u7ea6\u5b58\u50a8\u7a7a\u95f4</p> <p></p>"},{"location":"miscellaneous/","title":"\u6742\u9879","text":"<p>Abstract</p> <p>\u4e0d\u5728\u4e0a\u8ff0\u5206\u7c7b\u91cc\u7684\u5c0f\u6742\u9879</p>"},{"location":"miscellaneous/verilog/","title":"verilog","text":"<p>Info</p> <p>verilog\u81ea\u5b66\u7b14\u8bb0</p> <p>\u53c2\u8003\u4e66\u76ee: Verilog\u6570\u5b57\u7cfb\u7edf\u8bbe\u8ba1\u6559\u7a0b\u3010\u7b2c3\u7248\u3011</p> <p>\u4f17\u6240\u5468\u77e5\uff0cVerilog\u4e0d\u6559\u4f46\u8981\u4f1a\uff0c\u653e\u4e9b\u57fa\u7840\u8bed\u6cd5\u7684\u5b66\u4e60\u7b14\u8bb0\uff0c\u5e0c\u671b\u80fd\u5e2e\u5230\u6709\u9700\u8981\u7684\u540c\u5b66\u3002</p>"},{"location":"miscellaneous/verilog/%E5%9D%97%E8%AF%AD%E5%8F%A5/","title":"\u5757\u8bed\u53e5","text":"<p>\u6982\u5ff5\uff1a\u5c06\u4e24\u6761\u6216\u591a\u6761\u8bed\u53e5\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u5728\u683c\u5f0f\u4e0a\u770b\u66f4\u50cf\u4e00\u6761\u8bed\u53e5</p> <p>\u987a\u5e8f\u5757\uff1a\u6807\u8bc6\u987a\u5e8f\u6267\u884c\u7684\u8bed\u53e5</p> <ul> <li>\u5757\u5185\u7684\u8bed\u53e5\u6309\u987a\u5e8f\u6267\u884c\uff0c\u4e0a\u4e00\u6761\u8bed\u53e5\u6267\u884c\u5b8c\u540e\u4e0b\u9762\u8bed\u53e5\u624d\u80fd\u6267\u884c</li> <li>\u6bcf\u6761\u8bed\u53e5\u7684\u5ef6\u8fdf\u65f6\u95f4\u76f8\u5bf9\u4e8e\u524d\u4e00\u6761\u8bed\u53e5\u7684\u4eff\u771f\u65f6\u95f4</li> <li> <p>\u76f4\u5230\u6700\u540e\u4e00\u6761\u8bed\u53e5\u6267\u884c\u5b8c\uff0c\u7a0b\u5e8f\u6d41\u7a0b\u624d\u8df3\u51fa\u8be5\u8bed\u53e5\u5757 <pre><code>begin\n    \u8bed\u53e51;\n    \u8bed\u53e52;\nend\n\nbegin: \u5757\u540d // \u5757\u7684\u6807\u8bc6\u540d\n    \u8bed\u53e51;\n    \u8bed\u53e52;\nend\n</code></pre></p> </li> <li> <p>\u5757\u5185\u58f0\u660e\u8bed\u53e5\u53ef\u4ee5\u662f\u53c2\u6570\u58f0\u660e\u8bed\u53e5\u3001reg\u578b\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u3001integer\u578b\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u548creal\u578b\u53d8\u91cf\u58f0\u660e\u8bed\u53e5 <pre><code>parameter d = 50;\nreg [7:0] r;\nbegin\n    #d r = 'h35;\n    #d r = 'hE2;\n    #d r = 'h00;\n    #d r = 'hF7;\n    #d -&gt; end_wave; // -&gt;\u7528\u4e8e\u89e6\u53d1\u4e8b\u4ef6(\u7528\u4e8e\u4eff\u771f, \u65e0\u6cd5\u7efc\u5408)\nend\n</code></pre></p> </li> </ul> <p>\u5e76\u884c\u5757\uff1a\u6807\u8bc6\u5e76\u884c\u6267\u884c\u7684\u8bed\u53e5</p> <ul> <li>\u5757\u5185\u8bed\u53e5\u540c\u65f6\u6267\u884c</li> <li>\u5757\u5185\u6bcf\u6761\u8bed\u53e5\u7684\u5ef6\u8fdf\u65f6\u95f4\u76f8\u5bf9\u4e8e\u7a0b\u5e8f\u6d41\u7a0b\u63a7\u5236\u8fdb\u5165\u5230\u5757\u5185\u7684\u4eff\u771f\u65f6\u95f4</li> <li>\u5ef6\u8fdf\u65f6\u95f4\u7528\u6765\u7ed9\u8d4b\u503c\u8bed\u53e5\u63d0\u4f9b\u65f6\u5e8f</li> <li> <p>\u5f53\u6309\u65f6\u95f4\u65f6\u5e8f\u6392\u5728\u6700\u540e\u7684\u8bed\u53e5\u6267\u884c\u5b8c\u540e\u6216\u4e00\u4e2adisable\u8bed\u53e5\u6267\u884c\u65f6\uff0c\u7a0b\u5e8f\u6d41\u7a0b\u63a7\u5236\u8df3\u51fa\u5757 <pre><code>fork\n    \u8bed\u53e51;\n    \u8bed\u53e52;\njoin\n\nfork: \u5757\u540d\n    \u8bed\u53e51;\n    \u8bed\u53e52;\njoin\n</code></pre></p> </li> <li> <p>\u5757\u5185\u58f0\u660e\u8bed\u53e5\u53ef\u4ee5\u662f\u53c2\u6570\u58f0\u660e\u8bed\u53e5\u3001reg\u578b\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u3001integer\u578b\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u3001real\u578b\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u3001time\u578b\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u548cevent\u58f0\u660e\u8bed\u53e5 <pre><code>fork\n    #50 r = 'h35;\n    #100 r = 'hE2;\n    #150 r = 'h00;\n    #200 r = 'hF7;\n    #250 -&gt; end_wave;\njoin\n</code></pre></p> </li> </ul> <p>\u5e76\u884c\u5757\u9700\u907f\u514d\u7ade\u4e89\uff1a\u4e0d\u80fd\u5b58\u5728\u4e24\u6761\u8bed\u53e5\u540c\u65f6\u5bf9\u4e00\u4e2a\u53d8\u91cf\u4ea7\u751f\u5f71\u54cd</p> <p>\u7279\u70b9\uff1a</p> <ul> <li> <p>\u5d4c\u5957\u5757\uff1a\u987a\u5e8f\u5757\u5e76\u884c\u5757\u6df7\u5408\u4f7f\u7528 <pre><code>initial begin\n    x = 1'b0;\n    fork\n        #5 y = 1'b1;\n        #10 z = {x, y};\n    join\n    #20 w = {y, x};\nend\n</code></pre></p> </li> <li> <p>\u547d\u540d\u5757\uff1a\u5757\u53ef\u4ee5\u5177\u6709\u81ea\u5df1\u7684\u540d\u5b57</p> <ul> <li>\u5757\u540d\uff1a\u5728\u4efb\u4f55\u4eff\u771f\u65f6\u523b\u786e\u8ba4\u53d8\u91cf\u503c\u7684\u65b9\u6cd5<ul> <li>\u53ef\u5728\u5757\u5185\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\uff08\u53ea\u80fd\u5728\u5757\u5185\u4f7f\u7528\u7684\u53d8\u91cf\uff09</li> <li>\u53ef\u4ee5\u5141\u8bb8\u5757\u88ab\u5176\u4ed6\u8bed\u53e5\u8c03\u7528\uff08\u5982disable\uff09</li> <li>\u6240\u6709\u53d8\u91cf\u662f\u9759\u6001\u7684\uff0c\u8df3\u5165\u6216\u8df3\u51fa\u5757\u4e0d\u5f71\u54cd\u5b58\u50a8\u5728\u53d8\u91cf\u5185\u7684\u503c <pre><code>module top; // \u547d\u540d\u5757\n    initial begin: block1\n        integer i; // \u53ef\u901a\u8fc7top.block.1\u8bbf\u95ee\n    end\n    initial fork:\n        reg i; // top.block.i\n    join\nendmodule\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>\u547d\u540d\u5757\u7981\u7528</p> <ul> <li>disable\u5173\u952e\u5b57\uff1a\u7c7b\u4f3c\u4e8ebreak\uff0c\u53ef\u7981\u7528\u4efb\u610f\u4e00\u4e2a\u547d\u540d\u5757 <pre><code>reg [15:0] flag;\ninitial begin\n    flag = 16'b0010_0000_0000_0000;\n    i = 0;\n    begin: block1\n        while (i &lt; 16) begin\n            if (flag[i]) begin\n                $display(\"Encountered a TRUE bit at element number %d\", i);\n                disable block1;\n            end\n            i = i + 1;\n        end\n    end\nend\n</code></pre></li> </ul> </li> </ul>"},{"location":"miscellaneous/verilog/%E5%9D%97%E8%AF%AD%E5%8F%A5/#_1","title":"\u751f\u6210\u5757","text":"<p>\u6982\u5ff5\uff1a\u52a8\u6001\u5730\u751f\u6210Verilog\u4ee3\u7801\uff0c\u80fd\u63a7\u5236\u53d8\u91cf\u7684\u58f0\u660e\u3001\u4efb\u52a1\u6216\u51fd\u6570\u7684\u8c03\u7528\uff0c\u8fd8\u80fd\u5bf9\u5b9e\u4f8b\u5f15\u7528\u8fdb\u884c\u5168\u9762\u7684\u63a7\u5236</p> <p>\u53ef\u751f\u6210\u5b9e\u4f8b\u7c7b\u578b\uff1a</p> <ul> <li>\u6a21\u5757</li> <li>\u7528\u6237\u5b9a\u4e49\u539f\u8bed</li> <li>\u95e8\u7ea7\u539f\u8bed</li> <li>\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5</li> <li><code>initial</code>\u548c<code>always</code>\u5757 \u53ef\u58f0\u660e\u6570\u636e\u7c7b\u578b\uff1a</li> <li>net, reg</li> <li>integer, real, time, realtime</li> <li>event</li> </ul> <p>\u5faa\u73af\u751f\u6210\uff1a\u5bf9\u6a21\u5757\u6216\u6a21\u5757\u9879\u8fdb\u884c\u591a\u6b21\u5b9e\u4f8b\u5f15\u7528 \u4f8b\uff1a\u4e24\u6761N\u4f4d\u603b\u7ebf\u53d8\u91cf\u6309\u4f4d\u5f02\u6216 <pre><code>module bitwise_xor(out, i0, i1);\n    parameter N = 32;\n    output [N-1: 0] out;\n    input [N-1: 0] i0, i1;\n    genvar j; // \u4e34\u65f6\u5faa\u73af\u53d8\u91cf, \u8bbe\u8ba1\u65f6\u4e0d\u5b58\u5728\n    generate\n        for (j = 0; j &lt; N; j = j + 1) begin: xor_loop\n            xor g1 (out[j], i1[j], i1[j]);\n        end\n    endgenerate\n    // xor\u53ef\u7528always\u5757\u66ff\u4ee3\n    reg [N-1: 0] out;\n    generate\n        for (j = 0; j &lt; N; j = j + 1) begin: bit\n            always @ (i0[j] or i1[j]) out[j] = i0[j] ^ i1[j];\n        end\n    endgenerate\nendmodule\n</code></pre></p> <ul> <li>\u5728\u4eff\u771f\u5f00\u59cb\u524d\uff0c\u4eff\u771f\u5668\u4f1a\u5bf9\u751f\u6210\u5757\u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u786e\u5b9a\uff08\u5c55\u5e73\uff09\uff0c\u5c06\u751f\u6210\u5757\u8f6c\u6362\u4e3a\u5c55\u5f00\u65f6\u7684\u4ee3\u7801\uff0c\u7136\u540e\u5bf9\u5c55\u5f00\u540e\u7684\u4ee3\u7801\u8fdb\u884c\u4eff\u771f\uff1b\u672c\u8d28\u65f6\u4f7f\u7528\u5faa\u73af\u5185\u7684\u4e00\u6761\u8bed\u53e5\u66ff\u4ee3\u591a\u6761\u91cd\u590d\u7684Verilog\u8bed\u53e5</li> <li>\u5173\u952e\u5b57genvar\u7528\u4e8e\u58f0\u660e\u751f\u6210\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u5728\u751f\u6210\u5757\u4e4b\u4e2d\uff1b\u786e\u7acb\u540e\u7684\u4eff\u771f\u4ee3\u7801\u4e0d\u542b\u751f\u6210\u53d8\u91cf\uff1b\u751f\u6210\u53d8\u91cf\u7684\u503c\u53ea\u80fd\u5728\u5faa\u73af\u751f\u6210\u8bed\u53e5\u4e2d\u6539\u53d8</li> <li>\u5faa\u73af\u751f\u6210\u8bed\u53e5\u53ef\u4ee5\u5d4c\u5957\u4f7f\u7528\uff08\u4f7f\u7528\u540c\u4e00\u4e2a\u751f\u6210\u53d8\u91cf\u4f5c\u4e3a\u7d22\u5f15\u7684\u751f\u6210\u8bed\u53e5\u4e0d\u80fd\u76f8\u4e92\u5d4c\u5957\uff09</li> <li><code>xor_loop</code>\u662f\u5faa\u73af\u751f\u6210\u8bed\u53e5\u540d\uff0c\u5bf9\u5f02\u6216\u95e8\u7684\u5f15\u7528\uff1a<code>xor_loop[0].g1</code> <p>\u91cd\u70b9\u5728\u4e8e\u60f3\u8c61\u5faa\u73af\u751f\u6210\u8bed\u53e5\u88ab\u5c55\u5e73\u540e\u7684\u5f62\u5f0f</p> </li> </ul> <p>\u4f8b\uff1a\u8109\u52a8\u52a0\u6cd5\u5668</p> <pre><code>module ripple_adder(co, sum, a0, a1, ei);\n    parameter N = 4;\n    output [N-1:0] sum;\n    output co;\n    input [N-1:0] a0, a1;\n    input ci;\n\n    wire [N-1:0] carry;\n    assign carry[0] = ci;\n\n    genvar i;\n    generate\n        for (int i = 0; i &lt; N; i = i + 1) begin: r_loop\n            wire t1, t2, t3;\n            xor g1 (t1, a0[i], a1[i]);\n            xor g2 (sum[i], t1, carry[i]);\n            and g3 (t2, a0[i], a1[i]);\n            and g4 (t3, t1, carry[i]);\n            or g5 (carry[i + 1], t2, t3);\n        end\n    endgenerate\n\n    assign co = carry[N];\nendmodule\n</code></pre> <p>\u6761\u4ef6\u751f\u6210\u8bed\u53e5\uff1a\u7528\u6761\u4ef6\u5730\u8c03\u7528Verilog\u7ed3\u6784</p> <p>\u4f8b\uff1a\u53c2\u6570\u5316\u4e58\u6cd5\u5668 <pre><code>module multiplier (product, a0, a1);\n    parameter a0_width = 8;\n    parameter a1_width = 8;\n    // \u672c\u5730\u53c2\u6570\u4e0d\u80fd\u4f7f\u7528defparam\u4fee\u6539, \u4e5f\u4e0d\u80fd\u5728\u5b9e\u4f8b\u5f15\u7528\u65f6\u901a\u8fc7\u4f20\u9012\u53c2\u6570\u8bed\u53e5\u4fee\u6539\n    localparam product_width = a0_width + a1_width;\n    output [product_width - 1: 0] product;\n    input [a0_width - 1: 0] a0;\n    input [a1_width - 1: 0] a1;\n    generate\n        if (a0_width &lt; 8 || a1_width &lt; 8)\n            cal_multiplier # (a0_width, a1_width) m0 (product, a0, a1);\n        else\n            tree_multiplier # (a0_width, a1_width) m0 (product, a0, a1);\n    endgenerate\nendmodule\n</code></pre></p> <p>case\u751f\u6210\u8bed\u53e5\uff1a\u591a\u9009\u4e00case\u6784\u9020\uff0c\u6709\u6761\u4ef6\u8c03\u7528Verilog\u7ed3\u6784</p> <p>\u4f8b\uff1aN\u4f4d\u52a0\u6cd5\u5668 <pre><code>module adder(co, sum, a0, a1, ci);\n    parameter N = 4;\n    output [N-1: 0] sum;\n    output co;\n    input [N-1: 0] a0, a1;\n    input ci;\n    generate\n        case (N)\n            1: adder_1bit adder1 (co, sum, a0, a1, ci);\n            2: adder_2bit adder2 (co, sum, a0, a1, ci);\n            default: adder_cla # (N) adder3 (co, sum, a0, a1, ci);\n        endcase\n    endgenerate\nendmodule\n</code></pre></p>"},{"location":"miscellaneous/verilog/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/","title":"\u63a7\u5236\u8bed\u53e5","text":""},{"location":"miscellaneous/verilog/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/#_1","title":"\u6761\u4ef6\u8bed\u53e5","text":"<pre><code>if (a &gt; b) out1 = int1;\n</code></pre> <pre><code>if (cond)\n    \u8bed\u53e51;\nelse\n    \u8bed\u53e52;\n</code></pre> <pre><code>if (cond1)\n    \u8bed\u53e51;\nelse if (cond2)\n    \u8bed\u53e52;\nelse if (condm)\n    \u8bed\u53e5m;\nelse\n    \u8bed\u53e5n;\n</code></pre> <p>\u6761\u4ef6\u8bed\u53e5\u5fc5\u987b\u5728\u8fc7\u7a0b\u8bed\u53e5\u4e2d\u4f7f\u7528 \u8fc7\u7a0b\u8bed\u53e5\uff1a\u7531<code>initial</code>\u548c<code>always</code>\u8bed\u53e5\u5f15\u5bfc\u7684\u6267\u884c\u8bed\u53e5\u96c6\u5408</p> <ul> <li>\u903b\u8f91\u8868\u8fbe\u5f0f\u4e3a0, x, z\u6309false\u5904\u7406\uff0c1\u6309true\u5904\u7406</li> <li>if-else\u5d4c\u5957\u65f6\u9700\u8981\u7528<code>begin</code> <code>end</code>\u5305\u88f9\uff08<code>end</code>\u540e\u4e0d\u52a0\u5206\u53f7\uff09</li> <li>\u5141\u8bb8\u4f7f\u7528<code>if (exp)</code> <code>if (!exp)</code></li> </ul> <p>\u4f8b\uff1a <pre><code>reg[31:0] instruction, segment_area[255:0];\nreg[7:0] index;\nreg[5:0] modify_seg1, modify_seg2, modify_seg3;\nparameter\n\u00a0 segment1 = 0, inc_seg1 = 1,\n\u00a0 segment2 = 20, inc_seg2 = 2,\n\u00a0 segment3 = 64, inc_seg3 = 4,\n\u00a0 data = 128;\nif (index &lt; segment2)\nbegin\n\u00a0 instruction = segment_area[index + modify_seg1];\n\u00a0 index = index + inc_seg1;\nend\nelse if (index &lt; segment3)\nbegin\n\u00a0 instruction = segment_area[index + modify_seg2];\n\u00a0 index = index + inc_seg2;\nend\nelse if (index &lt; data)\nbegin\n\u00a0 instruction = segment_area[index + modify_seg3];\n\u00a0 index = index + inc_seg3;\nend\nelse\n\u00a0 instruction = segment_area[index];\n</code></pre></p>"},{"location":"miscellaneous/verilog/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/#_2","title":"\u591a\u8def\u5206\u652f\u8bed\u53e5","text":"<pre><code>case (exp)\n    // \u5206\u652f\u9879\n    \u5206\u652f\u8868\u8fbe\u5f0f: \u8bed\u53e5;\n    default: \u8bed\u53e5;\nendcase\n</code></pre> <pre><code>casez (exp)\n    // \u5206\u652f\u9879\nendcase\n</code></pre> <pre><code>casex (exp)\n    // \u5206\u652f\u9879\nendcase\n</code></pre> <ul> <li>\u63a7\u5236\u8868\u8fbe\u5f0f\u901a\u5e38\u8868\u793a\u63a7\u5236\u4fe1\u53f7\u7684\u67d0\u4e9b\u4f4d\uff0c\u5206\u652f\u8868\u8fbe\u5f0f\u5219\u7528\u8fd9\u4e9b\u63a7\u5236\u4fe1\u53f7\u7684\u5177\u4f53\u72b6\u6001\u503c\u6765\u8868\u793a\uff08\u53c8\u79f0\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff09</li> <li>default\u9879\u81f3\u591a\u53ef\u6709\u4e00\u4e2a</li> <li>case\u5206\u652f\u8868\u8fbe\u5f0f\u7684\u503c\u5fc5\u987b\u4e92\u4e0d\u76f8\u540c\uff0c\u6267\u884c\u5b8c\u540e\u5373\u8df3\u51fa\u8be5\u7ed3\u6784</li> <li>\u5728\u7528case\u8bed\u53e5\u8868\u8fbe\u5f0f\u8fdb\u884c\u6bd4\u8f83\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fe1\u53f7\u7684\u5bf9\u5e94\u503c\u9700\u80fd\u660e\u786e\u8fdb\u884c\u6bd4\u8f83</li> <li>case\u8bed\u53e5\u6240\u6709\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u4f4d\u5bbd\u5fc5\u987b\u76f8\u7b49\uff0c\u9700\u6307\u660e<code>n'bx n'bz</code></li> <li>casez\u5c06z\u89c6\u4e3a\u4e0d\u5fc5\u5173\u5fc3\u7684\u60c5\u51b5\uff0ccasex\u5c06z, x\u89c6\u4e3a\u4e0d\u5fc5\u5173\u5fc3\u7684\u60c5\u51b5</li> </ul> <p>\u4f8b\uff1a <pre><code>// \u8bd1\u7801\u5668\nreg [15:0] rega;\nreg [9:0] regb;\ncase(rega)\n    16'd0: result = 10'b0111111111;\n    16'd1: result = 10'b1011111111;\n    16'd2: result = 10'b1101111111;\n    16'd3: result = 10'b1110111111;\n    16'd4: result = 10'b1111011111;\n    16'd5: result = 10'b1111101111;\n    16'd6: result = 10'b1111110111;\n    16'd7: result = 10'b1111111011;\n    16'd8: result = 10'b1111111101;\n    16'd9: result = 10'b1111111110;\n    default: result = 10'bx;\nendcase\n</code></pre></p> <pre><code>case (select[1:2])\n\u00a0 2'b00:\n\u00a0 \u00a0 result = 0;\n\u00a0 2'b01:\n\u00a0 \u00a0 result = flaga;\n\u00a0 2'b0x, 2'b0z:\n\u00a0 \u00a0 result = flaga ? 'bx : 0;\n\u00a0 2'b10:\n\u00a0 \u00a0 result = flagb;\n\u00a0 2'bx0, 2'bz0:\n\u00a0 \u00a0 result = flagb ? 'bx : 0;\n\u00a0 default:\n\u00a0 \u00a0 result = 'bx;\nendcase\n</code></pre> <pre><code>reg[7:0] ir;\ncasez(ir)\n    8'b1???????: instrction1(ir);\n    8'b01??????: instrction2(ir);\n    8'b00010???: instrction3(ir);\n    8'b000001??: instrction4(ir);\nendcase\n</code></pre> <pre><code>reg[7:0] r, mask;\nmask = 8'bx0x0x0x0;\ncasex(r^mask)\n    8'b001100xx: stat1;\n    8'b1100xx00: stat2;\n    8'b00xx0011: stat3;\n    8'bxx001100: stat4;\nendcase\n</code></pre> <p>\u6ce8\uff1a\u9501\u5b58\u5668\u95ee\u9898</p> <ul> <li>\u539f\u56e0\uff1aalways\u5757\u4e2d\u53d8\u91cf\u4fdd\u6301\u539f\u503c\uff0c\u751f\u6210\u9501\u5b58\u5668</li> <li>\u51fa\u73b0\u60c5\u51b5\uff1a<ul> <li>\u5728\u7ed9\u5b9a\u7684\u6761\u4ef6\u4e0b\u53d8\u91cf\u6ca1\u6709\u8d4b\u503c</li> <li>case\u8bed\u53e5\u7f3a\u5c11default\u9879</li> </ul> </li> <li>\u89e3\u51b3\uff1a<ul> <li>if\u6700\u597d\u5e26else</li> <li>case\u6700\u597d\u5e26default</li> </ul> </li> </ul>"},{"location":"miscellaneous/verilog/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/#_3","title":"\u5faa\u73af\u8bed\u53e5","text":"<p>forever\u8bed\u53e5\uff1a\u8fde\u7eed\u7684\u6267\u884c\u8bed\u53e5 <pre><code>forever \u8bed\u53e5;\n</code></pre></p> <pre><code>forever begin\n    \u8bed\u53e5;\nend\n</code></pre> <ul> <li>\u5e38\u7528\u4e8e\u4ea7\u751f\u5468\u671f\u6027\u7684\u6ce2\u5f62\u7528\u4f5c\u4eff\u771f\u6d4b\u8bd5\u4fe1\u53f7</li> </ul> <p>\u4e0d\u80fd\u72ec\u7acb\u5199\u5728\u7a0b\u5e8f\u4e2d\uff0c\u5fc5\u987b\u5199\u5728initial\u5757\u4e2d</p> <p>repeat\u8bed\u53e5\uff1a\u8fde\u7eed\u6267\u884c\u4e00\u6761\u8bed\u53e5n\u6b21 <pre><code>repeat(\u8868\u8fbe\u5f0f) \u8bed\u53e5;\n</code></pre></p> <pre><code>repeat(\u8868\u8fbe\u5f0f) begin\n    \u8bed\u53e5;\nend\n</code></pre> <ul> <li>\u8868\u8fbe\u5f0f\u591a\u4e3a\u5e38\u91cf</li> </ul> <p>\u4f8b\uff1a <pre><code>parameter size = 8, longsize = 16;\nreg [size:1] opa, opb;\nreg [longsize:1] result;\nbegin: mult\n    reg [longsize:1] shift_opa, shift_opb;\n    shift_opa = opa;\n    shift_opb = opb;\n    result = 0;\n    repeat(size) begin\n        if (shift_opb[1]) result = result + shift_opa;\n        shift_opa = shift_opa &lt;&lt; 1;\n        shift_opb = shift_opb &gt;&gt; 1;\n    end\nend\n</code></pre></p> <p>while\u8bed\u53e5\uff1a\u6267\u884c\u4e00\u6761\u8bed\u53e5\u76f4\u5230\u67d0\u4e2a\u6761\u4ef6\u4e0d\u6ee1\u8db3 <pre><code>while (\u8868\u8fbe\u5f0f) \u8bed\u53e5;\n</code></pre></p> <pre><code>while (\u8868\u8fbe\u5f0f) begin\n    \u8bed\u53e5;\nend\n</code></pre> <p>\u4f8b\uff1a <pre><code>begin: count1s\n    reg [7:0] tempreg;\n    count = 0;\n    tempreg = rega;\n    while (tempreg) begin\n        if (tempreg[0]) count = count + 1;\n        tempreg = tempreg &gt;&gt; 1;\n    end\nend\n</code></pre></p> <p>for\u8bed\u53e5\uff1a\u540cC\u8bed\u8a00</p> <p>\u4f8b\uff1a <pre><code>begin: init_mem\n    reg [7:0] tempi;\n    for (tempi = 0; tempi &lt; memsize; tmepi = tempi + 1)\n        memory[tempi] = 0;\nend\n</code></pre></p>"},{"location":"miscellaneous/verilog/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%26%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F/","title":"\u6570\u636e\u7c7b\u578b&\u5e38\u91cf\u53d8\u91cf","text":"<p>\u6570\u636e\u7c7b\u578b\uff1areg, wire, integer, parameter, large, medium, scalared, time, small, tri, trio, tril, triand, trior, trireg, vectored, wand, wor</p>"},{"location":"miscellaneous/verilog/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%26%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F/#_1","title":"\u5e38\u91cf","text":"<p>\u6570\u5b57\uff1a</p> <ol> <li>\u6574\u6570\uff1ab/B, d/D, h/H, o/O<ul> <li>\u8868\u8fbe\u65b9\u5f0f\uff1a<ol> <li><code>&lt;\u4f4d\u5bbd&gt;&lt;\u8fdb\u5236&gt;&lt;\u6570\u5b57&gt;</code></li> <li><code>&lt;\u8fdb\u5236&gt;&lt;\u6570\u5b57&gt;</code>\uff1a\u91c7\u7528\u9ed8\u8ba4\u4f4d\u5bbd\uff08\\(\\geqslant32\\)\u4f4d\uff09</li> <li><code>&lt;\u6570\u5b57&gt;</code>\uff1a\u91c7\u7528\u9ed8\u8ba4\u8fdb\u5236\uff08\u5341\u8fdb\u5236\uff09</li> </ol> </li> <li>\u4f8b\uff1a<code>8b'10101100</code>, <code>8'ha2</code></li> </ul> </li> <li>x / z\uff1ax - \u4e0d\u5b9a\u503c\uff0cz - \u9ad8\u963b\u503c\uff08\u53ef\u5199\u4f5c?\uff09<ul> <li>\u4f8b\uff1a<code>4b10x0</code>, <code>4b101z</code>, <code>12'dz</code>, <code>12'd?</code>, <code>8'h4x</code></li> </ul> </li> <li>\u8d1f\u6570\uff1a\u5728\u4f4d\u5bbd\u524d\u52a0\u8d1f\u53f7</li> <li>\u4e0b\u5212\u7ebf\uff1a\u5206\u5f00\u6570\u7684\u8868\u8fbe<ul> <li>\u4f8b\uff1a<code>8'b0011_1010</code></li> </ul> </li> <li>\u5b57\u6bcd\uff1a8\u4f4dASCII\u8868\u793a<ul> <li>\u4f8b\uff1a<code>\"AB\"=16'B01000001_01000010</code></li> </ul> </li> </ol> <p>\u53c2\u6570\uff1a\u7b26\u53f7\u5e38\u91cf <pre><code>parameter \u53c2\u65701 = \u8868\u8fbe\u5f0f, \u53c2\u65702 = \u8868\u8fbe\u5f0f;\n</code></pre></p> <p>\u5e38\u7528\u4e8e\u5b9a\u4e49==\u5ef6\u8fdf\u65f6\u95f4==\u548c\u53d8\u91cf\u5bbd\u5ea6</p> <p>\u901a\u8fc7\u53c2\u6570\u4f20\u9012\u6539\u53d8\u88ab\u5f15\u7528\u6a21\u5757\u6216\u5b9e\u4f8b\u4e2d\u5df2\u5b9a\u4e49\u7684\u53c2\u6570\uff1a <pre><code>module Decode(A, F);\n    parameter Width = 1, Polarity = 1;\nendmodule\n\nmodule Top;\n    wire [3:0] A4;\n    wire [4:0] A5;\n    wire [15:0] F16;\n    wire [31:0] F32;\n    Decode #(4:0) D1(A4, F16);\n    Decode #(5) D2(A5, F32);\nendmodule\n</code></pre></p> <p>\u53cd\u6807\u6ce8\uff1a\u5728\u4e00\u4e2a\u6a21\u5757\u4e2d\u6539\u53d8\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u53c2\u6570 <pre><code>module Test;\n    wire W;\n    Top T();\nendmodule\n\nmodule Top;\n    wire W;\n    Block B1();\n    Block B2();\nendmodule\n\nmodule Block;\n    parameter P = 0;\nendmodule\n\nmodule Annotate;\n    Test test();\n    defparam test.T.B1.P = 2, test.T.B2.P = 3; // \u6539\u53d8B1, B2\u4e2d\u7684\u53c2\u6570\u503c\nendmodule\n</code></pre></p>"},{"location":"miscellaneous/verilog/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%26%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F/#_2","title":"\u53d8\u91cf","text":"<p>wire\uff1a\u8868\u793a\u7ed3\u6784\u5b9e\u4f53\uff08\u5982\u95e8\uff09\u76f4\u63a5\u7684\u7269\u7406\u8fde\u63a5</p> <ul> <li>\u6027\u8d28\uff1a\u4e0d\u80fd\u5b58\u50a8\u95e8\uff0c\u5fc5\u987b\u53d7\u5230\u9a71\u52a8\u5668\uff08\u95e8\u6216\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5\uff09\u7684\u9a71\u52a8\uff1b\u65e0\u9a71\u52a8\u65f6\u4e3a\u9ad8\u963b\u6001z</li> <li>wire VS tri\uff1awire\u7528\u4e8e\u5355\u4e2a\u95e8\u9a71\u52a8\u6216\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5\u7684\u7f51\u7edc\u578b\u6570\u636e\uff0ctri\u8868\u793a\u591a\u9a71\u52a8\u7684\u7f51\u7edc\u578b\u6570\u636e</li> <li>\u591a\u9a71\u52a8\u60c5\u51b5\u4e0b\uff0c\u903b\u8f91\u503c\u51b2\u7a81\u5c06\u4ea7\u751f\u4e0d\u786e\u5b9a\u503c</li> </ul> wire/tri 0 1 x z 0 0 x x 0 1 x 1 x 1 x x x x x z 0 1 x z <ul> <li>\u8f93\u5165\u8f93\u51fa\u4fe1\u53f7\u9ed8\u8ba4\u8bbe\u5b9a\u4e3awire\u578b</li> <li>\u53ef\u4ee5\u7528\u505a\u4efb\u4f55\u65b9\u7a0b\u5f0f\u7684\u8f93\u5165 <pre><code>wire [n-1:0] \u6570\u636e\u540d1, \u6570\u636e\u540d2; // \u6bcf\u6761\u7ebf\u6709n\u6761\u7ebf\u8def\nwire [n:1] \u6570\u636e\u540d1, \u6570\u636e\u540d2;\n// &lt;\u786e\u5b9a\u7b26&gt;&lt;\u4f4d\u5bbd&gt;&lt;\u6570\u636e\u540d&gt;\n</code></pre></li> </ul> <p>reg\uff1a\u6570\u636e\u5b58\u50a8\u5355\u5143\u7684\u62bd\u8c61</p> <ul> <li>\u6027\u8d28\uff1a\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u8bed\u53e5\u6539\u53d8\u5bc4\u5b58\u5668\u7684\u503c\uff1b\u9ed8\u8ba4\u521d\u59cb\u503c\u4e3a\u4e0d\u5b9a\u503cx</li> <li>\u5e38\u7528\u6765\u8868\u793aalways\u6a21\u5757\u5185\u7684\u6307\u5b9a\u4fe1\u53f7\uff0c\u4ee3\u8868\u89e6\u53d1\u5668\uff1balways\u6a21\u5757\u5185\u88ab\u590d\u5236\u7684\u6bcf\u4e00\u4e2a\u4fe1\u53f7\u90fd\u5fc5\u987b\u5b9a\u4e49\u4e3areg\u578b</li> <li>reg\u6570\u636e\u53ef\u8d4b\u6b63\u8d1f\u503c\uff0c\u4f46\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u64cd\u4f5c\u6570\u65f6\u88ab\u5f53\u4f5c\u65e0\u7b26\u53f7</li> <li>\u5bf9reg\u6570\u636e\u7684\u8d4b\u503c\u76f8\u5f53\u4e8e\u6539\u53d8\u89e6\u53d1\u5668\u5b58\u50a8\u5355\u5143\u7684\u503c\uff1breg\u4fe1\u53f7\u4e0d\u4e00\u5b9a\u65f6\u5bc4\u5b58\u5668\u6216\u89e6\u53d1\u5668\u7684\u8f93\u51fa\uff0c\u53ea\u8868\u793a\u88ab\u5b9a\u4e49\u7684\u4fe1\u53f7\u5c06\u7528\u5728always\u6a21\u5757\u5185 <pre><code>reg [n-1:0] \u6570\u636e\u540d1, \u6570\u636e\u540d2;\nreg [n:1] \u6570\u636e\u540d1, \u6570\u636e\u540d2;\n</code></pre></li> </ul> <p>memory\uff1areg\u591a\u7ef4\u6570\u7ec4\u5b58\u5728\uff0c\u901a\u8fc7\u6269\u5c55reg\u578b\u6570\u636e\u7684\u5730\u5740\u8303\u56f4\u751f\u6210memory</p> <p><pre><code>reg [n-1:0] \u5b58\u50a8\u5668\u540d [m-1:0];\nreg [n-1:0] \u5b58\u50a8\u5668\u540d [m:1]; // \u53ef\u540c\u65f6\u5b9a\u4e49\u5b58\u50a8\u5668\u578b\u6570\u636e\u548creg\u578b\u6570\u636e\n</code></pre> \u5176\u4e2d<code>reg[n-1:0]</code>\u5b9a\u4e49\u4e86\u5b58\u50a8\u5668\u4e2d\u6bcf\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u7684\u5927\u5c0f\uff08n\u4f4d\u5b58\u50a8\u5668\uff09\uff0c<code>[m-1:0]</code>\u5b9a\u4e49\u4e86\u8be5\u5b58\u50a8\u5668\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684\u5bc4\u5b58\u5668\uff08\u5730\u5740\u8303\u56f4\uff09</p> <p>\u5bf9\u5b58\u50a8\u5668\u8fdb\u884c\u5730\u5740\u7d22\u5f15\u7684\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u5e38\u6570\u8868\u8fbe\u5f0f\uff0c\u5176\u503c\u53ef\u4ee5\u53d6\u51b3\u4e8e\u7535\u8def\u4e2d\u5176\u4ed6\u7684\u5bc4\u5b58\u5668\u7684\u503c</p> <p>\u4e00\u4e2a\u5b8c\u6574\u7684\u5b58\u50a8\u5668\u65e0\u6cd5\u5728\u4e00\u6761\u8d4b\u503c\u8bed\u53e5\u4e2d\u8fdb\u884c\u8d4b\u503c\uff0c\u9700\u6307\u5b9a\u8be5\u5355\u5143\u5728\u5b58\u50a8\u5668\u4e2d\u7684\u5730\u5740</p>"},{"location":"miscellaneous/verilog/%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"\u6a21\u5757\u57fa\u672c\u6982\u5ff5","text":""},{"location":"miscellaneous/verilog/%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_1","title":"\u6a21\u5757\u63cf\u8ff0\u5f62\u5f0f","text":"<p>\u903b\u8f91\u884c\u4e3a\u63cf\u8ff0\uff1a <pre><code>// \u4e8c\u9009\u4e00\u591a\u8def\u9009\u62e9\u5668\nmodule muxtwo(out, a, b, s1);\n    input a, b, s1;\n    output out;\n    reg out;\n    always @ (s1 or a or b)\n        if (!s1) out = a;\n        else out = b;\nendmodule\n</code></pre></p> <p>\u5e03\u5c14\u8868\u8fbe\u5f0f\u8868\u8ff0\uff1a <pre><code>module muxtwo(out, a, b, s1);\n    input a, b, s1;\n    output out;\n    wire ns1, sela, selb;\n    assign ns1 = ~ns1;\n    assign sela = a &amp; ns1;\n    assign selb = b &amp; s1;\n    assign out = sela | selb;\nendmodule\n</code></pre></p> <p>\u903b\u8f91\u5355\u5143\u4e92\u8054\u7ed3\u6784\u8868\u8ff0\uff1a <pre><code>module muxtwo(out, a, b, s1);\n    input a, b, s1;\n    output out;\n    not u1(ns1, s1);\n    and #1 u2(sela, a, ns1);\n    and #1 u3(selb, b, s1);\n    or #1 u4(out, sela, selb);\nendmodule\n</code></pre></p>"},{"location":"miscellaneous/verilog/%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_2","title":"\u8bed\u6cd5\u7279\u6027","text":"<p>\u7279\u6027\uff1a\u5e76\u884c\u6027\uff0c\u5c42\u6b21\u7ed3\u6784\u6027\uff0c\u53ef\u7efc\u5408\u6027</p> <pre><code>// 3\u4f4d\u52a0\u6cd5\u5668\nmodule adder(cout, sum, a, b, cin);\n    input [2:0] a, b;\n    input cin;\n    output cout;\n    output [2:0] sum;\n    assign {cout, sum} = a + b + cin;\nendmodule\n</code></pre> <pre><code>// \u6bd4\u8f83\u5668\nmodule compare(equal, a, b);\n    output equal;\n    input [1:0] a, b;\n    assign equal = (a == b) ? 1 : 0; /*\u591a\u884c\u6ce8\u91ca*/\nendmodule\n</code></pre> <pre><code>// \u4e09\u6001\u95e8\u9009\u62e9\u5668\nmodule trist2(out, in, enable);\n    output out;\n    input in, enable;\n    bufif1 mybuf(out, in, enable);\nendmodule\n</code></pre> <pre><code>module trist1(sout, sin, ena);\n    output sout;\n    input sin, ena;\n    mytri tri_inst(.out(sout), .in(sin), .enable(ena));\nendmodule\n\nmodule mytri(out, in, enable);\n    output out;\n    input in, enable;\n    assign out = enable ? in : 'bz;\nendmodule\n</code></pre>"},{"location":"miscellaneous/verilog/%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_3","title":"\u6a21\u5757\u6d4b\u8bd5","text":"<pre><code>`include \"muxtwo.v\"\nmodule t;\n    reg ain, bin, select;\n    reg clock;\n    wire outw;\n    initial begin\n        ain = 0;\n        bin = 0;\n        select = 0;\n        clock = 0;\n    end\n    always #50 clock = ~clock;\n    always @ (posedge clock) begin\n        #1 ain = {$random} % 2;\n        #3 bin = {$random} % 2;\n    end\n    always #10000 select = !select;\n    muxtwo m(.out(outw), .a(ain), .b(bin), .s1(select));\nendmodule\n</code></pre>"},{"location":"miscellaneous/verilog/%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%93%E6%9E%84/","title":"\u6a21\u5757\u7684\u7ed3\u6784","text":"<p>\u6784\u6210\uff1a\u63a5\u53e3 + \u903b\u8f91\u529f\u80fd <pre><code>module block(a, b, c, d);\n    // \u4fe1\u53f7\u6d41\u5411\n    input a, b;\n    output c, d;\n    // \u903b\u8f91\u529f\u80fd\n    assign c = a | b;\n    assign d = a &amp; b;\nendmodule\n</code></pre></p>"},{"location":"miscellaneous/verilog/%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%93%E6%9E%84/#_1","title":"\u7aef\u53e3\u5b9a\u4e49","text":"<p>\u7aef\u53e3\u58f0\u660e\uff1a <pre><code>module \u6a21\u5757\u540d(\u53e31, \u53e32, \u53e33, ...);\n</code></pre></p> <p>\u6a21\u5757\u5f15\u7528\uff1a</p> <ol> <li> <p>\u987a\u5e8f\u5f15\u7528 <pre><code>\u6a21\u5757\u540d(\u8fde\u63a5\u7aef\u53e31\u4fe1\u53f7\u540d, \u8fde\u63a5\u7aef\u53e32\u4fe1\u53f7\u540d, ...);\n</code></pre></p> </li> <li> <p>\u6307\u5b9a\u540d\u79f0 <pre><code>\u6a21\u5757\u540d(.\u7aef\u53e31\u540d(\u8fde\u63a5\u4fe1\u53f71\u540d), .\u7aef\u53e32\u540d(\u8fde\u63a5\u4fe1\u53f72\u540d), ...);\n</code></pre></p> </li> </ol>"},{"location":"miscellaneous/verilog/%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%93%E6%9E%84/#_2","title":"\u6a21\u5757\u5185\u5bb9","text":"<p>I/O \u8bf4\u660e\uff1a</p> <ul> <li>\u8f93\u5165\u53e3\uff1a<code>input[\u4fe1\u53f7\u4f4d\u5bbd-1:0] \u7aef\u53e3\u540d;</code></li> <li>\u8f93\u51fa\u53e3\uff1a<code>output[\u4fe1\u53f7\u4f4d\u5bbd-1:0] \u7aef\u53e3\u540d;</code></li> <li>\u8f93\u5165/\u8f93\u51fa\u53e3\uff1a<code>inout[\u4fe1\u53f7\u4f4d\u5bbd-1:0] \u7aef\u53e3\u540d;</code></li> </ul> <p>\u5185\u90e8\u4fe1\u53f7\u8bf4\u660e\uff1a\u6a21\u5757\u5185\u7528\u5230\u7684wire, reg\u7c7b\u578b\u53d8\u91cf\u7684\u8bf4\u660e <pre><code>reg [width-1:0] R1, R2;\nwire [width-1:0] W1, W2;\n</code></pre></p> <p>\u529f\u80fd\u5b9a\u4e49\uff1a</p> <ol> <li> <p>assign\u58f0\u660e <pre><code>assign a = b &amp; c;\n</code></pre></p> <p>\u5e38\u7528\u4e8e\u63cf\u8ff0\u7ec4\u5408\u903b\u8f91</p> </li> <li> <p>\u5b9e\u4f8b\u539f\u4ef6 <pre><code>and #2 u1(q, a, b); // \u76f8\u5f53\u4e8e\u8c03\u5165\u5e93\u6587\u4ef6\n</code></pre></p> <p>\u8981\u6c42\u6bcf\u4e2a\u5b9e\u4f8b\u5143\u4ef6\u7684\u540d\u5b57\u552f\u4e00</p> </li> <li> <p>always\u5757 <pre><code>always @ (posedge clk or posedge clr) begin\n    if (clr) q &lt;= 0;\n    else if (en) q &lt;= d;\nend\n</code></pre></p> <p>\u65e2\u80fd\u63cf\u8ff0\u7ec4\u5408\u903b\u8f91\uff0c\u53c8\u80fd\u63cf\u8ff0\u65f6\u5e8f\u903b\u8f91</p> </li> </ol> <p>\u7279\u6027\uff1a</p> <ul> <li>assign, always\u8bed\u53e5\u95f4\u5e76\u53d1\uff0calways\u8bed\u53e5\u5185\u6309\u987a\u5e8f\u6267\u884c\uff08always\u5757\u5185\u7684\u8bed\u53e5\u79f0\u4e3a\u987a\u5e8f\u8bed\u53e5\uff0calways\u5757\u79f0\u4e3a\u8fc7\u7a0b\u5757\uff09</li> <li>\u8fc7\u7a0b\u5757\uff08initial, always\u7b49\uff09\u3001\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5\u3001\u5b9e\u4f8b\u5f15\u7528\u5e76\u884c\uff0c\u8868\u793a\u4e00\u79cd\u901a\u8fc7\u53d8\u91cf\u540d\u76f8\u4e92\u8fde\u63a5\u7684\u5173\u7cfb\uff0c\u5728\u540c\u4e00\u6a21\u5757\u4e2d\u4e09\u8005\u79e9\u5e8f\u6ca1\u6709\u5173\u7cfb</li> <li>\u53ea\u6709\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5assign\u548c\u5b9e\u4f8b\u5f15\u7528\u8bed\u53e5\u53ef\u4ee5\u72ec\u7acb\u4e8e\u8fc7\u7a0b\u5757\u800c\u5b58\u5728\u4e8e\u6a21\u5757\u7684\u529f\u80fd\u5b9a\u4e49\u90e8\u5206</li> </ul>"},{"location":"miscellaneous/verilog/%E7%BB%93%E6%9E%84%E8%AF%AD%E5%8F%A5/","title":"\u7ed3\u6784\u8bed\u53e5","text":"<p>\u603b\u8ff0\uff1a</p> <ul> <li> <p>\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u6709\u591a\u4e2a<code>initial</code>\u548c<code>always</code>\u5757\uff0c\u6bcf\u4e2a<code>initial</code>\u548c<code>always</code>\u8bf4\u660e\u8bed\u53e5\u5728\u4eff\u771f\u4e00\u5f00\u59cb\u5c31\u7acb\u5373\u6267\u884c</p> <ul> <li><code>initial</code>\u53ea\u6267\u884c\u4e00\u6b21</li> <li><code>always</code>\u4e0d\u65ad\u91cd\u590d\u6d3b\u52a8\u76f4\u5230\u4eff\u771f\u7ed3\u675f\uff0c\u82e5\u89e6\u53d1\u6761\u4ef6\u6ee1\u8db3\u5219\u6267\u884c\u8fc7\u7a0b\u5757\u4e00\u6b21 <p><code>initial</code>\uff0c<code>always</code>\u8bed\u53e5\u6b21\u6570\u4e0d\u53d7\u9650\u5236\uff0c\u540c\u65f6\u5f00\u59cb\u8fd0\u884c</p> </li> </ul> </li> <li> <p><code>task</code>, <code>function</code>\u53ef\u4ee5\u5728\u7a0b\u5e8f\u6a21\u5757\u4e2d\u4e00\u5904\u6216\u591a\u51fa\u8c03\u7528</p> </li> </ul> <p>initial\u8bf4\u660e\u8bed\u53e5\uff1a <pre><code>initial begin\n    \u8bed\u53e51;\n    \u8bed\u53e52;\nend\n</code></pre></p> <p>\u4f8b\uff1a\u5b58\u50a8\u5668\u53d8\u91cf\u8d4b\u521d\u503c <pre><code>initial begin\n    areg = 0;\n    for (index = 0; index &lt; size; index = index + 1) memory[index] = 0;\nend\n</code></pre></p> <p>\u4f8b\uff1a\u6fc0\u52b1\u6ce2\u5f62\u751f\u6210 <pre><code>initial begin\n    inputs = 'b000000;\n    #10 inputs = 'b011001;\n    #10 inputs = 'b011011;\nend\n</code></pre></p> <ul> <li>\u4e00\u4e2a\u6a21\u5757\u53ef\u4ee5\u6709\u591a\u4e2a<code>initial</code>\u5757\uff0c\u5e76\u884c\u8fd0\u884c</li> <li><code>initial</code>\u5757\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6587\u4ef6\u548c\u865a\u62df\u6a21\u5757\u7684\u7f16\u5199\uff0c\u7528\u6765\u4ea7\u751f\u4eff\u771f\u6d4b\u8bd5\u4fe1\u53f7\u548c\u8bbe\u7f6e\u4fe1\u53f7\u8bb0\u5f55\u7b49\u4eff\u771f\u73af\u5883</li> </ul> <p>always\u8bf4\u660e\u8bed\u53e5\uff1a <pre><code>always &lt;\u65f6\u5e8f\u63a7\u5236&gt; &lt;\u8bed\u53e5&gt;\n</code></pre></p> <p>\u6cbf\u89e6\u53d1\uff1a<code>or</code>\u5173\u952e\u5b57\u8fde\u63a5\uff08\u53ef\u4f7f\u7528<code>,</code>\u4ee3\u66ff\uff09\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u6cbf\u51fa\u73b0\u5c31\u6267\u884c\u8fc7\u7a0b\u5757 <pre><code>always @ (posedge clock or posedge reset) begin\n\nend\n</code></pre></p> <ul> <li>\u5e38\u63cf\u8ff0\u65f6\u5e8f\u884c\u4e3a\uff08\u5982\u6709\u9650\u72b6\u6001\u673a\uff09</li> </ul> <p>\u7535\u5e73\u89e6\u53d1\uff1a\u53ea\u8981\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7535\u5e73\u53d1\u751f\u53d8\u5316\uff08\u7531\u9ad8\u5230\u4f4e/\u7531\u4f4e\u5230\u9ad8\uff09\uff0c\u5c31\u6267\u884c\u8fc7\u7a0b\u5757 <pre><code>always @ (a or b or c) begin\n\nend\n</code></pre></p> <ul> <li>\u5e38\u63cf\u8ff0\u7ec4\u5408\u903b\u8f91\u884c\u4e3a <p>\u591a\u4e2aalways\u5757\u5e76\u6ca1\u6709\u524d\u540e\u4e4b\u5206\uff1a\u82e5\u53ef\u7efc\u5408\uff0c\u5219\u63cf\u8ff0\u67d0\u79cd\u7ed3\u6784\uff1b\u82e5\u4e0d\u53ef\u7efc\u5408\uff0c\u5219\u63cf\u8ff0\u7535\u8def\u7ed3\u6784\u7684\u884c\u4e3a</p> </li> </ul> <p><code>@*</code>\u64cd\u4f5c\u7b26\uff1a\u8868\u793a\u5bf9\u5176\u540e\u5757\u8bed\u53e5\u4e2d\u6240\u6709\u8f93\u5165\u53d8\u91cf\u7684\u53d8\u5316\u654f\u611f <pre><code>always @ (*) begin\n    out 1 = a ? (b + c) : (d + e);\n    out 2 = f ? (g + h) : (p + m);\nend\n</code></pre></p> <p><code>wait</code>\u5173\u952e\u5b57\uff1a\u7535\u5e73\u654f\u611f\u65f6\u5e8f\u63a7\u5236\uff0c\u7b49\u5f85\u7535\u5e73\u654f\u611f\u6761\u4ef6\u4e3a\u771f\u624d\u6267\u884c\uff08\u800c\u4e0d\u4ec5\u4ec5\u662f\u53d1\u751f\u6539\u53d8\uff09 <pre><code>always wait(count_enable) #20 count = count + 1;\n</code></pre></p> <p>\u4f8b\uff1a\u4eff\u771f\u6b7b\u9501 <pre><code>always areg = ~areg;\n</code></pre></p> <p>\u4f8b\uff1a\u65f6\u949f\u4fe1\u53f7</p> <ul> <li>\u53d1\u751f <pre><code>always #half_period areg = ~areg;\n</code></pre></li> <li>\u5229\u7528 <pre><code>reg [7:0] counter;\nreg tick;\nalways @ (posedge areg) begin\n    tick = ~tick;\n    counter = counter + 1;\nend\n</code></pre></li> </ul>"},{"location":"miscellaneous/verilog/%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5/","title":"\u8d4b\u503c\u8bed\u53e5","text":"<p>\u975e\u963b\u585e\u8d4b\u503c\uff1a<code>b &lt;= a</code></p> <ul> <li>\u6240\u8d4b\u7684\u53d8\u91cf\u503c\u4e0d\u80fd\u7acb\u5373\u4e3a\u4e0b\u9762\u7684\u8bed\u53e5\u6240\u7528</li> <li>\u5757\u7ed3\u675f\u540e\u624d\u80fd\u5b8c\u6210\u6b64\u6b21\u8d4b\u503c\u64cd\u4f5c\uff0c\u6240\u8d4b\u7684\u53d8\u91cf\u503c\u662f==\u4e0a\u4e00\u6b21\u8d4b\u503c==\u5f97\u5230\u7684</li> <li>\u5e38\u7528\u4e8e\u53ef\u7efc\u5408\u65f6\u5e8f\u903b\u8f91\u6a21\u5757</li> </ul> <p><pre><code>always @ (posedge clk) begin\n    b &lt;= a;\n    c &lt;= b;\nend\n</code></pre> \u6b64\u65f6always\u5757\u7ed3\u675f\u540e\uff0cc\u66f4\u65b0\u4e3ab\u539f\u6765\u7684\u503c</p> <p>\u963b\u585e\u8d4b\u503c\uff1a<code>b = a</code></p> <ul> <li>\u8d4b\u503c\u8bed\u53e5\u6267\u884c\u5b8c\u540e\uff0c\u5757\u624d\u7ed3\u675f</li> <li>b\u7684\u503c\u5728\u8d4b\u503c\u8bed\u53e5\u6267\u884c\u5b8c\u540e\u7acb\u523b\u6539\u53d8</li> <li>\u5728\u65f6\u5e8f\u903b\u8f91\u4e2d\u4f7f\u7528\u65f6\u4f1a\u4ea7\u751f\u610f\u60f3\u4e0d\u5230\u7684\u7ed3\u679c</li> </ul> <p><pre><code>always @ (posedge clk) begin\n    b = a;\n    c = b;\nend\n</code></pre> \u6b64\u65f6clk\u4e0a\u5347\u6cbf\u5230\u6765\u65f6b\u9a6c\u4e0a\u53d6a\u7684\u503c\uff0cc\u9a6c\u4e0a\u53d6b\u7684\u503c(=a)</p>"},{"location":"miscellaneous/verilog/%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"\u8fd0\u7b97\u7b26","text":"<p>\u57fa\u672c\u8fd0\u7b97\u7b26\uff1a<code>+ - * / %</code></p> <ul> <li>\u8fdb\u884c\u7b97\u6570\u8fd0\u7b97\u64cd\u4f5c\u65f6\uff0c\u82e5\u5176\u4e2d\u67d0\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e3ax\uff0c\u6574\u4e2a\u7ed3\u679c\u4e3ax</li> </ul> <p>\u4f4d\u8fd0\u7b97\u7b26\uff1a<code>~ &amp; | ^ ^~</code></p> <ul> <li>\u5bf9\u4e0d\u540c\u957f\u5ea6\u7684\u6570\u636e\u8fdb\u884c\u4f4d\u8fd0\u7b97\uff0c\u9ed8\u8ba4\u6309\u7167\u53f3\u7aef\u5bf9\u9f50\uff0c\u9ad8\u4f4d\u75280\u586b\u5145</li> </ul> <p>\u903b\u8f91\u8fd0\u7b97\u7b26\uff1a<code>&amp;&amp; || !</code></p> <p>\u5173\u7cfb\u8fd0\u7b97\u7b26\uff1a<code>&lt; &gt; &lt;= &gt;=</code></p> <ul> <li>false - 0, true -1, \u67d0\u4e2a\u64cd\u4f5c\u6570\u503c\u4e0d\u5b9a - x</li> </ul> <p>\u7b49\u5f0f\u8fd0\u7b97\u7b26\uff1a<code>== != === !==</code></p> <ul> <li>== != \u4e3a\u903b\u8f91\u7b49\u5f0f\u8fd0\u7b97\u7b26\uff0c\u5f53\u64cd\u4f5c\u6570\u4e2d\u5b58\u5728x, z\u65f6\u8fd4\u56dex\uff1b=== !==\u53ef\u5bf9x, z\u8fdb\u884c\u5224\u65ad\uff0c\u5b8c\u5168\u76f8\u540c\u8fd4\u56de1\uff0c\u4e0d\u540c\u8fd4\u56de0\uff08case\u7b49\u5f0f\u8fd0\u7b97\u7b26\uff09</li> </ul> <p>\u79fb\u4f4d\u8fd0\u7b97\u7b26\uff1a<code>&lt;&lt; &gt;&gt;</code></p> <ul> <li>\u75280\u586b\u5145\u7a7a\u4f4d</li> </ul> <p>\u62fc\u63a5\u8fd0\u7b97\u7b26\uff1a<code>{}</code> <pre><code>{\u4fe1\u53f71\u7684\u67d0\u51e0\u4f4d, \u4fe1\u53f72\u7684\u67d0\u51e0\u4f4d ,... ,\u4fe1\u53f7n\u7684\u67d0\u51e0\u4f4d}\n</code></pre></p> <ul> <li>\u4f8b\uff1a<code>{a, b[3:0], w, 3'b101}</code>\u7b49\u4ef7\u4e8e<code>{a, b[3], b[2], b[1], b[0], w, 1'b1, 1'b0, 1'b1}</code></li> <li>\u4e0d\u5141\u8bb8\u5b58\u5728\u6ca1\u6709\u6307\u660e\u4f4d\u6570\u7684\u4fe1\u53f7</li> <li>\u91cd\u590d\u6cd5\uff1a<code>{4{w}}</code>(<code>{w, w, w, w}</code>), <code>{b, {3{a, b}}}</code>(<code>{b, a, b, a, b, a, b}</code>)\uff0c\u5176\u4e2d\u91cd\u590d\u6b21\u6570\u5fc5\u987b\u662f\u5e38\u6570\u8868\u8fbe\u5f0f</li> </ul> <p>\u7f29\u51cf\u8fd0\u7b97\u7b26\uff1a\u5bf9\u5355\u4e2a\u64cd\u4f5c\u6570\u6bcf\u4e00\u4f4d\u8fdb\u884c\u4e0e\u3001\u6216\u3001\u975e\u7684\u9012\u5f52\u8fd0\u7b97\uff0c\u7ed3\u679c\u4e3a1\u4f4d\u4e8c\u8fdb\u5236\u6570</p> <ul> <li>\u4f8b\uff1a<code>reg [3:0] B;C = &amp;B;</code>\u76f8\u5f53\u4e8e<code>C = ((B[0] &amp; B[1]) &amp; B[2]) &amp; B[3];</code></li> </ul>"},{"location":"reading/A%20Quantum%20Algorithm%20for%20Shapley%20Value%20Estimation/","title":"A Quantum Algorithm for Shapley Value Estimation","text":"<p>Info</p> <p>Link: arxiv</p>"},{"location":"reading/A%20Quantum%20Algorithm%20for%20Shapley%20Value%20Estimation/#_1","title":"\u6458\u8981&amp;\u7ed3\u8bba","text":"<p>\u76ee\u7684\uff1a\u91cf\u5b50AI\u53ef\u89e3\u91ca\u6027</p> <p>\u5bf9\u8c61\uff1a\u5408\u4f5c\u535a\u5f08\u4e2d\u7684Shapley\u503c</p> <p>\u5185\u5bb9\uff1a\u5229\u7528\u91cf\u5b50\u7b97\u6cd5\u8ba1\u7b97Shapley\u503c</p> <p>\u7ed3\u8bba\uff1a\u5c06\u91cf\u5b50\u7b97\u6cd5\u7684Shapley\u503c\u4f30\u8ba1\u95ee\u9898\u8f6c\u5316\u4e3a\u4f30\u8ba1\u4e8c\u9879\u5206\u5e03\u771f\u5b9e\u5e73\u5747\u503c\u7684\u591a\u9879\u5f0f\u7b97\u6cd5</p>"},{"location":"reading/A%20Quantum%20Algorithm%20for%20Shapley%20Value%20Estimation/#_2","title":"\u5bfc\u8a00","text":"<p>\u80cc\u666f\uff1aAI\u53ef\u89e3\u91ca\u6027\uff1a</p> <ul> <li>\u4f7f\u7528\u53ef\u89e3\u91ca\u6027\u6a21\u578b</li> <li>\u4f7f\u7528\u4e8b\u540e\u89e3\u91ca\u65b9\u6cd5</li> </ul> <p>Shapley\u503c\uff1a\u5bf9\u8d21\u732e\u8fdb\u884c\u5ea6\u91cf</p> <p>\u56f0\u96be\uff1a\u76f4\u63a5\u8ba1\u7b97Shapley\u503cNP-Hard\uff0c\u4ec5\u80fd\u901a\u8fc7\u91c7\u6837\u89e3\u51b3\uff0c\u65e0\u6cd5\u7cbe\u786e\u8ba1\u7b97</p> <p>\u8d21\u732e\uff1a\u5168\u5c40\u4f30\u8ba1\u91cf\u5b50\u7535\u8def\u8f93\u5165\u56e0\u7d20\u7684Shapley\u503c\u7684\u6846\u67b6</p> <ul> <li>\u590d\u6742\u5ea6\uff1a\\(O(n\\log n)\\)\u989d\u5916C-NOT\u95e8\uff0c\\(O(n)\\)\u989d\u5916\u7535\u8def\u6df1\u5ea6\uff0c\\(O(\\log n)\\)\u989d\u5916\u91cf\u5b50\u6bd4\u7279</li> <li>\u5bf9\u6bd4\uff1a\u76f4\u63a5\u8ba1\u7b97\\(O(2^n)\\)</li> </ul>"},{"location":"reading/A%20Quantum%20Algorithm%20for%20Shapley%20Value%20Estimation/#_3","title":"\u80cc\u666f","text":"<p>\u6982\u5ff5\uff1a</p> <ul> <li>\u5408\u4f5c\u535a\u5f08\uff1a<ul> <li>\u535a\u5f08\\(G=(F,V)\\)</li> <li>\u73a9\u5bb6\\(F=\\set{1,2,\\cdots,N}\\)</li> <li>\u4ef7\u503c\u51fd\u6570\\(V\\)\uff0c\\(\\forall S\\subseteq F:V(S)\\in\\mathbb R\\)\uff0c\u7528\u4e8e\u8861\u91cf\u7ed9\u5b9a\u5408\u4f5c\\(S\\)\u7684\u4ef7\u503c\uff0c\u89c4\u5b9a\\(V(\\emptyset)=0\\).</li> <li>\u6536\u76ca\u5411\u91cf\\(\\Phi(G)\\)\u957f\u5ea6\u4e3a\\(N\\)\uff0c\\(\\Phi(G)_i\\)\u4e3a\u73a9\u5bb6\\(i\\)\u7684\u8d21\u732e\uff08\u5373Shapley\u503c\uff09\uff1b\\(\\Phi(G)\\)\u7531\\(V\\)\u51b3\u5b9a\uff0c\\(\\Phi(G)_i\\)\u7531\u73a9\u5bb6\\(i\\)\u5bf9\\(V(S):\\forall S\\subseteq F\\)\u7684\u5f71\u54cd\u51b3\u5b9a</li> </ul> </li> <li>Shapley\u503c\uff1a\u73a9\u5bb6\\(i\\)\u8fb9\u7f18\u8d21\u732e\u7684\u671f\u671b<ul> <li>\u8fb9\u7f18\u8d21\u732e\uff1a\\(\\forall S\\subseteq F\\setminus\\set{i}:V(S\\cup\\set{i})-V(S)\\)</li> </ul> </li> </ul> <p>\u516c\u7406\u4f53\u7cfb\uff1a\\(G=(F,V),G'=(F,V'),F=\\set{1,\\cdots,N}\\)\uff0c\u6536\u76ca\u51fd\u6570\\(\\Phi(G)\\)</p> <ul> <li>\u6709\u6548\u6027\uff1a\u6240\u6709\u73a9\u5bb6\u8d21\u732e\u548c\u7b49\u4e8e\u6240\u6709\u73a9\u5bb6\u5408\u4f5c\u7684\u4ef7\u503c$$ \\sum_{i=1}^N\\Phi(G)_i=V(F) $$</li> <li>\u7b49\u4ef7\u6027\uff1a\u73a9\u5bb6\\(i,j\\)\u7b49\u4ef7\\(\\Leftrightarrow \\forall S\\subseteq F,i,j\\not\\in S:V(S\\cup\\set{i})=V(S\\cup\\set{j})\\),\u82e5\u73a9\u5bb6\u7b49\u4ef7\uff0c\u5219\u4e8c\u8005\u8d21\u732e\u76f8\u5f53$$ \\Phi(G)_i=\\Phi(G)_j $$</li> <li>\u96f6\u73a9\u5bb6\uff1a\u73a9\u5bb6\u5bf9\u4efb\u610f\u5408\u4f5c\u90fd\u6ca1\u6709\u8d21\u732e\\(\\forall S\\subseteq F,i\\not\\in S:V(S)=V(S\\cup\\set{i})\\)\uff0c\u5219\u4e3a\u96f6\u73a9\u5bb6$$ \\Phi(G)_i=0 $$</li> <li>\u53ef\u52a0\u6027\uff1a\u540c\u4e00\u73a9\u5bb6\u5728\u4e0d\u540c\u535a\u5f08\u4e2d\u7684Shapley\u503c\u53ef\u52a0 $$ \\Phi(G+G')=\\Phi(G)_i+\\Phi(G')_i $$ \u5176\u4e2d\\(G+G'=(F,V+V'),(V+V')(S)=V(S)+V'(S)\\quad\\forall S\\subseteq F\\) \u8be5\u516c\u91cc\u4f53\u7cfb\u4e0b\uff0c\u8d21\u732e\u5212\u5206\u552f\u4e00\u3002</li> </ul> <p>\u76f4\u63a5\u8ba1\u7b97\uff1a\u8bb0\\(\\Phi_i\\equiv\\Phi(G)_i\\)\uff0c\u5219$$ \\Phi_i=\\sum_{S\\subseteq F\\setminus\\set{i}}\\gamma(|F\\setminus\\set{i}|,|S|)\\cdot(V(S\\cup\\set i)-V(S)) $$ $$ \\gamma(n,m)=\\dfrac{1}{(n+1)C_n^m}=\\dfrac{m!(n-m)!}{(n+1)!} $$ \u5176\u4e2d\\(\\dfrac{1}{C_n^m}=\\dfrac{1}{C_{|F\\setminus\\set i|}^{|S|}}\\)\u7528\u4e8e\u5e73\u5747\u5bf9\u4e8e\u7ed9\u5b9a\u5927\u5c0f\\(S\\)\u7684\u6240\u6709\u52a0\u548c\u9879\uff0c\\(\\dfrac{1}{n+1}=\\dfrac{1}{N}\\)\u7528\u4e8e\u5e73\u5747\u4e0d\u540c\u5927\u5c0f\u7684\\(S\\)\u7684\u52a0\u548c\u9879\u3002 \u56f0\u96be\uff1a\u8ba1\u7b97\\(\\Phi_i\\)\u9700\u8981\u5728\\(2^{|F\\setminus\\set i|}\\)\u4e2a\u4e0d\u540c\u5b50\u96c6\u4e0a\u8ba1\u7b97\\(V\\)</p> <p>\u53ef\u89e3\u91caAI(XAI)\uff1a</p> <ul> <li>\u9ed1\u7bb1\u7a0b\u5e8f\u65e0\u6cd5\u8c03\u8bd5\uff0c\u9c81\u68d2\u6027\u5dee\uff0c\u65e0\u6cd5\u5e94\u5bf9\u6781\u7aef\u60c5\u51b5</li> <li>\u4e8b\u540e\u5206\u6790\u7684XAI\u53ef\u4f5c\u4e3a\u5173\u952e\u7684\u8c03\u8bd5\u5de5\u5177</li> </ul>"},{"location":"reading/A%20Quantum%20Algorithm%20for%20Shapley%20Value%20Estimation/#_4","title":"\u7b97\u6cd5","text":"<p>\u601d\u8def\uff1a</p> <ul> <li>\u5c06\\(\\gamma(n,m)\\)\u8f6c\u5316\u4e3a\u79ef\u5206\\(\\int_0^1t^m(1-t)^{n-m}dt\\)</li> <li>\u5bf9\u79ef\u5206\u533a\u95f4\\([0,1]\\)\u5206\u5272\u53d6\u70b9\uff0c\u8ba1\u7b97Riemann\u548c</li> </ul> <p>\u8bb0\u53f7\uff1a</p> <ul> <li>\u4ef7\u503c\u51fd\u6570\u4e0a\u754c\\(V_\\max:=\\max\\limits_{S\\subseteq F}|V(S)|\\)</li> <li>\u5b50\u96c6\u7f16\u7801\\(S_x:=\\set{j|x_j=1}\\)\uff0c\u5c06\u5b50\u96c6\u7f16\u7801\u4e3a\\(\\ket x\\)</li> <li>\u7ea6\u5316\u4ef7\u503c\\(\\hat V^+(x):=\\dfrac{V(S_x\\cup\\set i)}{V_\\max},\\hat V^-(x):=\\dfrac{V(S_x)}{V_\\max}\\)</li> <li>\u4ef7\u503c\u51fd\u6570\u7b97\u5b50\\(U_v^\\pm\\ket x\\ket0:=\\ket x\\left(\\sqrt{\\dfrac{1-\\hat V^\\pm(x)}{2}}\\ket0+\\sqrt{\\dfrac{1+\\hat V^\\pm(x)}{2}}\\ket1\\right)\\)\uff0c\\(U_v^\\pm\\)\u4e3a\\(U_v^+,U_v^-\\)\u7684\u7f29\u5199</li> <li>\u7c7b\\(\\beta\\)\u51fd\u6570\\(B_{\\alpha,\\beta}=\\int_0^1x^\\beta(1-x)^{\\alpha-\\beta}dx\\)\uff0c\\(b_{\\alpha,\\beta}(x)=x^\\beta(1-x)^{\\alpha-\\beta}\\)</li> <li>\u5206\u70b9\\(t_l(k)=\\sin^2\\left(\\dfrac{\\pi}{2}\\cdot\\dfrac{k}{2^l}\\right)\\)\uff0c\\([0,1]\\)\u4e0a\u5206\u5272\\(P=(t_l(k))_{k=0}^{2^l-1}\\)\uff0c\u533a\u95f4\u957f\u5ea6\\(w_l(k)=t_l(k+1)-t_l(k)\\)</li> <li>\u6c49\u660e\u8ddd\u79bb\uff1a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e4b\u95f4\u4e0d\u540c\u7684\u4f4d\u7684\u4e2a\u6570\uff0c\\(H_m\\)\uff1a\u5230\\(0\\)\u6c49\u660e\u8ddd\u79bb\u4e3a\\(m\\)\u7684\u4e8c\u8fdb\u5236\u6570\u7684\u96c6\u5408\uff0c\u5373\u5177\u6709\\(m\\)\u4e2a\\(1\\)\u7684\u4e8c\u8fdb\u5236\u6570</li> </ul> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u521d\u6001\uff1a\\(\\ket{\\psi_0}=\\ket0_{Pt}\\otimes\\ket0_{Pl}\\otimes\\ket0_{Ut}\\)\uff0c\u5206\u522b\u4e3a\u5212\u5206\u5bc4\u5b58\u5668Pt\uff0c\u73a9\u5bb6\u5bc4\u5b58\u5668Pl\uff0c\u8d21\u732e\u5bc4\u5b58\u5668Ut</li> <li>\u521d\u59cb\u5316\u5212\u5206\u5bc4\u5b58\u5668\uff1a\u5212\u5206\u5bc4\u5b58\u5668\u5171\\(l\\)\u4e2aqubit\uff0c\\(l=O(\\log n)\\)\u5c06\u533a\u95f4\u5212\u5206\u4e3a\\(2^l=n\\)\u4efd\uff1b\u53ef\u4ee5\u5728\\(O(n)\\)\u7684\u65f6\u95f4\u5c06\u5176\u5236\u5907\u4e3a\u4efb\u610f\u6001\uff1b\u5c06\u5176\u521d\u59cb\u5316\u4e3a\\(\\sum\\limits_{k=0}^{2^l-1}\\sqrt{w_l(k)}\\ket k\\)\uff0c\u5f97$$ \\ket{\\psi_1}=\\sum_{k=0}^{2^l-1}\\sqrt{w_l(k)}\\ket k_{Pt}\\ket0_{Pl}\\ket0_{Ut} $$</li> <li>\u53d6\u70b9\u5e26\u5165\uff1a\u6784\u9020\u7b97\u5b50\\(R\\)\uff0c\\(R\\ket k\\ket0:=\\ket k(\\sqrt{1-t_l'(k)}\\ket0+\\sqrt{t_l'(k)}\\ket1)\\)\uff0c\u5176\u4e2d\\(t'_l(k)=t_{l+1}(2k+1)\\)\u4f5c\u4e3a\\([t_l(k),t_l(k+1)]\\)\u7684Riemann\u548c\u91c7\u6837\u70b9 \u8bc1\u660e\uff1a\\(t_l(k)=\\sin^2\\left(\\dfrac{\\pi}{2}\\cdot\\dfrac{k}{2^l}\\right)\\)\uff0c\\(t_{l+1}(2k+1)=\\sin^2\\left(\\dfrac{\\pi}{2}\\cdot\\dfrac{2k+1}{2^{l+1}}\\right)=\\sin^2\\left(\\dfrac{\\pi}{2}\\left(\\dfrac{k}{2^l}+\\dfrac{1}{2^{l+1}}\\right)\\right)\\) \\(\\therefore t_{l+1}(2k+1)\\in[t_l(k),t_l(k+1)]\\) \u5236\u5907\uff1a  \\(R_y(\\theta)\\ket0=\\cos\\dfrac{\\theta}{2}\\ket0+\\sin\\dfrac{\\theta}{2}\\ket1\\) \u8bb0\\(k:=2^{l-1}a_{l-1}+\\cdots+2^0a_0\\)\uff0c\u5219\\(\\dfrac{k}{2^l}=\\dfrac{1}{2^1}a_{l-1}+\\cdots+\\dfrac{1}{2^l}\\) \\(\\begin{array}{l}\\therefore Ry\\left(\\dfrac{k}{2^l}\\pi+\\dfrac{\\pi}{2^{l+1}}\\right)\\ket0=\\cos\\left(\\dfrac{k\\pi}{2^l\\cdot2}+\\dfrac{\\pi}{2^{l+1}\\cdot2}\\right)\\ket0+\\sin\\left(\\dfrac{k\\pi}{2^l\\cdot2}+\\dfrac{\\pi}{2^{l+1}\\cdot2}\\right)\\ket1\\\\=\\sqrt{1-t_l'(k)}\\ket0+\\sqrt{t_l'(k)}\\ket1\\end{array}\\) \u95e8\u590d\u6742\u5ea6\\(O(\\log n)\\)</li> <li>\u6784\u9020\u5e42\u6b21\uff1a\u5bf9\u73a9\u5bb6\u5bc4\u5b58\u5668\u4e2d\u7684\u6bcf\u4e2a\u6bd4\u7279\u4f5c\u7528\u7b97\u5b50\\(R\\)\uff0c\u5f97 $$ \\ket{\\psi_2}=\\sum_{k=1}^{2^l-1}\\sqrt{w_l(k)}\\ket k_{Pt}\\left(\\sqrt{1-t_l'(k)}\\ket0+\\sqrt{t_l'(k)}\\ket1\\right)^{\\otimes n}\\ket0_{Ut} $$ \u590d\u6742\u5ea6\\(O(n\\log n)\\). \u6309\u7167\u6c49\u660e\u8ddd\u79bb\u5212\u5206\u91cf\u5b50\u6001\uff0c\u5316\u7b80\u5f20\u91cf\u79ef\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u73a9\u5bb6\u5bc4\u5b58\u5668\u57fa\u4e2d\u542b\\(1\\)\u4e2a\u6570\u76f8\u540c\u7684\u91cf\u5b50\u6001\uff0c\u5176\u7cfb\u6570\u76f8\u540c\uff0c\u76f8\u5f53\u4e8e\u8ba1\u7b97\u5f20\u91cf\u79ef\u4e2d\\(\\sqrt{t_l'(k)}\\ket1\\)\u7684\u8d21\u732e</li> </ol> \\[ \\ket{\\psi_2}=\\sum_{k=0}^{2^l-1}\\sqrt{w_k(k)}\\ket k_{Pt}\\sum_{m=0}^n\\sqrt{t_l'(k)^m(1-t'_l(k))^{n-m}}\\sum_{h\\in H_m}\\ket h_{Pl}\\ket0_{Ut} \\] <p>\u5176\u4e2d\\(\\sum\\limits_{m=0}^n\\)\u679a\u4e3e\u73a9\u5bb6\u5bc4\u5b58\u5668\u4e2d\u542b\u6709\\(1\\)\u7684\u4e2a\u6570\uff0c\u4e14\u5bf9\u4e8e\u7ed9\u5b9a\u7684\\(m\\)\uff0c\u57fa\\(\\ket h,h\\in H_m\\)\u5177\u6709\u76f8\u540c\u7684\u7cfb\u6570. \u4ea4\u6362\u6c42\u548c\u6b21\u5e8f\u6709 $$ \\ket{\\psi_2}=\\sum_{m=0}^n\\sum_{h\\in H_m}\\sum_{k=0}^{2^l-1}\\sqrt{w_l(k)t_l'(k)^m(1-t_l'(k))^{n-m}}\\ket k_{Pt}\\ket h_{Pl}\\ket0_{Ut} $$ 5. \u67e5\u8be2\u4ef7\u503c\uff1a\u8bb0\\(U_V^\\pm\\ket h\\ket0:=\\ket h\\ket{V^\\pm(h)}\\)\uff0c\u5176\u4e2d\\(\\ket{V^\\pm(h)}=\\sqrt{\\dfrac{1-\\hat V^\\pm(h)}{2}}\\ket0+\\sqrt{\\dfrac{1+\\hat V^\\pm(h)}{2}}\\ket1\\) \u7b97\u5b50\\(U_V^\\pm\\)\u5b9e\u73b0\u601d\u8def\uff1a\u67e5\u627e\u8868\uff0cqRAM \u4f5c\u7528\\(U_V^\\pm\\ket h_{Pl}\\ket0_{Ut}=\\ket h_{Pl}\\ket{V^\\pm(h)}_{Ut}\\)\uff0c\u5f97</p> \\[ \\ket{\\psi_3^\\pm}=\\sum_{m=0}^n\\sum_{h\\in H_m}\\sum_{k=0}^{2^l-1}\\sqrt{w_l(k)t'_l(k)^m(1-t'_l(k))^{n-m}}\\ket k_{Pt}\\ket h_{Pl}\\ket{V^\\pm(h)}_{Ut} \\] <p>\u81f3\u6b64\uff0c\u76ee\u6807\u91cf\u5b50\u6001\u5df2\u5236\u5907\u5b8c\u6bd5.</p> <ol> <li>\u7ed3\u679c\u8bfb\u51fa\uff1a\u5229\u7528\u5bc6\u5ea6\u7b97\u5b50\u5206\u79bb\u5b50\u7cfb\u7edf\uff0c\u5bc6\u5ea6\u7b97\u5b50\\(\\ket{\\psi_3^\\pm}\\bra{\\psi_3^\\pm}\\)\u5bf9\u5212\u5206\u5bc4\u5b58\u5668\u3001\u73a9\u5bb6\u5bc4\u5b58\u5668\u53d6\u504f\u8ff9\uff0c\u5f97</li> </ol> \\[ \\text{tr}_{Pt,Pl}(\\ket{\\psi_3^\\pm}\\bra{\\psi_3^\\pm})=\\sum_{m=0}^n\\sum_{h\\in H_m}\\left(\\sum_{k=0}^{2^l-1}\\sqrt{w_l(k)t'_l(k)^m(1-t'_l(k))^{n-m}}\\right)\\ket{V^\\pm(h)}_{Ut}\\bra{V^\\pm(h)}_{Ut} \\] <p>\u504f\u8ff9\uff1a\u5f20\u91cf\u79ef\u7684\u9006\u8fd0\u7b97\uff0c\u7528\u4e8e\u5206\u79bb\u5b50\u7cfb\u7edf</p> <p>\u7ed9\u5b9a\\(\\rho^{AB}=\\rho^A\\otimes\\rho^B\\)\uff0c\u5df2\u77e5\\(\\rho^A\\)\uff0c\u5219\\(\\rho^B=\\text{tr}_A(\\rho^{AB})\\)</p> <p>\u5176\u4e2d\\(\\text{tr}_A(\\rho^{AB})=\\sum\\limits_{i=0}^{n-1}(\\bra i\\otimes I_n)\\rho^{AB}(\\ket i\\otimes I_n)\\)\uff0c\u76f8\u5f53\u4e8e\u5bf9\u5176\u4e2d\u7684\\(\\rho^A\\)\u6210\u5206\u53d6\u8ff9</p> <p>\u5bf9\u53cc\u6bd4\u7279\u7cfb\u7edf\u800c\u8a00\uff0c\\(\\text{tr}_B(\\ket{a_1}\\bra{a_1}\\otimes\\ket{b_1}\\bra{b_2})\\equiv\\ket{a_1}\\bra{a_2}\\text{tr}(\\ket{b_1}\\bra{b_2})=\\braket{b_2|b_1}\\ket{a_1}\\bra{a_2}\\)</p> \\[ \\because\\lim_{l\\to\\infty}\\sum_{k=0}^{2^l-1}\\sqrt{w_l(k)t'_l(k)^m(1-t'_l(k))^{n-m}}=\\int_0^1x^m(1-x)^{n-m}=B_{n,m}=\\gamma(n,m) \\] <p>\u5176\u4e2d\\(B_{n,m}=\\gamma(n,m)\\)\u53ef\u7531\u5206\u90e8\u79ef\u5206 + \u6570\u5f52\u8bc1\u660e</p> \\[ \\therefore \\text{tr}_{Pt,Pl}(\\ket{\\psi_3^\\pm}\\bra{\\psi_3^\\pm})\\simeq\\sum_{m=0}^n\\sum_{h\\in H_m}\\gamma(n,m)\\ket{V^\\pm(h)}_{Ut}\\bra{V^\\pm(h)}_{Ut} \\] <p>\u7ed3\u5408\\(\\ket{V^\\pm(h)}=\\sqrt{\\dfrac{1-\\hat V^\\pm(h)}{2}}\\ket0+\\sqrt{\\dfrac{1+\\hat V^\\pm(h)}{2}}\\ket1\\) \u6545\u6d4b\u91cf\\(Ut\\)\u5bc4\u5b58\u5668\u7684\u671f\u671b\\(E=0\\cdot P(\\ket0)+1\\cdot P(\\ket1)=P(\\ket1)\\)\u4e3a</p> \\[ \\sum_{m=0}^n\\sum_{h\\in H_m}\\gamma(n,m)\\dfrac{1+\\hat V^\\pm(h)}{2} \\] <ol> <li>\u540e\u5904\u7406\uff1a\u6267\u884c\u4e0a\u8ff0\u8fc7\u7a0b\u4e24\u6b21\uff0c\u5206\u522b\u4f7f\u7528\\(\\hat V^+\\)\u548c\\(\\hat V^-\\)\u7b97\u5b50\uff0c\u4e24\u6b21\u671f\u671b\u503c\u76f8\u51cf\u5f97 $$ \\dfrac{1}{2}\\sum_{m=0}^n\\sum_{h\\in H_m}\\gamma(n,m)\\left(\\hat V^+(h)-\\hat V^-(h)\\right) $$ \u5176\u4e2d\\(\\sum\\limits_{m=0}^h\\sum\\limits_{h\\in H_m}\\)\u76f8\u5f53\u4e8e\u6309\u7167\u5b50\u96c6\u5927\u5c0f\u679a\u4e3e\u5168\u90e8\u5b50\u96c6\uff0c\u5e26\u5165\u5f97 $$ \\dfrac{1}{2\\cdot V_\\max}\\sum_{S\\subseteq F\\setminus\\set i}\\gamma(|F\\setminus\\set i|,|S|)(V(S\\cup\\set i)-V(S))=\\dfrac{\\Phi_i}{2\\cdot V_\\max} $$</li> </ol> <p>\u7efc\u4e0a\uff0c\u603b\u7684\u91cf\u5b50\u7535\u8def\u4e3a\uff1a</p> <p></p> <p>\u5176\u4e2d\\(P\\)\u7528\u4e8e\u5236\u5907\u5206\u5272\uff0c\\(R\\)\u7528\u4e8e\u5e26\u5165\u6bcf\u4e2a\u5206\u5272\u533a\u95f4\u7684\u53d6\u70b9\uff0c\\(U_V^\\pm\\)\u7528\u4e8e\u4ef7\u503c\u51fd\u6570\u7684\u8ba1\u7b97\uff1b\u6d4b\u91cf\u65f6\uff0c\u5212\u5206\u5bc4\u5b58\u5668\u968f\u6536\u76ca\u5bc4\u5b58\u5668\u7684\u584c\u7f29\u5b8c\u6210\u4e86\u79ef\u5206\u5373\\(\\gamma\\)\u51fd\u6570\u7684\u8ba1\u7b97\uff0c\u73a9\u5bb6\u5bc4\u5b58\u5668\u968f\u584c\u7f29\u5b8c\u6210\u4e86\u5b50\u96c6\u7684\u679a\u4e3e\uff0c\u800c\u6536\u76ca\u5bc4\u5b58\u5668\u5219\u584c\u7f29\u4e3a\u6c42\u548c\u5bf9\u8c61\uff0c\u901a\u8fc7\u6c42\u671f\u671b\u5f97\u5230\u4e86\u6240\u9700\u7684\u7ed3\u679c</p> <p>\u8bef\u5dee\u5206\u6790\uff1a\u5b9a\u4e49\u5206\u5272\u52a0\u7ec6\u65f6\u5de6\u533a\u95f4\u5360\u539f\u533a\u95f4\u6bd4\u4f8b\\(\\rho_{l-1}(k):=\\dfrac{w_l(2k)}{w_l(2k)+w_l(2k+1)}=\\dfrac{w_l(2k)}{w_{l-1}(k)}\\)</p> <p>\u7ed3\u5408\u5bf9\u79f0\u6027\u3001\u5355\u8c03\u6027\u77e5\\(\\rho_l(k)\\in\\left(\\dfrac{1}{4},\\dfrac{3}{4}\\right)\\)</p> <p>\u5229\u7528Darboux\u4e0a\u4e0b\u548c\u4f30\u8ba1\u8bef\u5dee\u4e0a\u754c\uff0c\u53ef\u8bc1\u968f\u5206\u5272\u52a0\u7ec6\uff0c\u5355\u8c03\u533a\u95f4\u8bef\u5dee\u4e0a\u754c\\(\\overline{\\text{SUE}_{n,m}}(l+1)\\leqslant\\dfrac{3}{4}\\overline{\\text{SUE}_{n,m}}(l)\\)\uff0c\u5373\u6bcf\u6b21\u5206\u5272\u8bef\u5dee\u81f3\u5c11\u7f29\u51cf\u81f3\u539f\u8bef\u5dee\u7684\\(75\\%\\).</p>"},{"location":"reading/Quantum%20random%20access%20memory%20via%20quantum%20walk/","title":"Quantum random access memory via quantum walk","text":"<p>Info</p> <p>Link: iopscience</p>"},{"location":"reading/Quantum%20random%20access%20memory%20via%20quantum%20walk/#abstract-conclusion","title":"Abstract &amp; Conclusion","text":"<p>Methodology:</p> <ul> <li> <p>QW:</p> <ul> <li> <p>quantum walker: a bucket with chirality left and right</p> </li> <li> <p>quantum motion on a full binary tree</p> </li> </ul> </li> <li> <p>qRAM:</p> <ul> <li> <p>memory cells: bucket</p> </li> <li> <p>information in the form of quantum superposition states</p> </li> </ul> </li> </ul> <p>Procedure:</p> <ol> <li> <p>control a quantum motion of the bucket to deliver it to the desired memory cell</p> </li> <li> <p>fill the bucket with data stored in cells</p> </li> </ol> <p>Advantages:</p> <ol> <li> <p>robust (low cost to maintain the coherence): use chirality state instead of quantum switches, no need of placing any quantum devices at the nodes of the binary tree</p> <ul> <li> <p>the bucket is free from the entanglement with the nodes</p> </li> <li> <p>entangles with the address bits for a short amount of time to navigate the quantum walker: the chirality is updated the moment the bucket passes each node, only needs to maintain the coherence during the transfer between adjacent nodes</p> </li> </ul> </li> <li> <p>fully parallelized: \\(O(n)\\) steps to access and retrieve \\(O(2^n)\\) quantum superposition states</p> </li> <li> <p>simplicity: 3 schemes required in qRAM are entirely independent of each other and can be described as dynamics of the quantum walkers, thus no time-dependent control is needed</p> </li> </ol> <p>Future problem: actual implementation by scattering processes of quantum walkers on properly constructed graphs</p> <p>Potential application: quantum information processing</p> <ul> <li>image processing and transformations utilizing QFT (critical point: generation of multiple quantum images)</li> </ul>"},{"location":"reading/Quantum%20random%20access%20memory%20via%20quantum%20walk/#introduction","title":"Introduction","text":"<p>qRAM:</p> <ul> <li> <p>definition: \\(\\sum\\limits_a\\ket a_A\\ket0_D\\mapsto\\sum\\limits_a\\ket a_A\\ket{x^{(a)}}_D\\)</p> <p>\\(\\ket a_A\\in\\mathbb C^{2^n},\\ket{x^{a}}_D\\in\\mathbb C^{2^m}\\), where A denotes address register, D denotes data register</p> </li> <li> <p>scheme:</p> <ol> <li> <p>routing: access memory cells</p> </li> <li> <p>querying: retrieve data stored in cells</p> </li> <li> <p>output: encode the data into a superposition of quantum states</p> </li> </ol> </li> </ul> <p>GLM architecture (\u201cbucket brigade\u201d scheme):</p> <p></p> <ul> <li> <p>background: overcome fanout scheme in classical RAM</p> </li> <li> <p>structure:</p> <ul> <li> <p>routing: a perfect binary tree with \\(O(2^n)\\) nodes</p> </li> <li> <p>memory cells: \\(2^n\\) leaves</p> </li> <li> <p>binary representation of the address: \\(\\ket{a_{n-1},\\cdots,a_0}\\), \\(a_l=0\\) left child, \\(a_l=1\\) right child</p> </li> <li> <p>qutrit (left, right, wait) at each node</p> </li> </ul> </li> <li> <p>scheme:</p> <ol> <li> <p>routing \\(O(n^2)\\): \\(a_l\\) sequentially delivered from the root to a node at \\(l\\) th level and activates the qutrit to left / right; only \\(n\\) qutrits are activated</p> </li> <li> <p>querying: a quantum signal follows the path to the desired memory cell and retrieves information</p> </li> <li> <p>output: go back and reset the activated qutrits to state \u201cwait\u201d, obtains the output</p> </li> </ol> </li> </ul> <p>QW on a binary tree:</p> <ul> <li> <p>state:</p> <ul> <li> <p>bucket \\(\\ket{w,l}_B\\): the \\(w\\) th node in level \\(l\\)</p> </li> <li> <p>chirality \\(\\ket{c}_C\\)</p> </li> </ul> </li> <li> <p>space \\(V_B\\otimes V_C\\):</p> <ul> <li> <p>bus space: \\(V_B=\\bigoplus_{w,l}V_{(w,l)}\\ (V_{(w,l)}=\\mathbb C)\\) spanned by \\(\\ket{w,l}_B\\)</p> </li> <li> <p>chirality space: \\(V_C=\\mathbb C^2\\)</p> </li> <li> <p>address space: \\(V_A=(\\mathbb C^2)^{\\otimes n}\\)</p> </li> </ul> </li> <li> <p>operator \\(\\mathcal S_{(w,l)}\\in \\mathscr L((V_{(w,l)}\\oplus V_{(2w,l+1)}\\oplus V_{(2w+1,l+1)})\\otimes V_C)\\):</p> <ul> <li> <p>forward:</p> <ul> <li> <p>\\(\\mathcal S_{(w,l)}\\ket{w,l}_B\\ket0_C=\\ket{2w,l+1}_B\\ket0_C\\)</p> </li> <li> <p>\\(\\mathcal S_{(w,l)}\\ket{w,l}_B\\ket1_C=\\ket{2w+1,l+1}_B\\ket1_C\\)</p> </li> </ul> </li> <li> <p>backward:</p> <ul> <li> <p>\\(\\mathcal S_{(w,l)}\\ket{2w,l+1}_B\\ket0_C=\\ket{w,l}_B\\ket0_C\\)</p> </li> <li> <p>\\(\\mathcal S_{(w,l)}\\ket{2w+1,l+1}_B\\ket1_C=\\ket{w,l}_B\\ket1_C\\)</p> </li> </ul> </li> <li> <p>keep:</p> <ul> <li> <p>\\(\\mathcal S_{(w,l)}\\ket{2w,l+1}_B\\ket1_C=\\ket{2w,l+1}_B\\ket1_CS_{(w,l)}\\ket{2w,l+1}_B\\ket1_C=\\ket{2w,l+1}_B\\ket1_C\\)</p> </li> <li> <p>\\(\\mathcal S_{(w,l)}\\ket{2w+1,l+1}_B\\ket0_C=\\ket{2w+1,l+1}_B\\ket0_C\\)</p> </li> </ul> </li> </ul> \\[\\begin{array}{l}\\mathcal S_{(w,l)}=\\sum\\limits_{i=0}^1\\left(\\ket{2w+i,l+1}\\bra{w,l}+\\ket{w,l}\\bra{2w+i,l+1}\\right)_B\\otimes\\ket i\\bra i_C\\\\+\\sum\\limits_{i=0}^1\\ket{2w+\\dfrac{1+(-1)^i}{2},l+1}\\bra{2w+\\dfrac{1+(-1)^i}{2},l+1}\\otimes\\ket i\\bra i_C\\end{array}\\] </li> </ul> <p>Contribution: employs a discrete-time quantum walk as a bucket brigade scheme</p>"},{"location":"reading/Quantum%20random%20access%20memory%20via%20quantum%20walk/#algorithm","title":"Algorithm","text":"<p>Representation:</p> <ul> <li> <p>data stored in cell \\(\\ket{x^{(a)}}_D\\):</p> <p>\\(\\ket{x^{(a)}}_D=\\ket{x_{m-1}^{(a)}\\cdots x_0^{(a)}}_D=\\ket{x_{m-1}^{(a)}}_{D_{m-1}}\\cdots\\ket{x_0^{(a)}}_{D_0}\\)</p> <p>\\(\\ket{x_i^{(a)}}\\in V_{D_i}=\\mathbb C^2\\)</p> </li> <li> <p>address \\(\\ket a_A\\):</p> <p>\\(\\ket{a}_A=\\ket{a_{n-1}\\cdots a_0}_A=\\ket{a_{n-1}}_{A_{n-1}}\\cdots\\ket{a_0}_{A_0}\\)</p> <p>\\(\\ket{a_i}\\in V_{A_i}=\\mathbb C^2\\)</p> </li> <li> <p>space \\(V:=V_B\\otimes V_C\\otimes V_A\\otimes V_D\\)</p> <ul> <li> <p>address space \\(V_A\\)</p> </li> <li> <p>data space \\(V_D\\)</p> </li> </ul> </li> <li> <p>qRAM: \\(\\sum\\limits_{a\\in \\mathscr A}\\ket{0,0}_B\\ket 0_C\\ket a_A\\ket 0_D\\mapsto \\sum\\limits_{a\\in \\mathscr A}\\ket{0,0}_B\\ket 0_C\\ket a_A\\ket{x^{(a)}}_D\\)</p> <p>where \\(\\mathscr A\\subset\\{0,1,\\cdots,2^n-1\\}\\)</p> </li> <li> <p>state:</p> <ul> <li> <p>initial state:</p> <p>\\(\\ket{\\Psi_0^{(0)}}=\\sum\\limits_{a\\in \\mathscr A}\\ket{0,0}_B\\ket 0_C\\ket a_A\\ket 0_D\\)</p> </li> <li> <p>state at level \\(l\\): \\(\\ket{\\Psi_0^{(l)}}\\)</p> </li> <li> <p>state with data: \\(\\ket{\\Psi_x^{(n)}}\\)</p> </li> </ul> </li> </ul> <p>Schemes: qRAM = \\(\\mathcal{F^\\dagger QF}\\in\\mathscr L(V)\\)</p> <ol> <li> <p>routing \\(O(n)\\): \\(\\ket{\\Psi_0^{(n)}}=\\mathcal F\\ket{\\Psi_0^{(0)}}\\)</p> <ul> <li> <p>decomposed: \\(\\mathcal F=\\mathcal F^{(n|n-1)}\\cdots\\mathcal F^{(1|0)}\\)</p> <p>where \\(\\ket{\\Psi_0^{(l+1)}}=\\mathcal F^{(l+1|l)}\\ket{\\Psi_0^{(l)}}\\)</p> </li> <li> <p>plug \\(a\\) into \\(w\\), we have \\(\\ket{\\Psi_0^{(l)}}:=\\left|\\sum\\limits_{k=1}^l2^{l-k}a_{n-k},l\\right\\rangle_B\\ket{a_{n-l}}_C\\ket a_A\\ket0_D\\)</p> <p>\\(a_{n-1}\\) operates on the first layer with \\(2^{l-1}\\) effect on level \\(l\\)</p> </li> <li> <p>\\(\\mathcal F^{(l+1|l)}:=\\sum\\limits_{w=0}^{2^l-1}\\mathcal S_{(w,l)}\\mathcal C_{C,A_{n-(l+1)}}\\mathcal C_{C,A_{n-l}}\\)</p> <p>NOT operator \\(\\mathcal C_{C,A_l}\\in\\mathscr L(V_C\\otimes V_{A_l})\\):</p> <p>\\(\\mathcal C_{C,A_l}:=I_C\\otimes \\ket0\\bra0_{A_l}+X_C\\otimes\\ket1\\bra1_{A_l},\\ \\mathcal C_{C,A_n}:=I_C\\)</p> <p>\\(\\mathcal C_{C,A_{n-l}}\\) clears \\(a_{n-l}\\) on chirality (\\(c=0\\)), \\(\\mathcal C_{C,A_{n-(l+1)}}\\) loads \\(a_{n-(l-1)}\\) to chirality, then operates \\(\\mathcal S_{(s,w)}\\) to shift</p> <p>thus</p> \\[\\begin{array}{l}\\ket{\\Psi_0^{(0)}}=\\sum\\limits_{a\\in \\mathscr A}\\ket{0,0}_B\\ket 0_C\\ket a_A\\ket 0_D\\xrightarrow{\\mathcal F^{(1|0)}}\\ket{\\Psi_0^{(1)}}\\cdots\\\\\\xrightarrow{\\mathcal F^{(n|n-1)}}\\ket{\\Psi_0^{(n)}}=\\sum\\limits_{a\\in \\mathscr A}\\ket{a,n}_B\\ket 0_C\\ket a_A\\ket 0_D\\end{array}\\] <p>The motion of the shift operator is correspond with the address: \\(a=\\sum\\limits_{k=1}^n2^{n-k}a_{n-k}\\)</p> </li> </ul> </li> <li> <p>querying \\(O(1)\\): \\(\\ket{\\Psi_x^{(n)}}=\\mathcal Q\\ket{\\Psi_0^{(n)}},\\mathcal Q\\in\\mathscr L(V_B\\otimes V_D)\\)</p> <p>\\(\\ket{\\Psi_x^{(n)}}:=\\sum\\limits_{a\\in \\mathscr A}\\ket{a,n}_B\\ket 0_C\\ket a_A\\ket{x^{(a)}}_D\\)</p> <ul> <li> <p>composed with Pauli X operator \\(X_{D_i}\\in\\mathscr L(V_{D_i})\\):</p> <p>\\(\\mathcal Q:=\\sum\\limits_{a=0}^{2^n-1}\\ket{a,n}\\bra{a,n}_B\\otimes\\left[\\bigotimes\\limits_{i=0}^{m-1}(X_{D_i})^{x_i^{(a)}}\\right]\\)</p> <p>\\(\\ket\\cdot_B\\) keeps the same, use \\((X_{D_i})^{x_i^{(a)}}\\) to change \\(\\ket\\cdot_D\\)</p> </li> </ul> </li> <li> <p>output: \\(\\mathcal F\\) is unitary, \\(\\ket{\\Psi_x^{(0)}}=\\mathcal F^\\dagger\\ket{\\Psi_x^{(n)}}\\)</p> <p>where \\(\\ket{\\Psi_x^{(0)}}=\\sum\\limits_{a\\in \\mathscr A}\\ket{0,0}_B\\ket 0_C\\ket a_A\\ket{x^{(a)}}_D\\)</p> </li> </ol> <p>Example:</p> <p></p> <p></p> <p></p>"},{"location":"reading/Quantum%20random%20access%20memory%20via%20quantum%20walk/#implementation","title":"Implementation","text":"<p>Dual-rail encoding: use \\(2(n+m)\\) rails to represent \\(\\ket c_C\\ket a_A\\ket{x^{(a)}}_D\\)</p> <ul> <li> <p>idea: using 2 rails (\\(\\ket1,\\ket0\\)) and 2 color to represent the qubits in \\(\\ket\\cdot_A,\\ket\\cdot_D\\)</p> <p></p> <p>where \\(\\ket\\cdot_C\\) controls the color of the rail, 0 for red, 1 for blue</p> </li> <li> <p>superposition:</p> <p> </p> </li> <li> <p>example:</p> \\[\\begin{array}{l}\\mathcal F^\\dagger:\\ket{0,1}_B\\ket0_C\\ket0_A\\ket{10^{(0)}}_D+\\ket{1,1}_B\\ket1_C\\ket1_A\\ket{01^{(1)}}_D\\\\\\mapsto\\ket{0,0}_B\\ket0_C(\\ket0_A\\ket{10^{(0)}}_D+\\ket1_A\\ket{01^{(1)}}_D)\\end{array}\\] <p></p> </li> </ul>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/","title":"\u57fa\u4e8e\u91cf\u5b50\u8ba1\u7b97\u7684\u6295\u8d44\u7ec4\u5408\u4f18\u5316\u7b97\u6cd5","text":"<p>Info</p> <p>\u8be5\u5de5\u4f5c\u4e3a\u6731\u5b66\u957f@11d-beyonder\u7684\u6bd5\u4e1a\u8bbe\u8ba1 </p> <p>\u672c\u6587\u4e3a\u8be5\u5de5\u4f5c\u7684\u9605\u8bfb\u7b14\u8bb0</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_2","title":"\u6982\u62ec\u603b\u7ed3","text":"<ol> <li>\u5c06\u6295\u8d44\u7ec4\u5408\u95ee\u9898\u8868\u8fbe\u4e3a\u4e8c\u6b21\u4f18\u5316\u6a21\u578b</li> <li>\u5229\u7528\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u5c06\u4e8c\u6b21\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u65b9\u7a0b\u7ec4\u6c42\u89e3\u95ee\u9898</li> <li>\u5229\u7528HHL\u7b97\u6cd5\u6c42\u89e3\u65b9\u7a0b\u7ec4</li> <li>\u901a\u8fc7\u5f15\u5165\u7ea6\u675f\u7f29\u653e\u7cfb\u6570\u5bf9\u7b97\u6cd5\u8fdb\u884c\u4f18\u5316</li> </ol>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_3","title":"\u5177\u4f53\u5185\u5bb9","text":""},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_4","title":"\u6807\u51c6\u6295\u8d44\u7ec4\u5408\u9009\u62e9\u6a21\u578b","text":"<p>$$ \\begin{array}{rl} \\text{minimize}&amp;w^{\\mathrm T}\\Sigma w\\ s.t.&amp;w^{\\mathrm T}R=E\\ &amp;w^{\\mathrm T}\\Pi=\\Xi \\end{array} $$ \u5176\u4e2d</p> <ul> <li>\\(w=[w_1,\\cdots,w_n]^\\mathrm T,\\sum w_i=1\\)\u4e3a\u9009\u62e9\u5728\\(n\\)\u4e2a\u6807\u7684\u4e0a\u6295\u8d44\u7684\u6bd4\u4f8b</li> <li>\\(r_t=[r_1^t,\\cdots,r_n^t]^\\mathrm T\\)\u4e3a\u6bcf\u4e2a\u6807\u7684\u5728\u4ea4\u6613\u65e5\\(t\\)\u7684\u6536\u76ca</li> <li>\\(R=\\mathbb E(r_t)=\\dfrac{1}{T}\\sum r_t\\)\u4e3a\\(T\\)\u4e2a\u4ea4\u6613\u65e5\u6536\u76ca\u7684\u5747\u503c</li> <li>\\(\\Sigma=\\mathbb V(r_t)=\\dfrac{1}{T-1}\\sum(r_t-R)^\\mathrm T(r_t-R)\\)\u4e3a\u6536\u76ca\u7684\u534f\u65b9\u5dee\u77e9\u9635</li> <li>\\(E=w^\\mathrm TR\\)\u4e3a\u671f\u671b\u6536\u76ca</li> <li>\\(V=w^\\mathrm T\\Sigma w\\)\u4e3a\u98ce\u9669</li> <li>\\(\\Pi\\)\u4e3a\u5f53\u524d\u7684\u4ef7\u683c\u5411\u91cf</li> <li>\\(\\Xi\\)\u4e3a\u6295\u8d44\u91d1\u989d\u9650\u5b9a <p>\u53d6\\(\\Pi=[1,\\cdots,1]^\\mathrm T\\)\u65f6\\(w\\)\u4e3a\u5404\u6807\u7684\u6295\u8d44\u7684\u4efd\u6570\uff0c\\(\\Xi\\)\u4e3a\u8d2d\u4e70\u4efd\u6570\u9650\u989d</p> </li> </ul> <p>\u6545\u4e0a\u5f0f\u8868\u793a\u671f\u671b\u4e00\u5b9a\u65f6\uff0c\u9009\u53d6\u98ce\u9669\u6700\u4f4e\u7684\u6295\u8d44\u7ec4\u5408\u3002</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_5","title":"\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5","text":"\\[ f(w)=w^\\mathrm T\\Sigma w+\\eta(w^\\mathrm TR-E)+\\rho(w^\\mathrm T\\Pi-\\Xi) \\] <p>\u5176\u4e2d\\(\\eta,\\rho\\)\u4e3a\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u3002\u6c42\u504f\u5bfc\uff0c\u5f97</p> \\[ \\left\\{ \\begin{array}{l} \\dfrac{\\partial f}{\\partial w}=2\\Sigma w+\\eta R+\\rho \\Pi=0\\\\ \\dfrac{\\partial f}{\\partial\\eta}=w^\\mathrm TR-E=0\\\\ \\dfrac{\\partial f}{\\partial\\rho}=w^\\mathrm T\\Pi-\\Xi=0 \\end{array} \\right. \\] <p>\u5373</p> \\[ \\begin{bmatrix} 0&amp;0&amp;R^\\mathrm T\\\\ 0&amp;0&amp;\\Pi^\\mathrm T\\\\ R&amp;\\Pi&amp;\\Sigma \\end{bmatrix} \\begin{bmatrix} \\eta\\\\ \\rho\\\\ w \\end{bmatrix}= \\begin{bmatrix} E\\\\ \\Xi\\\\ 0 \\end{bmatrix} \\] <p>\u6b64\u5904\u5bf9\u7cfb\u6570\u8fdb\u884c\u4e86\u8c03\u6574</p> <p>\u8bb0\u8be5\u65b9\u7a0b\u7ec4\u4e3a\\(Ax=b\\)\uff0c\u5229\u7528HHL\u6c42\u89e3\uff08\u7531\u4e8e\u534f\u65b9\u5dee\u77e9\u9635\\(\\Sigma\\)\u5b9e\u5bf9\u79f0\uff0c\u6545\\(A\\)\u81ea\u4f34\uff09</p> \\[ \\begin{bmatrix} A&amp;O\\\\ O&amp;I \\end{bmatrix} \\begin{bmatrix} x\\\\ 0 \\end{bmatrix}= \\begin{bmatrix} b\\\\ 0 \\end{bmatrix} \\] <p>\u4f18\u5316\uff1a\u5f15\u5165\u7ea6\u675f\u7f29\u653e\u7cfb\u6570\u964d\u4f4e\u77e9\u9635\u7684\u6761\u4ef6\u6570 </p> \\[ \\begin{bmatrix} 0&amp;0&amp;s_1R^\\mathrm T\\\\ 0&amp;0&amp;s_2\\Pi^\\mathrm T\\\\ s_1R&amp;s_2\\Pi&amp;\\Sigma \\end{bmatrix} \\begin{bmatrix} \\eta\\\\ \\rho\\\\ w \\end{bmatrix}= \\begin{bmatrix} E\\\\ \\Xi\\\\ 0 \\end{bmatrix} \\]"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#hhl","title":"HHL","text":""},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_6","title":"\u6982\u8ff0","text":"<p>\u6c42\u89e3\\(Ax=b\\)\uff0c\u5176\u4e2d\\(A\\)\u81ea\u4f34\uff08\\(A\\)\u4e0d\u81ea\u4f34\uff1a\u6784\u9020\\(\\begin{bmatrix}&amp;A\\\\A^\\dagger\\end{bmatrix}\\begin{bmatrix}0\\\\x\\end{bmatrix}=\\begin{bmatrix}b\\\\0\\end{bmatrix}\\)\uff09</p> <p>\u590d\u6742\u5ea6\uff1a\\(O(\\kappa^2\\epsilon^{-1}\\log N)\\)\uff0c\u5176\u4e2d\\(\\kappa\\)\u4e3a\u77e9\u9635\u7684\u6761\u4ef6\u6570\uff0c\\(\\epsilon\\)\u4e3a\u89e3\u7684\u7cbe\u5ea6\uff08\u76f8\u4f4d\u4f30\u8ba1\u6c42\u7279\u5f81\u503c\u65f6\uff0c\u7279\u5f81\u503c\u5012\u6570\u7684\u76f8\u5bf9\u8bef\u5dee\uff09</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_7","title":"\u8868\u793a","text":"<p>\\(A\\ket x=\\ket b\\Rightarrow\\ket x=A^{-1}\\ket b\\)</p> <p>\u8c31\u5206\u89e3\uff1a\\(A=\\sum\\limits_{j=0}^{N-1}\\lambda_j\\ket{\\mu_j}\\bra{\\mu_j}\\)</p> <p>\u6807\u6b63\u57fa\uff1a\\(\\ket b=\\sum\\limits_{j=0}^{N-1}\\beta_j\\ket{\\mu_j}\\)</p> <p>\u4ee3\u5165\uff1a</p> \\[ \\begin{array}{rlr} \\ket x&amp;=\\left(\\sum\\limits_{i=0}^{N-1}\\dfrac{1}{\\lambda_i}\\ket{\\mu_i}\\bra{\\mu_i}\\right)\\left(\\sum\\limits_{j=0}^{N-1}\\beta_j\\ket{\\mu_j}\\right)&amp;(\\text{\u5bf9\u89d2\u9635})\\\\ &amp;=\\sum\\limits_{j=0}^{N-1}\\dfrac{1}{\\lambda_j}\\beta_j\\ket{\\mu_j}&amp;(\\text{\u6807\u6b63\u57fa}) \\end{array} \\]"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_8","title":"\u7535\u8def","text":"<ol> <li>\u5229\u7528\u540c\u6784\u7535\u8def\u5c06\\(\\ket b=\\sum\\limits_{j=0}^{N-1}b_j\\ket j=\\sum\\limits_{j=0}^{N-1}\\beta_j\\ket{\\mu_j}\\)\u7f6e\u4e8e\\(R_v\\)\u4e0a\uff08\u9700\u63d0\u524d\u5c06\\(\\ket b\\)\u5f52\u4e00\u5316\uff09</li> <li>\u7ecf\u8fc7QPE\uff0c\u5f97\\(\\sum\\limits_{j=0}^{N-1}\\beta_j\\ket{\\mu_j}\\ket{\\varphi_j}\\)</li> <li>\u5bf9\u4e8e\u53d6\u5b9a\u7684\u5f52\u4e00\u5316\u5e38\u6570\\(C\\)\uff0c\u5bf9\\(R_a\\)\u4f5c\u7528\\(R_Y(\\theta)\\)\uff0c\u5f97\\(\\sum\\limits_{j=0}^{N-1}\\beta_j\\ket{\\varphi_j}\\ket{\\mu_j}\\left(\\cos\\dfrac{\\theta}{2}\\ket0+\\sin\\dfrac{\\theta}{2}\\ket1\\right)\\)\uff0c\u5176\u4e2d<ul> <li>\\(\\theta=2\\arcsin\\dfrac{C}{\\lambda_j}\\)\uff08\u7531\u76ee\u6807\u65b9\u7a0b\u89e3\u7684\u5f62\u5f0f\u51b3\u5b9a\uff0c\\(C\\)\u7528\u4e8e\u5f52\u4e00\u5316\u4e0e\u6210\u529f\u7387\u63a7\u5236\uff09</li> <li>\\(\\lambda_j\\)\u7531\\(\\varphi_j\\)\u51b3\u5b9a</li> <li>\\(R_p\\)\u5b58\u50a8\\(\\varphi_j\\) \u5e26\u5165\\(C\\)\uff0c\u5f97\\(\\sum\\limits_{j=0}^{N-1}\\beta_j\\ket{\\mu_j}\\ket{\\varphi_j}\\left(\\sqrt{1-\\dfrac{C^2}{\\lambda_j^2}}\\ket0+\\dfrac{C}{\\lambda_j}\\ket1\\right)\\)</li> </ul> </li> <li>\u5229\u7528QPE\\(^\\dagger\\)\u89e3\u7ea0\u7f20\uff0c\u5f97\\(\\sum\\limits_{j=0}^{N-1}\\beta_j\\ket{\\mu_j}\\ket0^{\\otimes n}\\left(\\sqrt{1-\\dfrac{C^2}{\\lambda_j^2}}\\ket0+\\dfrac{C}{\\lambda_j}\\ket1\\right)\\)</li> <li>\u6d4b\u91cf\u8f85\u52a9\u6bd4\u7279\uff0c\u6d4b\u91cf\u7ed3\u679c\u4e3a1\u65f6\u6210\u529f\u6c42\u89e3\uff0c\u5f97\u76ee\u6807\u6001\\(\\dfrac{1}{\\sqrt{\\sum\\limits_{j=0}^{N-1}\\dfrac{\\beta_j^2}{\\lambda_j^2}}}\\sum\\limits_{j=0}^{N-1}\\dfrac{\\beta_j}{\\lambda_j}\\ket{\\mu_j}\\ket0^{\\otimes n}\\ket1\\)\uff0c\u5176\u4e2d\\(\\dfrac{1}{\\sqrt{\\sum\\limits_{j=0}^{N-1}\\dfrac{\\beta_j^2}{\\lambda_j^2}}}\\sum\\limits_{j=0}^{N-1}\\dfrac{\\beta_j}{\\lambda_j}\\ket{\\mu_j}\\)\u4e3a\u6807\u51c6\u5316\u7684\\(\\ket x\\)</li> <li>\u5229\u7528\u91cf\u5b50\u632f\u5e45\u4f30\u8ba1\u5f97\u5230\u57fa\u4e0a\u7684\u7cfb\u6570</li> </ol>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_9","title":"\u7ec6\u8282","text":""},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_10","title":"\u53c2\u6570\u786e\u5b9a","text":""},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#a","title":"A","text":"<p>\u521b\u65b0\uff1a\u4f7f\u7528A\u7684\u7279\u5f81\u503c\u8fdb\u884c\u7f29\u653e</p> <p>\u8981\u6c42\uff1a\\(|\\lambda|\\leqslant1\\)</p> <p>\u7f29\u653e\uff1a\\(A:=\\dfrac{l}{|\\lambda|_\\max}A(l\\in(0,1])\\)</p> <p>\u53d6\\(l=\\dfrac{1}{2}\\)\uff0c\u6b64\u65f6</p> <ul> <li>\\(|\\lambda|_\\min\\leqslant|\\lambda|\\leqslant|\\lambda|_\\max\\)\uff0c\u81ea\u4f34\uff1a\\(A=A^\\dagger\\Rightarrow\\kappa=\\dfrac{\\max\\sigma(\\sqrt{AA^\\dagger})}{\\min\\sigma(\\sqrt{AA^\\dagger})}=\\dfrac{|\\lambda|_\\max}{|\\lambda|_\\min}\\)</li> <li>\\(\\dfrac{|\\lambda|_\\min}{2|\\lambda|_\\max}\\leqslant\\dfrac{|\\lambda|}{2|\\lambda|_\\max}\\leqslant\\dfrac{|\\lambda|_\\max}{2|\\lambda|_\\max}\\Rightarrow|\\lambda'|\\in[\\dfrac{1}{2\\kappa},\\dfrac{1}{2}]\\)</li> </ul>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#u","title":"U","text":"<p>\u5229\u7528\u54c8\u5bc6\u987f\u6a21\u62df\u5f97\\(U=e^{iAt}\\)\uff0c\u5176\u4e2d\\(t\\)\u4e3a\u6a21\u62df\u65f6\u95f4</p> <p>\u5bf9\u89d2\u9635\uff1a\\(iAt=\\sum\\limits_{j=0}^{N-1}i\\lambda_jt\\ket{\\mu_j}\\bra{\\mu_j}\\Rightarrow U=\\sum\\limits_{j=0}^{N-1}e^{i\\lambda_jt}\\ket{\\mu_j}\\bra{\\mu_j}\\)</p> <p>\u6807\u6b63\u57fa\uff1a\\(U\\ket{\\mu_j}=e^{i\\lambda_jt}\\ket{\\mu_j}\\)</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#lambda","title":"\\(\\lambda\\)","text":"<p>QPE\u6c42\u5f97\u7684\\(\\varphi\\)\u6ee1\u8db3\\(U\\ket\\mu=e^{2\\pi i\\varphi}\\ket\\mu(\\varphi\\in[0,1))\\)</p> <p>\u53c8\\(U\\ket\\mu=e^{i\\lambda t}\\ket\\mu\\)\uff0c\u6545\\(e^{2\\pi i\\varphi}=e^{i\\lambda t}\\)</p> <p>\\(\\lambda\\geqslant0\\)\u65f6\uff0c\\(\\varphi=\\dfrac{\\lambda t}{2\\pi}\\)</p> <p>\\(\\lambda&lt;0\\)\u65f6\uff0c\\(e^{2\\pi i}=1\\Rightarrow e^{i\\lambda t}=e^{2\\pi i\\frac{\\lambda t}{2\\pi}}=e^{2\\pi i(\\frac{\\lambda t}{2\\pi}+1)}=e^{2\\pi i\\varphi}\\Rightarrow\\varphi=1+\\dfrac{\\lambda t}{2\\pi}\\)</p> <p>\u53d6\\(t=\\pi\\)\uff0c\u6709\\(\\varphi=\\left\\{\\begin{array}{ll}\\dfrac{\\lambda}{2},&amp;\\lambda\\geqslant0,\\\\1+\\dfrac{\\lambda}{2},&amp;\\lambda&lt;0.\\end{array}\\right.\\)</p> <p>\u53c8\\(|\\lambda|&lt;1\\)\uff0c\u6545\\(\\lambda=\\left\\{\\begin{array}{ll}2\\varphi,&amp;\\varphi&lt;\\dfrac{1}{2},\\\\2(\\varphi-1),&amp;\\varphi\\geqslant\\dfrac{1}{2}.\\end{array}\\right.\\)</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#n_p","title":"\\(n_p\\)","text":"<p>\u7528\\(n_p\\)\u4e2a\u6bd4\u7279\u8fd1\u4f3c\\(\\varphi\\)\u65f6\u7edd\u5bf9\u8bef\u5dee\\(|\\varphi-\\tilde\\varphi|&lt;2^{-n_p}\\)</p> <p>\u6545\\(|\\lambda-\\tilde\\lambda|&lt;2^{1-n_p}\\)</p> <p>\u7531\\(\\epsilon\\)\u5b9a\u4e49\uff08\u7279\u5f81\u503c\u5012\u6570\u7684\u76f8\u5bf9\u8bef\u5dee\uff09\u4e0e\\(|\\lambda|\\)\u4e0b\u754c\\(\\dfrac{1}{2\\kappa}\\)\u5f97</p> \\[ \\left|\\dfrac{\\dfrac{1}{\\lambda}-\\dfrac{1}{\\tilde\\lambda}}{\\dfrac{1}{\\lambda}}\\right|\\approx\\left|\\dfrac{\\tilde\\lambda-\\lambda}{\\lambda}\\right|\\leqslant\\dfrac{\\kappa}{2^{n_p-2}}\\leqslant\\epsilon\\Rightarrow n_p\\geqslant2+\\log_2\\dfrac{\\kappa}{\\epsilon} \\]"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#c","title":"C","text":"<p>\u7b97\u6cd5\u6210\u529f\u7387\\(P(\\ket1)=\\sum\\limits_j\\dfrac{C^2\\beta_j^2}{\\lambda_j^2}\\)</p> <p>\u7ea6\u675f\uff1a\\(\\left|\\dfrac{C}{\\lambda_j}\\right|\\leqslant1\\Rightarrow |C|\\leqslant|\\lambda|_\\min\\)</p> <p>\u4e3a\u63d0\u9ad8\u6210\u529f\u7387\uff0c\u53d6\\(|C|=|\\lambda|_\\min\\)</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_11","title":"\u7ed3\u679c\u5904\u7406","text":"<p>\u4e3a\u6c42\u5f97\\(\\ket x\\)\uff0c\u9700\u6c42\u51fa\\(\\ket x\\)\u7684\u8303\u6570\\(\\sqrt{\\sum\\limits_{j=0}^{N-1}\\dfrac{\\beta_j^2}{\\lambda_j^2}}\\)</p> <p>\u53c8\\(P(\\ket1)=\\sum\\limits_{j=0}^{N-1}\\dfrac{C^2\\beta_j^2}{\\lambda_j^2}\\)</p> <p>\u6545\\(||x||=\\dfrac{\\sqrt{P(\\ket1)}}{C}\\)</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_12","title":"\u57fa\u7840\u77e5\u8bc6","text":""},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_13","title":"\u534f\u65b9\u5dee\u77e9\u9635","text":"<p>\u534f\u65b9\u5dee\uff1a\u7528\u4e8e\u523b\u753b\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u76f8\u4f3c\u7a0b\u5ea6</p> \\[ \\sigma(x,y)=\\dfrac{1}{n-1}\\sum_{i=1}^n(x_i-\\bar x)(y_i-\\bar y) \\] <p>\u8bbe\u6709\u968f\u673a\u53d8\u91cf\\(\\set{x_1,\\cdots,x_n}\\)\uff0c\u4e24\u4e24\u4e4b\u95f4\u7684\u534f\u65b9\u5dee\u4e3a\\(\\sigma(x_m,x_k)=\\dfrac{1}{n-1}\\sum\\limits_{i=1}^n(x_{mi}-\\bar{x_m})(x_{ki}-\\bar{x_k})\\) \u5219\u534f\u65b9\u5dee\u77e9\u9635\u4e3a</p> \\[ \\Sigma=\\begin{bmatrix} \\sigma(x_1,x_1)&amp;\\cdots&amp;\\sigma(x_1,x_n)\\\\ \\vdots&amp;&amp;\\vdots\\\\ \\sigma(x_n,x_1)&amp;\\cdots&amp;\\sigma(x_n,x_n) \\end{bmatrix} \\] <p>\u4e3a\u5b9e\u5bf9\u79f0\u9635</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_14","title":"\u5411\u91cf&amp;\u4e8c\u6b21\u578b\u6c42\u5bfc","text":""},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_15","title":"\u5411\u91cf\u5bf9\u5411\u91cf\u6c42\u5bfc","text":"<p>\u5206\u6bcd\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u6574\u4e2a\u5206\u5b50\u6c42\u5bfc\uff0c\u6c42\u5bfc\u540e\u7684\u7ed3\u679c\u6309\u7167\u5206\u6bcd\u7684\u5f62\u72b6\u8fdb\u884c\u7ec4\u88c5</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_16","title":"\u4e8c\u6b21\u578b\u6c42\u5bfc","text":"\\[\\begin{array}{l}d(x^\\mathrm TAx)=(x^\\mathrm TA)dx+d(x^\\mathrm TA)x=x^\\mathrm TAdx+(d(x^\\mathrm TA)x)^\\mathrm T\\\\=x^\\mathrm TAdx+x^\\mathrm Td(A^\\mathrm Tx)=x^\\mathrm TAdx+x^\\mathrm TA^\\mathrm Tdx=x^\\mathrm T(A+A^\\mathrm T)dx\\end{array}\\] <p>\\(A\\)\u5b9e\u5bf9\u79f0\\(\\Rightarrow\\dfrac{d(x^\\mathrm TAx)}{dx}=2Ax\\)</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#_17","title":"\u77e9\u9635\u7684\u6761\u4ef6\u6570","text":"<p>\u77e9\u9635\u8303\u6570\uff1a\u77e9\u9635\u5bf9\u5411\u91cf\u7684\u7f29\u653e\u80fd\u529b</p> \\[ ||A||=\\max_x\\dfrac{||Ax||}{||x||} \\] <p>\u7531\u5b9a\u4e49\u77e5\uff0c\\(||A^{-1}||=\\max\\limits_y\\dfrac{||A^{-1}y||}{||y||}=\\dfrac{1}{\\min\\limits_y\\dfrac{||y||}{||A^{-1}y||}}\\overset{y=Ax}{=}\\dfrac{1}{\\min\\limits_x\\dfrac{||Ax||}{||x||}}\\)</p> <p>\u6761\u4ef6\u6570\uff1a\u8861\u91cf\u65b9\u7a0b\u7684\u7a33\u5b9a\u6027</p> \\[ \\kappa(A)=||A||||A^{-1}|| \\] <p>\u6613\u8bc1\uff0c\u5f53\\(x\\)\u53d8\u5316\\(\\delta x\\)\u65f6\uff0c\u6709\\(\\dfrac{1}{\\kappa(A)}\\dfrac{||\\delta b||}{||b||}\\leqslant\\dfrac{||\\delta x||}{||x||}\\leqslant\\kappa(A)\\dfrac{||\\delta b||}{||b||}\\)</p> <p>\u8ba1\u7b97\uff1a\\(||A||\\)\u4e3aA\u6700\u5927\u5947\u5f02\u503c\\(\\max\\sigma(\\sqrt{AA^\\dagger})\\)\uff0c\\(||A^{-1}||\\)\u4e3aA\u6700\u5c0f\u5947\u5f02\u503c\u7684\u5012\u6570\\(\\dfrac{1}{\\min\\sigma(\\sqrt{AA^\\dagger})}\\)</p>"},{"location":"reading/%E5%9F%BA%E4%BA%8E%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#qpe","title":"QPE","text":"<p>\u8bbe\\(U\\)\u7684\u7279\u5f81\u5411\u91cf\\(\\ket\\mu\\)\u7684\u7279\u5f81\u503c\u4e3a\\(e^{2\\pi i\\varphi}\\)\uff0c\u5373\\(U\\ket\\mu=e^{2\\pi i\\varphi}\\ket\\mu\\)\uff0c\u7535\u8def\u9ed1\u76d2\u5982\u4e0b</p> <p></p> <p>\u5f53\\(\\ket v=\\sum v_j\\ket{\\mu_j}\\)\u65f6\uff0c\u7ed3\u679c\u4e3a\\(\\sum v_j\\ket{\\varphi_j}\\)</p>"}]}